CREATE OR REPLACE PROCEDURE NJMCL_WEB.PROC_BONUSPROCESS_ONPFGROSS (P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2, P_MODULE VARCHAR2, P_TABLENAME VARCHAR2 DEFAULT 'BONUSDETAILS', 
                                                         P_CATEGORYCODE VARCHAR2 DEFAULT NULL, P_GARDECODE VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                         P_USER VARCHAR2 DEFAULT 'SWT')
AS
LV_FIN_STDT     VARCHAR2(10) := '';
LV_FIN_ENDT     VARCHAR2(10) := '';
LV_REMARKS      VARCHAR2(100);
LV_PROCNAME     VARCHAR2(30) := 'PROC_BONUSPROCESS_ONPFGROSS';
LV_SQL          VARCHAR2(4000);
LV_SQLERRM      VARCHAR2(500) := '';
LV_PARVALUES VARCHAR2(100) := '';
LV_BONUSPARAM   BONUSPARAMETER%ROWTYPE;
lv_PerdayGross  number(11,5) := 0;
LV_PAYMENT_YYYYMM  VARCHAR2(6) := '';

BEGIN
    SELECT TO_CHAR(STARTDATE,'DD/MM/YYYY'), TO_CHAR(ENDDATE,'DD/MM/YYYY'), TO_CHAR(ENDDATE,'YYYYMM') INTO LV_FIN_STDT, LV_FIN_ENDT, LV_PAYMENT_YYYYMM
    FROM FINANCIALYEAR WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
     AND YEARCODE = P_YEARCODE;
   
    
    SELECT * INTO LV_BONUSPARAM
    FROM BONUSPARAMETER
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
    AND YEARCODE = P_YEARCODE;
      
    lv_PerdayGross := ROUND(LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY/26,4);   
        
    LV_SQL := ' DELETE FROM '||P_TABLENAME||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10);
    LV_SQL := LV_SQL ||' AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10);
    IF P_MODULE <> 'ALL' THEN
        LV_SQL := LV_SQL ||' AND MODULE = '''||P_MODULE||''' '||CHR(10);
    END IF;
    IF NVL(P_CATEGORYCODE,'SWT') <> 'SWT' THEN
        LV_SQL := LV_SQL ||' AND CATEGORYCODE = '''||P_CATEGORYCODE||''' '||CHR(10);
    END IF;
--    IF NVL(P_GRADECODE,'SWT') <> 'SWT' THEN
--        LV_SQL := LV_SQL ||' AND GRADECODE = '''||P_GRADECODE||''' '||CHR(10);
--    END IF;
    IF NVL(P_WORKERSERIAL,'SWT') <> 'SWT' THEN
        LV_SQL := LV_SQL ||' AND WORKERSERIAL = '''||P_WORKERSERIAL||''' '||CHR(10);
    END IF;            
    --dbms_output.put_line(LV_SQL);
    EXECUTE IMMEDIATE LV_SQL;           
    
    lv_Remarks := 'BONUS DETAILS FOR THE FINANCAIL YEAR - '||P_YEARCODE;
    
    LV_SQL := ' INSERT INTO '||P_TABLENAME||' ( COMPANYCODE, DIVISIONCODE, YEARCODE, MODULE, YEARMONTH, WORKERSERIAL, TOKENNO, CATEGORYCODE, GRADECODE, '||CHR(10) 
        ||' DEPARTMENTCODE, ATTENDANCEHOURS, HOLIDAYHOURS, STLHOURS, BONUSHOURS, BONUSDAYS, PFGROSS, BONUSGROSS, '||CHR(10) 
        ||' PERDAYRATE, BONUSAMOUNT, TRANSACTIONTYPE, USERNAME, LASTMODIFIED, SYSROWID) '||CHR(10)
        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, B.YEARCODE, '''||P_MODULE||''' MODULE, B.YEARMONTH, B.WORKERSERIAL, A.TOKENNO, B.WORKERCATEGORYCODE, NULL GRADECODE, '||CHR(10)
        ||' A.DEPARTMENTCODE, B.ATTENDANCEHOURS, B.HOLIDAYHOURS, B.STLHOURS, B.BONUSHOURS, B.BONUSDAYS, B.PF_GROSS, '||CHR(10)        
        ||' CASE WHEN ROUND(B.PF_GROSS/B.BONUSHOURS,5)*208 > '||LV_BONUSPARAM.ELIGIBLE_BONUSGROSS_MONTHLY||' THEN 0 '||CHR(10) 
        ||' /*ELSE CASE WHEN ROUND(B.PF_GROSS/B.BONUSDAYS,5) >= '||lv_PerdayGross||' THEN '||lv_PerdayGross||'*B.BONUSDAYS ELSE B.PF_GROSS END */ '||CHR(10)
        --||' ELSE /*ROUND(ROUND((B.PF_GROSS/208),5)*B.BONUSHOURS,2)*/  ROUND((ROUND(B.PF_GROSS/B.BONUSHOURS,5)*208)*B.BONUSHOURS/208,5) '||CHR(10)
        ||' ELSE CASE WHEN ROUND(ROUND(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208),5)*B.BONUSHOURS,2) >B.PF_GROSS THEN B.PF_GROSS ELSE ROUND(ROUND(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208),5)*B.BONUSHOURS,2) END '||CHR(10)
        ||' END BONUSGROSS,  '||CHR(10)
        ||' ROUND(PF_GROSS/BONUSHOURS,5) PERDAYRATE, 0 BONUSAMOUNT, ''BONUS DETAILS'', '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, ''BD-''||B.WORKERSERIAL||''-''||B.YEARMONTH SYSROWID  '||CHR(10)     
        ||' FROM WPSWORKERMAST A,  '||CHR(10)
        ||' (  '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.YEARCODE, A.WORKERCATEGORYCODE, TO_CHAR(A.FORTNIGHTSTARTDATE,''YYYYMM'') YEARMONTH,  '||CHR(10) 
        ||'         SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.HOLIDAYHOURS,0)) HOLIDAYHOURS, SUM(NVL(A.STLHOURS,0)) STLHOURS,  '||CHR(10)
        ||'         SUM(NVL(A.STLHOURS,0)) SLTHOURS, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0) + NVL(A.STLHOURS,0)+NVL(A.STLHOURS_ENCASH,0)+NVL(NIGHTALLOWANCEHOURS,0)) BONUSHOURS,   '||CHR(10)
        ||'         ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0) + NVL(A.STLHOURS,0)+NVL(A.STLHOURS_ENCASH,0)+NVL(NIGHTALLOWANCEHOURS,0)) / 8,2) BONUSDAYS, /* SUM(NVL(A.PF_GROSS,0)+NVL(A.STL_ENCASH,0))*/SUM(NVL(A.PF_GROSS,0)+CASE WHEN NVL(A.STL_ENCASH,0) >0 THEN NVL(A.GROSS_FOR_HRA,0) ELSE 0 END ) PF_GROSS  '||CHR(10)
        ||'         FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B  '||CHR(10)
        ||'         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'           AND A.YEARCODE = '''||P_YEARCODE||'''  '||CHR(10)
        ||'           AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10) 
        ||'           AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE AND B.BONUSAPPLICABLE = ''Y''   '||CHR(10)
        ||'            AND B.WORKERCATEGORYCODE NOT IN(''4'',''4A'')      '||CHR(10);
        IF NVL(P_CATEGORYCODE,'SWT') <> 'SWT' THEN
            LV_SQL := LV_SQL||'           AND A.WORKERCATEGORYCODE = '''||P_CATEGORYCODE||''' '||CHR(10);
        END IF;
        IF NVL(P_WORKERSERIAL,'SWT') <> 'SWT' THEN
            LV_SQL := LV_SQL||'           AND A.WORKERSERIAL = '''||P_WORKERSERIAL||''' '||CHR(10);
        END IF;         
    LV_SQL := LV_SQL||'         GROUP BY A.WORKERSERIAL, A.YEARCODE, A.WORKERCATEGORYCODE, TO_CHAR(A.FORTNIGHTSTARTDATE,''YYYYMM'')  '||CHR(10)
        ||' ) B  '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
        ||'   AND B.BONUSDAYS > 0  '||CHR(10)
        ||' ORDER BY A.WORKERSERIAL, YEARMONTH  '||CHR(10);    
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( LV_PROCNAME,LV_SQLERRM,LV_SQL,LV_PARVALUES,TO_DATE(LV_FIN_STDT,'DD/MM/YYYY'),TO_DATE(LV_FIN_ENDT,'DD/MM/YYYY'), lv_Remarks);
    
   -- dbms_output.put_line(LV_SQL);
    execute immediate LV_SQL;
    COMMIT;
    ------- BONUS PAYMENT PROCESS -------------
    lv_Remarks := 'BONUS DETAILS FOR THE FINANCAIL YEAR - '||P_YEARCODE;
    LV_SQL := ' INSERT INTO BONUSDETAILS (COMPANYCODE, DIVISIONCODE, YEARCODE, MODULE, YEARMONTH, WORKERSERIAL, TOKENNO, '||CHR(10) 
        ||' CATEGORYCODE, GRADECODE, DEPARTMENTCODE, ATTENDANCEHOURS, HOLIDAYHOURS, STLHOURS, BONUSHOURS, BONUSDAYS, '||CHR(10) 
        ||' PFGROSS, BONUSGROSS, BONUS_PERCENTAGE, BONUSAMOUNT, '||CHR(10) 
        ||' COINBF, COINCF, PAIDBONUSAMOUNT, '||CHR(10) 
        ||' TRANSACTIONTYPE, USERNAME, LASTMODIFIED, SYSROWID) '||CHR(10)
        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.MODULE, '''||LV_PAYMENT_YYYYMM||''' YEARMONTH, A.WORKERSERIAL, B.TOKENNO, '||CHR(10) 
        ||' B.WORKERCATEGORYCODE, NULL GRADECODE, B.DEPARTMENTCODE, SUM(NVL(ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(HOLIDAYHOURS,0)) HOLIDAYHOURS, '||CHR(10) 
        ||' SUM(NVL(STLHOURS,0)) STLHOURS, SUM(NVL(BONUSHOURS,0)) BONUSHOURS, SUM(NVL(BONUSDAYS,0)) BONUSDAYS, '||CHR(10) 
        ||' SUM(NVL(PFGROSS,0)) PFGROSS, SUM(NVL(BONUSGROSS,0)) BONUSGROSS, '||LV_BONUSPARAM.BONUSPERCENTAGE||' BONUS_PERCENTAGE, '||CHR(10)
        --||' /*CASE WHEN ROUND(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,2) > '||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE ROUND(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,2)END BONUSAMOUNT, */'||CHR(10)
        --||' CASE WHEN FN_ROUNDOFFRS(SUM(NVL(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208)*NVL(BONUSHOURS,0),0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') > '||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE FN_ROUNDOFFRS(SUM(NVL(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208)*NVL(BONUSHOURS,0),0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') END BONUSAMOUNT, '||CHR(10)  
        --||' CASE WHEN FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') > '||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') END BONUSAMOUNT, '||CHR(10)
        ||' CASE WHEN SUM(NVL(BONUSGROSS,0)) >= 12*'||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE ROUND(FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||',''''),2) END BONUSAMOUNT, '||CHR(10)
        --||' 0 COINBF,0 COINCF, CASE WHEN FN_ROUNDOFFRS(SUM(NVL(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208)*NVL(BONUSHOURS,0),0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') > '||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE FN_ROUNDOFFRS(SUM(NVL(('||LV_BONUSPARAM.MAXBONUSGROSS_MONTHLY||'/208)*NVL(BONUSHOURS,0),0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') END PAIDBONUSAMOUNT, '||CHR(10)
        --||' 0 COINBF,0 COINCF, CASE WHEN FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') > '||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') END PAIDBONUSAMOUNT, '||CHR(10)
        ||' 0 COINBF,0 COINCF, CASE WHEN SUM(NVL(BONUSGROSS,0)) >= 12*'||LV_BONUSPARAM.MAXBONUSAMOUNT||' THEN '||LV_BONUSPARAM.MAXBONUSAMOUNT||' ELSE FN_ROUNDOFFRS(SUM(NVL(BONUSGROSS,0)) * '||LV_BONUSPARAM.BONUSPERCENTAGE||' * 0.01,'||LV_BONUSPARAM.ROUNDOFFRS||','''||LV_BONUSPARAM.ROUNDOFFTYPE||''') END PAIDBONUSAMOUNT, '||CHR(10)
        ||' ''BONUS PAYMENT'' TRANSACTIONTYPE, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, ''BP-''||A.WORKERSERIAL||''-'||LV_PAYMENT_YYYYMM||''' SYSROWID '||CHR(10) 
        ||' FROM BONUSDETAILS A, WPSWORKERMAST B '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
        ||' AND A.WORKERSERIAL =  B.WORKERSERIAL '||CHR(10)
        ||' GROUP BY A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.MODULE, A.WORKERSERIAL, B.TOKENNO, '||CHR(10) 
        ||' B.WORKERCATEGORYCODE, B.DEPARTMENTCODE '||CHR(10)
        --||' HAVING SUM(NVL(BONUSDAYS,0)) >= '|| LV_BONUSPARAM.MINIMUMWORKING||' '||CHR(10);
        ||' HAVING SUM(NVL(ATTENDANCEHOURS,0))>='|| LV_BONUSPARAM.MINIMUMWORKING||''||CHR(10);
        --||' HAVING FN_ROUNDOFFRS((SUM(NVL(ATTENDANCEHOURS,0))/8),1,'''||LV_BONUSPARAM.ROUNDOFFTYPE||''') > '|| LV_BONUSPARAM.MINIMUMWORKING||' '||CHR(10);     
    
    --dbms_output.put_line(LV_SQL);
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( LV_PROCNAME,LV_SQLERRM,LV_SQL,LV_PARVALUES,TO_DATE(LV_FIN_STDT,'DD/MM/YYYY'),TO_DATE(LV_FIN_ENDT,'DD/MM/YYYY'), lv_Remarks);
    execute immediate LV_SQL;
    COMMIT;

    PROC_BONUS_DEPT_SFT_SRL_UPDT (P_COMPCODE , P_DIVCODE , P_YEARCODE , P_MODULE , P_TABLENAME );
    
exception
when others then
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( LV_PROCNAME,LV_SQLERRM,LV_SQL,lv_parvalues,TO_DATE(LV_FIN_STDT,'DD/MM/YYYY'),TO_DATE(LV_FIN_ENDT,'DD/MM/YYYY'), lv_Remarks);
 COMMIT;
    

END;
/
