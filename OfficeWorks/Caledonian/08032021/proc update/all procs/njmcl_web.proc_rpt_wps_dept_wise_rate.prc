DROP PROCEDURE NJMCL_WEB.PROC_RPT_WPS_DEPT_WISE_RATE;

CREATE OR REPLACE PROCEDURE NJMCL_WEB.PROC_RPT_WPS_DEPT_WISE_RATE
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE              VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR               VARCHAR2(15); 
    LV_COMPANYNAME        VARCHAR2(100);   
    LV_DIVISIONNAME       VARCHAR2(100);    
    LV_PRINTDATE          VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(30000);
    LV_DIVADDRESS         VARCHAR2(5000);
     
BEGIN

--    DBMS_OUTPUT.PUT_LINE('TEST');
   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Department wise Wages Rate for  '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

--
--Dept. Desc.        R.W.HRS        O.W.HRS        O.T.HRS        R.C.ERN        R.N.ERN        O.T.ERN        O.C.ERN        O.N.ERN        RT.CONVEYANCE    TOT.ERN
--                RT.BASIC    RT.FE        RT.NBA        RT.INC        RT.OT        RT.TOTAL    RT.DA        RT.REC.NO    RT.OTB
--                
--1                2            3            4            5            6            7            8            9            10                11    

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 11, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 11, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 11, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    
    AS_XLSX.CELL( 1, 4,'Dept. Desc.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 1, 5,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.MERGECELLS(1, 4, 1, 5, 1); 
    
    AS_XLSX.CELL( 2, 4,'R.W.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 2, 5,'RT.BASIC', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 3, 4,'O.W.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 5,'RT.FE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 4, 4,'O.T.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 4, 5,'RT.NSA', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 5, 4,'R.C.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 5,'RT.INC', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 6, 4,'R.N.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 5,'RT.OT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 7, 4,'O.T.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 7, 5,'RT.TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 8, 4,'O.C.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 8, 5,'RT.DA', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 9, 4,'O.N.ERN    ', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 9, 5,'RT.REC.NO', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 10, 4,'RT.CONVEYANCE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 10, 5,'RT.OTB', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 11, 4,'TOT.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 11, 5,'TOT.RATE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    

    LV_ROWNUM := 5;
-- 
    DELETE FROM GTT_DEPT_WISE_WAGERATE WHERE 1=1;
--
----    LV_SQLSTR := NULL;
--    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_DEPT_WISE_WAGERATE(DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN)'|| CHR(10);
--    
--    
--    LV_SQLSTR := LV_SQLSTR || 'SELECT A.DEPARTMENTCODE, DEPARTMENTNAME,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'SUM(ATTENDANCEHOURS) RW_HRS, SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) RT_BASIC,SUM(OVERTIMEHOURS) OW_HRS,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'SUM(NVL(A.FBASIC_PEICERT,0)) RT_FE,0 OT_HRS,SUM(NVL(A.NS_ALLOW,0)) RT_NSA, 0 RC_ERN, SUM(NVL(A.INCENTIVE,0)) RT_INC, 0 RN_ERN, 0 RT_OT, 0 OT_ERN, '|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '0 RT_TOTAL, 0 OC_ERN, SUM(NVL(A.DA,0)) RT_DA, 0 ON_ERN, 0 RT_RECNO, 0 RT_CONVEYANCE, 0 RT_OTB, SUM(NVL(A.TOT_EARN,0)) TOT_ERN'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'FROM WPSWAGESDETAILS A, DEPARTMENTMASTER B'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'WHERE A.COMPANYCODE=B.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
--    
--    IF P_DEPT IS NOT NULL THEN
--       LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')'|| CHR(10);
--    END IF;
--    
--    LV_SQLSTR := LV_SQLSTR || 'GROUP BY A.DEPARTMENTCODE, DEPARTMENTNAME'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'ORDER BY A.DEPARTMENTCODE '|| CHR(10);


--    
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A.COMPANYCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A.DIVISIONCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A.DEPARTMENTCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=C.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=D.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'ORDER BY DEPT.DEPARTMENTCODE'|| CHR(10);
    
    
    LV_SQLSTR := '
    
    INSERT INTO GTT_DEPT_WISE_WAGERATE
        (DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN,
         RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        )
    
    SELECT A.DEPARTMENTCODE, B.DEPARTMENTNAME,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) RW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_BASIC,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) OW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC_PEICERT,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_FE,
    SUM(NVL(A.OVERTIMEHOURS,0))  OT_HRS, 
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'', NVL(A.NS_ALLOW,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_NSA,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) RC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_INC,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) RN_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0))/
    --ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_OT,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0)) OT_ERN,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0)) OT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_TOTAL,
   -- SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) OC_ERN,
   SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',
    CASE WHEN A.TOKENNO LIKE ''A%'' THEN
            (NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0)) 
        ELSE
        (NVL(A.GROSS_WAGES,0)-(NVL(OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)))
    END,0)) OC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.DA,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_DA,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) ON_ERN,
--    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0))/
--    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_RECNO,
    ROUND(((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8),4) RT_RECNO,
    0 RT_CONVEYANCE,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)+
    NVL(A.OVERTIMEHOURS,0))*8),4)  RT_OTB,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0)) TOT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    (SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))+
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))))*8,4) TOT_RATE
    --FROM WPSWAGESDETAILS_VW A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, WPSSTLWAGESDETAILS D
    FROM VW_WPSWAGESDETAILS_DEPSECWISE A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, VW_WPSSTLWAGESDTLS_DEPSECWISE D
    WHERE A.COMPANYCODE=B.COMPANYCODE
    AND A.DIVISIONCODE=B.DIVISIONCODE
    AND A.DEPARTMENTCODE=B.DEPARTMENTCODE
    AND A.COMPANYCODE = C.COMPANYCODE
    AND A.DIVISIONCODE = C.DIVISIONCODE
    AND A.DEPARTMENTCODE = C.DEPARTMENTCODE
    AND A.SECTIONCODE  = C.SECTIONCODE
    AND A.COMPANYCODE = D.COMPANYCODE (+)
    AND A.DIVISIONCODE = D.DIVISIONCODE (+)
    AND A.YEARCODE = D.YEARCODE (+)
    AND A.DEPARTMENTCODE = D.DEPARTMENTCODE(+)
    AND A.SECTIONCODE = D.SECTIONCODE(+)
    AND A.WORKERSERIAL = D.WORKERSERIAL(+)
    AND D.PAYMENTDATE(+) >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND D.PAYMENTDATE(+) <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')
    AND A.COMPANYCODE='''||P_COMPANYCODE||'''
    AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''
    AND A.FORTNIGHTSTARTDATE>=  TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND A.FORTNIGHTENDDATE<= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') ';    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')';
    END IF;    
    LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'GROUP BY A.DEPARTMENTCODE, DEPARTMENTNAME
    ORDER BY A.DEPARTMENTCODE ';

 
    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;
    
-- 
    FOR C1 IN (  
        SELECT DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, 
        RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        FROM GTT_DEPT_WISE_WAGERATE     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTDESC, P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OT_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RN_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.ON_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_CONVEYANCE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
        LV_ROWNUM := LV_ROWNUM+1;

   
        AS_XLSX.CELL( 1, LV_ROWNUM, '', P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RT_BASIC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RT_FE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.RT_NSA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RT_INC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RT_OT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.RT_TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RT_DA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.RT_RECNO, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_OTB, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_RATE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
       
        AS_XLSX.MERGECELLS(1, LV_ROWNUM-1, 1, LV_ROWNUM, 1);

        LV_ROWNUM := LV_ROWNUM+1;
    
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
   
    DELETE FROM GTT_DEPT_WISE_WAGERATE;
    
    
     LV_SQLSTR := '
    
    INSERT INTO GTT_DEPT_WISE_WAGERATE
        (RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN,
         RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        )
    
    SELECT 
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) RW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_BASIC,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) OW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC_PEICERT,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_FE,
    SUM(NVL(A.OVERTIMEHOURS,0))  OT_HRS, 
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'', NVL(A.NS_ALLOW,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_NSA,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) RC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_INC,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) RN_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0))/
    --ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_OT,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0)) OT_ERN,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0)) OT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_TOTAL,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) OC_ERN,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',
    CASE WHEN A.TOKENNO LIKE ''A%'' THEN
            (NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0)) 
        ELSE
        (NVL(A.GROSS_WAGES,0)-(NVL(OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)))
    END,0)) OC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.DA,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_DA,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) ON_ERN,
   --ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0))/
   --SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_RECNO,
    ROUND(((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8),4) RT_RECNO,
    0 RT_CONVEYANCE,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)+
    NVL(A.OVERTIMEHOURS,0))*8),4)  RT_OTB,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0)) TOT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    (SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))+
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))))*8,4) TOT_RATE
   -- FROM WPSWAGESDETAILS_VW A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, WPSSTLWAGESDETAILS D
   FROM VW_WPSWAGESDETAILS_DEPSECWISE A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, VW_WPSSTLWAGESDTLS_DEPSECWISE D
    WHERE A.COMPANYCODE=B.COMPANYCODE
    AND A.DIVISIONCODE=B.DIVISIONCODE
    AND A.DEPARTMENTCODE=B.DEPARTMENTCODE
    AND A.COMPANYCODE = C.COMPANYCODE
    AND A.DIVISIONCODE = C.DIVISIONCODE
    AND A.DEPARTMENTCODE = C.DEPARTMENTCODE
    AND A.SECTIONCODE  = C.SECTIONCODE
    AND A.COMPANYCODE = D.COMPANYCODE (+)
    AND A.DIVISIONCODE = D.DIVISIONCODE (+)
    AND A.YEARCODE = D.YEARCODE (+)
    AND A.DEPARTMENTCODE = D.DEPARTMENTCODE(+)
    AND A.SECTIONCODE = D.SECTIONCODE(+)
    AND A.WORKERSERIAL = D.WORKERSERIAL(+)
    AND D.PAYMENTDATE(+) >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND D.PAYMENTDATE(+) <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')
    AND A.COMPANYCODE='''||P_COMPANYCODE||'''
    AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''
    AND A.FORTNIGHTSTARTDATE>=  TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND A.FORTNIGHTENDDATE<= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') ';    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')';
    END IF;    

    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;



    FOR C1 IN (  
--        SELECT SUM(RW_HRS) RW_HRS, SUM(RT_BASIC) RT_BASIC, SUM(OW_HRS) OW_HRS, 
--        SUM(RT_FE) RT_FE, SUM(OT_HRS) OT_HRS, SUM(RT_NSA) RT_NSA, SUM(RC_ERN) RC_ERN, SUM(RT_INC) RT_INC, 
--        SUM(RN_ERN) RN_ERN, SUM(RT_OT) RT_OT, SUM(OT_ERN) OT_ERN, SUM(RT_TOTAL) RT_TOTAL, SUM(OC_ERN) OC_ERN, 
--        SUM(RT_DA) RT_DA, SUM(ON_ERN) ON_ERN, SUM(RT_RECNO) RT_RECNO, SUM(RT_CONVEYANCE) RT_CONVEYANCE, SUM(RT_OTB) RT_OTB, SUM(TOT_ERN) TOT_ERN, SUM(TOT_RATE) TOT_RATE
--        FROM GTT_DEPT_WISE_WAGERATE

        SELECT DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, 
        RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        FROM GTT_DEPT_WISE_WAGERATE 
    )
    LOOP
        
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OT_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RN_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.ON_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_CONVEYANCE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
        LV_ROWNUM := LV_ROWNUM+1;

   
       -- AS_XLSX.CELL( 1, LV_ROWNUM, '', P_BORDERID => AS_XLSX.GET_BORDER( '','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RT_BASIC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RT_FE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.RT_NSA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RT_INC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RT_OT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.RT_TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RT_DA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.RT_RECNO, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_OTB, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_RATE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        
        
        AS_XLSX.CELL( 1, LV_ROWNUM, '', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
        AS_XLSX.MERGECELLS(1, LV_ROWNUM-1, 1, LV_ROWNUM, 1);
    
    
        LV_ROWNUM := LV_ROWNUM+2;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'Description', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 2, LV_ROWNUM,'Manday', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 3, LV_ROWNUM,'Amount', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'R.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ));
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.RW_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'O.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.OW_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'OT.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.OT_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
    
    END LOOP; 
    
    
    

--
----
--    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
--    LV_ROWNUM := LV_ROWNUM + 1;  
--    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
--    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
--        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


