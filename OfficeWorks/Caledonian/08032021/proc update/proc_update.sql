DROP PROCEDURE NJML_PROC_WPS_VB_BEAM_PR_CHK;

CREATE OR REPLACE PROCEDURE NJML_PROC_WPS_VB_BEAM_PR_chk( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY DEBASIS PAHARI ON 16.04.2020 ----
--P= shift wise and quality wise Production of the m/c.
--R = Quality Rate 
--A = Production amount of the m/c = P * R.


lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'NJML_PROC_WPS_VB_BEAM_PR_chk';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(50) := '';  
lv_TempTable_Hours    varchar2(50) := ''; 
lv_TempTable_Hours_Beam varchar2(50) := ''; 
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';   
lv_OccupationType    varchar2(50) := ''; 

Begin


       
    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            select SECTIONCODE,OCCUPATIONCODE into lv_SectionCode,lv_OcpCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              --AND SECTIONCODE=P_SECTION
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              
            SELECT OCCUPATIONTYPE INTO lv_OccupationType FROM VW_WPSOCCUPATIONMAST 
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              AND SECTIONCODE=lv_SectionCode
              AND OCCUPATIONCODE=lv_OcpCode;
            
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;   
    END IF;
    
    

    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            lv_ProductionType :=P_PRODUCTIONTYPE;
        EXCEPTION
            WHEN OTHERS THEN lv_ProductionType := 'SWT';    
        END;        
    END IF;
    

    
    
    lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours :='WPS_PREPROCESS_TMP_HS_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours_Beam :='WPS_PROCESS_TMP_B_HS_'||lv_SectionCode||lv_ProductionType;

    
    BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
     BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
      BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours_Beam;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable||' AS '||CHR(10)
        ||'SELECT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,PRODUCTIONTYPE,SHIFTCODE,MACHINECODE,SUM(NVL(PRODUCTION,0))PRODUCTION,SUM(NVL(VBAMOUNT,0))VBAMOUNT ,0 AS ADDITIONAL_AMT,0 AS REMAINING_AMT,0 AS TOTALHOURS,0 AS DISTRIBUTION_FACTOR FROM('||CHR(10)
        ||'SELECT A.DEPARTMENTCODE,SECTIONCODE AS SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, '||CHR(10)
        ||' A.QUALITYCODE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION,'||CHR(10)
        ||' ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2)*B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||CHR(10)
        ||' FROM WPSPRODUCTIONSUMMARY A'||CHR(10)
        ||' ,    '||CHR(10)
        ||' (  '||CHR(10)
        ||'  SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY,  '||CHR(10)
        ||'     CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE  '||CHR(10)
        ||'     FROM  WPSQUALITYRATE_ON_REEDSPACE X,  '||CHR(10)
        ||'     (  '||CHR(10)
        ||'         SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||CHR(10)
        ||'         FROM WPSQUALITYRATE_ON_REEDSPACE  '||CHR(10)
        ||'         WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'           AND PRODUCTIONTYPE = '''||lv_ProductionType||'''  '||CHR(10)
        ||'         GROUP BY PRODUCTIONTYPE, QUALITYCODE  '||CHR(10)
        ||'     ) Y  '||CHR(10)
        ||'     WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'       AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE   '||CHR(10)
        ||'       AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||CHR(10)
        ||' ) B  '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||'   AND A.STARTDATE >= '''||lv_FN_STDT||''' AND A.STARTDATE <= '''||lv_FN_ENDT||'''   '||CHR(10)
        ||'   AND A.TRANSACTIONTYPE = ''GENERAL'''||CHR(10)
        ||'   AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||chr(10);
        if lv_SectionCode ='0801xxx' or lv_SectionCode = '0805xxx' then
        lv_Sql := lv_Sql ||'   AND A.SECTIONCODE IN (''0801xxx'',''0805xxx'') '||CHR(10);
        ELSE
        lv_Sql := lv_Sql ||'   AND A.SECTIONCODE = '''||lv_Sectioncode||''' '||chr(10);
        end if; 
        lv_Sql := lv_Sql ||'   AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE   '||CHR(10)
        ||'   AND A.QUALITYCODE = B.QUALITYCODE    '||CHR(10)
        ||'   GROUP BY A.DEPARTMENTCODE,A.SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, A.QUALITYCODE,B.QUALITYRATE, B.UNITQUANTITY, B.PERCENTAGEOFRATE '||CHR(10)
        ||'      )GROUP BY DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,PRODUCTIONTYPE,SHIFTCODE,MACHINECODE'||CHR(10);
--    DBMS_OUTPUT.PUT_LINE(lv_Sql);
    
    lv_Remarks := '1 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)*/+NVL(B.OT_NSHRS,0)) TOTALHOURS'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      ||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)*/+NVL(B.OT_NSHRS,0)) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE, B.SHIFTCODE, B.MACHINECODE1,B.OCCUPATIONCODE'||CHR(10);

    
    lv_Remarks := '2 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
        lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours_Beam||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)*/+NVL(B.OT_NSHRS,0)) TOTALHOURS,NVL(O.ADDL_RATE,0)ADDL_RATE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)*/+NVL(B.OT_NSHRS,0)) * NVL(O.ADDL_RATE,0) ADDL_AMOUNT'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , VW_WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)*/+NVL(B.OT_NSHRS,0)) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1,O.ADDL_RATE'||CHR(10);
    
    lv_Remarks := '3 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);

--DBMS_OUTPUT.PUT_LINE(lv_Sql);    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET ADDITIONAL_AMT='||CHR(10)
             ||'    (SELECT ADDL_AMOUNT FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '4 UPDATE PRODUCTION ACT_REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    --COMMIT;
    
    lv_Sql := 'UPDATE '||lv_TempTable||' A SET REMAINING_AMT=A.VBAMOUNT -'||CHR(10)
             ||'    (SELECT ADDL_AMOUNT FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '5 UPDATE PRODUCTION REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET TOTALHOURS='||CHR(10)
             ||'    (SELECT TOTALHOURS FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,TOTALHOURS  FROM '||lv_TempTable_Hours||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '6 UPDATE PRODUCTION TOTALHOURS TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' SET DISTRIBUTION_FACTOR= '||CHR(10)
             ||'CASE WHEN NVL(TOTALHOURS,0)>0 AND NVL(REMAINING_AMT,0)>0  THEN  ROUND(REMAINING_AMT/TOTALHOURS,2) ELSE 0 END'||CHR(10);
             
    lv_Remarks := '7 UPDATE PRODUCTION DISTRIBUTION_FACTOR TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    COMMIT;
    
    lv_Remarks := '8 DELETE FROM WPSLINEHOURLYRATE MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND OCCUPATIONTYPE = '''||lv_OccupationType||''' '||chr(10)
             ||'AND DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
             ||'AND SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
             ||'AND OCCUPATIONCODE = '''||lv_OcpCode||''' '||CHR(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    EXECUTE IMMEDIATE lv_Sql;
             
    COMMIT; 
    
     lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE, '||CHR(10) 
            ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG, LINENO, HELPERNO, SARDARNO, RELIVERNO, MACHINECODE, LOOMCODE, '||CHR(10) 
            ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,  '||CHR(10)
            ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,  '||CHR(10) 
            ||' LASTMODIFIED, USERNAME, SYSROWID,ADDITIONAL_AMT)  '||CHR(10)

            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' '''||lv_ProductionType||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode||''' OCCUPATIONCODE, '''' LINETAG, NULL LINENO, NULL HELPERNO, NULL SARDARNO, NULL RELIVERNO, A.MACHINECODE, NULL LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, A.TOTALHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC, ROUND(SUM(A.VBAMOUNT) / A.TOTALHOURS,5) VBHOURLYRATE,  '||CHR(10)
            ||' A.TOTALHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID,A.ADDITIONAL_AMT '||CHR(10)
            ||' FROM '||lv_TempTable||'  A '||CHR(10)
            ||' GROUP BY A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE,A.MACHINECODE,A.TOTALHOURS,A.ADDITIONAL_AMT'||CHR(10);

    lv_Remarks := '9 INSERT WPSLINEHOURLYRATE  TABLE  SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;   
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    lv_Remarks := '10 DELETE PRODUCTIONTYPE='||P_PRODUCTIONTYPE||', FNEDT = '||P_FN_ENDT;
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' '||chr(10)
            ||'   AND FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
            ||'   AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    lv_Remarks := '11 INESET IN VBDETIAL FOR BEAMER & PRESSMAN  BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';

     lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,OCCUPATIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, LINETAG, '||chr(10)
         ||' MACHINECODE, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID,HOLIDAYHOURS,VBAMOUNT_HOLIDAY ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO, NULL LINETAG,  '||CHR(10)
         ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)/*+NVL(A.NIGHTALLOWANCEHOURS,0)*/ + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)/*+NVL(A.HOLIDAYHOURS,0)*/) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) + ROUND(SUM(NVL(A.OVERTIMEHOURS,0))/**NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*/*NVL(R.VBHOURLYRATE,0),2) + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID,SUM(NVL(A.HOLIDAYHOURS,0)) HOLIDAYHOURS,ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE AND  A.OCCUPATIONCODE = R.OCCUPATIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.OCCUPATIONTYPE = '''||lv_OccupationType||'''   '||CHR(10)
         --||'   AND NVL(A.ATTENDANCEHOURS,0) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1  '||CHR(10);   

    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;


exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PRCWPSADJHOURS_BF_MAINSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPSADJHOURS_BF_MAINSAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DocumentDate         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OccuCode             varchar2(10) :='';

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSATTENDANCEDAYWISE;
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Raw Jute Tenacity Test]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(dateofattendance,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DocumentDate, lv_OperationMode
    from GBL_WPSATTENDANCEDAYWISE;

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;    

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        select count(*)
        into lv_cnt
        from WPSATTENDANCEDAYWISE
        where companycode = lv_CompanyCode
          and divisioncode = lv_DivisionCode
          and YearCode = lv_YearCode;

        /*if lv_cnt > 0 then
            select max(dateofattendance)
            into lv_MaxDocumentDate
            from WPSATTENDANCEDAYWISE
            where companycode = lv_CompanyCode
              and divisioncode = lv_DivisionCode
              and YearCode = lv_YearCode;
            if TO_DATE(lv_DocumentDate,'DD/MM/YYYY') < lv_MaxDocumentDate then
                lv_error_remark := 'Validation Failure : [Last Date of Attendance was : ' || 

to_char(lv_MaxDocumentDate,'dd/mm/yyyy') || ' You can not save any Attandance before this date.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 

'COMMON',6,lv_error_remark));
            end if;     
        end if;*/

        select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS ATTANDANCE DAY WISE',lv_DocumentDate) 
        into lv_DocumentNo
        from dual;
            
        update GBL_WPSATTENDANCEDAYWISE
        set bookno = lv_DocumentNo;
    end if;
    
    select *
    into lv_Master
    from GBL_WPSATTENDANCEDAYWISE
    WHERE ROWNUM=1;
    
    if nvl(lv_Master.operationmode,'NA') <> 'D' then
     FOR C1 IN (
           /*     SELECT TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR') DATEOFATTENDANCE,
                CASE WHEN 

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')>=TO_DATE('01/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') AND
                     

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')<=TO_DATE('16/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') THEN
                            TO_DATE('01/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR')
                WHEN 

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')>=TO_DATE('16/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') AND
                     

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')<=LAST_DAY(TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')) THEN
                            TO_DATE('16/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR')
                END FORTNIGHTSTARTDATE, 
                CASE WHEN 

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')>=TO_DATE('01/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') AND
                     

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')<=TO_DATE('16/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') THEN
                            TO_DATE('15/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR')
                WHEN 

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')>=TO_DATE('16/'||SUBSTR(lv_Master.DATEOFATTENDANCE,4),'DD/MM/RRRR') AND
                     

TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')<=LAST_DAY(TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR')) THEN
                            LAST_DAY(TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR'))
                END FORTNIGHTENDDATE
                ,LAST_DAY(TO_DATE('22/01/2016','DD/MM/RRRR')) LASTDATE                      
                FROM DUAL */
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                          FROM WPSWAGEDPERIODDECLARATION
                         WHERE TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE 
                
                
                
              )
        LOOP
            UPDATE GBL_WPSATTENDANCEDAYWISE
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;
        END LOOP;  
    end if;
    
    UPDATE GBL_WPSATTENDANCEDAYWISE
     SET SPELLTYPE='SPELL 1';
 
     SELECT Max(OCCUPATIONCODE) into lv_OccuCode
     from WPSOCCUPATIONMAST
     WHERE DEPARTMENTCODE IN(SELECT DISTINCT DEPARTMENTCODE FROM GBL_WPSATTENDANCEDAYWISE); 
    
    UPDATE GBL_WPSATTENDANCEDAYWISE
     SET OCCUPATIONCODE = lv_OccuCode;
      
    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' Attandance Book Number : ' || lv_DocumentNo || ' Dated : ' || lv_DocumentDate);
    end if; 
end;
/


DROP PROCEDURE PRCWPSDAILYLOOM_AF_SAVE;

CREATE OR REPLACE PROCEDURE PRCWPSDAILYLOOM_AF_SAVE
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_COMPCODE             varchar2(10) :='';
lv_DIVCODE              varchar2(10) :='';
lv_CopyFrom_dt          DATE;
lv_EntryDate            date;
lv_OperationMode        varchar2(1) :='';
lv_FORTNIGHTNO          number(11,2) := '';
lv_QUALITYCODE          varchar2(10) := '';
lv_USER                 varchar2(50) := '';
begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSDAILYLOOMALLOCATION;
   
    ---- THIS IS PROCEDURE USE FOR COPY ALL DAILY LOOM ALLOCATION FROM COPY_FROM DATE ----- 

    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Loom Allocation Entry]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    SELECT COUNT (A.QUALITYCODE) into lv_cnt
    from WPSDAILYLOOMALLOCATION A , GBL_WPSDAILYLOOMALLOCATION B
    where A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE
      AND A.DATEOFENTRY = B.DATEOFENTRY
      AND A.QUALITYCODE <> B.QUALITYCODE;
        
    IF lv_cnt = 0 THEN
        select distinct companycode, divisioncode, COPYFROM_DT, DATEOFENTRY, QUALITYCODE, FORTNIGHTNO, USERNAME
        INTO lv_COMPCODE, lv_DIVCODE, lv_CopyFrom_dt, lv_EntryDate, lv_QUALITYCODE, lv_FORTNIGHTNO, lv_USER
        FROM GBL_WPSDAILYLOOMALLOCATION;
        
        INSERT INTO WPSDAILYLOOMALLOCATION ( COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, DATEOFENTRY, FORTNIGHTNO, REEDSPACE, QUALITYCODE, 
            MACHINECODE, LOOMDESC, LINENO, ZONENO, EDITED, LOOMCODE, USERNAME, SYSROWID, LASTMODIFIED)
        SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, lv_EntryDate DATEOFENTRY, lv_FORTNIGHTNO FORTNIGHTNO, REEDSPACE, QUALITYCODE, 
            MACHINECODE, LOOMDESC, LINENO, ZONENO, EDITED, LOOMCODE, lv_USER USERNAME, sys_guid() SYSROWID, sysdate LASTMODIFIED
        from WPSDAILYLOOMALLOCATION 
        where COMPANYCODE = lv_COMPCODE AND DIVISIONCODE = lv_DIVCODE
          AND DATEOFENTRY = lv_CopyFrom_dt
          AND QUALITYCODE <> lv_QUALITYCODE;
    END IF;
    
end;
/


DROP PROCEDURE PRCWPSLEAVE_BF_MAINSAVE;

CREATE OR REPLACE PROCEDURE prcWpsleave_Bf_MainSave
is
lv_cnt                  number;
lv_cnt2                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DOCUMENTDATE         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OFFDAY               varchar2(10) :='';
LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
lv_SECTIONCODE          VARCHAR2(10):='';


LV_FEDateExist  VARCHAR2(10) := '';

begin
    lv_result:='#SUCCESS#';
    --Master`
    select count(*)
    into lv_cnt
    from GBL_WPSSTLENTRY;

    SELECT FINALISEDANDLOCK into LV_FEDateExist 
    FROM WPSWAGEDPERIODDECLARATION WHERE FORTNIGHTSTARTDATE=(select FORTNIGHTSTARTDATE from GBL_WPSSTLENTRY) AND COMPANYCODE=(select COMPANYCODE from GBL_WPSSTLENTRY) AND DIVISIONCODE=(select DIVISIONCODE from GBL_WPSSTLENTRY);
   
     select count(*)
    into lv_cnt2
    from GBL_WPSSTLENTRYDETAILS;
    
    
    
    select *
    into lv_Master
    from GBL_WPSSTLENTRY
     WHERE ROWNUM<=1;
    
    select SECTIONCODE into lv_SECTIONCODE from WPSWORKERMAST WHERE WORKERSERIAL=lv_Master.WORKERSERIAL;
    
    IF lv_Master.LEAVECODE='STL' THEN
        if LV_FEDateExist = 'Y' then
            lv_error_remark := 'Validation Failure : [Applicable F.E. Date is Finalised and Locked]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
    END IF;
    
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Production Entry Count CV-MR entry]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(documentdate,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DOCUMENTDATE, lv_OperationMode
    from GBL_WPSSTLENTRY;

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
    if lv_Master.STLDAYS is null then
        lv_error_remark := 'Validation Failure : [Days should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    UPDATE GBL_WPSSTLENTRY
       SET TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS',YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),SECTIONCODE=lv_SECTIONCODE
     WHERE LEAVECODE IN ('CS','OL','TD');
    
    FOR C1 IN (
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                  FROM WPSWAGEDPERIODDECLARATION
                 WHERE TO_DATE(lv_Master.FORTNIGHTSTARTDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
              )
        LOOP
            UPDATE GBL_WPSSTLENTRY
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;

        END LOOP;     

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        SELECT TO_CHAR(TO_DATE(''||lv_Master.FORTNIGHTSTARTDATE||'','DD/MM/RRRR') ,'DD/MM/YYYY')
          INTO LV_FORTNIGHTAPPLICABLEDATE
          FROM DUAL;
        IF lv_Master.LEAVECODE ='STL' THEN
               select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
                into lv_DocumentNo
                from dual;
        ELSIF lv_Master.LEAVECODE ='OL' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS OL ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        ELSIF lv_Master.LEAVECODE ='CS' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS CS ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        ELSIF lv_Master.LEAVECODE ='TD' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS TD ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        END IF;
            
        update GBL_WPSSTLENTRY
        set documentno = lv_DocumentNo;
        
        
       if lv_cnt2 > 0 then
            update GBL_WPSSTLENTRYDETAILS
            set documentno = lv_DocumentNo,YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),SECTIONCODE=lv_SECTIONCODE,TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS';
        end if;
        
    end if;
    
    
   if nvl(lv_OperationMode,'NA') = 'M' then
        DELETE FROM WPSLEAVEAPPLICATION
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    end if;
    
     FOR C1 IN (
                    SELECT TO_DATE(DATES,'DD/MM/RRRR') DATES FROM
                    (
                        WITH d AS
                        (
                        SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
                        FROM dual
                        )
                        SELECT dt + LEVEL  DATES
                        FROM d
                        CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
                    )
              )
     LOOP
        INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
             SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,STLFROMDATE,STLTODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    C1.DATES,1,8,0,TO_CHAR(FORTNIGHTENDDATE,'YYYY')
               FROM GBL_WPSSTLENTRY;
                       
     END LOOP;  
        
    UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=lv_Master.COMPANYCODE
       AND DIVISIONCODE=lv_Master.DIVISIONCODE  
       AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
       AND WORKERSERIAL=lv_Master.WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=lv_Master.COMPANYCODE
              AND DIVISIONCODE=lv_Master.DIVISIONCODE  
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=lv_Master.COMPANYCODE
         AND DIVISIONCODE=lv_Master.DIVISIONCODE  
         AND WORKERSERIAL=lv_Master.WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' DOCUMENT ENTRY NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DOCUMENTDATE||lv_OFFDAY||lv_Master.STLFROMDATE||lv_Master.STLTODATE);
    end if; 
end;
/


DROP PROCEDURE PRCWPSORWRATE_BF_MAINSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPSORWRATE_BF_MAINSAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWORKORDERWISERATEMASTER%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DocumentDate         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSWORKORDERWISERATEMASTER;
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Leave Entry]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(orderdate,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DocumentDate, lv_OperationMode
    from GBL_WPSWORKORDERWISERATEMASTER;

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;    

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        select count(*)
        into lv_cnt
        from WPSWORKORDERWISERATEMASTER
        where companycode = lv_CompanyCode
          and divisioncode = lv_DivisionCode
          and YearCode = lv_YearCode;

        if lv_cnt > 0 then
            select max(ORDERDATE)
            into lv_MaxDocumentDate
            from WPSWORKORDERWISERATEMASTER
            where companycode = lv_CompanyCode
              and divisioncode = lv_DivisionCode
              and YearCode = lv_YearCode;
            if TO_DATE(lv_DocumentDate,'DD/MM/YYYY') < lv_MaxDocumentDate then
                lv_error_remark := 'Validation Failure : [Last Transaction Date was : ' || to_char(lv_MaxDocumentDate,'dd/mm/yyyy') || ' You can not save any Order before this date.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            end if;     
        end if;

        select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS_ORWRATEENTRY',lv_DocumentDate) 
        into lv_DocumentNo
        from dual;
            
        update GBL_WPSWORKORDERWISERATEMASTER
        set ORDERNO = lv_DocumentNo;
    end if;
    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' ORDER NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DocumentDate);
    end if; 
end;
/


DROP PROCEDURE PRCWPSSLTE_BF_MAINSAVE;

CREATE OR REPLACE PROCEDURE prcWpssltE_Bf_MainSave
is
lv_cnt                  number;
lv_cnt2                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DOCUMENTDATE         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OFFDAY               varchar2(10) :='';
LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
lv_SECTIONCODE          varchar2(10) :='';


LV_FEDateExist  VARCHAR2(10) := '';

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSSTLENTRY;
    
    select *
    into lv_Master
    from GBL_WPSSTLENTRY
    WHERE ROWNUM<=1;
    
    
    SELECT FINALISEDANDLOCK into LV_FEDateExist 
    FROM WPSWAGEDPERIODDECLARATION WHERE FORTNIGHTSTARTDATE=(select FORTNIGHTSTARTDATE from GBL_WPSSTLENTRY)
    AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
     select count(*)
    into lv_cnt2
    from GBL_WPSSTLENTRYDETAILS;
    
    
    select SECTIONCODE into lv_SECTIONCODE from WPSWORKERMAST WHERE WORKERSERIAL=lv_Master.WORKERSERIAL AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
    
    if LV_FEDateExist = 'Y' then
        lv_error_remark := 'Validation Failure : [Applicable F.E. Date is Finalised and Locked]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Production Entry Count CV-MR entry]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(documentdate,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DOCUMENTDATE, lv_OperationMode
    from GBL_WPSSTLENTRY;

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
    if lv_Master.STLHOURS is null or  lv_Master.STLDAYS is null then
        lv_error_remark := 'Validation Failure : [STL Hours/Days should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    UPDATE GBL_WPSSTLENTRY
       SET TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS',YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),SECTIONCODE=lv_SECTIONCODE
     WHERE LEAVECODE='STL';
    
    FOR C1 IN (
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                  FROM WPSWAGEDPERIODDECLARATION
                 WHERE TO_DATE(lv_Master.FORTNIGHTSTARTDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
                 AND DIVISIONCODE = lv_Master.DIVISIONCODE
              )
        LOOP
            UPDATE GBL_WPSSTLENTRY
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;

        END LOOP;     

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        SELECT TO_CHAR(TO_DATE(''||lv_Master.FORTNIGHTSTARTDATE||'','DD/MM/RRRR') ,'DD/MM/YYYY')
          INTO LV_FORTNIGHTAPPLICABLEDATE
          FROM DUAL;
        IF lv_Master.LEAVECODE ='STL' THEN
               select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
                into lv_DocumentNo
                from dual;
        ELSIF lv_Master.LEAVECODE ='OL' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS OL ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
         ELSIF lv_Master.LEAVECODE ='CS' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS CS ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        END IF;
            
        update GBL_WPSSTLENTRY
        set documentno = lv_DocumentNo;
        
        
        if lv_cnt2 > 0 then
            update GBL_WPSSTLENTRYDETAILS
            set documentno = lv_DocumentNo,YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),SECTIONCODE=lv_SECTIONCODE,TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS';
        end if;
        
    end if;
    
    
   if nvl(lv_OperationMode,'NA') = 'M' then
        DELETE FROM WPSLEAVEAPPLICATION
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    end if;
    
     FOR C1 IN (
                    SELECT TO_DATE(DATES,'DD/MM/RRRR') DATES FROM
                    (
                        WITH d AS
                        (
                        SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
                        FROM dual
                        )
                        SELECT dt + LEVEL  DATES
                        FROM d
                        CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
                    )
              )
     LOOP
        INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
             SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,STLFROMDATE,STLTODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    C1.DATES,1,8,0,TO_CHAR(FORTNIGHTENDDATE,'YYYY')
               FROM GBL_WPSSTLENTRY;
                       
     END LOOP;  
        
    UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=lv_Master.COMPANYCODE
       AND DIVISIONCODE=lv_Master.DIVISIONCODE  
       AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
       AND WORKERSERIAL=lv_Master.WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=lv_Master.COMPANYCODE
              AND DIVISIONCODE=lv_Master.DIVISIONCODE  
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=lv_Master.COMPANYCODE
         AND DIVISIONCODE=lv_Master.DIVISIONCODE  
         AND WORKERSERIAL=lv_Master.WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' DOCUMENT ENTRY NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DOCUMENTDATE||lv_OFFDAY||lv_Master.STLFROMDATE||lv_Master.STLTODATE);
    end if; 
end;
/


DROP PROCEDURE PRCWPSSLTE_BF_MAINSAVE_OLD;

CREATE OR REPLACE PROCEDURE "PRCWPSSLTE_BF_MAINSAVE_OLD" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DOCUMENTDATE         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OFFDAY               varchar2(10) :='';

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSSTLENTRY;
    
    select *
    into lv_Master
    from GBL_WPSSTLENTRY;
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in Production Entry Count CV-MR entry]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    -- CHANGES ON 02.04.2017 BY AMALESH
    -- select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(documentdate,'DD/MM/YYYY'), operationmode
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(FORTNIGHTENDDATE,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DOCUMENTDATE, lv_OperationMode
    from GBL_WPSSTLENTRY;

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
    if lv_Master.STLHOURS is null or  lv_Master.STLDAYS is null then
        lv_error_remark := 'Validation Failure : [STL Hours/Days should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    UPDATE GBL_WPSSTLENTRY
       SET LEAVECODE='STL'
     WHERE LEAVECODE IS NULL;
    
    FOR C1 IN (
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                  FROM WPSWAGEDPERIODDECLARATION
                 WHERE TO_DATE(lv_Master.FORTNIGHTENDDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
              )
        LOOP
            UPDATE GBL_WPSSTLENTRY
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;

        END LOOP;     

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS STL ENTRY',lv_DOCUMENTDATE) 
        into lv_DocumentNo
        from dual;
            
        update GBL_WPSSTLENTRY
        set documentno = lv_DocumentNo;
    end if;
    
    
   if nvl(lv_OperationMode,'NA') = 'M' then
        DELETE FROM WPSLEAVEAPPLICATION
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    end if;
    
     FOR C1 IN (
                    SELECT TO_DATE(DATES,'DD/MM/RRRR') DATES FROM
                    (
                        WITH d AS
                        (
                        SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
                        FROM dual
                        )
                        SELECT dt + LEVEL  DATES
                        FROM d
                        CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
                    )
              )
     LOOP
        INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
             SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,STLFROMDATE,STLTODATE,DOCUMENTDATE,
                    C1.DATES,1,8,0,TO_CHAR(FORTNIGHTENDDATE,'YYYY')
               FROM GBL_WPSSTLENTRY;
                       
     END LOOP;  
        
    UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=lv_Master.COMPANYCODE
       AND DIVISIONCODE=lv_Master.DIVISIONCODE  
       AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
       AND WORKERSERIAL=lv_Master.WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=lv_Master.COMPANYCODE
              AND DIVISIONCODE=lv_Master.DIVISIONCODE  
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=lv_Master.COMPANYCODE
         AND DIVISIONCODE=lv_Master.DIVISIONCODE  
         AND WORKERSERIAL=lv_Master.WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' DOCUMENT ENTRY NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DOCUMENTDATE||lv_OFFDAY||lv_Master.STLFROMDATE||lv_Master.STLTODATE);
    end if; 
end;
/


DROP PROCEDURE PRCWPSSLTWKLY_BF_MAINSAVE;

CREATE OR REPLACE PROCEDURE prcWpssltWKLY_Bf_MainSave
is
lv_cnt                  number;
lv_cnt2                 number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DOCUMENTDATE         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OFFDAY               varchar2(10) :='';
LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
--lv_SECTIONCODE          varchar2(10) :='';
lv_MaxPAYMENTdate         date;


LV_FEDateExist  VARCHAR2(10) := '';
lv_AVAILABLE_STL_DAYS  number :=0;
lv_inc_rows  number :=0;

lv_Weekly_off  VARCHAR2(50) := '';   
lv_Min_Year             VARCHAR2(10) := ''; 

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSSTLENTRY;
    
    select *
    into lv_Master
    from GBL_WPSSTLENTRY
    WHERE ROWNUM<=1;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(documentdate,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DOCUMENTDATE, lv_OperationMode
    from GBL_WPSSTLENTRY;
    
    SELECT DAYOFFDAY 
    INTO lv_Weekly_off 
    FROM WPSWORKERMAST
    WHERE COMPANYCODE=lv_CompanyCode
    AND DIVISIONCODE=lv_DivisionCode
    AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    
    --lv_error_remark := 'lv_Weekly_off~'||lv_Weekly_off;
    --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    
    if lv_Weekly_off is null then
        lv_error_remark := 'Validation Failure : [Weekly off Day Not Found in WPSWORKERMAST ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
     FOR C22 
                IN(
                SELECT DOCUMENTNO,PAYMENTDATE,WORKERSERIAL,LEAVEDATE,DAY 
                FROM GBL_WPSSTLENTRYDETAILS
                where COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND TOKENNO=lv_Master.TOKENNO
                  )
            LOOP 
                IF TRIM(lv_Weekly_off)=TRIM(C22.DAY) THEN
                UPDATE GBL_WPSSTLENTRYDETAILS
                 SET LEAVEDAYS=0,LEAVEHOURS=0
                WHERE   COMPANYCODE=lv_Master.COMPANYCODE
                    AND DIVISIONCODE=lv_Master.DIVISIONCODE  
                    AND PAYMENTDATE = C22.PAYMENTDATE
                    AND WORKERSERIAL=C22.WORKERSERIAL
                    AND LEAVEDATE=C22.LEAVEDATE;  
                END IF;
            END LOOP;
    
    UPDATE GBL_WPSSTLENTRY SET PAYMENTDATE=DOCUMENTDATE;

    UPDATE GBL_WPSSTLENTRYDETAILS SET STLSERIALNO=lv_Master.STLSERIALNO;
    
    UPDATE GBL_WPSSTLENTRYDETAILS SET DOCUMENTDATE=TO_DATE(lv_DOCUMENTDATE,'DD/MM/YYYY');
    
    UPDATE GBL_WPSSTLENTRY SET SHIFTCODE=case when SHIFTCODE='A' THEN '1' 
                                               when SHIFTCODE='B' THEN '2'
                                               when SHIFTCODE='C' THEN '3'
                                           END ;
                                           
    UPDATE GBL_WPSSTLENTRYDETAILS SET SHIFTCODE=case when SHIFTCODE='A' THEN '1' 
                                               when SHIFTCODE='B' THEN '2'
                                               when SHIFTCODE='C' THEN '3'
                                           END ;

  if nvl(lv_OperationMode,'NA') = 'A' then
 
      if lv_cnt > 0 then
            select COUNT(*) INTO lv_cnt
            from WPSSTLENTRYDETAILS
            where companycode = lv_Master.CompanyCode
              and divisioncode = lv_Master.DivisionCode
              and YearCode = lv_Master.YearCode;
            if lv_cnt > 0 then
                select max(PAYMENTDATE)
                into lv_MaxPAYMENTdate
                from WPSSTLENTRYDETAILS
                where companycode = lv_Master.CompanyCode
                  and divisioncode = lv_Master.DivisionCode
                  and YearCode = lv_Master.YearCode;
            
                if lv_Master.DOCUMENTDATE < lv_MaxPAYMENTdate then
                    lv_error_remark := 'Validation Failure : [Last STL Entry Date was : ' || to_char(lv_MaxPAYMENTdate,'dd/mm/yyyy') || ' You can not save any STL before this date.]';
                    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
                end if;     
            END IF;
--            if TRUNC(lv_Master.DOCUMENTDATE) > TRUNC(SYSDATE) then
--                lv_error_remark := 'Validation Failure : STL Entry Date cannot be greater than current date.['|| trunc(sysdate) ||'.]';
--                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
--            end if;

        end if;
      


        SELECT COUNT(*) INTO lv_cnt FROM WPSSTLENTRYDETAILS 
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND WORKERSERIAL=lv_Master.WORKERSERIAL
        AND LEAVEDATE BETWEEN lv_Master.STLFROMDATE AND lv_Master.STLTODATE;
        
         --lv_error_remark := 'lv_cnt'||lv_cnt;
          --  raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        
        if lv_cnt > 0 then
            lv_error_remark := 'Validation Failure : [STL Date Exist for this range in STL Details.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
 END IF;
  
  
    SELECT count(*)
    into lv_cnt FROM WPSSECTIONMAST 
    WHERE companycode=lv_Master.COMPANYCODE
      AND DIVISIONCODE=lv_Master.DIVISIONCODE
      and DEPARTMENTCODE=lv_Master.DEPARTMENTCODE
      and SECTIONCODE=lv_Master.SECTIONCODE;
      if lv_cnt = 0 then
            lv_error_remark := 'Validation Failure : [Section Does not Exist in this Department.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
      end if;
      
  
       
        

        select count(*)
        into lv_cnt
        from GBL_WPSSTLENTRY;  
   

    
    
    SELECT FINALISEDANDLOCK into LV_FEDateExist 
    FROM WPSWAGEDPERIODDECLARATION WHERE FORTNIGHTSTARTDATE=(select FORTNIGHTSTARTDATE from GBL_WPSSTLENTRY)
    AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
     select count(*)
    into lv_cnt2
    from GBL_WPSSTLENTRYDETAILS;
    
    
   -- select SECTIONCODE into lv_SECTIONCODE from WPSWORKERMAST WHERE WORKERSERIAL=lv_Master.WORKERSERIAL AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
    
    if LV_FEDateExist = 'Y' then
        lv_error_remark := 'Validation Failure : [Applicable F.E. Date is Finalised and Locked]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in STL Entry Details.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
   

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
    if lv_Master.STLHOURS is null or  lv_Master.STLDAYS is null then
        lv_error_remark := 'Validation Failure : [STL Hours/Days should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     if lv_Master.STLSERIALNO is null then
        lv_error_remark := 'Validation Failure : [Serial No should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    UPDATE GBL_WPSSTLENTRY
       SET TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS'--,/*YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),*/SECTIONCODE=lv_SECTIONCODE
     WHERE LEAVECODE='STL';
     

    
    FOR C1 IN (
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                  FROM WPSWAGEDPERIODDECLARATION
                 WHERE TO_DATE(lv_Master.FORTNIGHTSTARTDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
                 AND DIVISIONCODE = lv_Master.DIVISIONCODE
              )
        LOOP
            UPDATE GBL_WPSSTLENTRY
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;

        END LOOP;     

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        SELECT TO_CHAR(TO_DATE(''||lv_Master.FORTNIGHTSTARTDATE||'','DD/MM/RRRR') ,'DD/MM/YYYY')
          INTO LV_FORTNIGHTAPPLICABLEDATE
          FROM DUAL;
        IF lv_Master.LEAVECODE ='STL' THEN
               select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
                into lv_DocumentNo
                from dual;
        ELSIF lv_Master.LEAVECODE ='OL' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS OL ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
         ELSIF lv_Master.LEAVECODE ='CS' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS CS ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        END IF;
            
        update GBL_WPSSTLENTRY
        set documentno = lv_DocumentNo;
        
        
        if lv_cnt2 > 0 then
            update GBL_WPSSTLENTRYDETAILS
            set documentno = lv_DocumentNo,/*YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),*//*SECTIONCODE=lv_SECTIONCODE,*/SECTIONCODE=lv_Master.SECTIONCODE,TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS';
        end if;
        
    end if;
    
    
   if nvl(lv_OperationMode,'NA') = 'M' then
        DELETE FROM WPSLEAVEAPPLICATION
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    end if;
    
     FOR C1 IN (
                    SELECT TO_DATE(DATES,'DD/MM/RRRR') DATES FROM
                    (
                        WITH d AS
                        (
                        SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
                        FROM dual
                        )
                        SELECT dt + LEVEL  DATES
                        FROM d
                        CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
                    )
              )
     LOOP
        INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
             SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,STLFROMDATE,STLTODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    C1.DATES,1,8,0,YEAR--TO_CHAR(FORTNIGHTENDDATE,'YYYY')
               FROM GBL_WPSSTLENTRY;
                       
     END LOOP;  
        
    UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=lv_Master.COMPANYCODE
       AND DIVISIONCODE=lv_Master.DIVISIONCODE  
       AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
       AND WORKERSERIAL=lv_Master.WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=lv_Master.COMPANYCODE
              AND DIVISIONCODE=lv_Master.DIVISIONCODE  
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=lv_Master.COMPANYCODE
         AND DIVISIONCODE=lv_Master.DIVISIONCODE  
         AND WORKERSERIAL=lv_Master.WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
    
  If nvl(lv_OperationMode,'NA') = 'A' then
      --Previous Year Balance Update in Year field ........................
     UPDATE GBL_WPSSTLENTRYDETAILS 
     SET YEAR=NULL 
     WHERE 
     COMPANYCODE=lv_Master.COMPANYCODE
     AND DIVISIONCODE=lv_Master.DIVISIONCODE
     AND TOKENNO=lv_Master.TOKENNO;
     
     DELETE FROM GBL_STLBAL;
      PRC_STLBAL_YEARWISE(lv_Master.COMPANYCODE,lv_Master.DIVISIONCODE,TO_CHAR(SYSDATE,'DD/MM/YYYY'),lv_Master.TOKENNO);
      
                            
     FOR C1 
        IN(
            SELECT A.*,ROW_NUMBER() OVER(PARTITION BY WORKERSERIAL order by A.YEAR )SRL  
            FROM GBL_STLBAL A
            WHERE COMPANYCODE = lv_Master.COMPANYCODE
            AND DIVISIONCODE = lv_Master.DIVISIONCODE
            AND TOKENNO = lv_Master.TOKENNO 
            AND STLBAL_DAYS>0
            )
      LOOP

        lv_AVAILABLE_STL_DAYS :=C1.STLBAL_DAYS;                  
        lv_inc_rows :=1;
            FOR C2 
                IN(
                SELECT DOCUMENTNO,PAYMENTDATE,WORKERSERIAL,LEAVEDATE 
                FROM GBL_WPSSTLENTRYDETAILS
                where year is null
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND TOKENNO=lv_Master.TOKENNO
                AND LEAVEDAYS>0
                  )
            LOOP 
                    IF lv_inc_rows<=lv_AVAILABLE_STL_DAYS THEN
                            SELECT COUNT(*) 
                            INTO lv_cnt 
                            FROM GBL_WPSSTLENTRYDETAILS B
                            WHERE  YEAR IS NOT NULL
                            AND B.DOCUMENTNO=C2.DOCUMENTNO
                            AND B.PAYMENTDATE=C2.PAYMENTDATE
                            AND B.WORKERSERIAL=C2.WORKERSERIAL
                            AND B.LEAVEDATE=C2.LEAVEDATE
                            AND B.LEAVEDAYS>0;
                            --lv_error_remark := 'lv_cnt~'||lv_cnt;
                            --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
                                if lv_cnt=0 then
                                update GBL_WPSSTLENTRYDETAILS set year=C1.year
                                where DOCUMENTNO=C2.DOCUMENTNO
                                and PAYMENTDATE=C2.PAYMENTDATE
                                and WORKERSERIAL=C2.WORKERSERIAL
                                and LEAVEDATE=C2.LEAVEDATE;
                                end if;
                    END IF;
                  lv_inc_rows :=lv_inc_rows+1;
       
            END LOOP;

    END LOOP;
    
    --End of Year Update...........................


        select count(*) into lv_cnt 
        from GBL_WPSSTLENTRYDETAILS;
        
         SELECT MIN(YEAR) 
         INTO  LV_MIN_YEAR
         FROM  GBL_WPSSTLENTRYDETAILS
         WHERE YEAR IS NOT NULL
         AND LEAVEDAYS>0;
    
         UPDATE GBL_WPSSTLENTRYDETAILS SET YEAR=LV_MIN_YEAR
         WHERE  LEAVEDAYS=0 AND YEAR IS NULL;
        
    If lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in  STL Entry Details.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    FOR C11 IN(SELECT a.*,ROW_NUMBER() OVER(PARTITION BY companycode order by companycode,LEAVEDATE )SRL FROM GBL_WPSSTLENTRYDETAILS a WHERE  a.LEAVEDAYS>0)
    LOOP 
        if C11.year is null then
            lv_error_remark := 'Validation Failure : [Year should not be blank at line '||c11.SRL || '].';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
    END LOOP;
  END IF;
    
        
     
                    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' DOCUMENT ENTRY NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DOCUMENTDATE||lv_OFFDAY||lv_Master.STLFROMDATE||lv_Master.STLTODATE);
    end if; 
end;
/


DROP PROCEDURE PRCWPSSLTWKLY_BF_MAINSAVE_OLD;

CREATE OR REPLACE PROCEDURE prcWpssltWKLY_Bf_MainSave_OLD
is
lv_cnt                  number;
lv_cnt2                 number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DocumentNo           varchar2(100) := '';
lv_MaxDocumentDate      date;
lv_CompanyCode          varchar2(10) :='';
lv_DivisionCode         varchar2(10) :='';
lv_YearCode             varchar2(9) :='';
lv_DOCUMENTDATE         varchar2(10) :='';
lv_OperationMode        varchar2(1) :='';
lv_OFFDAY               varchar2(10) :='';
LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
lv_SECTIONCODE          varchar2(10) :='';
lv_MaxPAYMENTdate         date;


LV_FEDateExist  VARCHAR2(10) := '';
lv_AVAILABLE_STL_DAYS  number :=0;
lv_inc_rows  number :=0;

begin
    lv_result:='#SUCCESS#';
    --Master
    select count(*)
    into lv_cnt
    from GBL_WPSSTLENTRY;
    
    select *
    into lv_Master
    from GBL_WPSSTLENTRY
    WHERE ROWNUM<=1;
    
    select distinct CompanyCode, DivisionCode, YearCode, TO_CHAR(documentdate,'DD/MM/YYYY'), operationmode
    into lv_CompanyCode, lv_DivisionCode, lv_YearCode, lv_DOCUMENTDATE, lv_OperationMode
    from GBL_WPSSTLENTRY;
    
    
    UPDATE GBL_WPSSTLENTRY SET PAYMENTDATE=DOCUMENTDATE;

    UPDATE GBL_WPSSTLENTRYDETAILS SET STLSERIALNO=lv_Master.STLSERIALNO;
    
    UPDATE GBL_WPSSTLENTRY SET SHIFTCODE=case when SHIFTCODE='A' THEN '1' 
                                               when SHIFTCODE='B' THEN '2'
                                               when SHIFTCODE='C' THEN '3'
                                           END ;
                                           
    UPDATE GBL_WPSSTLENTRYDETAILS SET SHIFTCODE=case when SHIFTCODE='A' THEN '1' 
                                               when SHIFTCODE='B' THEN '2'
                                               when SHIFTCODE='C' THEN '3'
                                           END ;

  if nvl(lv_OperationMode,'NA') = 'A' then
 
      if lv_cnt > 0 then
            select COUNT(*) INTO lv_cnt
            from WPSSTLENTRYDETAILS
            where companycode = lv_Master.CompanyCode
              and divisioncode = lv_Master.DivisionCode
              and YearCode = lv_Master.YearCode;
            if lv_cnt > 0 then
                select max(PAYMENTDATE)
                into lv_MaxPAYMENTdate
                from WPSSTLENTRYDETAILS
                where companycode = lv_Master.CompanyCode
                  and divisioncode = lv_Master.DivisionCode
                  and YearCode = lv_Master.YearCode;
            
                if lv_Master.DOCUMENTDATE < lv_MaxPAYMENTdate then
                    lv_error_remark := 'Validation Failure : [Last STL Entry Date was : ' || to_char(lv_MaxPAYMENTdate,'dd/mm/yyyy') || ' You can not save any STL before this date.]';
                    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
                end if;     
            END IF;
            if TRUNC(lv_Master.DOCUMENTDATE) > TRUNC(SYSDATE) then
                lv_error_remark := 'Validation Failure : STL Entry Date cannot be greater than current date.['|| trunc(sysdate) ||'.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            end if;

        end if;
      


        SELECT COUNT(*) INTO lv_cnt FROM WPSSTLENTRYDETAILS 
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND WORKERSERIAL=lv_Master.WORKERSERIAL
        AND LEAVEDATE BETWEEN lv_Master.STLFROMDATE AND lv_Master.STLTODATE;
        
         --lv_error_remark := 'lv_cnt'||lv_cnt;
          --  raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        
        if lv_cnt > 0 then
            lv_error_remark := 'Validation Failure : [STL Date Exist for this range in STL Details.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
 END IF;
  
  
    
  
       
        

        select count(*)
        into lv_cnt
        from GBL_WPSSTLENTRY;  
   

    
    
    SELECT FINALISEDANDLOCK into LV_FEDateExist 
    FROM WPSWAGEDPERIODDECLARATION WHERE FORTNIGHTSTARTDATE=(select FORTNIGHTSTARTDATE from GBL_WPSSTLENTRY)
    AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
     select count(*)
    into lv_cnt2
    from GBL_WPSSTLENTRYDETAILS;
    
    
    select SECTIONCODE into lv_SECTIONCODE from WPSWORKERMAST WHERE WORKERSERIAL=lv_Master.WORKERSERIAL AND DIVISIONCODE = lv_Master.DIVISIONCODE;
    
    
    if LV_FEDateExist = 'Y' then
        lv_error_remark := 'Validation Failure : [Applicable F.E. Date is Finalised and Locked]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
   
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in STL Entry Details.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
   

    if lv_OperationMode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT / VIEW ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if; 
    
    if lv_Master.STLHOURS is null or  lv_Master.STLDAYS is null then
        lv_error_remark := 'Validation Failure : [STL Hours/Days should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     if lv_Master.STLSERIALNO is null then
        lv_error_remark := 'Validation Failure : [Serial No should not be blank!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    UPDATE GBL_WPSSTLENTRY
       SET TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS',/*YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),*/SECTIONCODE=lv_SECTIONCODE
     WHERE LEAVECODE='STL';
    
    FOR C1 IN (
                SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                  FROM WPSWAGEDPERIODDECLARATION
                 WHERE TO_DATE(lv_Master.FORTNIGHTSTARTDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
                 AND DIVISIONCODE = lv_Master.DIVISIONCODE
              )
        LOOP
            UPDATE GBL_WPSSTLENTRY
               SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                   FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;

        END LOOP;     

-----------------------  Auto Number

    if nvl(lv_OperationMode,'NA') = 'A' then
        SELECT TO_CHAR(TO_DATE(''||lv_Master.FORTNIGHTSTARTDATE||'','DD/MM/RRRR') ,'DD/MM/YYYY')
          INTO LV_FORTNIGHTAPPLICABLEDATE
          FROM DUAL;
        IF lv_Master.LEAVECODE ='STL' THEN
               select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
                into lv_DocumentNo
                from dual;
        ELSIF lv_Master.LEAVECODE ='OL' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS OL ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
         ELSIF lv_Master.LEAVECODE ='CS' THEN            
             select fn_autogen_params(lv_CompanyCode,lv_DivisionCode,lv_YearCode,'WPS CS ENTRY',LV_FORTNIGHTAPPLICABLEDATE) 
            into lv_DocumentNo
            from dual;
        END IF;
            
        update GBL_WPSSTLENTRY
        set documentno = lv_DocumentNo;
        
        
        if lv_cnt2 > 0 then
            update GBL_WPSSTLENTRYDETAILS
            set documentno = lv_DocumentNo,/*YEAR=TO_CHAR(FORTNIGHTSTARTDATE,'YYYY'),*/SECTIONCODE=lv_SECTIONCODE,TRANSACTIONTYPE ='AVAILED',ADDLESS='LESS';
        end if;
        
    end if;
    
    
   if nvl(lv_OperationMode,'NA') = 'M' then
        DELETE FROM WPSLEAVEAPPLICATION
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL;
    end if;
    
     FOR C1 IN (
                    SELECT TO_DATE(DATES,'DD/MM/RRRR') DATES FROM
                    (
                        WITH d AS
                        (
                        SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
                        FROM dual
                        )
                        SELECT dt + LEVEL  DATES
                        FROM d
                        CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
                    )
              )
     LOOP
        INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
             SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,STLFROMDATE,STLTODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    C1.DATES,1,8,0,YEAR--TO_CHAR(FORTNIGHTENDDATE,'YYYY')
               FROM GBL_WPSSTLENTRY;
                       
     END LOOP;  
        
    UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=lv_Master.COMPANYCODE
       AND DIVISIONCODE=lv_Master.DIVISIONCODE  
       AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
       AND WORKERSERIAL=lv_Master.WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=lv_Master.COMPANYCODE
              AND DIVISIONCODE=lv_Master.DIVISIONCODE  
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=lv_Master.COMPANYCODE
         AND DIVISIONCODE=lv_Master.DIVISIONCODE  
         AND WORKERSERIAL=lv_Master.WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=lv_Master.COMPANYCODE
          AND DIVISIONCODE=lv_Master.DIVISIONCODE  
          AND LEAVEAPPLIEDON = lv_Master.DOCUMENTDATE
          AND WORKERSERIAL=lv_Master.WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(lv_Master.STLTODATE,'DD/MM/YYYY') - TO_DATE( lv_Master.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
    
  If nvl(lv_OperationMode,'NA') = 'A' then
      --Previous Year Balance Update in Year field ........................
     UPDATE GBL_WPSSTLENTRYDETAILS 
     SET YEAR=NULL 
     WHERE 
     COMPANYCODE=lv_Master.COMPANYCODE
     AND DIVISIONCODE=lv_Master.DIVISIONCODE
     AND TOKENNO=lv_Master.TOKENNO;
     
     DELETE FROM GBL_STLBAL;
      PRC_STLBAL_YEARWISE(lv_Master.COMPANYCODE,lv_Master.DIVISIONCODE,SYSDATE,lv_Master.TOKENNO);
      
                            
     FOR C1 
        IN(
            SELECT A.*,ROW_NUMBER() OVER(PARTITION BY WORKERSERIAL order by A.YEAR )SRL  
            FROM GBL_STLBAL A
            WHERE COMPANYCODE = lv_Master.COMPANYCODE
            AND DIVISIONCODE = lv_Master.DIVISIONCODE
            AND TOKENNO = lv_Master.TOKENNO 
            AND STLBAL_DAYS>0
            )
      LOOP

        lv_AVAILABLE_STL_DAYS :=C1.STLBAL_DAYS;                  
        lv_inc_rows :=1;
            FOR C2 
                IN(
                SELECT DOCUMENTNO,PAYMENTDATE,WORKERSERIAL,LEAVEDATE 
                FROM GBL_WPSSTLENTRYDETAILS
                where year is null
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND TOKENNO=lv_Master.TOKENNO
                  )
            LOOP 
                    IF lv_inc_rows<=lv_AVAILABLE_STL_DAYS THEN
                            SELECT COUNT(*) 
                            INTO lv_cnt 
                            FROM GBL_WPSSTLENTRYDETAILS B
                            WHERE  YEAR IS NOT NULL
                            AND B.DOCUMENTNO=C2.DOCUMENTNO
                            AND B.PAYMENTDATE=C2.PAYMENTDATE
                            AND B.WORKERSERIAL=C2.WORKERSERIAL
                            AND B.LEAVEDATE=C2.LEAVEDATE;
                            --lv_error_remark := 'lv_cnt~'||lv_cnt;
                            --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
                                if lv_cnt=0 then
                                update GBL_WPSSTLENTRYDETAILS set year=C1.year
                                where DOCUMENTNO=C2.DOCUMENTNO
                                and PAYMENTDATE=C2.PAYMENTDATE
                                and WORKERSERIAL=C2.WORKERSERIAL
                                and LEAVEDATE=C2.LEAVEDATE;
                                end if;
                    END IF;
                  lv_inc_rows :=lv_inc_rows+1;
       
            END LOOP;

    END LOOP;
    
    --End of Year Update...........................


        select count(*) into lv_cnt 
        from GBL_WPSSTLENTRYDETAILS;
        
    If lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found in  STL Entry Details.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    FOR C11 IN(SELECT a.*,ROW_NUMBER() OVER(PARTITION BY companycode order by companycode,companycode )SRL FROM GBL_WPSSTLENTRYDETAILS a)
    LOOP 
        if C11.year is null then
            lv_error_remark := 'Validation Failure : [Year should not be blank at line '||c11.SRL || '].';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
    END LOOP;
  END IF;
    
        
     
                    
    if lv_OperationMode = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' DOCUMENT ENTRY NUMBER : ' || lv_DocumentNo || ' Dated : ' || lv_DOCUMENTDATE||lv_OFFDAY||lv_Master.STLFROMDATE||lv_Master.STLTODATE);
    end if; 
end;
/


DROP PROCEDURE PRCWPS_ACCGATEDTLSB4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_ACCGATEDTLSB4SAVE
IS
LV_SQLSTR           VARCHAR2(1000)  :=  '';   
LV_MASTER           GBL_WPSACCIDENTGATEPASSDETAILS%ROWTYPE;
LV_CNT              NUMBER          :=  0;lv_error_remark         varchar2(4000) := '' ;
LV_TRANSACTIONNO    VARCHAR2(30)    :=  '';

BEGIN
    SELECT COUNT(*)
      INTO LV_CNT
      FROM GBL_WPSACCIDENTGATEPASSDETAILS;
    IF LV_CNT>0 THEN
        SELECT *
          INTO LV_MASTER
          FROM GBL_WPSACCIDENTGATEPASSDETAILS
         WHERE ROWNUM<=1;
        IF NVL(LV_MASTER.TRANSACTIONTAG,'NA') = 'ACCIDENT' THEN
            IF NVL(LV_MASTER.TRANSACTIONNO,'NA') = 'NA' THEN
                    SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'WPS ACCIDENT ENTRY',TO_CHAR(LV_MASTER.DATEOFATTENDANCE,'dd/mm/yyyy')) 
                      INTO LV_TRANSACTIONNO
                      FROM DUAL;
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                ELSE
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_MASTER.TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M' OR NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0) - NVL('||C2.ATTENDANCEHOURS||',0), '||CHR(10)
                               ||'                                ATTENDANCEHOURS = NVL('||C2.ATTENDANCEHOURS||',0), '||CHR(10)
                               ||'                                REMARKS = ''MANUAL ACCIDENT ENTRY'' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SHIFTCODE = '''||C2.SHIFTCODE||''' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = 0, '||CHR(10)
                               ||'                                ATTENDANCEHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0), '||CHR(10)
                               ||'                                REMARKS = '''' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SHIFTCODE = '''||C2.SHIFTCODE||''' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
        END IF;
        IF NVL(LV_MASTER.TRANSACTIONTAG,'NA') = 'GATE PASS' THEN
            IF NVL(LV_MASTER.TRANSACTIONNO,'NA') = 'NA' THEN
                    SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'WPS GATE PASS ENTRY',TO_CHAR(LV_MASTER.DATEOFATTENDANCE,'dd/mm/yyyy')) 
                      INTO LV_TRANSACTIONNO
                      FROM DUAL;
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                ELSE
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_MASTER.TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M' OR NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE  '||CHR(10)
                               ||'   SET DEDUCTIONHOURS = NVL('||C2.DEDUCTIONHOURS||',0), '||CHR(10)
                               ||'       ATTENDANCEHOURS = ATTENDANCEHOURS + DEDUCTIONHOURS - NVL('||C2.DEDUCTIONHOURS||',0), '||CHR(10)
                               ||'       REMARKS = ''MANUAL GATEPASS ENTRY'' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE  '||CHR(10)
                               ||'   SET DEDUCTIONHOURS = 0, '||CHR(10)
                               ||'       ATTENDANCEHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0), '||CHR(10)
                               ||'       REMARKS = '''' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
        END IF;
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN 
             INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_ACCIDENTDTLSB4SAVE','',LV_SQLSTR,'','','', '');
    END;
/


DROP PROCEDURE PRCWPS_ACCGATEDTLSB4SAVE_T;

CREATE OR REPLACE PROCEDURE PRCWPS_ACCGATEDTLSB4SAVE_T
IS
LV_SQLSTR           VARCHAR2(1000)  :=  '';   
LV_MASTER           GBL_WPSACCIDENTGATEPASSDETAILS%ROWTYPE;
LV_CNT              NUMBER          :=  0;lv_error_remark         varchar2(4000) := '' ;
LV_TRANSACTIONNO    VARCHAR2(30)    :=  '';

BEGIN
    SELECT COUNT(*)
      INTO LV_CNT
      FROM GBL_WPSACCIDENTGATEPASSDETAILS;
    IF LV_CNT>0 THEN
        SELECT *
          INTO LV_MASTER
          FROM GBL_WPSACCIDENTGATEPASSDETAILS
         WHERE ROWNUM<=1;
        IF NVL(LV_MASTER.TRANSACTIONTAG,'NA') = 'ACCIDENT' THEN
            IF NVL(LV_MASTER.TRANSACTIONNO,'NA') = 'NA' THEN
                    SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'WPS ACCIDENT ENTRY',TO_CHAR(LV_MASTER.DATEOFATTENDANCE,'dd/mm/yyyy')) 
                      INTO LV_TRANSACTIONNO
                      FROM DUAL;
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                ELSE
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_MASTER.TRANSACTIONNO||''' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M' OR NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0) - NVL('||C2.ATTENDANCEHOURS||',0), '||CHR(10)
                               ||'                                ATTENDANCEHOURS = NVL('||C2.ATTENDANCEHOURS||',0), '||CHR(10)
                               ||'                                REMARKS = ''MANUAL ACCIDENT ENTRY'' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SHIFTCODE = '''||C2.SHIFTCODE||''' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = 0, '||CHR(10)
                               ||'                                ATTENDANCEHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0), '||CHR(10)
                               ||'                                REMARKS = '''' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SHIFTCODE = '''||C2.SHIFTCODE||''' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
        END IF;
        IF NVL(LV_MASTER.TRANSACTIONTAG,'NA') = 'GATE PASS' THEN
            IF NVL(LV_MASTER.TRANSACTIONNO,'NA') = 'NA' THEN
                    SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'WPS GATE PASS ENTRY',TO_CHAR(LV_MASTER.DATEOFATTENDANCE,'dd/mm/yyyy')) 
                      INTO LV_TRANSACTIONNO
                      FROM DUAL;
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_TRANSACTIONNO||''' '||CHR(10);
                    DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQLSTR);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                ELSE
                    LV_SQLSTR := 'UPDATE GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10)
                               ||'   SET TRANSACTIONNO = '''||LV_MASTER.TRANSACTIONNO||''' '||CHR(10);
                    DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQLSTR);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M' OR NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE  '||CHR(10)
                               ||'   SET DEDUCTIONHOURS = NVL('||C2.DEDUCTIONHOURS||',0), '||CHR(10)
                               ||'       ATTENDANCEHOURS = ATTENDANCEHOURS + DEDUCTIONHOURS - NVL('||C2.DEDUCTIONHOURS||',0), '||CHR(10)
                               ||'       REMARKS = ''MANUAL GATEPASS ENTRY TODAY'' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQLSTR);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
            IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
                FOR C2 IN (SELECT * FROM GBL_WPSACCIDENTGATEPASSDETAILS)
                LOOP
                    LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE  '||CHR(10)
                               ||'   SET DEDUCTIONHOURS = 0, '||CHR(10)
                               ||'       ATTENDANCEHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0), '||CHR(10)
                               ||'       REMARKS = '''' '||CHR(10)
                               ||' WHERE COMPANYCODE = '''||C2.COMPANYCODE||''' '||CHR(10)
                               ||'   AND DIVISIONCODE = '''||C2.DIVISIONCODE||''' '||CHR(10)
                               ||'   AND DATEOFATTENDANCE = '''||C2.DATEOFATTENDANCE||''' '||CHR(10)
                               ||'   AND WORKERSERIAL = '||C2.WORKERSERIAL||' '||CHR(10)
                               ||'   AND SPELLTYPE = '''||C2.SPELL||''' '||CHR(10)
                               ||'   AND SPELLHOURS = '||C2.SPELLHOURS||' '||CHR(10);
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END LOOP;
            END IF;
        END IF;
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN 
             INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_ACCIDENTDTLSB4SAVE','',LV_SQLSTR,'','','', '');
    END;
/


DROP PROCEDURE PRCWPS_ATTENAPPRVTRANS_B4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_ATTENAPPRVTRANS_B4SAVE
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCECSVRAWDATA%rowtype;
lv_OPERATIONMODE        varchar2(10);
lv_BookNo               varchar2(20):= '';
lv_FN_STDT              date;
lv_FN_ENDT              date;
lv_Sql                  varchar2(10000);
lv_YearCode             varchar2(10);

begin

    lv_result:='#SUCCESS#';

        --RETURN;
        --COMMIT;
        select count(*)
        into lv_cnt
        from GBL_WPSATTENDANCECSVRAWDATA;
        
         select *
         into lv_Master
         from GBL_WPSATTENDANCECSVRAWDATA
         WHERE ROWNUM<=1;
        
         SELECT TO_DATE(FN_GETFORTNIGHTSTARTENDDATE(lv_Master.ATTENDATE,'START'),'DD/MM/YYYY'), 
                TO_DATE(FN_GETFORTNIGHTSTARTENDDATE(lv_Master.ATTENDATE,'END'),'DD/MM/YYYY')
                INTO lv_FN_STDT, lv_FN_ENDT 
         FROM DUAL;
         
         select YEARCODE INTO lv_YearCode 
         FROM FINANCIALYEAR 
         WHERE COMPANYCODE = lv_Master.COMPANYCODE AND DIVISIONCODE = lv_Master.DIVISIONCODE
           AND STARTDATE <= TO_DATE(lv_Master.ATTENDATE,'DD/MM/YYYY')
           AND ENDDATE >= TO_DATE(lv_Master.ATTENDATE,'DD/MM/YYYY');
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]OP~'''||lv_OPERATIONMODE||'''';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;--       
                       

        FOR C1 IN (SELECT DISTINCT COMPANYCODE,DIVISIONCODE,ATTENDATE,SECTION,SHIFT,VERIFIED FROM GBL_WPSATTENDANCECSVRAWDATA)
        LOOP
        
         UPDATE WPSATTENDANCECSVRAWDATA SET APPROVED='Y' 
         WHERE  ATTENDATE=C1.ATTENDATE AND SECTION=C1.SECTION AND SHIFT=C1.SHIFT AND VERIFIED=C1.VERIFIED AND C1.VERIFIED='Y';
        
        END LOOP;
        
--        FOR C2 IN (SELECT DISTINCT COMPANYCODE, DIVISIONCODE, ATTENDATE, SECTION, SHIFT FROM GBL_WPSATTENDANCECSVRAWDATA)
--        LOOP
            
            INSERT INTO WPSATTENDANCEDAYWISE (
            COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DATEOFATTENDANCE, DEPARTMENTCODE, SECTIONCODE, 
            GROUPCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE,  
            ISDAYOFF, SPELLTYPE, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, OVERTIMEHOURS, HOLIDAYHOURS, 
            STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, NPFADJHOURS, SERIALNO, PAGENO, PAGESERIALNO, REMARKS, 
            LASTMODIFIED, USERNAME, SYSROWID, MODULE, 
            BOOKNO, ATTENDANCETAG, UNITCODE, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF)
            SELECT B.COMPANYCODE, B.DIVISIONCODE, lv_YearCode YEARCODE, lv_FN_STDT FORTNIGHTSTARTDATE, lv_FN_ENDT FORTNIGHTENDDATE, TO_DATE(ATTENDATE,'DD/MM/YYYY') DATEOFATTENDANCE, 
            A.DEPARTMENT DEPARTMENTCODE, A.SECTION SECTIONCODE,   
            DECODE(A.SHIFT,'A','B','A1','B','A2','B','B','R','B1','R','B2','R','G') PARENTSHIFTCODE, DECODE(A.SHIFT,'A','1','A1','1','A2','1','B','2','B1','2','B2','2','3') SHIFTCODE, B.WORKERSERIAL, A.TOKENNO, B.WORKERCATEGORYCODE, C.OCCUPATIONCODE, C.WORKERTYPECODE,  
            'N' ISDAYOFF, 'SPELL 1' SPELLTYPE, (NVL(A.SPELLHRS_1,0)+NVL(SPELLHRS_2,0)) ATTENDANCEHOURS, '' MACHINECODE1, '' MACHINECODE2, '' LOOMCODE, NVL(A.OTHOURS,0) OVERTIMEHOURS, 0 HOLIDAYHOURS, 
            0 STATUTORYHOURS, 0 NIGHTALLOWANCEHOURS, 0 PFADJHOURS, 0 NPFADJHOURS, '1' SERIALNO, '1' PAGENO, '1' PAGESERIALNO, '' REMARKS, 
            SYSDATE LASTMODIFIED, 'SWT' USERNAME, SYS_GUID() SYSROWID, 'WPS' MODULE, 
            TO_CHAR(TO_DATE(ATTENDATE,'DD/MM/YYYY'),'YYYYMMDD')||'/'||DECODE(A.SHIFT,'A','1','A1','1','A2','1','B','2','B1','2','B2','2','3')||'/'||B.SECTIONCODE BOOKNO, 'MANUAL UPLOAD' ATTENDANCETAG, B.UNITCODE, 
            A.SPELLHRS_1 SPELL1, A.SPELLHRS_2 SPELL2, CASE WHEN NVL(A.OTHOURS,0) >0 THEN 'O' ELSE 'P' END STATUSCODE, 0 OEPF, 0 OENPF 
            FROM GBL_WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C
            WHERE B.COMPANYCODE = lv_Master.COMPANYCODE AND B.DIVISIONCODE = lv_Master.DIVISIONCODE
              AND A.TOKENNO=B.TOKENNO
              and C.COMPANYCODE = lv_Master.COMPANYCODE AND C.DIVISIONCODE = lv_Master.DIVISIONCODE 
              AND A.DEPARTMENT = C.DEPARTMENTCODE AND LPAD(A.SECTION,4,'0') = C.SECTIONCODE AND LPAD(A.OCCUPATION,3,'0') = C.OCCUPATIONCODE;
--        END LOOP


--            lv_Sql := ' INSERT INTO WPSATTENDANCEDAYWISE ( '||chr(10)
--                ||' COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DATEOFATTENDANCE, DEPARTMENTCODE, SECTIONCODE, '||chr(10) 
--                ||' PARENTSHIFTCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, '||chr(10)  
--                ||' ISDAYOFF, SPELLTYPE, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, OVERTIMEHOURS, HOLIDAYHOURS, '||chr(10) 
--                ||' STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, NPFADJHOURS, SERIALNO, PAGENO, PAGESERIALNO, REMARKS, '||chr(10) 
--                ||' LASTMODIFIED, USERNAME, SYSROWID, MODULE, '||chr(10) 
--                ||' BOOKNO, ATTENDANCETAG, UNITCODE, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF) '||chr(10) 

--            SELECT B.COMPANYCODE, B.DIVISIONCODE, '2019-2020' YEARCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, TO_DATE(ATTENDATE,'DD/MM/YYYY') DATEOFATTENDANCE, 
--            A.DEPARTMENT DEPARTMENTCODE, B.SECTIONCODE,   
--            B.GROUPCODE PARENTSHIFTCODE, DECODE(A.SHIFT,'A','1','A1','1','A2','1','B','2','B1','2','B2','2','3') SHIFTCODE, B.WORKERSERIAL, A.TOKENNO, B.WORKERCATEGORYCODE, C.OCCUPATIONCODE, C.WORKERTYPECODE,  
--            'N' ISDAYOFF, 'SPELL 1' SPELLTYPE, (NVL(A.SPELLHRS_1,0)+NVL(SPELLHRS_1,0)) ATTENDANCEHOURS, '' MACHINECODE1, '' MACHINECODE2, '' LOOMCODE, NVL(A.OTHOURS,0) OVERTIMEHOURS, 0 HOLIDAYHOURS, 
--            0 STATUTORYHOURS, 0 NIGHTALLOWANCEHOURS, 0 PFADJHOURS, 0 NPFADJHOURS, '1' SERIALNO, '1' PAGENO, '1' PAGESERIALNO, '' REMARKS, 
--            SYSDATE LASTMODIFIED, 'SWT' USERNAME, SYS_GUID() SYSROWID, 'WPS' MODULE, 
--            TO_CHAR(TO_DATE(ATTENDATE,'DD/MM/YYYY'),'YYYYMMDD')||'/'||DECODE(A.SHIFT,'A','1','A1','1','A2','1','B','2','B1','2','B2','2','3')||'/'||B.SECTIONCODE BOOKNO, 'MANUAL UPLOAD' ATTENDANCETAG, B.UNITCODE, 
--            A.SPELLHRS_1 SPELL1, A.SPELLHRS_2 SPELL2, 'P' STATUSCODE, 0 OEPF, 0 OENPF 
--            FROM GBL_WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C
--            WHERE B.COMPANYCODE = lv_Master.COMPANYCODE AND B.DIVISIONCODE = lv_Master.DIVISIONCODE
--              AND A.TOKENNO=B.TOKENNO
--              and C.COMPANYCODE = lv_Master.COMPANYCODE AND C.DIVISIONCODE = lv_Master.DIVISIONCODE 
--              AND A.DEPARTMENT = C.DEPARTMENTCODE AND LPAD(A.SECTION,4,'0') = C.SECTIONCODE AND LPAD(A.OCCUPATION,3,'0') = C.OCCUPATIONCODE;

        
        delete from gbl_WPSATTENDANCECSVRAWDATA;
        commit;   
      
           
     
 
 
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCEDISPUT_B4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_ATTENDANCEDISPUT_B4SAVE
is
lv_cnt                  number;
lv_result               varchar2(100);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDISPUT%rowtype;
lv_bookcode             varchar2(50);
lv_disput               varchar2(50) :='';
lv_disputmsg            varchar2(100):='';
lv_dataCnt              number;
lv_atthours             number;
lv_gbl_atthours         number;
lv_nightapplicable      varchar2(2);


begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSATTENDANCEDISPUT
    WHERE ROWNUM<=1;
    
    select count(*)
    into lv_cnt
    from GBL_WPSATTENDANCEDISPUT;
    
    IF NVL(lv_cnt,0)=0 THEN
      lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark)); 
    END IF;
    
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;
    
   
        FOR C IN (SELECT * FROM GBL_WPSATTENDANCEDISPUT WHERE STATUS='Y' AND ISLOCKED='N')
        LOOP
            SELECT NVL(MAX(BOOKNO),fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS ATTENDANCE',TO_CHAR(lv_Master.DATEOFATTENDANCE,'DD/MM/YYYY')))
            INTO lv_bookcode
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SECTIONCODE=C.SECTIONCODE
                AND SHIFTCODE=C.SHIFTCODE;
                --AND ROWNUM=1;
                
            UPDATE GBL_WPSATTENDANCEDISPUT SET BOOKNO=lv_bookcode,STATUS='CURRECTED',ISLOCKED='Y'
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SECTIONCODE=C.SECTIONCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
            
              -- Checking if one worker work more then 8 hours
           BEGIN
                SELECT SUM(NVL(ATTENDANCEHOURS,0)) INTO lv_atthours
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE;
                    --AND SHIFTCODE!=C.SHIFTCODE;
                
                SELECT SUM(NVL(ATTENDANCEHOURS,0)) INTO lv_gbl_atthours
                FROM GBL_WPSATTENDANCEDISPUT
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
           EXCEPTION
                WHEN OTHERS THEN
                    lv_atthours:=0;
           END;
           
           SELECT NVL(NSAAPPLICABLE,'N') into LV_NIGHTAPPLICABLE FROM WPSDEPARTMENTMASTER WHERE COMPANYCODE=C.COMPANYCODE AND DIVISIONCODE=C.DIVISIONCODE AND DEPARTMENTCODE=C.DEPARTMENTCODE;
           
           IF LV_NIGHTAPPLICABLE='Y' AND C.SHIFTCODE='3' THEN
               IF lv_atthours + lv_gbl_atthours > 8.5 THEN
                    lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                    
                    
                    UPDATE GBL_WPSATTENDANCEDISPUT SET REMARKS='NORMAL ATTEDENCE CANNOT BE GREATER THEN 8.5 HOURS.',STATUS='NOT CURRECTED',ISLOCKED='N'
                    WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;    
               END IF;
           ELSE
               IF lv_atthours + lv_gbl_atthours > 8 THEN
                    lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                    
                    
                    UPDATE GBL_WPSATTENDANCEDISPUT SET REMARKS='NORMAL ATTEDENCE CANNOT BE GREATER THEN 8 HOURS.',STATUS='NOT CURRECTED',ISLOCKED='N'
                    WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;    
               END IF;
           END IF;
           
--           SELECT COUNT(1) INTO lv_cnt 
--            FROM WPSATTENDANCEDAYWISE
--            WHERE COMPANYCODE=C.COMPANYCODE
--                AND DIVISIONCODE=C.DIVISIONCODE
--                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
--                AND SHIFTCODE!=C.SHIFTCODE
--                AND WORKERSERIAL=C.WORKERSERIAL;
        
        --- Checking if there have more then one row where spell1 greater then 0 
        lv_cnt:=0;
        IF C.SPELL1>0 THEN
            SELECT COUNT(1) INTO lv_cnt
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SHIFTCODE=C.SHIFTCODE
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL1>0;
        END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||', SECTIONCODE '||SECTIONCODE||' AND SHIFTCODE '||SHIFTCODE||'. SPELL1 GREATER THEN ZERO'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL1>0;
                
                UPDATE GBL_WPSATTENDANCEDISPUT SET REMARKS= lv_disputmsg,STATUS='NOT CURRECTED',ISLOCKED='N'
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SPELL1>0;    
           END IF;
           
           --- Checking if there have more then one row where spell2 greater then 0 
        lv_cnt:=0;
        IF C.SPELL2>0 THEN
            SELECT COUNT(1) INTO lv_cnt
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SHIFTCODE=C.SHIFTCODE
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL2>0;
        END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||', SECTIONCODE '||SECTIONCODE||' AND SHIFTCODE '||SHIFTCODE||'. SPELL2 GREATER THEN ZERO'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL2>0;
                
            UPDATE GBL_WPSATTENDANCEDISPUT SET REMARKS= lv_disputmsg,STATUS='NOT CURRECTED',ISLOCKED='N'
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SPELL2>0;  
           END IF;
           
           -- Checking if one worker attendance and OT more then 23.5 hours
           BEGIN
                SELECT SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) INTO lv_atthours
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE;
           EXCEPTION
                WHEN OTHERS THEN
                    lv_atthours:=0;
           END;
                SELECT SUM(NVL(ATTENDANCEHOURS,0)+NVL(C.OVERTIMEHOURS,0)) INTO lv_gbl_atthours
                FROM GBL_WPSATTENDANCEDISPUT
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL; 
           IF lv_atthours + lv_gbl_atthours > 23.5 THEN
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
                UPDATE GBL_WPSATTENDANCEDISPUT SET REMARKS='NORMAL ATTEDENCE AND OT CANNOT BE GREATER THEN 23.5 HOURS.',STATUS='NOT CURRECTED',ISLOCKED='N'
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL; 
           END IF;
           
           ---if ALL VALIDATION PASS CURRECTLY THEN--
--           IF C.STATUS='CURRECTED' THEN
--            INSERT INTO WPSATTENDANCEDAYWISE(COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
--                DATEOFATTENDANCE, DEPARTMENTCODE, SECTIONCODE, PARENTSHIFTCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, 
--                WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, HELPERNO, SARDERNO, ISDAYOFF, SPELLTYPE, SPELLHOURS,
--                DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, OVERTIMEHOURS, HOLIDAYHOURS, 
--                LAYOFFHOURS, FBKHOURS, STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, NPFADJHOURS, SERIALNO, PAGENO,
--                PAGESERIALNO, REMARKS, LASTMODIFIED, USERNAME, SYSROWID, MODULE, INCENTIVE, NPF_ADJ, PF_ADJ, VBASIC,
--                OT_AMOUNT, BOOKNO, STL_ENCASH, ATTENDANCETAG, UNITCODE, LINENO, OTHR_DEDN, FINE, 
--                BONUS, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF, EXTHRS)
--            SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
--                DATEOFATTENDANCE, DEPARTMENTCODE, SECTIONCODE, PARENTSHIFTCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, 
--                WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, HELPERNO, SARDERNO, ISDAYOFF, SPELLTYPE, SPELLHOURS,
--                DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, OVERTIMEHOURS, HOLIDAYHOURS, 
--                LAYOFFHOURS, FBKHOURS, STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, NPFADJHOURS, SERIALNO, PAGENO,
--                PAGESERIALNO, REMARKS, LASTMODIFIED, USERNAME, SYSROWID, MODULE, INCENTIVE, NPF_ADJ, PF_ADJ, VBASIC,
--                OT_AMOUNT, BOOKNO, STL_ENCASH, ATTENDANCETAG, UNITCODE, LINENO, OTHR_DEDN, FINE, 
--                BONUS, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF, EXTHRS
--            FROM WPSATTENDANCEDISPUT
--            WHERE COMPANYCODE=C.COMPANYCODE
--                    AND DIVISIONCODE=C.DIVISIONCODE
--                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
--                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
--                    AND SECTIONCODE=C.SECTIONCODE
--                    AND SHIFTCODE=C.SHIFTCODE
--                    AND WORKERSERIAL=C.WORKERSERIAL;           
--           END IF;
        END LOOP;
        
        INSERT INTO WPSATTENDANCEDAYWISE (COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
                    DATEOFATTENDANCE, DEPARTMENTCODE, SECTIONCODE, GROUPCODE, SHIFTCODE, WORKERSERIAL, 
                    TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, HELPERNO, SARDERNO, ISDAYOFF, 
                    SPELLTYPE, SPELLHOURS, DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, 
                    OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, 
                    NPFADJHOURS, SERIALNO, PAGENO, PAGESERIALNO,  USERNAME, SYSROWID, MODULE, INCENTIVE, 
                    NPF_ADJ, PF_ADJ, VBASIC, OT_AMOUNT, BOOKNO, STL_ENCASH, ATTENDANCETAG, UNITCODE, LINENO, OTHR_DEDN, FINE, 
                    BONUS, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF, OTH_HRS)      
        SELECT A.COMPANYCODE, A.DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
                    DATEOFATTENDANCE, A.DEPARTMENTCODE, A.SECTIONCODE, GROUPCODE, SHIFTCODE, WORKERSERIAL, 
                    TOKENNO, WORKERCATEGORYCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE, HELPERNO, SARDERNO, ISDAYOFF, 
                    SPELLTYPE, SPELLHOURS, DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, MACHINECODE2, LOOMCODE, 
                    OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STATUTORYHOURS, NIGHTALLOWANCEHOURS, PFADJHOURS, 
                    NPFADJHOURS, SERIALNO, PAGENO, PAGESERIALNO,  A.USERNAME, A.SYSROWID, MODULE, INCENTIVE, 
                    NPF_ADJ, PF_ADJ, VBASIC, OT_AMOUNT, BOOKNO, STL_ENCASH, ATTENDANCETAG, UNITCODE, LINENO, OTHR_DEDN, FINE, 
                    BONUS, SPELL1, SPELL2, STATUSCODE, OEPF, OENPF, OTH_HRS
        FROM GBL_WPSATTENDANCEDISPUT A,WPSOCCUPATIONMAST B
        WHERE A.COMPANYCODE=B.COMPANYCODE
            AND A.DIVISIONCODE=B.DIVISIONCODE
            AND A.DEPARTMENTCODE=B.DEPARTMENTCODE
            AND A.SECTIONCODE=B.SECTIONCODE
            AND A.OCCUPATIONCODE=B.OCCUPATIONCODE
            AND STATUS='CURRECTED';
    
--    if nvl(lv_Master.operationmode,'NA') = 'A' then
--        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS ATTENDANCE',TO_CHAR(lv_Master.DATEOFATTENDANCE,'DD/MM/YYYY')) 
--        into lv_bookcode
--        from dual;
--            
--        update GBL_WPSATTENDANCEDAYWISE
--        set BOOKNO = lv_bookcode;
--      end if;
      --lv_result:= lv_result ||'  '|| lv_disput; 
         INSERT INTO sys_gbl_procoutput_info SYS_SAVE_INFO
         VALUES (lv_disput);
      
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCEENTRY_B4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_ATTENDANCEENTRY_B4SAVE
is
lv_cnt                  number;
lv_result               varchar2(100);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_bookcode             varchar2(50);
lv_disput               varchar2(50) :='';
lv_disputmsg            varchar2(200):='';
lv_dataCnt              number;
lv_atthours             number;
lv_gbl_atthours         number;
LV_NIGHTAPPLICABLE      VARCHAR2(2);
lv_TOKENNOS             VARCHAR2(20000):='';

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSATTENDANCEDAYWISE
    WHERE ROWNUM<=1;
    
    select count(*)
    into lv_cnt
    from GBL_WPSATTENDANCEDAYWISE;
    
    IF NVL(lv_cnt,0)=0 THEN
      lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark)); 
    END IF;
    
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;
    
    -- CHECKING IF MASTER ACTIVE IS SELECTED  AND TAKE PART IN WAGES IS CHECKED 
        SELECT WM_CONCAT(B.TOKENNO) INTO lv_TOKENNOS
        FROM WPSWORKERMAST A,GBL_WPSATTENDANCEDAYWISE B
        WHERE A.WORKERSTATUS <>'ACTIVE' 
            AND A.ACTIVE<>'Y' 
            AND A.TAKEPARTINWAGES<>'Y'
            AND A.COMPANYCODE=B.COMPANYCODE
            AND A.DIVISIONCODE=B.DIVISIONCODE
            AND A.WORKERSERIAL=B.WORKERSERIAL;
            
        IF LENGTH(lv_TOKENNOS) >0 THEN
            lv_error_remark := 'Validation Failure : [Master is not correct of following token no:'||lv_TOKENNOS||' ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
     -- CHECKING IF RATE TABLE HAVE DATA
     
     SELECT WM_CONCAT(TOKENNO) INTO lv_TOKENNOS
     FROM
     (
         SELECT TOKENNO FROM GBL_WPSATTENDANCEDAYWISE
         MINUS
         SELECT TOKENNO FROM WPSWORKERWISERATEUPDATE
     );
    
    IF LENGTH(lv_TOKENNOS) >0 THEN
            lv_error_remark := 'Validation Failure : [Rate is not add of following token no:'||lv_TOKENNOS||' ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;
    
    --- UPDATE STL ENTRY -----
            UPDATE GBL_WPSATTENDANCEDAYWISE SET STATUSCODE='S',SPELL1=0,SPELL2=0,OVERTIMEHOURS=NVL(OVERTIMEHOURS,0)+NVL(ATTENDANCEHOURS,0), ATTENDANCEHOURS=0
            WHERE WORKERSERIAL IN ( 
                        SELECT WORKERSERIAL FROM WPSSTLENTRYDETAILS 
                        WHERE COMPANYCODE=lv_Master.COMPANYCODE
                            AND DIVISIONCODE=lv_Master.DIVISIONCODE
                            AND LEAVECODE='STL'
                            AND LEAVEDATE=lv_Master.DATEOFATTENDANCE);
                            
        --CHECK LEAVE IS EXIEST OR NOT
            lv_cnt:=0;
            SELECT COUNT(1) INTO lv_cnt FROM GBL_WPSATTENDANCEDAYWISE
            WHERE WORKERSERIAL IN ( 
                        SELECT WORKERSERIAL FROM WPSSTLENTRYDETAILS 
                        WHERE COMPANYCODE=lv_Master.COMPANYCODE
                            AND DIVISIONCODE=lv_Master.DIVISIONCODE
                            AND LEAVECODE IN ('CS','TD','OL')
                            AND LEAVEDATE=lv_Master.DATEOFATTENDANCE
                      );
            IF lv_cnt>0 THEN
                lv_error_remark := 'Validation Failure : [LEAVE IS EXIST.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;
    
    --if nvl(lv_Master.operationmode,'NA') = 'A' then
        FOR C IN (SELECT * FROM GBL_WPSATTENDANCEDAYWISE)
        LOOP
        
            -- Checking if one worker work more then 8 hours
           BEGIN
                SELECT SUM(NVL(ATTENDANCEHOURS,0)) INTO lv_atthours
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE;
                    --AND SHIFTCODE!=C.SHIFTCODE;
           EXCEPTION
                WHEN OTHERS THEN
                    lv_atthours:=0;
           END;
           
             SELECT SUM(NVL(ATTENDANCEHOURS,0)) INTO lv_gbl_atthours
                FROM GBL_WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE;
                    
             SELECT NVL(NSAAPPLICABLE,'N') into LV_NIGHTAPPLICABLE FROM WPSDEPARTMENTMASTER WHERE COMPANYCODE=C.COMPANYCODE AND DIVISIONCODE=C.DIVISIONCODE AND DEPARTMENTCODE=C.DEPARTMENTCODE; 
             
           IF LV_NIGHTAPPLICABLE='Y' AND C.SHIFTCODE='3' THEN
                IF lv_atthours + lv_gbl_atthours > 8.5 THEN
                    lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                    
                    SELECT 'NORMAL ATTEDENCE CANNOT BE GREATER THEN 8.5 HOURS.'||Rtrim(Xmlagg (Xmlelement (e,'SECTION : '||SECTIONCODE||' SHIFT :'||SHIFTCODE||';')).extract  ( '//text()' ), ';')||'. Total hours :'||SUM(NVL(ATTENDANCEHOURS,0))||'.'--'NORMAL ATTEDENCE CANNOT BE GREATER THEN 8 HOURS.'
                    INTO lv_disputmsg
                    FROM WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL
                        AND NVL(ATTENDANCEHOURS,0)>0
                    GROUP BY WORKERSERIAL;
                        
                SELECT COUNT(1) INTO lv_dataCnt 
                FROM WPSATTENDANCEDISPUT
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
                    
                IF lv_dataCnt=0 THEN       
                              
                    INSERT INTO WPSATTENDANCEDISPUT(OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF,
                                     WORKERTYPECODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, 
                                     FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, 
                                     LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, 
                                     OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                                     PFADJHOURS,OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, 
                                     TOKENNO, UNITCODE, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARKS)
                    SELECT OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF, WORKERTYPECODE, WORKERSERIAL, 
                            WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, 
                            HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, 
                            NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                            PFADJHOURS,OTH_HRS,SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, TOKENNO, UNITCODE, 
                            COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                    FROM GBL_WPSATTENDANCEDAYWISE
                        WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;
                END IF; 
                   
                DELETE FROM GBL_WPSATTENDANCEDAYWISE
                   WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;
               END IF;
           
           ELSE                    
               IF lv_atthours + lv_gbl_atthours > 8 THEN
                    lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                    
                    SELECT 'NORMAL ATTEDENCE CANNOT BE GREATER THEN 8 HOURS.'||Rtrim(Xmlagg (Xmlelement (e,'SECTION : '||SECTIONCODE||' SHIFT :'||SHIFTCODE||';')).extract  ( '//text()' ), ';')||'. Total hours :'||SUM(NVL(ATTENDANCEHOURS,0))||'.'--'NORMAL ATTEDENCE CANNOT BE GREATER THEN 8 HOURS.'
                    INTO lv_disputmsg
                    FROM WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL
                        AND NVL(ATTENDANCEHOURS,0)>0
                    GROUP BY WORKERSERIAL;
                        
                SELECT COUNT(1) INTO lv_dataCnt 
                FROM WPSATTENDANCEDISPUT
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
                    
                IF lv_dataCnt=0 THEN       
                              
                    INSERT INTO WPSATTENDANCEDISPUT(OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF,
                                     WORKERTYPECODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, 
                                     FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, 
                                     LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, 
                                     OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                                     PFADJHOURS,OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, 
                                     TOKENNO, UNITCODE, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARKS)
                    SELECT OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF, WORKERTYPECODE, WORKERSERIAL, 
                            WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, 
                            HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, 
                            NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                            PFADJHOURS,OTH_HRS,SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, TOKENNO, UNITCODE, 
                            COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                    FROM GBL_WPSATTENDANCEDAYWISE
                        WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;
                END IF; 
                   
                DELETE FROM GBL_WPSATTENDANCEDAYWISE
                   WHERE COMPANYCODE=C.COMPANYCODE
                        AND DIVISIONCODE=C.DIVISIONCODE
                        AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                        AND DEPARTMENTCODE=C.DEPARTMENTCODE
                        AND SECTIONCODE=C.SECTIONCODE
                        AND SHIFTCODE=C.SHIFTCODE
                        AND WORKERSERIAL=C.WORKERSERIAL;
               END IF;
          END IF;
           
--           SELECT COUNT(1) INTO lv_cnt 
--            FROM WPSATTENDANCEDAYWISE
--            WHERE COMPANYCODE=C.COMPANYCODE
--                AND DIVISIONCODE=C.DIVISIONCODE
--                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
--                AND SHIFTCODE!=C.SHIFTCODE
--                AND WORKERSERIAL=C.WORKERSERIAL;
        
        --- Checking if there have more then one row where spell1 greater then 0 
        lv_cnt:=0;
        
        IF C.SPELL1>0 THEN
            SELECT COUNT(1) INTO lv_cnt
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SHIFTCODE=C.SHIFTCODE
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL1>0;
        END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||', SECTIONCODE '||SECTIONCODE||' AND SHIFTCODE '||SHIFTCODE||'. SPELL1 GREATER THEN ZERO'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL1>0;
                
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;

            IF lv_dataCnt = 0 THEN 
                INSERT INTO WPSATTENDANCEDISPUT(OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF,
                                 WORKERTYPECODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, 
                                 FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, 
                                 LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, 
                                 OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                                 PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, 
                                 TOKENNO, UNITCODE, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARKS)
                SELECT OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF, WORKERTYPECODE, WORKERSERIAL, 
                        WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, 
                        HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, 
                        NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                        PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, TOKENNO, UNITCODE, 
                        COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;
             
            DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;   
           END IF;
           
           --- Checking if there have more then one row where spell2 greater then 0 
           lv_cnt:=0;
        
        IF C.SPELL2>0 THEN
            SELECT COUNT(1) INTO lv_cnt
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SHIFTCODE=C.SHIFTCODE
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL2>0;
        END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||', SECTIONCODE '||SECTIONCODE||' AND SHIFTCODE '||SHIFTCODE||'. SPELL2 GREATER THEN ZERO'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SECTIONCODE!=C.SECTIONCODE
                AND SPELL2>0;
                
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;

            IF lv_dataCnt = 0 THEN 
                INSERT INTO WPSATTENDANCEDISPUT(OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF,
                                 WORKERTYPECODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, 
                                 FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, 
                                 LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, 
                                 OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                                 PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, 
                                 TOKENNO, UNITCODE, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARKS)
                SELECT OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF, WORKERTYPECODE, WORKERSERIAL, 
                        WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, 
                        HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, 
                        NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                        PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, TOKENNO, UNITCODE, 
                        COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF; 
            DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;   
           END IF;
           
           -- Checking if one worker attendance and OT more then 23.5 hours
           BEGIN
                SELECT SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) INTO lv_atthours
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE||SHIFTCODE!=C.SECTIONCODE||C.SHIFTCODE;
                    --AND SHIFTCODE!=C.SHIFTCODE;
           EXCEPTION
                WHEN OTHERS THEN
                    lv_atthours:=0;
           END;
           
           SELECT SUM(NVL(ATTENDANCEHOURS,0)+NVL(C.OVERTIMEHOURS,0)) INTO lv_gbl_atthours
                FROM GBL_WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE;
            
           SELECT SUM(NVL(ATTENDANCEHOURS,0)+NVL(C.OVERTIMEHOURS,0)) INTO lv_gbl_atthours
                FROM GBL_WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE;

                
           IF lv_atthours + lv_gbl_atthours > 23.5 THEN
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
                SELECT 'NORMAL ATTEDENCE AND OT CANNOT BE GREATER THEN 23.5 HOURS.'||Rtrim(Xmlagg (Xmlelement (e,'SECTION : '||SECTIONCODE||' SHIFT :'||SHIFTCODE||';')).extract  ( '//text()' ), ';')
                INTO lv_disputmsg
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL
               GROUP BY WORKERSERIAL;
                    
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
                
            IF lv_dataCnt=0 THEN       
                          
                INSERT INTO WPSATTENDANCEDISPUT(OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF,
                                 WORKERTYPECODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, 
                                 FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, 
                                 LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, 
                                 OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                                 PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, 
                                 TOKENNO, UNITCODE, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARKS)
                SELECT OENPF, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, BONUS, BOOKNO, STATUSCODE, OEPF, WORKERTYPECODE, WORKERSERIAL, 
                        WORKERCATEGORYCODE, VBASIC, USERNAME, DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, 
                        HOLIDAYHOURS, INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, NIGHTALLOWANCEHOURS, 
                        NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS, PAGENO, PAGESERIALNO, GROUPCODE, PF_ADJ, 
                        PFADJHOURS, OTH_HRS, SARDERNO, SERIALNO, SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, TOKENNO, UNITCODE, 
                        COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE, DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;   
            DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL; 
           END IF;
           
        
        END LOOP;
    --end if;
    
    if nvl(lv_Master.operationmode,'NA') = 'A' then
--        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS ATTENDANCE',TO_CHAR(lv_Master.DATEOFATTENDANCE,'DD/MM/YYYY')) 
--        into lv_bookcode
--        from dual;
        lv_bookcode:=TO_CHAR(lv_Master.DATEOFATTENDANCE,'YYYYMMDD')||'/'||lv_Master.SHIFTCODE||'/'||lv_Master.SECTIONCODE;
            
        update GBL_WPSATTENDANCEDAYWISE
        set BOOKNO = lv_bookcode;
      end if;
      --lv_result:= lv_result ||'  '|| lv_disput; 
         INSERT INTO sys_gbl_procoutput_info SYS_SAVE_INFO
         VALUES ('SECTION : '||lv_Master.SECTIONCODE||'  '||NVL(lv_disput,''));
      
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCEENTRY_BAK;

CREATE OR REPLACE PROCEDURE PRCWPS_ATTENDANCEENTRY_BAK
is
lv_cnt                  number;
lv_result               varchar2(100);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_bookcode             varchar2(50);
lv_disput               varchar2(50) :='';
lv_disputmsg            varchar2(100):='';
lv_dataCnt              number;

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSATTENDANCEDAYWISE
    WHERE ROWNUM<=1;
    
    select count(*)
    into lv_cnt
    from GBL_WPSATTENDANCEDAYWISE;
    
    IF NVL(lv_cnt,0)=0 THEN
      lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark)); 
    END IF;
    
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;
    
    --if nvl(lv_Master.operationmode,'NA') = 'A' then
        FOR C IN (SELECT * FROM GBL_WPSATTENDANCEDAYWISE)
        LOOP
            SELECT COUNT(1) INTO lv_cnt 
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL
                AND SECTIONCODE!=C.SECTIONCODE;
                
           IF lv_cnt > 0 THEN
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
                SELECT 'DATA PRESENT AT SAME DATE IN DEPARTMENTCODE '||DEPARTMENTCODE||',SECTIONCODE '||SECTIONCODE||' AND SHIFTCODE '||SHIFTCODE||'.'
                INTO lv_disputmsg
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
                    
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
                
            IF lv_dataCnt=0 THEN       
                          
                INSERT INTO WPSATTENDANCEDISPUT(WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARK)
                SELECT WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
               
               DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;    
           END IF;
           
           IF C.STATUSCODE='P' THEN
               SELECT COUNT(1) INTO lv_cnt 
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND SHIFTCODE!=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND STATUSCODE='P';
           ELSE
                lv_cnt:=0;
           END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||' AND SHIFTCODE '||SHIFTCODE||'. NORMAL ATTENDANCE NOT POSSIBLE'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE!=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
                
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;

            IF lv_dataCnt = 0 THEN 
                INSERT INTO WPSATTENDANCEDISPUT(WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARK)
                SELECT WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
               
               DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;    
           END IF;
        END LOOP;
    --end if;
    
    if nvl(lv_Master.operationmode,'NA') = 'A' then
        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS ATTENDANCE',TO_CHAR(lv_Master.DATEOFATTENDANCE,'DD/MM/YYYY')) 
        into lv_bookcode
        from dual;
            
        update GBL_WPSATTENDANCEDAYWISE
        set BOOKNO = lv_bookcode;
      end if;
      --lv_result:= lv_result ||'  '|| lv_disput; 
         INSERT INTO sys_gbl_procoutput_info SYS_SAVE_INFO
         VALUES (lv_disput);
      
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCEENTRY_NEW;

CREATE OR REPLACE PROCEDURE PRCWPS_ATTENDANCEENTRY_NEW
is
lv_cnt                  number;
lv_result               varchar2(100);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_bookcode             varchar2(50);
lv_disput               varchar2(50) :='';
lv_disputmsg            varchar2(100):='';
lv_dataCnt              number;
lv_attnhour             number;

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSATTENDANCEDAYWISE
    WHERE ROWNUM<=1;
    
    select count(*)
    into lv_cnt
    from GBL_WPSATTENDANCEDAYWISE;
    
    IF NVL(lv_cnt,0)=0 THEN
      lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark)); 
    END IF;
    
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;
    
    --if nvl(lv_Master.operationmode,'NA') = 'A' then
        FOR C IN (SELECT * FROM GBL_WPSATTENDANCEDAYWISE)
        LOOP
        
            --- Checking Total Hours not be more then 8 -----
            BEGIN
                SELECT SUM(NVL(ATTENDANCEHOURS,0)) INTO lv_attnhour 
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND SECTIONCODE!=C.SECTIONCODE
                    AND SHIFTCODE!=C.SHIFTCODE;
            EXCEPTION
             WHEN OTHERS THEN
                lv_attnhour:=0;
            END;
            
--            SELECT COUNT(1) INTO lv_cnt
--            FROM WPSATTENDANCEDAYWISE
--            WHERE COMPANYCODE=C.COMPANYCODE
--                AND DIVISIONCODE=C.DIVISIONCODE
--                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
--                AND SHIFTCODE=C.SHIFTCODE
--                AND WORKERSERIAL=C.WORKERSERIAL
--                AND SECTIONCODE!=C.SECTIONCODE;
                
           IF lv_attnhour+nvl(C.ATTENDANCEHOURS,0)>8 THEN
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
                SELECT 'ATTANDANCE HOURS CONNOT BE MORE THEN 8.'
                INTO lv_disputmsg
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
                    
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
                
            IF lv_dataCnt=0 THEN       
                          
                INSERT INTO WPSATTENDANCEDISPUT(WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARK)
                SELECT WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
               
               DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;    
           END IF;
           
           IF C.STATUSCODE='P' THEN
               SELECT COUNT(1) INTO lv_cnt 
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND SHIFTCODE!=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL
                    AND STATUSCODE='P';
           ELSE
                lv_cnt:=0;
           END IF;
                
          IF lv_cnt > 0 THEN
          
                lv_disput:= ' BUT DATA HAVE SOME DISPUT';
                
            SELECT 'WORKER PRESENT IN DEPARTMENTCODE '||DEPARTMENTCODE||' AND SHIFTCODE '||SHIFTCODE||'. NORMAL ATTENDANCE NOT POSSIBLE'
            INTO lv_disputmsg
            FROM WPSATTENDANCEDAYWISE
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND SHIFTCODE!=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;
                
            SELECT COUNT(1) INTO lv_dataCnt 
            FROM WPSATTENDANCEDISPUT
            WHERE COMPANYCODE=C.COMPANYCODE
                AND DIVISIONCODE=C.DIVISIONCODE
                AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                AND DEPARTMENTCODE=C.DEPARTMENTCODE
                AND SHIFTCODE=C.SHIFTCODE
                AND WORKERSERIAL=C.WORKERSERIAL;

            IF lv_dataCnt = 0 THEN 
                INSERT INTO WPSATTENDANCEDISPUT(WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE, REMARK)
                SELECT WORKERTYPECODE, SPELL1, SPELL2, ATTENDANCEHOURS, ATTENDANCETAG, 
                    BONUS, BOOKNO, STATUSCODE, WORKERSERIAL, WORKERCATEGORYCODE, VBASIC, USERNAME, UNITCODE, TOKENNO,
                    DEDUCTIONHOURS, FBKHOURS, FINE, FORTNIGHTENDDATE, FORTNIGHTSTARTDATE, HELPERNO, HOLIDAYHOURS, 
                    INCENTIVE, ISDAYOFF, LAYOFFHOURS, LINENO, LOOMCODE, MACHINECODE1, MACHINECODE2, MODULE, 
                    NIGHTALLOWANCEHOURS, NPF_ADJ, NPFADJHOURS, OCCUPATIONCODE, OT_AMOUNT, OTHR_DEDN, OVERTIMEHOURS,
                    PAGENO, PAGESERIALNO, PARENTSHIFTCODE, PF_ADJ, PFADJHOURS, REMARKS, SARDERNO, SERIALNO,
                    SPELLHOURS, SPELLTYPE, STATUTORYHOURS, STL_ENCASH, SYSROWID, COMPANYCODE, DIVISIONCODE, DATEOFATTENDANCE,
                    DEPARTMENTCODE, YEARCODE, SECTIONCODE, SHIFTCODE,lv_disputmsg
                FROM GBL_WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
               
               DELETE FROM GBL_WPSATTENDANCEDAYWISE
               WHERE COMPANYCODE=C.COMPANYCODE
                    AND DIVISIONCODE=C.DIVISIONCODE
                    AND DATEOFATTENDANCE=C.DATEOFATTENDANCE
                    AND DEPARTMENTCODE=C.DEPARTMENTCODE
                    AND SECTIONCODE=C.SECTIONCODE
                    AND SHIFTCODE=C.SHIFTCODE
                    AND WORKERSERIAL=C.WORKERSERIAL;
            END IF;    
           END IF;
        END LOOP;
    --end if;
    
    if nvl(lv_Master.operationmode,'NA') = 'A' then
        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS ATTENDANCE',TO_CHAR(lv_Master.DATEOFATTENDANCE,'DD/MM/YYYY')) 
        into lv_bookcode
        from dual;
            
        update GBL_WPSATTENDANCEDAYWISE
        set BOOKNO = lv_bookcode;
      end if;
      --lv_result:= lv_result ||'  '|| lv_disput; 
         INSERT INTO sys_gbl_procoutput_info SYS_SAVE_INFO
         VALUES (lv_disput);
      
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCE_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_ATTENDANCE_B4SAVE" 
is
lv_cnt                  number;
lv_cnt1                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);  
lv_AttnTag              varchar2(50); 
  

begin

    lv_result:='#SUCCESS#';
        
        SELECT DISTINCT ATTENDANCETAG INTO lv_AttnTag FROM GBL_WPSATTENDANCEDAYWISE WHERE ATTENDANCETAG IS NOT NULL;

        select *
        into lv_Master
        from GBL_WPSATTENDANCEDAYWISE
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_WPSATTENDANCEDAYWISE;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
       
        IF lv_Master.DATEOFATTENDANCE > TRUNC(SYSDATE) THEN
            lv_error_remark := 'Validation Failure : [Date of attendance cannot be greater than current date.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
 /*       
        IF  lv_AttnTag <> 'MANUAL' and NVL(lv_cnt,0)> 0 THEN
        
            lv_cnt1 :=0;
            SELECT COUNT(*) 
            INTO lv_cnt1
            FROM
            (
                SELECT DATEOFATTENDANCE,WORKERSERIAL
                FROM WPSATTENDANCEDAYWISE
                WHERE DATEOFATTENDANCE||WORKERSERIAL = lv_Master.DATEOFATTENDANCE||lv_Master.WORKERSERIAL 
             );
             
             IF NVL(lv_cnt,0) <> NVL(lv_cnt1,0) THEN
                lv_error_remark := 'Validation Failure : [Invalid etry!Improper cell value!.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
             END IF;
        
        END IF;
*/
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt :=0;
        SELECT COUNT(*) 
        INTO lv_cnt
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM GBL_WPSATTENDANCEDAYWISE
        GROUP BY DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        HAVING count(*)>1
        );
        
        IF nvl(lv_cnt,0)>0 THEN
               lv_error_remark := 'Validation Failure : [Duplicate TOKENNO : ' ||' You can not save duplicate TOKENNO.]';
               raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt :=0;
        SELECT COUNT(*) 
        INTO lv_cnt
        FROM
        (
            SELECT DISTINCT DEPARTMENTCODE||OCCUPATIONCODE
              FROM GBL_WPSATTENDANCEDAYWISE
             WHERE DEPARTMENTCODE||OCCUPATIONCODE NOT IN
                   (SELECT DISTINCT DEPARTMENTCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST)
        );
        
        IF nvl(lv_cnt,0)>0 THEN
               lv_error_remark := 'Validation Failure : [Invalid Department/Occupation : ' ||' Check Dept/Occu. Code.]';
               raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt1 :=0;
        SELECT COUNT(*) 
        INTO lv_cnt1
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM WPSATTENDANCEDAYWISE
        WHERE DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE IN 
                        (SELECT DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE 
                           FROM GBL_WPSATTENDANCEDAYWISE) 
         );
        
        if nvl(lv_Master.operationmode,'NA') = 'A'  then
           IF nvl(lv_cnt1,0)>0 THEN
                lv_error_remark := 'Validation Failure : [Duplicate TOKENNO : ' ||' DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE Combination already exist.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;   
        END IF;
        
        lv_cnt1 :=0;
        SELECT COUNT(*) 
        INTO lv_cnt1
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM WPSATTENDANCEDAYWISE
        WHERE DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE IN 
                        (SELECT DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE 
                           FROM GBL_WPSATTENDANCEDAYWISE
                          WHERE BOOKNO IS NULL)
         AND ATTENDANCETAG <> 'HD'                 
         );
        
        if nvl(lv_Master.operationmode,'NA') = 'M'  then
           IF nvl(lv_cnt1,0)>0 THEN
                lv_error_remark := 'Validation Failure : [Duplicate NEW TOKENNO : ' ||' DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE Combination already exist.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;   
        END IF; 

        if nvl(lv_Master.operationmode,'NA') = 'A' OR nvl(lv_Master.operationmode,'NA') = 'M' then
             FOR C1 IN (
                        SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                          FROM WPSWAGEDPERIODDECLARATION
                         WHERE TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
                      )
                LOOP
                    UPDATE GBL_WPSATTENDANCEDAYWISE
                       SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                           FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;
                    
                    /*UPDATE GBL_WPSATTENDANCEDAYWISE
                       SET BOOKNO='ATTN/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||SHIFTCODE||'/'||TOKENNO;*/
                    IF lv_AttnTag='MANUAL' THEN
                        UPDATE GBL_WPSATTENDANCEDAYWISE
                           SET BOOKNO='ATTN/MANUAL/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||TOKENNO;
                    ELSE
                        UPDATE GBL_WPSATTENDANCEDAYWISE
                           SET BOOKNO='ATTN/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||TOKENNO;
                    END IF;

                           
                END LOOP;  
                
            UPDATE GBL_WPSATTENDANCEDAYWISE
              SET MODULE='WPS';    
              --COMMIT;
        end if;

--exception when others then
--    lv_error_remark:= lv_error_remark || '#UNSUCC#ESSFULL#';
--    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
end;
/


DROP PROCEDURE PRCWPS_ATTENDANCE_B4SAVE_O;

CREATE OR REPLACE PROCEDURE "PRCWPS_ATTENDANCE_B4SAVE_O" 
is
lv_cnt                  number;
lv_cnt1                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSATTENDANCEDAYWISE%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);  
lv_AttnTag              varchar2(50); 
  

begin

    lv_result:='#SUCCESS#';
        
        SELECT DISTINCT ATTENDANCETAG INTO lv_AttnTag FROM GBL_WPSATTENDANCEDAYWISE WHERE ATTENDANCETAG IS NOT NULL;
        
        select *
        into lv_Master
        from GBL_WPSATTENDANCEDAYWISE
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_WPSATTENDANCEDAYWISE;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
       
        IF lv_Master.DATEOFATTENDANCE > TRUNC(SYSDATE) THEN
            lv_error_remark := 'Validation Failure : [Date of attendance cannot be greater than current date.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
 /*       
        IF  lv_AttnTag <> 'MANUAL' and NVL(lv_cnt,0)> 0 THEN
        
            lv_cnt1 :=0;
            SELECT COUNT(*) 
            INTO lv_cnt1
            FROM
            (
                SELECT DATEOFATTENDANCE,WORKERSERIAL
                FROM WPSATTENDANCEDAYWISE
                WHERE DATEOFATTENDANCE||WORKERSERIAL = lv_Master.DATEOFATTENDANCE||lv_Master.WORKERSERIAL 
             );
             
             IF NVL(lv_cnt,0) <> NVL(lv_cnt1,0) THEN
                lv_error_remark := 'Validation Failure : [Invalid etry!Improper cell value!.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
             END IF;
        
        END IF;
*/
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt :=0;
        SELECT COUNT(*) 
        INTO lv_cnt
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM GBL_WPSATTENDANCEDAYWISE
        GROUP BY DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        HAVING count(*)>1
        );
        
        IF nvl(lv_cnt,0)>0 THEN
               lv_error_remark := 'Validation Failure : [Duplicate TOKENNO : ' ||' You can not save duplicate TOKENNO.]';
               raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt :=0;
        SELECT COUNT(*) 
        INTO lv_cnt
        FROM
        (
            SELECT DISTINCT DEPARTMENTCODE||OCCUPATIONCODE
              FROM GBL_WPSATTENDANCEDAYWISE
             WHERE DEPARTMENTCODE||OCCUPATIONCODE NOT IN
                   (SELECT DISTINCT DEPARTMENTCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST)
        );
        
        IF nvl(lv_cnt,0)>0 THEN
               lv_error_remark := 'Validation Failure : [Invalid Department/Occupation : ' ||' Check Dept/Occu. Code.]';
               raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        lv_cnt1 :=0;
        SELECT COUNT(*) 
        INTO lv_cnt1
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM WPSATTENDANCEDAYWISE
        WHERE DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE IN 
                        (SELECT DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE 
                           FROM GBL_WPSATTENDANCEDAYWISE) 
         );
        
        if nvl(lv_Master.operationmode,'NA') = 'A'  then
           IF nvl(lv_cnt1,0)>0 THEN
                lv_error_remark := 'Validation Failure : [Duplicate TOKENNO : ' ||' DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE Combination already exist.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;   
        END IF;
        
        lv_cnt1 :=0;
        SELECT COUNT(*) 
        INTO lv_cnt1
        FROM
        (
        SELECT DATEOFATTENDANCE, TOKENNO,SHIFTCODE, SPELLTYPE
        FROM WPSATTENDANCEDAYWISE
        WHERE DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE IN 
                        (SELECT DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE 
                           FROM GBL_WPSATTENDANCEDAYWISE
                          WHERE BOOKNO IS NULL)
         AND ATTENDANCETAG <> 'HD'                 
         );
        
        if nvl(lv_Master.operationmode,'NA') = 'M'  then
           IF nvl(lv_cnt1,0)>0 THEN
                lv_error_remark := 'Validation Failure : [Duplicate NEW TOKENNO : ' ||' DATEOFATTENDANCE||TOKENNO||SHIFTCODE||SPELLTYPE Combination already exist.]';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;   
        END IF; 

        if nvl(lv_Master.operationmode,'NA') = 'A' OR nvl(lv_Master.operationmode,'NA') = 'M' then
             FOR C1 IN (
                        SELECT FORTNIGHTSTARTDATE,FORTNIGHTENDDATE
                          FROM WPSWAGEDPERIODDECLARATION
                         WHERE TO_DATE(lv_Master.DATEOFATTENDANCE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
                      )
                LOOP
                    UPDATE GBL_WPSATTENDANCEDAYWISE
                       SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                           FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;
                    
                    /*UPDATE GBL_WPSATTENDANCEDAYWISE
                       SET BOOKNO='ATTN/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||SHIFTCODE||'/'||TOKENNO;*/
                    IF lv_AttnTag='MANUAL' THEN
                        UPDATE GBL_WPSATTENDANCEDAYWISE
                           SET BOOKNO='ATTN/MANUAL/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||DEPARTMENTCODE||'/'||SHIFTCODE;
                    ELSE
                        UPDATE GBL_WPSATTENDANCEDAYWISE
                           SET BOOKNO='ATTN/'||TO_CHAR(DATEOFATTENDANCE,'DDMMRRRR')||'/'||TOKENNO;
                    END IF;

                           
                END LOOP;  
                
            UPDATE GBL_WPSATTENDANCEDAYWISE
              SET MODULE='WPS';    
            
        end if;

--exception when others then
--    lv_error_remark:= lv_error_remark || '#UNSUCC#ESSFULL#';
--    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
end;
/


DROP PROCEDURE PRCWPS_COMPONENT_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_COMPONENT_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSCOMPONENTMASTER%rowtype;
lv_MaxDRCRdate            date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
    
        select *
        into lv_Master
        from GBL_WPSCOMPONENTMASTER
        WHERE ROWNUM<=1;
                  
        

        select count(*)
        into lv_cnt
        from GBL_WPSCOMPONENTMASTER;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;            

        if nvl(lv_Master.operationmode,'NA') = 'A' then
           
            lv_cnt :=0;
            SELECT COUNT(*) 
            INTO lv_cnt
            FROM
            (
            SELECT trim(COMPANYCODE||DIVISIONCODE||COMPONENTCODE)
            FROM GBL_WPSCOMPONENTMASTER
            WHERE trim(COMPANYCODE||DIVISIONCODE||COMPONENTCODE) IN
                  (  SELECT trim(COMPANYCODE||DIVISIONCODE||COMPONENTCODE)
                            FROM WPSCOMPONENTMASTER
                  )
            );
            
            IF nvl(lv_cnt,0)>0 THEN
                    lv_error_remark := 'Validation Failure : [Duplicate COMPONENTCODE : ' ||' You can not save duplicate Componet code.]';
                    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            END IF;
            
        end if;

--exception when others then
--    lv_error_remark:= lv_error_remark || '#UNSUCC#ESSFULL#';
--    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
end;
/


DROP PROCEDURE PRCWPS_ELECRATE_B4_MAINSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_ELECRATE_B4_MAINSAVE" 
    IS
    LV_CNT                  NUMBER;
    LV_RESULT               VARCHAR2(10);
    LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
    LV_MASTER               GBL_ELECTRICMETERREADING%ROWTYPE;
    LV_MAXEFFECTIVEDATE            DATE;
    LV_COMPANYCODE          VARCHAR2(10) :='';
    LV_DIVISIONCODE         VARCHAR2(10) :='';
    LV_QUARTERNO        VARCHAR2(10) :='';
    LV_SLABFROM              NUMBER;
    LV_SLABTO               NUMBER;
    LV_AMOUNT               NUMBER;
    LEFT_UNIT               NUMBER;
    LV_OPTMODE              VARCHAR2(1) :='';
    
    BEGIN
    LV_RESULT:='#SUCCESS#';
                   
    LV_CNT := 0;
    SELECT COUNT(*)
    INTO LV_CNT
    FROM GBL_ELECTRICMETERREADING;
                        
        IF  NVL(LV_CNT,0) =0 THEN
        LV_ERROR_REMARK := 'No details available to save.';
        RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;
                            
        SELECT DISTINCT OPERATIONMODE 
        INTO LV_OPTMODE
        FROM GBL_ELECTRICMETERREADING;                            
                          
            IF NVL(LV_OPTMODE,'NA') <>'D' THEN                          
            
                               
            FOR C1 IN (SELECT * FROM GBL_ELECTRICMETERREADING) LOOP
                LV_AMOUNT := 0;
                LEFT_UNIT := C1.CHARGEUNIT ;
              FOR C2 IN(SELECT SLABFROM,SLABTO,AMOUNT,MAX(WITHEFFECTFROM)   WITHEFFECTFROM                       
                            FROM COMPONENTSLABMASTER
                            WHERE COMPANYCODE = C1.COMPANYCODE
                            AND DIVISIONCODE = C1.DIVISIONCODE
                           AND COMPONENTCODE = 'ELECTRICITY'
                          AND WITHEFFECTFROM<=C1.READINGDATE
                          GROUP BY SLABFROM,SLABTO,AMOUNT 
                          ORDER BY SLABFROM) LOOP                   
                IF LEFT_UNIT > ( C2.SLABTO - C2.SLABFROM ) THEN
                    LV_AMOUNT := LV_AMOUNT + ( C2.AMOUNT*(C2.SLABTO-C2.SLABFROM) );
                    LEFT_UNIT :=  LEFT_UNIT - ( C2.SLABTO - C2.SLABFROM ) ;
                ELSE
                   LV_AMOUNT := LV_AMOUNT + C2.AMOUNT*LEFT_UNIT;
                   EXIT;
                END IF;               
                
              END LOOP;  
                                    
              UPDATE GBL_ELECTRICMETERREADING
              SET ELEC_DED_AMT = LV_AMOUNT,ELEC_EMI=(LV_AMOUNT/2)
              WHERE NVL(COMPANYCODE,'X') = NVL(C1.COMPANYCODE,'X')
              AND NVL(DIVISIONCODE,'X') = NVL(C1.DIVISIONCODE,'X')
              AND NVL(QUARTERNO,'X') = NVL(C1.QUARTERNO,'X')
              AND NVL(YEARMONTH,'X') = NVL(C1.YEARMONTH,'X');
            END LOOP;
                           
        END IF;
    --EXCEPTION WHEN OTHERS THEN
    --    LV_ERROR_REMARK:= LV_ERROR_REMARK || '#UNSUCC#ESSFULL#';
    --    RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
    END;
/


DROP PROCEDURE PRCWPS_GATEPASSDTLSB4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_GATEPASSDTLSB4SAVE
IS
LV_SQLSTR   VARCHAR2(1000)  :=  '';   
LV_MASTER   GBL_WPSWORKERGATEPASSDETAILS%ROWTYPE;
LV_CNT      NUMBER          :=  0;lv_error_remark         varchar2(4000) := '' ;

BEGIN
    SELECT COUNT(*)
      INTO LV_CNT
      FROM GBL_WPSWORKERGATEPASSDETAILS;
    IF LV_CNT>0 THEN
        SELECT *
          INTO LV_MASTER
          FROM GBL_WPSWORKERGATEPASSDETAILS
         WHERE ROWNUM<=1;
         
        IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' THEN
            LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = NVL('||LV_MASTER.DEDUCTIONHOURS||',0), '||CHR(10)
                       ||'                                ATTENDANCEHOURS = ATTENDANCEHOURS - NVL('||LV_MASTER.DEDUCTIONHOURS||',0), '||CHR(10)
                       ||'                                REMARKS = ''MANUAL GATEPASS ENTRY'' '||CHR(10)
                       ||' WHERE COMPANYCODE = '''||LV_MASTER.COMPANYCODE||''' '||CHR(10)
                       ||'   AND DIVISIONCODE = '''||LV_MASTER.DIVISIONCODE||''' '||CHR(10)
                       ||'   AND DATEOFATTENDANCE = '''||LV_MASTER.DATEOFATTENDANCE||''' '||CHR(10)
                       ||'   AND WORKERSERIAL = '||LV_MASTER.WORKERSERIAL||' '||CHR(10)
                       ||'   AND SPELLTYPE = '''||LV_MASTER.SPELL||''' '||CHR(10)
                       ||'   AND SPELLHOURS = '||LV_MASTER.SPELLHOURS||' '||CHR(10);
                       
            EXECUTE IMMEDIATE LV_SQLSTR;
               
        END IF;
        IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M' THEN
            LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = NVL('||LV_MASTER.DEDUCTIONHOURS||',0), '||CHR(10)
                       ||'                                ATTENDANCEHOURS = ATTENDANCEHOURS + DEDUCTIONHOURS - NVL('||LV_MASTER.DEDUCTIONHOURS||',0), '||CHR(10)
                       ||'                                REMARKS = ''MANUAL GATEPASS ENTRY'' '||CHR(10)
                       ||' WHERE COMPANYCODE = '''||LV_MASTER.COMPANYCODE||''' '||CHR(10)
                       ||'   AND DIVISIONCODE = '''||LV_MASTER.DIVISIONCODE||''' '||CHR(10)
                       ||'   AND DATEOFATTENDANCE = '''||LV_MASTER.DATEOFATTENDANCE||''' '||CHR(10)
                       ||'   AND WORKERSERIAL = '||LV_MASTER.WORKERSERIAL||' '||CHR(10)
                       ||'   AND SPELLTYPE = '''||LV_MASTER.SPELL||''' '||CHR(10)
                       ||'   AND SPELLHOURS = '||LV_MASTER.SPELLHOURS||' '||CHR(10);
                       
            EXECUTE IMMEDIATE LV_SQLSTR;
               
        END IF;
        IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
            LV_SQLSTR := 'UPDATE WPSATTENDANCEDAYWISE SET DEDUCTIONHOURS = 0, '||CHR(10)
                       ||'                                ATTENDANCEHOURS = NVL(ATTENDANCEHOURS,0) + NVL(DEDUCTIONHOURS,0), '||CHR(10)
                       ||'                                REMARKS = '''' '||CHR(10)
                       ||' WHERE COMPANYCODE = '''||LV_MASTER.COMPANYCODE||''' '||CHR(10)
                       ||'   AND DIVISIONCODE = '''||LV_MASTER.DIVISIONCODE||''' '||CHR(10)
                       ||'   AND DATEOFATTENDANCE = '''||LV_MASTER.DATEOFATTENDANCE||''' '||CHR(10)
                       ||'   AND WORKERSERIAL = '||LV_MASTER.WORKERSERIAL||' '||CHR(10)
                       ||'   AND SPELLTYPE = '''||LV_MASTER.SPELL||''' '||CHR(10)
                       ||'   AND SPELLHOURS = '||LV_MASTER.SPELLHOURS||' '||CHR(10);
                       
            EXECUTE IMMEDIATE LV_SQLSTR;
               
        END IF;
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN 
             INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_GATEPASSDTLSB4SAVE','',LV_SQLSTR,'','','', '');
    END;
/


DROP PROCEDURE PRCWPS_GRATUITY_SETTLE_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_GRATUITY_SETTLE_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_GRATUITYSETTLEMENT%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      
lv_message varchar2(250);
begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_GRATUITYSETTLEMENT
    WHERE ROWNUM =1;

             

    if nvl(lv_Master.OPERATIONMODE,'NA') = 'A' then
        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,
        'GRATUITYSETTLEMENT',TO_CHAR(lv_Master.SETTLEMENTDATE,'DD/MM/YYYY')) 
        into lv_TransactionNo
        from dual;
                     
        
        UPDATE GBL_GRATUITYSETTLEMENT SET GRATUITYSETTLEMENTNO=lv_TransactionNo;
        lv_message := ' [GRATUITY SETTLEMENT NO GENERATED : ' || lv_TransactionNo || ' Dated : ' || TO_CHAR(lv_Master.SETTLEMENTDATE,'DD/MM/YYYY') || ']';
        insert into SYS_GBL_PROCOUTPUT_INFO(SYS_SAVE_INFO) values(lv_message);
    ELSE
        SELECT COUNT(TOKENNO) INTO lv_cnt FROM GRATUITYSETTLEMENT
        WHERE ISFINALIZE = 'Y'
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND WORKERSERIAL=lv_Master.WORKERSERIAL;
        
        IF lv_cnt > 0 THEN
            lv_error_remark := 'Validation Failure : [This Employee has already finalize. Can not edit.... ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
          
    end if;
    
    
    
        
--    if nvl(lv_Master.operationmode,'NA') = 'A' then
--        insert into SYS_GBL_PROCOUTPUT_INFO
--        values (' WPS LOAN STOP APPLICATION NUMBER : ' || lv_TransactionNo || ' Dated : ' || TO_CHAR(lv_Master.applicationdate,'DD/MM/YYYY'));
--    end if;  
end;
/


DROP PROCEDURE PRCWPS_HOLIDAY_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_HOLIDAY_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWPSHOLIDAYMASTER%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
        select *
        into lv_Master
        from GBL_WPSWPSHOLIDAYMASTER
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_WPSWPSHOLIDAYMASTER;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
       
        IF lv_Master.HOLIDAYDATE > TRUNC(SYSDATE) THEN
            lv_error_remark := 'Validation Failure : [Date of attendance cannot be greater than current date.]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;

        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        if nvl(lv_Master.operationmode,'NA') = 'A' OR nvl(lv_Master.operationmode,'NA') = 'M' then
             FOR C1 IN (
                        SELECT TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR') HOLIDAYDATE,
                        CASE WHEN TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')>=TO_DATE('01/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') AND
                             TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')<=TO_DATE('16/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') THEN
                                    TO_DATE('01/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR')
                        WHEN TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')>=TO_DATE('16/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') AND
                             TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')<=LAST_DAY(TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')) THEN
                                    TO_DATE('16/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR')
                        END FORTNIGHTSTARTDATE, 
                        CASE WHEN TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')>=TO_DATE('01/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') AND
                             TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')<=TO_DATE('16/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') THEN
                                    TO_DATE('15/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR')
                        WHEN TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')>=TO_DATE('16/'||SUBSTR(lv_Master.HOLIDAYDATE,4),'DD/MM/RRRR') AND
                             TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')<=LAST_DAY(TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')) THEN
                                    LAST_DAY(TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR'))
                        END FORTNIGHTENDDATE
                        ,LAST_DAY(TO_DATE(lv_Master.HOLIDAYDATE,'DD/MM/RRRR')) LASTDATE                      
                        FROM DUAL
                      )
                LOOP
                    UPDATE GBL_WPSWPSHOLIDAYMASTER
                       SET FORTNIGHTSTARTDATE=C1.FORTNIGHTSTARTDATE,
                           FORTNIGHTENDDATE=C1.FORTNIGHTENDDATE;
                END LOOP;  
        end if;

--exception when others then
--    lv_error_remark:= lv_error_remark || '#UNSUCC#ESSFULL#';
--    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
end;
/


DROP PROCEDURE PRCWPS_HOLIDAY_PROCESS;

CREATE OR REPLACE PROCEDURE "PRCWPS_HOLIDAY_PROCESS" ( p_CompCode varchar2, p_DivisionCode varchar2, p_YearCode varchar2, 
                                                     p_UserName varchar2, p_HolidayDate varchar2,lv_HolidayHours number,
                                                     p_LastWorkingDate varchar2, p_NextWorkingDt varchar2 default 'NONE',
                                                     p_DayOffType varchar2 default 'MASTER' ,p_DayOffDay varchar2 default 'NONE'  
                                                   )
as
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_SqlStr               varchar2(10000):='';
lv_SqlStr1              varchar2(4000):='';
lv_Remarks              varchar2(1000) := '';
lv_SqlErrm              varchar2(500) := '';
lv_parvalues            varchar2(500) := '';   
lv_LastWorkingDay       varchar2(20) := ''; --to_date(p_LastWorkingDate,'dd/mm/yyyy');
lv_NextWorkingDay       varchar2(20);
lv_NextWorkingDate      varchar2(10):='';
lv_BeforeLastWorkingDate date;      -- for day off consider last working date
lv_AfterNextWorkingDate date;       -- for day off consider after next working date
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;
lv_ProcName             varchar2(30) := 'PRCWPS_HOLIDAY_PROCESS';

lv_ConsiderMasterOffDay varchar2(10);       --- use for Dayoff considet from worker master or not
lv_HolidayType          varchar2(20):='';
     
begin
    lv_result:='#SUCCESS#';
    lv_Remarks := 'HOLIDAY PROCESS';
    lv_parvalues := p_HolidayDate;
    lv_NextWorkingDate := p_NextWorkingDt;
    --- when next working data not required then we treat the last working date as next working data ------- 
    lv_LastWorkingDay := TRIM(TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY'),'DAY')); 
    
    if (length(p_NextWorkingDt)<=0 or nvl(p_NextWorkingDt,'N') = 'N') THEN
        lv_NextWorkingDate := p_LastWorkingDate;
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    else
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    end if;
    
--    IF LTRIM(RTRIM(TO_CHAR(lv_LastWorkingDay,'DAY'))) = 'MONDAY' THEN
    IF lv_LastWorkingDay = 'MONDAY' THEN
        PRC_WORKER_ATTNSTATUS_GENERATE(p_CompCode, p_DivisionCode, p_HolidayDate, p_LastWorkingDate, 'W',p_UserName);
    END IF;
    
    lv_BeforeLastWorkingDate := to_date(p_LastWorkingDate,'dd/mm/yyyy')-1; 
    lv_AfterNextWorkingDate := to_date(lv_NextWorkingDate,'dd/mm/yyyy')+1;
    
    select nvl(HOLIDAYTYPE,'GENERAL') INTO lv_HolidayType from WPSHOLIDAYMASTER 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
      AND HOLIDAYDATE = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
    
    SELECT DAYOFFCONSIDER_ATTN_IMPORT INTO lv_ConsiderMasterOffDay FROM WPSWAGESPARAMETER WHERE DIVISIONCODE = p_DivisionCode;
    
    select FORTNIGHTSTARTDATE, FORTNIGHTENDDATE into lv_FNStartDate, lv_FNEndDate
    FROM WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
     AND FORTNIGHTSTARTDATE <= TO_DATE(p_HolidayDate,'dd/mm/yyyy')
     AND FORTNIGHTENDDATE >= TO_DATE(p_HolidayDate,'dd/mm/yyyy') ;
     ----- chekcing for whage already process or not ----
    
    SELECT COUNT(*) into lv_Cnt FROM WPSWAGESDETAILS_MV  
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
    AND YEARCODE = p_YearCode 
    AND FORTNIGHTSTARTDATE = lv_FNStartDate
    AND FORTNIGHTENDDATE = lv_FNEndDate;
    
--    if lv_Cnt > 0 then
--        lv_error_remark := 'Validation Failure : [WAGES ALREADY PROCESS]';
--        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
--    end if;    
    
    
    Case lv_HolidayType
        when 'GENERAL' then
         ------- holiday data delete -----------
            DELETE FROM WPSHOLIDAYDATA 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
            AND HOLIDAY = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
            ---- ATTENDANCE DATA DELETE FROM ATTENANCDE TABLE BASED HOLIDAY DATE AND ATTENDANCE TAG ----
            DELETE FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
              AND YEARCODE = p_YearCode 
              AND DATEOFATTENDANCE = TO_DATE(p_HolidayDate,'DD/MM/YYYY')
              AND ATTENDANCETAG = 'HD';
              
            ---- DATAA INSERT FOR THOSE WORKER WHO WORKED IN BOTH LATST WORKING DATE OR NEXT WORKING DATE , 
            ---- IN CASE WHO NOT MAINTAIN THE NEXT WORKING DATE THEN WE CONSIDER NEXT WORKING VAIRABLE VALUE SAME AS LAST WORKING DATE VALUE
            lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                    ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                    ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME,LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                    ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                    ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||'''  HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                    ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                    ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                    ||' ( '||CHR(10)
                    ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10) 
                    ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL '||CHR(10)
                    ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||' ) C,        '||CHR(10)
                    ||' ( '||CHR(10)
                    ||'    SELECT DISTINCT WORKERSERIAL '||CHR(10)
                    ||'    FROM ( '||CHR(10) 
                    ||'             SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'             WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'               AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'               AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'             GROUP BY WORKERSERIAL '||CHR(10)
                    ||'             HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||'         ) '||CHR(10)
                    ||' ) D,        '||CHR(10)
                    ||' (           '||CHR(10)
                    ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                    ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                    ||'                         ) '||CHR(10)
                    ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                    ||'     AND APPLICABLE = ''YES''  '||CHR(10) 
                    ||' ) E '||CHR(10)
                    ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                    ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                  --  ||'   AND A.SPELLTYPE = ''SPELL 1'' '||CHR(10)
                    ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10) 
                    ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                    ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = D.WORKERSERIAL '||CHR(10)
                    ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                    ||'   AND M.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10)
                    ||' UNION ALL '||CHR(10)  --- BELOW INCLUDE DAY BEFORE HOLIDAY IS THE STLTO DATE 
                    ||' SELECT DISTINCT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.LEAVETODATE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON,  '||CHR(10) 
                    ||'  M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE,   '||CHR(10)
                    ||'  0 ATTENDANCEHOURS, '''|| lv_HolidayHours||'''  HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE,   '||CHR(10)
                    ||'  O.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, M.UNITCODE  '||CHR(10)
                    ||' FROM WPSSTLENTRYDETAILS A, WPSWORKERMAST M, WPSOCCUPATIONMAST O   '||CHR(10)
                    ||' WHERE A.COMPANYCODE ='''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10)
                    ||'   AND A.LEAVETODATE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')  '||CHR(10)
                    ||'   AND A.LEAVECODE = ''STL'' '||CHR(10)
                    ||'   AND A.COMPANYCODE = M.COMPANYCODE AND A.DIVISIONCODE = M.DIVISIONCODE AND A.WORKERSERIAL = M.WORKERSERIAL  '||CHR(10)
                    ||'   AND A.COMPANYCODE = O.COMPANYCODE AND A.DIVISIONCODE = O.DIVISIONCODE  '||CHR(10)
                    ||'   AND A.DEPARTMENTCODE = O.DEPARTMENTCODE AND A.SECTIONCODE = O.SECTIONCODE AND A.OCCUPATIONCODE = O.OCCUPATIONCODE  '||CHR(10); 
                    
                    
            insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                               values(p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
            commit;
            execute immediate lv_SqlStr;
            commit;
--            dbms_output.put_line ('phase 1 complete');
--            dbms_output.put_line ('CONSIDER MASTER OFF DAY '||lv_ConsiderMasterOffDay);
            ---- NOW CONSIDER DAY OF ON LAST WORKING DATE --- WORKER SHOULD WORKED ON DAY BEFORE LAST WORKING DATE ----
            lv_SqlStr1 := '';
            lv_SqlStr1 := ' SELECT DISTINCT WORKERSERIAL FROM '||CHR(10)
                       || ' ( '||CHR(10) ;
            if p_LastWorkingDate = lv_NextWorkingDate then
                lv_SqlStr1 := lv_SqlStr1 ||' select distinct workerserial from WPSWORKERDAILYSTATUS /*WPSATTENDANCEDAYWISE */'||chr(10)
                                         ||' where companycode = '''||p_CompCode||''' '||chr(10)
                                         ||'   and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                         ||'   and yearcode = '''||p_YearCode||'''  '||chr(10)
                                         ||'   and dateofattendance = to_date('''||p_LastWorkingDate||''',''dd/mm/yyyy'') '||chr(10)
                                         ||'   AND WORKERSTATUS=''W'' /*and nvl(ISDAYOFF,''N'') = ''Y'' */'||CHR(10);
                if lv_ConsiderMasterOffDay ='Y' then
                    lv_SqlStr1 := lv_SqlStr1 ||' union all '||chr(10)
                                             ||' SELECT DISTINCT WORKERSERIAL '||CHR(10)
                                             ||' FROM ('||CHR(10) 
                                             ||'        select WORKERSERIAL from WPSWORKERMAST '||chr(10)
                                             ||'        where companycode = '''||p_CompCode||''' '||chr(10)
                                             ||'          and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                             ||'          AND NVL(active,''N'')= ''Y'' '||CHR(10)
                                             ||'          AND NVL(DAYOFFDAY,''NONE'') = TRIM(TO_CHAR(TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY''),''DAY'')) '||chr(10)
                                             ||'        MINUS '||CHR(10)
                                             ||'        SELECT WORKERSERIAL FROM WPSATTENDANCEDAYWISE '||CHR(10)
                                             ||'        WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)
                                             ||'          AND YEARCODE = '''||p_YearCode||'''  '||CHR(10)
                                             ||'          AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') - 1 '||CHR(10)
                                             ||'          AND SHIFTCODE = ''3'' '||CHR(10)
                                             ||'          AND NVL(ATTENDANCEHOURS,0) > 0 '||CHR(10)
                                             ||'    ) '||CHR(10);
                end if;          
                lv_SqlStr1 := lv_SqlStr1 ||') '||CHR(10);
                
                --dbms_output.put_line ('lv_SqlStr1 '||lv_SqlStr1);
                
                lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                        ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                        ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||'''  HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                        ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF,'''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                        ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                        ||' ( '||CHR(10)
                        ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                        ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                        ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1 '||CHR(10)
                        ||'     GROUP BY WORKERSERIAL '||CHR(10)   
                        ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                        ||' ) C,        '||CHR(10)
                        ||' (           '||CHR(10)
                        ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                        ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                        ||'                         ) '||CHR(10)
                        ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                        ||'     AND APPLICABLE = ''YES''  '||CHR(10)
                        ||' ) D, '||CHR(10);
                lv_SqlStr := lv_SqlStr ||'('||lv_SqlStr1||') L '||CHR(10)         
                        ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                        ||'   AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1 '||CHR(10)
                        ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10)
                        ||'   /*AND SPELLTYPE = ''SPELL 1'' */'||CHR(10) 
                        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10)
                        ||'   AND A.WORKERSERIAL = L.WORKERSERIAL '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                        ||'   AND M.WORKERCATEGORYCODE = D.WORKERCATEGORYCODE '||CHR(10);
                        
                insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                execute immediate lv_SqlStr;
                commit;
                -----  consider worker's whose last working data is day off and stl todate is just before of last woring date 
                lv_remarks := 'LAST WORKING DATE AS DAYOFF BY STL TO DATE DAY B4 LAST WORKING DATE';
                lv_SqlStr := 'INSERT INTO WPSHOLIDAYDATA ( '||CHR(10)
                    ||' COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON,  '||CHR(10) 
                    ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10)   
                    ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE,  '||CHR(10)
                    ||' ATTENDANCETAG, ISDAYOFF, USERNAME, LASTMODIFIED, SERIALNO, UNITCODE)  '||CHR(10)
                    ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY ,TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1 BEFOREHOLIDAYDATEBASEDON ,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON,  '||CHR(10) 
                    ||' B.GROUPCODE, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.OCCUPATIONCODE,  '||CHR(10)
                    ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||''' HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS  FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, B.WORKTYPECODE,  '||CHR(10) 
                    ||' ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''' USERNAME, SYSDATE LASTMODIFIED, 0 SERIALNO, B.UNITCODE   '||CHR(10)
                    ||' FROM WPSSTLENTRY A, WPSWORKERMAST B  '||CHR(10)
                    ||' WHERE A.COMPANYCODE ='''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10)
                    ||'   AND A.STLTODATE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1  '||CHR(10)
                    ||'   AND A.LEAVECODE = ''STL'' '||CHR(10)
                    ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
                    ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
                    ||'   AND NVL(DAYOFFDAY,''NONE'') = TRIM(TO_CHAR(TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY''),''DAY'')) '||chr(10)
                    ||'   AND A.WORKERSERIAL NOT IN (SELECT WORKERSERIAL FROM WPSSTLENTRY '||CHR(10)
                    ||'                              WHERE COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10)
                    ||'                                AND STLFROMDATE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') AND LEAVECODE = ''STL'' '||CHR(10)
                    ||'                             ) '||CHR(10) ;
                insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                execute immediate lv_SqlStr;
                commit;
                
                --START ADDED BY PRASUN ON 20102019
                
                IF lv_LastWorkingDay = 'TUESDAY' THEN
                               

                     lv_remarks := 'INSERT WHEN MONDAY AND TUESDAY BOTH DAY OFF' ;   
                                    
                        lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                        ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10)
                        ||' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY ,TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-2 BEFOREHOLIDAYDATEBASEDON ,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON,  '||CHR(10) 
                        ||' GROUPCODE, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, A.WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10)
                        ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||''' HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS  FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, WORKERTYPECODE,  '||CHR(10) 
                        ||' ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''' USERNAME, SYSDATE LASTMODIFIED, 0 SERIALNO, '''' UNITCODE   '||CHR(10)   
                        ||'    FROM WPSATTENDANCEDAYWISE    A, '||CHR(10)
                        ||'(    '||CHR(10) 
                        ||'    SELECT WORKERSERIAL  '||CHR(10)
                        ||'    FROM WPSATTENDANCEDAYWISE   '||CHR(10)   
                        ||'    WHERE  COMPANYCODE = '''||p_CompCode||'''   '||CHR(10)   
                        ||'    AND DIVISIONCODE = '''||p_DivisionCode||'''    '||CHR(10)   
                        ||'    AND YEARCODE = '''||p_YearCode||'''   '||CHR(10)   
                        ||'    AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-2   '||CHR(10)   
                        ||'    AND SHIFTCODE = ''3''   '||CHR(10)   
                        ||'    AND ATTENDANCEHOURS > 0   '||CHR(10)   
                        ||'    INTERSECT   '||CHR(10) 
                        ||'    (   '||CHR(10)   
                        ||'    SELECT WORKERSERIAL  '||CHR(10)   
                        ||'    FROM WPSATTENDANCEDAYWISE     '||CHR(10)     
                        ||'    WHERE  COMPANYCODE = '''||p_CompCode||'''   '||CHR(10)   
                        ||'    AND DIVISIONCODE = '''||p_DivisionCode||'''    '||CHR(10)   
                        ||'    AND YEARCODE = '''||p_YearCode||'''   '||CHR(10)   
                        ||'    AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')   '||CHR(10)   
                        ||'    AND SHIFTCODE = ''3''   '||CHR(10)   
                        ||'    AND ATTENDANCEHOURS > 0   '||CHR(10)   
                        ||'    UNION    '||CHR(10)   
                        ||'    SELECT WORKERSERIAL  '||CHR(10)   
                        ||'    FROM WPSWORKERMAST  '||CHR(10)   
                        ||'    WHERE  COMPANYCODE = '''||p_CompCode||'''   '||CHR(10)   
                        ||'    AND DIVISIONCODE = '''||p_DivisionCode||'''   '||CHR(10)   
                        ||'    AND ACTIVE = ''Y''   '||CHR(10)   
                        ||'    AND DAYOFFDAY = ''TUESDAY''  '||CHR(10)   
                        ||'    )   '||CHR(10)  
                        ||' ) B    '||CHR(10)  
                        ||' WHERE A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)  
                        ||'    AND  COMPANYCODE = '''||p_CompCode||'''   '||CHR(10)   
                        ||'    AND DIVISIONCODE = '''||p_DivisionCode||'''    '||CHR(10)   
                        ||'    AND YEARCODE = '''||p_YearCode||'''   '||CHR(10)   
                        ||'    AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-2   '||CHR(10)   
                        ||'    AND SHIFTCODE = ''3''   '||CHR(10)   
                        ||'    AND ATTENDANCEHOURS > 0   '||CHR(10)   
                        ||'    AND A.WORKERSERIAL NOT IN (   '||CHR(10)   
                        ||'    SELECT WORKERSERIAL FROM WPSHOLIDAYDATA   '||CHR(10)   
                        ||'    WHERE COMPANYCODE = '''||p_CompCode||'''    '||CHR(10)   
                        ||'    AND DIVISIONCODE = '''||p_DivisionCode||'''   '||CHR(10)   
                        ||'    AND HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY''))';   
  
            
                        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                        values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                        COMMIT;
                        execute immediate lv_SqlStr;
                        commit;       
                             
                             
                             
                      ----- DELETE FROM WPSHOLIDAY DATA  WHEN MODAY IS SHIFT '2' AND TUESDAY IS SHIFT '3'
                               
                    lv_remarks :=  'DELETE FROM WPSHOLIDAY DATA  WHEN MODAY IS SHIFT "2" AND TUESDAY IS SHIFT "3"  ';
                            
                              
                        lv_SqlStr := ' DELETE FROM WPSHOLIDAYDATA   '||chr(10)
                               ||'  WHERE WORKERSERIAL IN (  '||chr(10)
                               ||'         SELECT T1.WORKERSERIAL FROM WPSHOLIDAYDATA T1, WPSWORKERMAST T2,  '||chr(10)
                               ||'         (   '||chr(10)
                               ||'             SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL FROM WPSATTENDANCEDAYWISE  '||chr(10) 
                               ||'             WHERE  COMPANYCODE = '''||p_CompCode||'''  '||chr(10)
                               ||'             AND DIVISIONCODE ='''||p_DivisionCode||''' '||chr(10)
                               ||'             AND YEARCODE = '''||p_YearCode||'''  '||chr(10)
                               ||'             AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1  '||chr(10)
                               ||'             AND SHIFTCODE = ''2''  '||chr(10)
                               ||'             AND ATTENDANCEHOURS > 0  '||chr(10)
                               ||'             MINUS  '||chr(10)
                               ||'             SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL FROM WPSATTENDANCEDAYWISE  '||chr(10)
                               ||'             WHERE COMPANYCODE = '''||p_CompCode||'''  '||chr(10)
                               ||'             AND DIVISIONCODE = '''||p_DivisionCode||'''  '||chr(10)
                               ||'             AND YEARCODE = '''||p_YearCode||'''  '||chr(10)
                               ||'             AND DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')  '||chr(10)
                               ||'             AND SHIFTCODE = ''3''  '||chr(10)
                               ||'             AND ATTENDANCEHOURS > 0  '||chr(10)
                               ||'         ) T3  '||chr(10)
                               ||'         WHERE  T1.COMPANYCODE = T2.COMPANYCODE  '||chr(10)
                               ||'         AND    T1.DIVISIONCODE = T2.DIVISIONCODE  '||chr(10)
                               ||'         AND    T1.WORKERSERIAL = T2.WORKERSERIAL  '||chr(10)
                               ||'         AND    T1.COMPANYCODE = T3.COMPANYCODE  '||chr(10)
                               ||'         AND    T1.DIVISIONCODE = T3.DIVISIONCODE  '||chr(10)
                               ||'         AND    T1.WORKERSERIAL = T3.WORKERSERIAL  '||chr(10)
                               ||'         AND    T1.HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'')  '||chr(10)
                               ||'         AND    T2.DAYOFFDAY = ''TUESDAY''  '||chr(10)
                               ||'         AND    T2.ACTIVE  = ''Y''    '||chr(10)
                               ||'   )       '||chr(10)
                               ||'   AND HOLIDAY  = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') '||chr(10)
                               ||'   AND COMPANYCODE = '''||p_CompCode||'''  '||chr(10)
                               ||'   AND DIVISIONCODE = '''||p_DivisionCode||'''  '||chr(10)
                               ||'   AND YEARCODE = '''||p_YearCode||''' '||chr(10);
                                       

                        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                        values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                        COMMIT;
                        execute immediate lv_SqlStr;
                        commit;  

                END IF;
                
                --END ADDED BY PRASUN ON 20102019
                
                
                DELETE FROM WPSHOLIDAYDATA AA
                WHERE ROWID < ( SELECT MAX(ROWID) FROM WPSHOLIDAYDATA BB
                       WHERE AA.WORKERSERIAL = BB.WORKERSERIAL
                         AND AA.HOLIDAY=BB.HOLIDAY)
                         AND HOLIDAY=TO_DATE(P_HOLIDAYDATE,'dd/mm/yyyy');
             commit;
                ------- DATA INSERT INTO ATTENDANCE TABLE ------------------
                lv_remarks := 'DATA TRANFER FROM HOLDIAY DATA TO ATTENDANCE';                
                lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, '||CHR(10) 
                        ||' SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, BOOKNO,  '||CHR(10)
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, SPELLTYPE,  '||CHR(10) 
                        ||' USERNAME, LASTMODIFIED, SYSROWID, UNITCODE)  '||CHR(10)
                        ||' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, HOLIDAY,  '||CHR(10)  
                        ||' SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO BOOKNO,  '||CHR(10) 
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, ''SPELL 1'' SPELLTYPE,  '||CHR(10)
                        ||' USERNAME, LASTMODIFIED, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO SYSROWID, UNITCODE  '||CHR(10)
                        ||' FROM WPSHOLIDAYDATA  '||CHR(10)
                        ||' WHERE HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') '||CHR(10);                
                ------ NOW CHECK THE DUPLICATE WORKERSERIAL FOUND IN THE HOLIDAYDATE OR NOT? IF FOUND THEN DELETE ONE RECORD ----
                --dbms_output.put_line(lv_SqlStr);
                insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
                
                
            end if;     
                                    
            --if lv_ConsiderMasterOffDay ='Y'
            
    end CASE;
    COMMIT;
--EXCEPTION
--     WHEN OTHERS THEN
--    lv_sqlerrm := sqlerrm ;
--    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--    values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);     
--     COMMIT;           
        
end;
/


DROP PROCEDURE PRCWPS_HOLIDAY_PROCESS_BKP;

CREATE OR REPLACE PROCEDURE "PRCWPS_HOLIDAY_PROCESS_BKP" ( p_CompCode varchar2, p_DivisionCode varchar2, p_YearCode varchar2, 
                                                     p_UserName varchar2, p_HolidayDate varchar2,lv_HolidayHours number,
                                                     p_LastWorkingDate varchar2, p_NextWorkingDt varchar2 default 'NONE',
                                                     p_DayOffType varchar2 default 'MASTER' ,p_DayOffDay varchar2 default 'NONE'  
                                                   )
as
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_SqlStr               varchar2(10000):='';
lv_SqlStr1              varchar2(4000):='';
lv_Remarks              varchar2(1000) := '';
lv_SqlErrm              varchar2(500) := '';
lv_parvalues            varchar2(500) := '';   
lv_LastWorkingDay       varchar2(20) := to_date(p_LastWorkingDate,'dd/mm/yyyy');
lv_NextWorkingDay       varchar2(20);
lv_NextWorkingDate      varchar2(10):='';
lv_BeforeLastWorkingDate date;      -- for day off consider last working date
lv_AfterNextWorkingDate date;       -- for day off consider after next working date
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;
lv_ProcName             varchar2(30) := 'PRCWPS_HOLIDAY_PROCESS';

lv_ConsiderMasterOffDay varchar2(10);       --- use for Dayoff considet from worker master or not
lv_HolidayType          varchar2(20):='';
     
begin
    lv_result:='#SUCCESS#';
    lv_Remarks := 'HOLIDAY PROCESS';
    lv_parvalues := p_HolidayDate;
    lv_NextWorkingDate := p_NextWorkingDt;
    --- when next working data not required then we treat the last working date as next working data ------- 
    if (length(p_NextWorkingDt)<=0 or nvl(p_NextWorkingDt,'N') = 'N') THEN
        lv_NextWorkingDate := p_LastWorkingDate;
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    else
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    end if;
    
    lv_BeforeLastWorkingDate := to_date(p_LastWorkingDate,'dd/mm/yyyy')-1; 
    lv_AfterNextWorkingDate := to_date(lv_NextWorkingDate,'dd/mm/yyyy')+1;
    
    select nvl(HOLIDAYTYPE,'GENERAL') INTO lv_HolidayType from WPSHOLIDAYMASTER 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
      AND HOLIDAYDATE = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
    
    SELECT DAYOFFCONSIDER_ATTN_IMPORT INTO lv_ConsiderMasterOffDay FROM WPSWAGESPARAMETER;
    
    select FORTNIGHTSTARTDATE, FORTNIGHTENDDATE into lv_FNStartDate, lv_FNEndDate
    FROM WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
     AND FORTNIGHTSTARTDATE <= TO_DATE(p_HolidayDate,'dd/mm/yyyy')
     AND FORTNIGHTENDDATE >= TO_DATE(p_HolidayDate,'dd/mm/yyyy') ;
     ----- chekcing for whage already process or not ----
    
    SELECT COUNT(*) into lv_Cnt FROM WPSWAGESDETAILS_MV  
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
    AND YEARCODE = p_YearCode 
    AND FORTNIGHTSTARTDATE = lv_FNStartDate
    AND FORTNIGHTENDDATE = lv_FNEndDate;
    
    if lv_Cnt > 0 then
        lv_error_remark := 'Validation Failure : [WAGES ALREADY PROCESS]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;    
    
    
    Case lv_HolidayType
        when 'GENERAL' then
         ------- holiday data delete -----------
            DELETE FROM WPSHOLIDAYDATA 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
            AND HOLIDAY = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
            ---- ATTENDANCE DATA DELETE FROM ATTENANCDE TABLE BASED HOLIDAY DATE AND ATTENDANCE TAG ----
            DELETE FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
              AND YEARCODE = p_YearCode 
              AND DATEOFATTENDANCE = TO_DATE(p_HolidayDate,'DD/MM/YYYY')
              AND ATTENDANCETAG = 'HD';
              
            ---- DATAA INSERT FOR THOSE WORKER WHO WORKED IN BOTH LATST WORKING DATE OR NEXT WORKING DATE , 
            ---- IN CASE WHO NOT MAINTAIN THE NEXT WORKING DATE THEN WE CONSIDER NEXT WORKING VAIRABLE VALUE SAME AS LAST WORKING DATE VALUE
            lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                    ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                    ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME,LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                    ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                    ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||'''  HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                    ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                    ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                    ||' ( '||CHR(10)
                    ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10) 
                    ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL '||CHR(10)
                    ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||' ) C,        '||CHR(10)
                    ||' ( '||CHR(10)
                    ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL '||CHR(10)
                    ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||' ) D,        '||CHR(10)
                    ||' (           '||CHR(10)
                    ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                    ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                    ||'                         ) '||CHR(10)
                    ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                    ||'     AND APPLICABLE = ''YES''  '||CHR(10) 
                    ||' ) E '||CHR(10)
                    ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                    ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                  --  ||'   AND A.SPELLTYPE = ''SPELL 1'' '||CHR(10)
                    ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10) 
                    ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                    ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = D.WORKERSERIAL '||CHR(10)
                    ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                    ||'   AND M.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10);
                    
            insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                               values(p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
            commit;
            execute immediate lv_SqlStr;
            commit;
--            dbms_output.put_line ('phase 1 complete');
--            dbms_output.put_line ('CONSIDER MASTER OFF DAY '||lv_ConsiderMasterOffDay);
            ---- NOW CONSIDER DAY OF ON LAST WORKING DATE --- WORKER SHOULD WORKED ON DAY BEFORE LAST WORKING DATE ----
            lv_SqlStr1 := '';
            lv_SqlStr1 := ' SELECT DISTINCT WORKERSERIAL FROM '||CHR(10)
                       || ' ( '||CHR(10) ;
            if p_LastWorkingDate = lv_NextWorkingDate then
                lv_SqlStr1 := lv_SqlStr1 ||' select distinct workerserial from WPSWORKERDAILYSTATUS /*WPSATTENDANCEDAYWISE */'||chr(10)
                                         ||' where companycode = '''||p_CompCode||''' '||chr(10)
                                         ||'   and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                         ||'   and yearcode = '''||p_YearCode||'''  '||chr(10)
                                         ||'   and dateofattendance = to_date('''||p_LastWorkingDate||''',''dd/mm/yyyy'') '||chr(10)
                                         ||'   AND WORKERSTATUS=''W'' /*and nvl(ISDAYOFF,''N'') = ''Y'' */'||CHR(10);
                if lv_ConsiderMasterOffDay ='Y' then
                    lv_SqlStr1 := lv_SqlStr1 ||' union all '||chr(10)
                                             ||' select WORKERSERIAL from WPSWORKERMAST '||chr(10)
                                             ||' where companycode = '''||p_CompCode||''' '||chr(10)
                                             ||'   and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                             ||'   AND NVL(active,''N'')= ''Y'' '||CHR(10)
                                             ||'   and nvl(DAYOFFDAY,''NONE'') = TRIM(TO_CHAR(TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY''),''DAY'')) '||chr(10);
                end if;          
                lv_SqlStr1 := lv_SqlStr1 ||') '||CHR(10);
                
                
                
                lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                        ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                        ||' 0 ATTENDANCEHOURS, '''|| lv_HolidayHours||'''  HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                        ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF,'''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                        ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                        ||' ( '||CHR(10)
                        ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                        ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                        ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1 '||CHR(10)
                        ||'     GROUP BY WORKERSERIAL '||CHR(10)   
                        ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                        ||' ) C,        '||CHR(10)
                        ||' (           '||CHR(10)
                        ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                        ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                        ||'                         ) '||CHR(10)
                        ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                        ||'     AND APPLICABLE = ''YES''  '||CHR(10)
                        ||' ) D, '||CHR(10);
                lv_SqlStr := lv_SqlStr ||'('||lv_SqlStr1||') L '||CHR(10)         
                        ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                        ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'')-1 '||CHR(10)
                        ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10)
                        ||'   AND SPELLTYPE = ''SPELL 1'' '||CHR(10) 
                        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10)
                        ||'   AND A.WORKERSERIAL = L.WORKERSERIAL '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                        ||'   AND M.WORKERCATEGORYCODE = D.WORKERCATEGORYCODE '||CHR(10);
                        
                insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
                
                DELETE FROM WPSHOLIDAYDATA AA
                WHERE ROWID < ( SELECT MAX(ROWID) FROM WPSHOLIDAYDATA BB
                       WHERE AA.WORKERSERIAL = BB.WORKERSERIAL
                         AND AA.HOLIDAY=BB.HOLIDAY)
                         AND HOLIDAY=TO_DATE(P_HOLIDAYDATE,'dd/mm/yyyy');
             commit;
                ------- DATA INSERT INTO ATTENDANCE TABLE ------------------
                lv_remarks := 'DATA TRANFER FROM HOLDIAY DATA TO ATTENDANCE';                
                lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, '||CHR(10) 
                        ||' SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, BOOKNO,  '||CHR(10)
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, SPELLTYPE,  '||CHR(10) 
                        ||' USERNAME, LASTMODIFIED, SYSROWID, UNITCODE)  '||CHR(10)
                        ||' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, HOLIDAY,  '||CHR(10)  
                        ||' SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO BOOKNO,  '||CHR(10) 
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, ''SPELL 1'' SPELLTYPE,  '||CHR(10)
                        ||' USERNAME, LASTMODIFIED, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO SYSROWID, UNITCODE  '||CHR(10)
                        ||' FROM WPSHOLIDAYDATA  '||CHR(10)
                        ||' WHERE HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') '||CHR(10);                
                ------ NOW CHECK THE DUPLICATE WORKERSERIAL FOUND IN THE HOLIDAYDATE OR NOT? IF FOUND THEN DELETE ONE RECORD ----
                --dbms_output.put_line(lv_SqlStr);
                insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
                
                
            end if;     
                                    
            --if lv_ConsiderMasterOffDay ='Y'
            
    end CASE;
    COMMIT;
EXCEPTION
     WHEN OTHERS THEN
    lv_sqlerrm := sqlerrm ;
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( p_CompCode, p_DivisionCode, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);     
     COMMIT;           
        
end;
/


DROP PROCEDURE PRCWPS_HOLIDAY_PROCESS_NEW;

CREATE OR REPLACE PROCEDURE "PRCWPS_HOLIDAY_PROCESS_NEW" ( p_CompCode varchar2, p_DivisionCode varchar2, p_YearCode varchar2, 
                                                          p_UserName varchar2, p_HolidayDate varchar2, lv_HolidayHours number,
                                                          p_LastWorkingDate varchar2, p_NextWorkingDt varchar2 default 'NONE',
                                                          p_DayOffType varchar2 default 'MASTER', p_DayOffDay varchar2 default 'NONE' 
                                                   )
as
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '';
lv_SqlStr               varchar2(10000):='';
lv_SqlStr1              varchar2(4000):='';
lv_Remarks              varchar2(1000) := '';
lv_SqlErrm              varchar2(500) := '';
lv_parvalues            varchar2(500) := '';   
lv_LastWorkingDay       varchar2(20) := TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY'),'DAY');
lv_NextWorkingDay       varchar2(20);
lv_NextWorkingDate      varchar2(10):='';
lv_BeforeLastWorkingDate date;      -- for day off consider last working date
lv_AfterNextWorkingDate date;       -- for day off consider after next working date
lv_Dayoffdaybothside VARCHAR2(1) :='';
lv_Dayoffdayeitherside VARCHAR2(1) :='';
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;

lv_ConsiderMasterOffDay varchar2(10);       --- use for Dayoff considet from worker master or not
lv_ConsiderBothSideWorking varchar2(10);     --- variable use for checking both side working
lv_ConsiderBothSideCondition varchar2(500) DEFAULT NULL;     --- variable use for checking both side working..conditional worker
lv_ConsiderEitherSideWorking varchar2(10);     --- variable use for checking either side working
lv_ConsiderEitherSideCondition varchar2(500) DEFAULT NULL;     --- variable use for checking both side working..conditional worker
lv_WorkerselectionCondition varchar2(500);

lv_HolidayType          varchar2(20):='';
lv_DayOffDay            varchar2(20);
lv_ConsiderNextWorking  varchar2(10);
lv_ConsiderMasterDayOff varchar2(10):= 'Y';     ---- variable consider for day off from master of user parameter
lv_UnionOrInersectSql   varchar2(20);      --- variable use for UNION or Intersect int the query accroing to commpany consider holiday for both side working or not

/*EXEC prcWPS_Holiday_Process('CJ0048','0003','2016-2017','SWT','01/05/2016','8','29/04/2016','02/05/2016','' ,'SUNDAY')*/
begin
    lv_result:='#SUCCESS#';
    lv_Remarks := 'HOLIDAY PROCESS';
    lv_parvalues := p_HolidayDate;
    lv_NextWorkingDate := p_NextWorkingDt;
    ------ Day off mainting from master or not
    if nvl(p_DayOffDay,'NONE') = 'NONE' then
        lv_ConsiderMasterDayOff := 'N';
    else
        lv_ConsiderMasterDayOff := 'Y';
    end if; 

    SELECT  DAYOFFCONSIDER_ATTN_IMPORT, 
            HOLIDAY_BOTHSIDE_WORKING ,HOLIDAY_BOTHSIDE_CONDITION,
            HOLIDAY_EITHERSIDE_WORKING,HOLIDAY_EITHERSIDE_CONDITION,
            DAYOFFDAY_BOTHSIDE_WORKING,DAYOFFDAY_EITHERSIDE_WORKING
      INTO lv_ConsiderMasterOffDay, 
           lv_ConsiderBothSideWorking,lv_ConsiderBothSideCondition,
           lv_ConsiderEitherSideWorking,lv_ConsiderEitherSideCondition,
           lv_Dayoffdaybothside,lv_Dayoffdayeitherside 
    FROM WPSWAGESPARAMETER;
    
    --- when next working data not required then we treat the last working date as next working data ------- 
    if (length(p_NextWorkingDt)<=0 or nvl(p_NextWorkingDt,'N') = 'N') THEN
        lv_NextWorkingDate := p_LastWorkingDate;
        lv_NextWorkingDay := lv_LastWorkingDay;
    else
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    end if;
    --- variable initialize the before last working date and next working date 
    lv_BeforeLastWorkingDate := to_date(p_LastWorkingDate,'dd/mm/yyyy')-1;
    if  lv_NextWorkingDate = p_LastWorkingDate then
        lv_AfterNextWorkingDate := lv_BeforeLastWorkingDate;
    else
        lv_AfterNextWorkingDate := to_date(lv_NextWorkingDate,'dd/mm/yyyy')+1;
    end if;

---- when company not follow the next working date then we consider the next working is a last working date ----
--    if lv_NextWorkingDate = p_LastWorkingDate then
--        lv_AfterNextWorkingDate := to_date(p_LastWorkingDate,'dd/mm/yyyy')-1;
--    end if;

    select nvl(HOLIDAYTYPE,'GENERAL') INTO lv_HolidayType from WPSHOLIDAYMASTER 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
      AND HOLIDAYDATE = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
    
    
    SELECT FORTNIGHTSTARTDATE, FORTNIGHTENDDATE into lv_FNStartDate, lv_FNEndDate
    FROM WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
     AND FORTNIGHTSTARTDATE <= TO_DATE(p_HolidayDate,'dd/mm/yyyy')
     AND FORTNIGHTENDDATE >= TO_DATE(p_HolidayDate,'dd/mm/yyyy') ;
     ----- chekcing for whage already process or not ----
    
    SELECT COUNT(*) into lv_Cnt FROM WPSWAGESDETAILS_MV  
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
    AND YEARCODE = p_YearCode 
    AND FORTNIGHTSTARTDATE = lv_FNStartDate
    AND FORTNIGHTENDDATE = lv_FNEndDate;
    
    if lv_Cnt > 0 then
        lv_error_remark := 'Validation Failure : [WAGES ALREADY PROCESS]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;    
    ------- holiday data delete -----------
    DELETE FROM WPSHOLIDAYDATA 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
    AND HOLIDAY = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
    ---- ATTENDANCE DATA DELETE FROM ATTENANCDE TABLE BASED HOLIDAY DATE AND ATTENDANCE TAG ----
    DELETE FROM WPSATTENDANCEDAYWISE 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
      AND YEARCODE = p_YearCode 
      AND DATEOFATTENDANCE = TO_DATE(p_HolidayDate,'DD/MM/YYYY')
      AND ATTENDANCETAG = 'HD';
    
    lv_Cnt :=0;
    if nvl(lv_ConsiderBothSideWorking,'N') = 'Y' and nvl(lv_ConsiderEitherSideWorking,'N') ='Y' then
        lv_Cnt :=2;
        lv_UnionOrInersectSql := 'INTERSECT';
        IF lv_ConsiderBothSideCondition IS NOT NULL THEN
            lv_WorkerselectionCondition :=lv_ConsiderBothSideCondition;
        END IF;
    ELSif nvl(lv_ConsiderBothSideWorking,'N') = 'Y' then
        lv_Cnt :=1;
        lv_UnionOrInersectSql := 'INTERSECT';
        IF lv_ConsiderBothSideCondition IS NOT NULL THEN
            lv_WorkerselectionCondition :=lv_ConsiderBothSideCondition;
        END IF;
    elsif nvl(lv_ConsiderEitherSideWorking,'N') ='Y' then
        lv_Cnt :=1;
        lv_UnionOrInersectSql := 'UNION';
        IF lv_ConsiderBothSideCondition IS NOT NULL THEN
            lv_WorkerselectionCondition :=lv_ConsiderEitherSideCondition;
        END IF;
    end if; 
    
    
    Case lv_HolidayType
        when 'GENERAL' then
         for i in  1 .. lv_Cnt loop    
            if lv_Cnt=2 and i = 2 then
                if lv_UnionOrInersectSql = 'INTERSECT' then
                    lv_UnionOrInersectSql := 'UNION';
                else
                    lv_UnionOrInersectSql := 'INTERSECT';
                end if;
                
                if lv_WorkerselectionCondition = lv_ConsiderBothSideCondition then
                    lv_WorkerselectionCondition :=lv_ConsiderEitherSideCondition;
                else
                    lv_WorkerselectionCondition := lv_ConsiderBothSideCondition;
                end if;
            end if;
            ---- DATAA INSERT FOR THOSE WORKER WHO WORKED IN BOTH LATST WORKING DATE OR NEXT WORKING DATE , 
            ---- IN CASE WHO NOT MAINTAIN THE NEXT WORKING DATE THEN WE CONSIDER NEXT WORKING VAIRABLE VALUE SAME AS LAST WORKING DATE VALUE
                lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                        ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, SYSROWID, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                        ||' 0 ATTENDANCEHOURS, '||lv_HolidayHours||' HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                        ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', 1 AS SYSROWID, SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                        ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                        ||' ( '||CHR(10);
                        IF lv_UnionOrInersectSql = 'UNION' THEN
                            lv_SqlStr := lv_SqlStr || 'SELECT A.WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE FROM ' ||CHR(10);
                        ELSE
                            lv_SqlStr := lv_SqlStr ||'     SELECT DISTINCT WORKERSERIAL FROM '||CHR(10);
                        END IF;
                        lv_SqlStr := lv_SqlStr ||'      ( '||CHR(10) 
                        ||'         SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                        ||'         WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10) 
                        ||'           AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                        ||'           AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                            --IF lv_ConsiderBothSideCondition IS NOT NULL THEN
                        ||'          '||lv_WorkerselectionCondition||' '||CHR(10); 
                            --END IF;
                        lv_SqlStr := lv_SqlStr ||'         GROUP BY WORKERSERIAL '||CHR(10)
                        ||'         HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                        ||'         '||lv_UnionOrInersectSql||' '||CHR(10)                  -- UNION 
                        ||'         SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                        ||'         WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'           AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                        ||'           AND A.DATEOFATTENDANCE = TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                            --IF lv_ConsiderBothSideCondition IS NOT NULL THEN
                        ||'          '||lv_WorkerselectionCondition||' '||CHR(10); ---------- SELECTED WORKER
                            --END IF;
                        lv_SqlStr := lv_SqlStr ||'         GROUP BY WORKERSERIAL '||CHR(10)
                        ||'         HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                        ||'      )'||CHR(10); 
                        IF lv_UnionOrInersectSql = 'UNION'  THEN
                            lv_SqlStr := lv_SqlStr ||'       A, WPSATTENDANCEDAYWISE B '||CHR(10)
                                    ||'        WHERE A.WORKERSERIAL= B.WORKERSERIAL  '||CHR(10)
                                    ||'         AND B.DATEOFATTENDANCE IN (TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY''), TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'')) '||CHR(10)   
                                    ||'         GROUP BY A.WORKERSERIAL '||CHR(10);
                        END IF;
                        lv_SqlStr := lv_SqlStr ||' ) C,        '||CHR(10)
                        ||' (           '||CHR(10)
                        ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                        ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                        ||'                         ) '||CHR(10)
                        ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                        ||'     AND APPLICABLE = ''YES''  '||CHR(10) 
                        ||' ) E '||CHR(10)
                        ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10);
                        
                        IF lv_UnionOrInersectSql = 'UNION'  THEN
                            lv_SqlStr := lv_SqlStr ||' AND ( A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') OR A.DATEOFATTENDANCE = TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'')) '||CHR(10);
                        ELSE
                            lv_SqlStr := lv_SqlStr ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10);
                        END IF; 
                        lv_SqlStr := lv_SqlStr ||'   AND A.SPELLTYPE = ''SPELL 1'' '||CHR(10)
                        ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10) 
                        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10);
                       
                         IF lv_UnionOrInersectSql = 'UNION'  THEN
                            lv_SqlStr := lv_SqlStr ||' AND A.WORKERSERIAL = C.WORKERSERIAL AND A.DATEOFATTENDANCE = C.DATEOFATTENDANCE '||CHR(10); 
                        ELSE
                            lv_SqlStr := lv_SqlStr ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10);
                        END IF; 
                        
                        lv_SqlStr := lv_SqlStr ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                        ||'   AND M.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10);
                dbms_output.put_line (lv_SqlStr);                    
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                     values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                commit;
                execute immediate lv_SqlStr;
                commit;
                --dbms_output.put_line ('phase 1 complete');
                --dbms_output.put_line ('CONSIDER MASTER OFF DAY '||lv_ConsiderMasterOffDay);
           end loop;            
      
         for i in  1 .. lv_Cnt loop      
           if lv_Cnt=2 and i = 2 then
                if lv_UnionOrInersectSql = 'INTERSECT' then
                    lv_UnionOrInersectSql := 'UNION';
                else
                    lv_UnionOrInersectSql := 'INTERSECT';
                end if;
                    
                if lv_WorkerselectionCondition = lv_ConsiderBothSideCondition then
                    lv_WorkerselectionCondition :=lv_ConsiderEitherSideCondition;
                else
                    lv_WorkerselectionCondition := lv_ConsiderBothSideCondition;
                end if;
            end if;
            ---- NOW CONSIDER DAY OF ON LAST WORKING DATE --- WORKER SHOULD WORKED ON DAY BEFORE LAST WORKING DATE ----
            ---- DATA INSERT FOR THOSE WORKER WHO NOT WORKED IN BOTH LAST WORKING DATE OR NEXT WORKING DATE , DUE TO OFF DAY
            ---- OFFDAY MAY BE MILL OFF DAY OR AS PER WORKERMAST
            ---- IN CASE WHO NOT MAINTAIN THE NEXT WORKING DATE THEN WE CONSIDER NEXT WORKING VAIRABLE VALUE SAME AS LAST WORKING DATE VALUE
            lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                    ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                    ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, SYSROWID, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                    ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                    ||' 0 ATTENDANCEHOURS, '||lv_HolidayHours||' HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                    ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', 1 AS SYSROWID, SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                    ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                    ||' ( '||CHR(10);
                        IF lv_UnionOrInersectSql = 'UNION' THEN
                            lv_SqlStr := lv_SqlStr || 'SELECT A.WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE FROM' ||CHR(10);
                        ELSE
                            lv_SqlStr := lv_SqlStr ||'     SELECT DISTINCT WORKERSERIAL FROM '||CHR(10);
                        END IF;
                    lv_SqlStr := lv_SqlStr ||'      ( '||CHR(10) 
                    ||'         SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'         WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10) 
                    ||'           AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10);
                    --dbms_output.put_line ('p_DayOffDay p_LastWorkingDateDAY '||p_DayOffDay||'  '||TO_CHAR(TO_DATE(p_LastWorkingDate,'''DD/MM/YYYY''')+1,'''DAY'''));

                    IF p_DayOffDay = 'NONE' THEN
                        lv_SqlStr := lv_SqlStr ||'        AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') -1  '||CHR(10);         
                        lv_SqlStr := lv_SqlStr ||'        AND A.WORKERSERIAL IN(SELECT WORKERSERIAL FROM WPSWORKERMAST WHERE DAYOFFDAY='''||lv_LastWorkingDay||''') '||CHR(10); 
                    ELSif TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY')-1,'DAY') = p_DayOffDay THEN
                        lv_SqlStr := lv_SqlStr||'         AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') -2 '||CHR(10);
                    ELSE
                        lv_SqlStr := lv_SqlStr||'         AND 1=2'||CHR(10);                                
                    END IF;
                    
                    IF lv_ConsiderBothSideCondition IS NOT NULL THEN
                        lv_SqlStr := lv_SqlStr ||'          '||lv_ConsiderBothSideCondition||' '||CHR(10); ---------- SELECTED WORKER
                    END IF;
                    
                    lv_SqlStr := lv_SqlStr ||'         GROUP BY WORKERSERIAL '||CHR(10)
                    ||'         HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                    ||'         '||lv_UnionOrInersectSql||' '||CHR(10)                  -- UNION 
                    ||'         SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'          WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'            AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) ;
                    
                    IF p_DayOffDay = 'NONE' THEN
                        lv_SqlStr := lv_SqlStr ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +1 '||CHR(10);         
                        lv_SqlStr := lv_SqlStr ||'       AND A.WORKERSERIAL IN(SELECT WORKERSERIAL FROM WPSWORKERMAST WHERE DAYOFFDAY='''||lv_LastWorkingDay||''') '||CHR(10); ---------- SELECTED WORKER
                    ELSIF TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY')+1,'DAY') = p_DayOffDay THEN
                        lv_SqlStr := lv_SqlStr||'             AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +2 '||CHR(10);
                     ELSE
                        lv_SqlStr := lv_SqlStr||'         AND 1=2'||CHR(10);                                
                    END IF;
                    
                    IF lv_ConsiderBothSideCondition IS NOT NULL THEN
                        lv_SqlStr := lv_SqlStr ||'          '||lv_ConsiderBothSideCondition||' '||CHR(10); ---------- SELECTED WORKER
                    END IF;
                    lv_SqlStr := lv_SqlStr ||'         GROUP BY WORKERSERIAL '||CHR(10)
                    ||'         HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                    ||'      )'||CHR(10) ;
                    
                    IF lv_UnionOrInersectSql = 'UNION'  THEN
                        lv_SqlStr := lv_SqlStr ||'       A, WPSATTENDANCEDAYWISE B '||CHR(10)
                                               ||'       WHERE A.WORKERSERIAL= B.WORKERSERIAL  '||CHR(10);
                                               
                        IF p_DayOffDay = 'NONE' THEN
                            lv_SqlStr := lv_SqlStr ||'        AND B.DATEOFATTENDANCE IN ( TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') -1,TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +1 )'||CHR(10)         
                                                   ||'       AND A.WORKERSERIAL IN(SELECT WORKERSERIAL FROM WPSWORKERMAST WHERE DAYOFFDAY='''||lv_LastWorkingDay||''') '||CHR(10);        
                        ELSif TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY')-1,'DAY') = p_DayOffDay THEN
                            lv_SqlStr := lv_SqlStr||'         AND B.DATEOFATTENDANCE IN ( TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') -2 , '
                                                  ||'        ,TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +2 ) '||CHR(10);
                        ELSE
                            lv_SqlStr := lv_SqlStr||'         AND 1=2'||CHR(10);
                        END IF;
                        lv_SqlStr := lv_SqlStr ||'         GROUP BY A.WORKERSERIAL '||CHR(10);
                     END IF;
                    
                    lv_SqlStr := lv_SqlStr ||' ) C,        '||CHR(10)
                    ||' (           '||CHR(10)
                    ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                    ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                    ||'                         ) '||CHR(10)
                    ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                    ||'     AND APPLICABLE = ''YES''  '||CHR(10) 
                    ||' ) E '||CHR(10)
                    ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10); 
                  IF lv_UnionOrInersectSql = 'UNION'  THEN  
                           IF p_DayOffDay = 'NONE' THEN
                                lv_SqlStr := lv_SqlStr ||'       AND A.DATEOFATTENDANCE IN ( TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') +1 '
                                                       ||'                                  , TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +1 )'||CHR(10)         
                                                       ||'       AND A.WORKERSERIAL IN(SELECT WORKERSERIAL FROM WPSWORKERMAST WHERE DAYOFFDAY='''||lv_LastWorkingDay||''') '||CHR(10); 
                            ELSif TO_CHAR(TO_DATE(p_LastWorkingDate,'DD/MM/YYYY')+1,'DAY') = p_DayOffDay THEN
                                lv_SqlStr := lv_SqlStr||'        AND A.DATEOFATTENDANCE in ( TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') +2 '
                                                      ||'        ,TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') +2 ) '||CHR(10);
                            ELSE
                                lv_SqlStr := lv_SqlStr||'         AND 1=2'||CHR(10);                                
                            END IF;
                  END IF;                             
                    lv_SqlStr := lv_SqlStr||'   AND A.SPELLTYPE = ''SPELL 1'' '||CHR(10)
                    ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10) 
                    ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                    ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                    ||'   AND M.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10);
                --dbms_output.put_line (lv_SqlStr);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
         end loop;
         
          DELETE FROM WPSHOLIDAYDATA AA
          WHERE ROWID < ( SELECT MAX(ROWID) FROM WPSHOLIDAYDATA BB
                           WHERE AA.WORKERSERIAL = BB.WORKERSERIAL
                           AND AA.HOLIDAY=BB.HOLIDAY)
            AND HOLIDAY=TO_DATE(P_HOLIDAYDATE,'dd/mm/yyyy');
         commit;
        ------- DATA INSERT INTO ATTENDANCE TABLE ------------------
        lv_remarks := 'DATA TRANFER FROM HOLDIAY DATA TO ATTENDANCE';                
        lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, '||CHR(10) 
                ||' SHIFTCODE, DEPARTMENTCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10) 
                ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, BOOKNO,  '||CHR(10)
                ||' LOOMCODE, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, SPELLTYPE,  '||CHR(10) 
                ||' USERNAME, LASTMODIFIED, SYSROWID, UNITCODE)  '||CHR(10)
                ||' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, HOLIDAY,  '||CHR(10)  
                ||' SHIFTCODE, DEPARTMENTCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10) 
                ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO BOOKNO,  '||CHR(10) 
                ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, ''SPELL 1'' SPELLTYPE,  '||CHR(10)
                ||' USERNAME, LASTMODIFIED, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO SYSROWID, UNITCODE  '||CHR(10)
                ||' FROM WPSHOLIDAYDATA  '||CHR(10)
                ||' WHERE HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') '||CHR(10);                
        ------ NOW CHECK THE DUPLICATE WORKERSERIAL FOUND IN THE HOLIDAYDATE OR NOT? IF FOUND THEN DELETE ONE RECORD ----
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
        COMMIT;
        execute immediate lv_SqlStr;
        commit;
            --if lv_ConsiderMasterOffDay ='Y'
    end CASE;
    
        
end;
/


DROP PROCEDURE PRCWPS_HOLIDAY_PROCESS_OLD;

CREATE OR REPLACE PROCEDURE "PRCWPS_HOLIDAY_PROCESS_OLD" ( p_CompCode varchar2, p_DivisionCode varchar2, p_YearCode varchar2, 
                                                     p_UserName varchar2, p_HolidayDate varchar2,
                                                     p_LastWorkingDate varchar2, p_NextWorkingDt varchar2 default 'NONE' 
                                                   )
as
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_SqlStr               varchar2(10000):='';
lv_SqlStr1              varchar2(4000):='';
lv_Remarks              varchar2(1000) := '';
lv_SqlErrm              varchar2(500) := '';
lv_parvalues            varchar2(500) := '';   
lv_LastWorkingDay       varchar2(20) := to_date(p_LastWorkingDate,'dd/mm/yyyy');
lv_NextWorkingDay       varchar2(20);
lv_NextWorkingDate      varchar2(10):='';
lv_BeforeLastWorkingDate date;      -- for day off consider last working date
lv_AfterNextWorkingDate date;       -- for day off consider after next working date
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;

lv_ConsiderMasterOffDay varchar2(10);       --- use for Dayoff considet from worker master or not
lv_HolidayType          varchar2(20):='';
     
begin
    lv_result:='#SUCCESS#';
    lv_Remarks := 'HOLIDAY PROCESS';
    lv_parvalues := p_HolidayDate;
    lv_NextWorkingDate := p_NextWorkingDt;
    --- when next working data not required then we treat the last working date as next working data ------- 
    if (length(p_NextWorkingDt)<=0 or nvl(p_NextWorkingDt,'N') = 'N') THEN
        lv_NextWorkingDate := p_LastWorkingDate;
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    else
        lv_NextWorkingDay := to_date(lv_NextWorkingDate,'dd/mm/yyyy');
    end if;
    
    lv_BeforeLastWorkingDate := to_date(p_LastWorkingDate,'dd/mm/yyyy')-1; 
    lv_AfterNextWorkingDate := to_date(lv_NextWorkingDate,'dd/mm/yyyy')+1;
    
    select nvl(HOLIDAYTYPE,'GENERAL') INTO lv_HolidayType from WPSHOLIDAYMASTER 
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
      AND HOLIDAYDATE = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
    
    SELECT DAYOFFCONSIDER_ATTN_IMPORT INTO lv_ConsiderMasterOffDay FROM WPSWAGESPARAMETER;
    
    select FORTNIGHTSTARTDATE, FORTNIGHTENDDATE into lv_FNStartDate, lv_FNEndDate
    FROM WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
     AND FORTNIGHTSTARTDATE <= TO_DATE(p_HolidayDate,'dd/mm/yyyy')
     AND FORTNIGHTENDDATE >= TO_DATE(p_HolidayDate,'dd/mm/yyyy') ;
     ----- chekcing for whage already process or not ----
    
    SELECT COUNT(*) into lv_Cnt FROM WPSWAGESDETAILS_MV  
    WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
    AND YEARCODE = p_YearCode 
    AND FORTNIGHTSTARTDATE = lv_FNStartDate
    AND FORTNIGHTENDDATE = lv_FNEndDate;
    
    if lv_Cnt > 0 then
        lv_error_remark := 'Validation Failure : [WAGES ALREADY PROCESS]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;    
    
    
    Case lv_HolidayType
        when 'GENERAL' then
         ------- holiday data delete -----------
            DELETE FROM WPSHOLIDAYDATA 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode 
            AND HOLIDAY = TO_DATE(p_HolidayDate,'DD/MM/YYYY');
            ---- ATTENDANCE DATA DELETE FROM ATTENANCDE TABLE BASED HOLIDAY DATE AND ATTENDANCE TAG ----
            DELETE FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = p_CompCode AND DIVISIONCODE = p_DivisionCode
              AND YEARCODE = p_YearCode 
              AND DATEOFATTENDANCE = TO_DATE(p_HolidayDate,'DD/MM/YYYY')
              AND ATTENDANCETAG = 'HD';
              
            ---- DATAA INSERT FOR THOSE WORKER WHO WORKED IN BOTH LATST WORKING DATE OR NEXT WORKING DATE , 
            ---- IN CASE WHO NOT MAINTAIN THE NEXT WORKING DATE THEN WE CONSIDER NEXT WORKING VAIRABLE VALUE SAME AS LAST WORKING DATE VALUE
            lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                    ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                    ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME,LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                    ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                    ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                    ||' 0 ATTENDANCEHOURS, 8 HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                    ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF, '''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                    ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                    ||' ( '||CHR(10)
                    ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||'''  '||CHR(10) 
                    ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL '||CHR(10)
                    ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||' ) C,        '||CHR(10)
                    ||' ( '||CHR(10)
                    ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                    ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                    ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL '||CHR(10)
                    ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10) 
                    ||' ) D,        '||CHR(10)
                    ||' (           '||CHR(10)
                    ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                    ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                    ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                    ||'                         ) '||CHR(10)
                    ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                    ||'     AND APPLICABLE = ''YES''  '||CHR(10) 
                    ||' ) E '||CHR(10)
                    ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                    ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                    ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||p_LastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'   AND A.SPELLTYPE = ''SPELL 1'' '||CHR(10)
                    ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10) 
                    ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                    ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10) 
                    ||'   AND A.WORKERSERIAL = D.WORKERSERIAL '||CHR(10)
                    ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                    ||'   AND M.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10);
                    
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                               values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
            commit;
            execute immediate lv_SqlStr;
            commit;
            dbms_output.put_line ('phase 1 complete');
            dbms_output.put_line ('CONSIDER MASTER OFF DAY '||lv_ConsiderMasterOffDay);
            ---- NOW CONSIDER DAY OF ON LAST WORKING DATE --- WORKER SHOULD WORKED ON DAY BEFORE LAST WORKING DATE ----
            lv_SqlStr1 := '';
            lv_SqlStr1 := ' SELECT DISTINCT WORKERSERIAL FROM '||CHR(10)
                       || ' ( '||CHR(10) ;
            if p_LastWorkingDate = lv_NextWorkingDate then
                lv_SqlStr1 := lv_SqlStr1 ||' select distinct workerserial from WPSATTENDANCEDAYWISE '||chr(10)
                                         ||' where companycode = '''||p_CompCode||''' '||chr(10)
                                         ||'   and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                         ||'   and yearcode = '''||p_YearCode||'''  '||chr(10)
                                         ||'   and dateofattendance = to_date('''||p_LastWorkingDate||''',''dd/mm/yyyy'') '||chr(10)
                                         ||'   and nvl(ISDAYOFF,''N'') = ''Y'' '||CHR(10);
                if lv_ConsiderMasterOffDay ='Y' then
                    lv_SqlStr1 := lv_SqlStr1 ||' union all '||chr(10)
                                             ||' select WORKERSERIAL from WPSWORKERMAST '||chr(10)
                                             ||' where companycode = '''||p_CompCode||''' '||chr(10)
                                             ||'   and divisioncode = '''||p_DivisionCode||''' '||chr(10)
                                             ||'   AND NVL(active,''N'')= ''Y'' '||CHR(10)
                                             ||'   and nvl(DAYOFFDAY,''NONE'') = '''||lv_LastWorkingDay||''' '||chr(10);
                
                end if;          
                lv_SqlStr1 := lv_SqlStr1 ||') '||CHR(10);
                
                dbms_output.put_line ('lv_SqlStr1 '||lv_SqlStr1);
                
                lv_SqlStr := ' INSERT INTO  WPSHOLIDAYDATA '||CHR(10) 
                        ||' (COMPANYCODE, DIVISIONCODE,YEARCODE, HOLIDAY, BEFOREHOLIDAYDATEBASEDON,AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' GROUPCODE,SHIFTCODE, DEPARTMENTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10)  
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, OTHERHOURS, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, USERNAME, LASTMODIFIED, SERIALNO, UNITCODE) '||CHR(10) 
                        ||' SELECT A.COMPANYCODE, A.DIVISIONCODE,A.YEARCODE, TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') HOLIDAY,  A.DATEOFATTENDANCE BEFOREHOLIDAYDATEBASEDON,TO_DATE('''||lv_NextWorkingDate||''',''DD/MM/YYYY'') AFTERHOLIDAYDATEBASEDON, '||CHR(10)
                        ||' M.GROUPCODE, A.SHIFTCODE,A.DEPARTMENTCODE, A.WORKERSERIAL, A.TOKENNO, M.WORKERCATEGORYCODE, A.OCCUPATIONCODE, '||CHR(10) 
                        ||' 0 ATTENDANCEHOURS, 8 HOLIDAYHOURS, 0 OVERTIMEHOURS, 0 OTHERHOURS, '''||lv_FNStartDate||''' AS FORTNIGHTSTARTDATE, '''||lv_FNEndDate||''' AS FORTNIGHTENDDATE, '||CHR(10)  
                        ||' B.WORKERTYPECODE, ''HD'' ATTENDANCETAG, ''N'' ISDAYOFF,'''||p_UserName||''', SYSDATE LASTMODIFIED, 1 AS SERIALNO, A.UNITCODE'||CHR(10)
                        ||' FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B, WPSWORKERMAST M, '||CHR(10) 
                        ||' ( '||CHR(10)
                        ||'     SELECT WORKERSERIAL  FROM WPSATTENDANCEDAYWISE A '||CHR(10)
                        ||'     WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'       AND A.YEARCODE = '''||p_YearCode||'''         '||CHR(10) 
                        ||'       AND A.DATEOFATTENDANCE = TO_DATE('''||lv_BeforeLastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                        ||'     GROUP BY WORKERSERIAL '||CHR(10)   
                        ||'     HAVING SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0))) >= 8 '||CHR(10)
                        ||' ) C,        '||CHR(10)
                        ||' (           '||CHR(10)
                        ||'     SELECT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'     WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'     AND EFFECTIVEDATE = ( '||CHR(10) 
                        ||'                           SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
                        ||'                           WHERE COMPANYCODE = '''||p_CompCode||''' AND DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10)  
                        ||'                         ) '||CHR(10)
                        ||'     AND COMPONENTSHORTNAME = ''H_WAGES'' '||CHR(10)
                        ||'     AND APPLICABLE = ''YES''  '||CHR(10)
                        ||' ) D, '||CHR(10);
                lv_SqlStr := lv_SqlStr ||'('||lv_SqlStr1||') L '||CHR(10)         
                        ||' WHERE A.COMPANYCODE = '''||p_CompCode||''' AND A.DIVISIONCODE = '''||p_DivisionCode||''' '||CHR(10) 
                        ||'   AND A.YEARCODE = '''||p_YearCode||'''   '||CHR(10) 
                        ||'   AND A.DATEOFATTENDANCE =TO_DATE('''||lv_BeforeLastWorkingDate||''',''DD/MM/YYYY'') '||CHR(10)
                        ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)) <> 0 '||CHR(10)
                        ||'   AND SPELLTYPE = ''SPELL 1'' '||CHR(10) 
                        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10) 
                        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = C.WORKERSERIAL '||CHR(10)
                        ||'   AND A.WORKERSERIAL = L.WORKERSERIAL '||CHR(10) 
                        ||'   AND A.WORKERSERIAL = M.WORKERSERIAL '||CHR(10) 
                        ||'   AND M.WORKERCATEGORYCODE = D.WORKERCATEGORYCODE '||CHR(10);
                        
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
                ------- DATA INSERT INTO ATTENDANCE TABLE ------------------
                lv_remarks := 'DATA TRANFER FROM HOLDIAY DATA TO ATTENDANCE';                
                lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, '||CHR(10) 
                        ||' SHIFTCODE, DEPARTMENTCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, BOOKNO,  '||CHR(10)
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, SPELLTYPE,  '||CHR(10) 
                        ||' USERNAME, LASTMODIFIED, SYSROWID, UNITCODE)  '||CHR(10)
                        ||' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, HOLIDAY,  '||CHR(10)  
                        ||' SHIFTCODE, DEPARTMENTCODE, SERIALNO, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE,  '||CHR(10) 
                        ||' ATTENDANCEHOURS, HOLIDAYHOURS, OVERTIMEHOURS, MACHINECODE1, MACHINECODE2, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO BOOKNO,  '||CHR(10) 
                        ||' LINENO, HELPERNO, SARDERNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERTYPECODE, ATTENDANCETAG, ISDAYOFF, ''SPELL 1'' SPELLTYPE,  '||CHR(10)
                        ||' USERNAME, LASTMODIFIED, ''HD/''||TO_CHAR(HOLIDAY,''DDMMYYYY'')||''/''||SHIFTCODE||''/''||TOKENNO SYSROWID, UNITCODE  '||CHR(10)
                        ||' FROM WPSHOLIDAYDATA  '||CHR(10)
                        ||' WHERE HOLIDAY = TO_DATE('''||p_HolidayDate||''',''DD/MM/YYYY'') '||CHR(10);                
                ------ NOW CHECK THE DUPLICATE WORKERSERIAL FOUND IN THE HOLIDAYDATE OR NOT? IF FOUND THEN DELETE ONE RECORD ----
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'prcWPS_Holiday_Process',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_FNStartDate,lv_FNEndDate, lv_remarks);
                COMMIT;
                execute immediate lv_SqlStr;
                commit;
                
                
            end if;     
                                    
            --if lv_ConsiderMasterOffDay ='Y'
            
    end CASE;
    
        
end;
/


DROP PROCEDURE PRCWPS_IMPORTATTENDANCEDATA;

CREATE OR REPLACE PROCEDURE "PRCWPS_IMPORTATTENDANCEDATA" (  P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_MACHINECODE VARCHAR2,
                                                          P_YEARCODECODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT                          NUMBER := 0;
BEGIN

SELECT COUNT(*)
    INTO LV_CNT
    FROM (  
            SELECT TOKENNO 
              FROM WPSATTENDANCEDEVICERAWDATA
             WHERE TO_DATE(DATEOFATTENDANCE,'DD/MM/RRRR') = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')            
         );
         
    IF LV_CNT > 0 THEN
        INSERT INTO GBL_WPSATTENDANCEDAYWISE (ATTENDANCEHOURS,SPELLHOURS,DEDUCTIONHOURS,SPELLTYPE,
                    WORKERTYPECODE,OCCUPATIONCODE,WORKERCATEGORYCODE,TOKENNO,WORKERSERIAL,PAGENO,SERIALNO,SHIFTCODE,PARENTSHIFTCODE,
                    DEPARTMENTCODE,DATEOFATTENDANCE,FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,
                    COMPANYCODE,DIVISIONCODE,YEARCODE,SYSROWID,USERNAME,OPERATIONMODE,MODULE)
        SELECT MAXSPELLHOURS ATTENDANCEHOURS,MAXSPELLHOURS SPELLHOURS, 0 DEDUCTIONHOURS,D.SPELLTYPE,--'' REMARKS,'' ISDAYOFF,
               --'' LOOMCODE,'' MACHINECODE2,'' MACHINECODE1,'' SARDERNO,'' HELPERNO, 0 PAGESERIALNO,,MACHINEMANDETORY
               B.WORKERTYPECODE,NVL(C.OCCUPATIONCODE,A.OCCUPATIONCODE) OCCUPATIONCODE,
               A.WORKERCATEGORYCODE,A.TOKENNO,A.WORKERSERIAL,0 PAGENO,'1' SERIALNO,Z.SHIFTCODE, SHIFT PARENTSHIFTCODE,
               NVL(B.DEPARTMENTCODE,A.DEPARTMENTCODE) DEPARTMENTCODE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE,'' FORTNIGHTSTARTDATE,
               '' FORTNIGHTENDDATE,P_COMPCODE COMPANYCODE,P_DIVCODE DIVISIONCODE,P_YEARCODECODE YEARCODE,'' SYSROWID, P_USERNAME USERNAME,
               'A' OPERATIONMODE,'' MODULE
          FROM WPSWORKERMAST A, WPSOCCUPATIONMAST B,(SELECT DISTINCT DEPARTMENTCODE,OCCUPATIONCODE,WORKERSERIAL 
                                                       FROM WPSATTENDANCEDAYWISE
                                                      WHERE COMPANYCODE = P_COMPCODE  AND DIVISIONCODE = P_DIVCODE 
                                                        AND DATEOFATTENDANCE||WORKERSERIAL IN (SELECT MAX(DATEOFATTENDANCE)||WORKERSERIAL
                                                                                                FROM WPSATTENDANCEDAYWISE   
                                                                                               WHERE COMPANYCODE = P_COMPCODE  AND DIVISIONCODE = P_DIVCODE 
                                                                                                 AND DATEOFATTENDANCE<=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')     
                                                                                               GROUP BY WORKERSERIAL
                                                                                              )
                                                    ) C, WPSSPELLMASTER D,
                                                    (
                                                      SELECT TOKENNO,DATEOFATTENDANCE,TIMEOFATTENDANCE,SHIFTCODE,SHIFTNAME 
                                                        FROM
                                                            (  
                                                                SELECT TOKENNO,TO_DATE(DATEOFATTENDANCE,'DD/MM/RRRR') DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE
                                                                  FROM WPSATTENDANCEDEVICERAWDATA
                                                                GROUP BY TOKENNO,DATEOFATTENDANCE  
                                                                ORDER BY TOKENNO,DATEOFATTENDANCE, TIMEOFATTENDANCE   
                                                            ) A,
                                                            (
                                                                SELECT *
                                                                  FROM WPSSHIFTMAST
                                                            ) B
                                                       WHERE A.TIMEOFATTENDANCE BETWEEN B.TIMEFROM AND B.TIMETO     
                                                    ) Z
        WHERE A.COMPANYCODE = P_COMPCODE  AND A.DIVISIONCODE = P_DIVCODE   AND A.TOKENNO = Z.TOKENNO
          AND A.COMPANYCODE =B.COMPANYCODE  AND A.DIVISIONCODE =B.DIVISIONCODE  
          AND A.OCCUPATIONCODE=B.OCCUPATIONCODE
          AND A.WORKERSERIAL=C.WORKERSERIAL(+)
          AND A.COMPANYCODE=D.COMPANYCODE AND A.DIVISIONCODE =D.DIVISIONCODE;
          
          prcWPS_Attendance_b4Save;  
          PROC_SD_GTTVSACTUAL_SYNC('GBL_WPSATTENDANCEDAYWISE','A');
          COMMIT;
    END IF;
                                 
/*EXCEPTION
WHEN OTHERS THEN
 --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
 LV_SQLERRM := SQLERRM ;
 INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'prcWPS_VIEWCREATION',LV_SQLERRM,LV_SQLSTR,LV_PARVALUES,LV_FN_STDT,LV_FN_ENDT, LV_REMARKS);*/
END;
/


DROP PROCEDURE PRCWPS_IMPORT_INC_AFTERSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_IMPORT_INC_AFTERSAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSPRODINCENTIVEOENPF%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

--RETURN;
    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSPRODINCENTIVEOENPF
    WHERE ROWNUM<=1;

    select count(*)
    into lv_cnt
    from GBL_WPSPRODINCENTIVEOENPF;
        
     IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
   

  --  DELETE FROM GBL_WPSPRODINCENTIVEOENPF;
    
   -- INSERT INTO GBL_WPSPRODINCENTIVEOENPF
  --  SELECT * FROM GBL_WPSPRODINCENTIVEOENPF;
    
    

    
    FOR C1 IN (    
        SELECT  T1.TOKENNO, T1.WORKERSERIAL, MAX(T1.SHIFTCODE) SHIFTCODE,  MAX(T1.SECTIONCODE) SECTIONCODE, MAX(T1.OCCUPATIONCODE) OCCUPATIONCODE,
          MAX(T3.PROD_INC_OENPF) PROD_INC_OENPF, MAX(T3.PROD_INC_OEPF) PROD_INC_OEPF
          FROM WPSATTENDANCEDAYWISE T1, GBL_WPSPRODINCENTIVEOENPF T3,
          (  
              SELECT A.WORKERSERIAL, MAX(A.DATEOFATTENDANCE) DATEOFATTENDANCE
              FROM WPSATTENDANCEDAYWISE A,  GBL_WPSPRODINCENTIVEOENPF B
              WHERE  A.COMPANYCODE = B.COMPANYCODE
              AND A.DIVISIONCODE = B.DIVISIONCODE
              AND A.YEARCODE = B.YEARCODE
              AND A.FORTNIGHTSTARTDATE = B.FORTNIGHTSTARTDATE 
              AND A.FORTNIGHTENDDATE  = B.FORTNIGHTENDDATE
              AND A.TOKENNO = B.TOKENNO
              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0  
              GROUP BY A.WORKERSERIAL 
          ) T2
          WHERE 1= 1 
          AND T1.WORKERSERIAL = T2.WORKERSERIAL 
          AND T1.DATEOFATTENDANCE = T2.DATEOFATTENDANCE
          AND  T1.COMPANYCODE = T3.COMPANYCODE
          AND T1.DIVISIONCODE = T3.DIVISIONCODE
          AND T1.YEARCODE = T3.YEARCODE
          AND T1.FORTNIGHTSTARTDATE = T3.FORTNIGHTSTARTDATE 
          AND T1.FORTNIGHTENDDATE  = T3.FORTNIGHTENDDATE
          AND T1.TOKENNO = T3.TOKENNO
          GROUP BY  T1.TOKENNO, T1.WORKERSERIAL
    )
    LOOP
        UPDATE WPSPRODINCENTIVEOENPF 
        SET WORKERSERIAL = C1.WORKERSERIAL, SHIFTCODE = C1.SHIFTCODE, SECTIONCODE = C1.SECTIONCODE, OCCUPATIONCODE = C1.OCCUPATIONCODE,
        PROD_INC_OENPF = C1.PROD_INC_OENPF, PROD_INC_OEPF = C1.PROD_INC_OEPF
        WHERE TOKENNO = C1.TOKENNO;
    END LOOP;
    
    
--    DELETE FROM GBL_WPSPRODINCENTIVEOENPF AA
--    WHERE ROWID < ( 
--    SELECT MAX(ROWID) FROM GBL_WPSPRODINCENTIVEOENPF BB
--    WHERE AA.TOKENNO = BB.TOKENNO);
    
    
end;
/


DROP PROCEDURE PRCWPS_IMP_ATNDATA_LASTWRK_BAK;

CREATE OR REPLACE PROCEDURE "PRCWPS_IMP_ATNDATA_LASTWRK_BAK" (P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_MACHINECODE VARCHAR2,
                                                          P_YEARCODECODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT                          NUMBER := 0;
lv_DateOfAttendance  date := to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY');
lv_NextDate varchar2(10) := to_char(lv_DateOfAttendance+1,'dd/mm/yyyy');
lv_lastTime varchar2(10) := '';
lv_NextDateTime date;
lv_FirstDateTime date;    
lv_FirstInTime  varchar2(10) :='';     
lv_FNSDT    date;
lv_FNEDT    date;
lv_ddmmyyyy varchar2(30) := replace(P_DATEOFATTENDANCE,'/','');
LV_SQLERRM VARCHAR2(2000):='';
BEGIN


if to_number(substr(P_DATEOFATTENDANCE,1,2)) >= 16 then
    lv_FNSDT := to_date('16'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := LAST_DAY(lv_DateOfAttendance);   
else
    lv_FNSDT := to_date('01'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := to_date('15'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
end if;

select TIMETO1 into lv_lastTime from wpsshiftmast where shiftcode = '3';
select TIMEFROM into lv_FirstInTime from wpsshiftmast where shiftcode = '1';

lv_NextDateTime := TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS');
lv_FirstDateTime := TO_DATE(P_DATEOFATTENDANCE||' '||lv_FirstInTime ,'DD/MM/YYYY HH24:MI:SS');
--dbms_output.put_line(to_char(lv_NextDateTime,'dd/mm/yyyy HH24:MI:SS'));
    
SELECT COUNT(*)
    INTO LV_CNT
    FROM (  
            SELECT TOKENNO FROM WPSATTENDANCEDEVICERAWDATA
            WHERE TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime
              AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') <= lv_NextDateTime
         );
--dbms_output.put_line ('No of records : '||LV_CNT);     
         
    IF LV_CNT > 0 THEN
    
        --- START DATA PREPARE BASED ON LAST WORKING DEPT,OCP,MACHINE, LOOM, HELPER, SARDER
        DELETE FROM GBL_WPSLASTWORKING_DEPT;
        
        INSERT INTO GBL_WPSLASTWORKING_DEPT ( 
        WORKERSERIAL, DEPARTMENTCODE, OCCUPATIONCODE, MACHINECODE1, MACHINECODE2, LOOMCODE, HELPERNO, SARDERNO)
        SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, A.OCCUPATIONCODE, A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO
        FROM WPSATTENDANCEDAYWISE A,
        (
            SELECT WORKERSERIAL, MAX(DATEOFATTENDANCE) DATEOFATTENDANCE
            FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE 
            AND DATEOFATTENDANCE < to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY')
            AND ATTENDANCETAG = 'DEVICE'
            AND SPELLTYPE = 'SPELL 1'
            GROUP BY WORKERSERIAL
        ) B
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
        AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE
        AND A.WORKERSERIAL = B.WORKERSERIAL
        AND A.ATTENDANCETAG = 'DEVICE'
        AND A.SPELLTYPE = 'SPELL 1';    
        --- END DATA PREPARE BASED ON LAST WORKING DEPT,OCP,MACHINE, LOOM, HELPER, SARDER
           
        UPDATE WPSATTENDANCEDEVICERAWDATA SET DATEOFATTENDANCE= SUBSTR(ATTENDATETIME,1,10), TIMEOFATTENDANCE =  SUBSTR(ATTENDATETIME,12)
        WHERE DATEOFATTENDANCE IS NULL
          AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime; 
        
        ----- FOLLOWING UPDATE STATEMENT WRIITEN DUE TO SOME JUNK CHARETER FOUND IN CSV FILE FORMAT INPORTING 
        UPDATE  WPSATTENDANCEDEVICERAWDATA SET TOKENNO = REPLACE(REPLACE(REPLACE(TOKENNO,CHR(239),''),CHR(187),''),CHR(191),'')
        WHERE TOKENNO LIKE CHR(239)||'%' OR TOKENNO LIKE CHR(187)||'%' OR TOKENNO LIKE CHR(191)||'%'; 

        
        DELETE FROM WPSATTENDANCEDAYWISE WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
        AND YEARCODE = P_YEARCODECODE
        AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
        
        INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE,DIVISIONCODE,YEARCODE, DATEOFATTENDANCE, SHIFTCODE, PARENTSHIFTCODE, 
        WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, WORKERTYPECODE,   
        ATTENDANCEHOURS,SPELLHOURS,DEDUCTIONHOURS,
        MACHINECODE1, MACHINECODE2, LOOMCODE, HELPERNO, SARDERNO,
        SPELLTYPE, SERIALNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
        SYSROWID,USERNAME,MODULE, ATTENDANCETAG, BOOKNO, UNITCODE )
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) SPELLHOURS, 0 DEDUCTIONHOURS,
        A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO,
        'SPELL 1' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B,  
        (
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE,
            A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
            NVL(B.DEPARTMENTCODE,NVL(A.DEPARTMENTCODE,'NA')) DEPARTMENTCODE, 
            NVL(B.OCCUPATIONCODE,NVL(A.OCCUPATIONCODE,'01')) OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE,
            NVL(B.MACHINECODE1,'') MACHINECODE1, NVL(B.MACHINECODE2,'') MACHINECODE2,
            NVL(B.LOOMCODE,'') LOOMCODE, NVL(B.HELPERNO,'') HELPERNO, NVL(B.SARDERNO,'') SARDERNO,
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
            FROM WPSWORKERMAST A,  GBL_WPSLASTWORKING_DEPT B,
            ( 
              SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B  
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TIMEOFATTENDANCE <= TIMETO
                AND TIMEOFATTENDANCE >= TIMETO1
                AND B.SHIFTCODE = '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
              UNION ALL
              SELECT A.TOKENNO, P_DATEOFATTENDANCE DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B 
              WHERE A.DATEOFATTENDANCE = lv_NextDate
                AND B.SHIFTCODE = '3'
                AND TIMEOFATTENDANCE <= TIMETO1
              GROUP BY A.TOKENNO, DATEOFATTENDANCE              
            ) C
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO = C.TOKENNO 
            AND A.WORKERSERIAL = B.WORKERSERIAL (+)
        ) A
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE     
        UNION ALL       --- DATA INSERT FOR SPELL 2 
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) SPELLHOURS, 0 DEDUCTIONHOURS,
        A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO,
        'SPELL 2' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B,  
        (
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE, A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
             NVL(B.DEPARTMENTCODE,NVL(A.DEPARTMENTCODE,'NA')) DEPARTMENTCODE,
             NVL(B.OCCUPATIONCODE,NVL(A.OCCUPATIONCODE,'01')) OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE,
             NVL(B.MACHINECODE1,'') MACHINECODE1, NVL(B.MACHINECODE2,'') MACHINECODE2,
             NVL(B.LOOMCODE,'') LOOMCODE, NVL(B.HELPERNO,'') HELPERNO, NVL(B.SARDERNO,'') SARDERNO, 
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
            FROM WPSWORKERMAST A,  GBL_WPSLASTWORKING_DEPT B,
            ( 
              SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B  
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TIMEOFATTENDANCE <= TIMETO
                AND TIMEOFATTENDANCE >= TIMETO1
                AND B.SHIFTCODE = '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
              UNION ALL
              SELECT A.TOKENNO, P_DATEOFATTENDANCE DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B 
              WHERE A.DATEOFATTENDANCE = lv_NextDate
                AND B.SHIFTCODE = '3'
                AND TIMEOFATTENDANCE <= TIMETO1
              GROUP BY A.TOKENNO, DATEOFATTENDANCE              
            ) C
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO = C.TOKENNO
            AND A.WORKERSERIAL = B.WORKERSERIAL (+) 
        ) A
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE
          AND A.SHIFTCODE <> '3'; 
             
          COMMIT;
    
    END IF;
                                 
EXCEPTION
WHEN OTHERS THEN
 --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
 LV_SQLERRM := SQLERRM ;
 INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_ATTNDATA_ONMASTER',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'ATTENDANCE DATA IMPORT');
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNDATA_LASTWORK;

CREATE OR REPLACE PROCEDURE "PRCWPS_IMP_ATTNDATA_LASTWORK" (P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_MACHINECODE VARCHAR2,
                                                          P_YEARCODECODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT                          NUMBER := 0;
lv_DateOfAttendance  date := to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY');
lv_NextDate varchar2(10) := to_char(lv_DateOfAttendance+1,'dd/mm/yyyy');
lv_lastTime varchar2(10) := '';
lv_NextDateTime date;
lv_FirstDateTime date;    
lv_FirstInTime  varchar2(10) :='';     
lv_FNSDT    date;
lv_FNEDT    date;
lv_ddmmyyyy varchar2(30) := replace(P_DATEOFATTENDANCE,'/','');
LV_SQLERRM VARCHAR2(2000):='';
lv_Sql      varchar2(6000) := '';
BEGIN


if to_number(substr(P_DATEOFATTENDANCE,1,2)) >= 16 then
    lv_FNSDT := to_date('16'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := LAST_DAY(lv_DateOfAttendance);   
else
    lv_FNSDT := to_date('01'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := to_date('15'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
end if;

select TIMETO1 into lv_lastTime from wpsshiftmast where shiftcode = '3';
select TIMEFROM into lv_FirstInTime from wpsshiftmast where shiftcode = '1';

lv_NextDateTime := TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS');
lv_FirstDateTime := TO_DATE(P_DATEOFATTENDANCE||' '||lv_FirstInTime ,'DD/MM/YYYY HH24:MI:SS');
--dbms_output.put_line(to_char(lv_NextDateTime,'dd/mm/yyyy HH24:MI:SS'));
    
SELECT COUNT(*)
    INTO LV_CNT
    FROM (  
            SELECT TOKENNO FROM WPSATTENDANCEDEVICERAWDATA
            WHERE TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime
              AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') <= lv_NextDateTime
         );
--dbms_output.put_line ('No of records : '||LV_CNT);     
         
    IF LV_CNT > 0 THEN
    
        --- START DATA PREPARE BASED ON LAST WORKING DEPT,OCP,MACHINE, LOOM, HELPER, SARDER
        DELETE FROM GBL_WPSLASTWORKING_DEPT;
        
        INSERT INTO GBL_WPSLASTWORKING_DEPT ( 
        WORKERSERIAL, DEPARTMENTCODE, OCCUPATIONCODE, MACHINECODE1, MACHINECODE2, LOOMCODE, HELPERNO, SARDERNO)
        SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, A.OCCUPATIONCODE, A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO
        FROM WPSATTENDANCEDAYWISE A,
        (
            SELECT WORKERSERIAL, MAX(DATEOFATTENDANCE) DATEOFATTENDANCE
            FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE 
            AND DATEOFATTENDANCE < to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY')
            AND ATTENDANCETAG = 'DEVICE'
            AND SPELLTYPE = 'SPELL 1'
            GROUP BY WORKERSERIAL
        ) B
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
        AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE
        AND A.WORKERSERIAL = B.WORKERSERIAL
        AND A.ATTENDANCETAG = 'DEVICE'
        AND A.SPELLTYPE = 'SPELL 1';    
        --- END DATA PREPARE BASED ON LAST WORKING DEPT,OCP,MACHINE, LOOM, HELPER, SARDER
           
        UPDATE WPSATTENDANCEDEVICERAWDATA SET DATEOFATTENDANCE= SUBSTR(ATTENDATETIME,1,10), TIMEOFATTENDANCE =  SUBSTR(ATTENDATETIME,12)
        WHERE DATEOFATTENDANCE IS NULL
          AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime; 
        
        ----- FOLLOWING UPDATE STATEMENT WRIITEN DUE TO SOME JUNK CHARETER FOUND IN CSV FILE FORMAT INPORTING 
        UPDATE  WPSATTENDANCEDEVICERAWDATA SET TOKENNO = REPLACE(REPLACE(REPLACE(TOKENNO,CHR(239),''),CHR(187),''),CHR(191),'')
        WHERE TOKENNO LIKE CHR(239)||'%' OR TOKENNO LIKE CHR(187)||'%' OR TOKENNO LIKE CHR(191)||'%'; 

        
        DELETE FROM WPSATTENDANCEDAYWISE WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
        AND YEARCODE = P_YEARCODECODE
        AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
        
 -- start TEMPORARY TABLE CREATE FOR 1st SPELL THEN CHECK THE WORKER PROESENT IN 2nd SPELL OR NOT
        DELETE FROM GBL_WPS_PRESENT_SPELL1;
        
        lv_Sql := ' INSERT INTO GBL_WPS_PRESENT_SPELL1  '||CHR(10) 
                ||' (DATEOFATTENDANCE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, GROUPCODE, UNITCODE, SHIFTCODE) '||CHR(10)
                ||' SELECT DISTINCT TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') DATEOFATTENDANCE, '||chr(10)
                ||' A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, '||chr(10) 
                ||' NVL(A.DEPARTMENTCODE,''NA'') DEPARTMENTCODE, '||chr(10) 
                ||' NVL(A.OCCUPATIONCODE,''01'') OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE, '||chr(10)
                ||' (SELECT SHIFTCODE FROM WPSSHIFTMAST '||chr(10)     
                ||'     WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE '||chr(10)
                ||' FROM WPSWORKERMAST A,  '||chr(10)  
                ||' ( '||chr(10) 
                ||'     SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE '||chr(10) 
                ||'     FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B '||chr(10)  
                ||'     WHERE A.DATEOFATTENDANCE = '''||P_DATEOFATTENDANCE||''' '||chr(10)
                ||'     AND A.TIMEOFATTENDANCE <= GRACETIMETO '||chr(10)      -- TIMETO
                ||'     AND TIMEOFATTENDANCE >= GRACETIMETO1 '||chr(10)       -- TIMETO1  
                ||'     AND B.SHIFTCODE = ''3'' '||chr(10)
                ||'     GROUP BY A.TOKENNO, A.DATEOFATTENDANCE '||chr(10)
                ||'     UNION ALL   '||chr(10)
                ||'     SELECT A.TOKENNO, '''||P_DATEOFATTENDANCE||''' DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE '||chr(10) 
                ||'     FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B '||chr(10) 
                ||'     WHERE A.DATEOFATTENDANCE = '''||lv_NextDate||''' '||chr(10)
                ||'     AND B.SHIFTCODE = ''3'' '||chr(10)
                ||'     AND TIMEOFATTENDANCE <= GRACETIMETO1 '||chr(10)         -- TIMETO1 
                ||'     GROUP BY A.TOKENNO, DATEOFATTENDANCE '||chr(10)              
                ||' ) C '||chr(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
                ||' AND A.TOKENNO = C.TOKENNO '||chr(10); 
            
        insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        values( 'PRCWPS_IMP_ATTNDATA_ONMASTER',LV_SQLERRM,SYSDATE,lv_Sql,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER');
        EXECUTE IMMEDIATE lv_Sql;
        COMMIT;        
        
        INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE,DIVISIONCODE,YEARCODE, DATEOFATTENDANCE, SHIFTCODE, PARENTSHIFTCODE, 
        WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, WORKERTYPECODE,   
        ATTENDANCEHOURS,SPELLHOURS,DEDUCTIONHOURS,
        MACHINECODE1, MACHINECODE2, LOOMCODE, HELPERNO, SARDERNO,
        SPELLTYPE, SERIALNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
        SYSROWID,USERNAME,MODULE, ATTENDANCETAG, BOOKNO, UNITCODE )
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) SPELLHOURS, 0 DEDUCTIONHOURS,
        A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO,
        'SPELL 1' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B,  
        (
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE,
            A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
            NVL(B.DEPARTMENTCODE,NVL(A.DEPARTMENTCODE,'NA')) DEPARTMENTCODE, 
            NVL(B.OCCUPATIONCODE,NVL(A.OCCUPATIONCODE,'01')) OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE,
            NVL(B.MACHINECODE1,'') MACHINECODE1, NVL(B.MACHINECODE2,'') MACHINECODE2,
            NVL(B.LOOMCODE,'') LOOMCODE, NVL(B.HELPERNO,'') HELPERNO, NVL(B.SARDERNO,'') SARDERNO,
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
            FROM WPSWORKERMAST A,  GBL_WPSLASTWORKING_DEPT B, --GBL_WPS_PRESENT_SPELL1 C
            ( 
              SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B  
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TIMEOFATTENDANCE <= TIMETO
                AND TIMEOFATTENDANCE >= TIMETO1
                AND B.SHIFTCODE = '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
              UNION ALL
              SELECT A.TOKENNO, P_DATEOFATTENDANCE DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B 
              WHERE A.DATEOFATTENDANCE = lv_NextDate
                AND B.SHIFTCODE = '3'
                AND TIMEOFATTENDANCE <= TIMETO1
              GROUP BY A.TOKENNO, DATEOFATTENDANCE              
            ) C 
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO = C.TOKENNO 
            AND A.WORKERSERIAL = B.WORKERSERIAL (+)
        ) A
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE     
        UNION ALL       --- DATA INSERT FOR SPELL 2 
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) SPELLHOURS, 0 DEDUCTIONHOURS,
        A.MACHINECODE1, A.MACHINECODE2, A.LOOMCODE, A.HELPERNO, A.SARDERNO,
        'SPELL 2' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B,  
        (
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE, A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
             NVL(B.DEPARTMENTCODE,NVL(A.DEPARTMENTCODE,'NA')) DEPARTMENTCODE,
             NVL(B.OCCUPATIONCODE,NVL(A.OCCUPATIONCODE,'01')) OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE,
             NVL(B.MACHINECODE1,'') MACHINECODE1, NVL(B.MACHINECODE2,'') MACHINECODE2,
             NVL(B.LOOMCODE,'') LOOMCODE, NVL(B.HELPERNO,'') HELPERNO, NVL(B.SARDERNO,'') SARDERNO, 
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
             --C.SHIFTCODE
            FROM WPSWORKERMAST A,  GBL_WPSLASTWORKING_DEPT B,
            ( 
              SELECT A.TOKENNO, A.DATEOFATTENDANCE, MIN(A.TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B , GBL_WPS_PRESENT_SPELL1 C      -- ATTN_SPELL1 NEW ADD 
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TOKENNO = C.TOKENNO
                AND A.DATEOFATTENDANCE = TO_CHAR(C.DATEOFATTENDANCE,'DD/MM/YYYY')
                AND B.SHIFTCODE = C.SHIFTCODE              
                AND A.TIMEOFATTENDANCE <= TIMETO
                AND TIMEOFATTENDANCE >= TIMETO1
                AND B.SHIFTCODE <> '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
            ) C
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO = C.TOKENNO
            AND A.WORKERSERIAL = B.WORKERSERIAL (+) 
        ) A
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE
          AND A.SHIFTCODE <> '3'; 
             
          COMMIT;
    
    END IF;
                                 
EXCEPTION
WHEN OTHERS THEN
 --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
 LV_SQLERRM := SQLERRM ;
 INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_ATTNDATA_ONMASTER',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'ATTENDANCE DATA IMPORT');
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNDATA_ONMASTER;

CREATE OR REPLACE PROCEDURE "PRCWPS_IMP_ATTNDATA_ONMASTER" (P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_MACHINECODE VARCHAR2,
                                                          P_YEARCODECODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT                          NUMBER := 0;
lv_Cnt1                         NUMBER := 0;
lv_DateOfAttendance  date := to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY');
lv_NextDate varchar2(10) := to_char(lv_DateOfAttendance+1,'dd/mm/yyyy');
lv_lastTime varchar2(10) := '';
lv_NextDateTime date;
lv_FirstDateTime date;    
lv_FirstInTime  varchar2(10) :='';     
lv_FNSDT    date;
lv_FNEDT    date;
lv_ddmmyyyy varchar2(30) := replace(P_DATEOFATTENDANCE,'/','');
LV_SQLERRM VARCHAR2(2000):='';
lv_Sql        varchar2(6000):='';
BEGIN


if to_number(substr(P_DATEOFATTENDANCE,1,2)) >= 16 then
    lv_FNSDT := to_date('16'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := LAST_DAY(lv_DateOfAttendance);   
else
    lv_FNSDT := to_date('01'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    lv_FNEDT := to_date('15'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
end if;

select TIMETO1 into lv_lastTime from wpsshiftmast where shiftcode = '3';
select TIMEFROM into lv_FirstInTime from wpsshiftmast where shiftcode = '1';

--lv_lastTime := '02:29:59';

--dbms_output.put_line('Next date '||lv_NextDate||' next time '||lv_lastTime);

--dbms_output.put_line('Next date '||to_char(TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS'),'dd/mm/yyyy HH24:MI:SS'));
lv_NextDateTime := TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS');
lv_FirstDateTime := TO_DATE(P_DATEOFATTENDANCE||' '||lv_FirstInTime ,'DD/MM/YYYY HH24:MI:SS');
--dbms_output.put_line(to_char(lv_NextDateTime,'dd/mm/yyyy HH24:MI:SS'));
    
SELECT COUNT(*)
    INTO LV_CNT
    FROM (  
            SELECT TOKENNO FROM WPSATTENDANCEDEVICERAWDATA
            --WHERE TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS')                          
            WHERE TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime
              AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') <= lv_NextDateTime
         );
--dbms_output.put_line ('No of records : '||LV_CNT);     
         
    IF LV_CNT > 0 THEN       
         ----- NEW START ADD ON 04/04/2016   UPDATE DATE OF ATTENDANCE AND TIME OF ATTENDANCE
        UPDATE WPSATTENDANCEDEVICERAWDATA SET DATEOFATTENDANCE= SUBSTR(ATTENDATETIME,1,10), TIMEOFATTENDANCE =  SUBSTR(ATTENDATETIME,12)
        WHERE DATEOFATTENDANCE IS NULL
          AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime; 
        --AND SUBSTR(ATTENDATETIME,1,10) = P_DATEOFATTENDANCE;
        ----- NEW END ADD ON 04/04/2016   UPDATE DATE OF ATTENDANCE AND TIME OF ATTENDANCE
        
        ----- FOLLOWING UPDATE STATEMENT WRIITEN DUE TO SOME JUNK CHARETER FOUND IN CSV FILE FORMAT INPORTING 
        UPDATE  WPSATTENDANCEDEVICERAWDATA SET TOKENNO = REPLACE(REPLACE(REPLACE(TOKENNO,CHR(239),''),CHR(187),''),CHR(191),'')
        WHERE TOKENNO LIKE CHR(239)||'%' OR TOKENNO LIKE CHR(187)||'%' OR TOKENNO LIKE CHR(191)||'%'; 

        
        DELETE FROM WPSATTENDANCEDAYWISE WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
        AND YEARCODE = P_YEARCODECODE
        AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
        
        -- start TEMPORARY TABLE CREATE FOR 1st SPELL THEN CHECK THE WORKER PROESENT IN 2nd SPELL OR NOT
        DELETE FROM GBL_WPS_PRESENT_SPELL1;
        
        lv_Sql := ' INSERT INTO GBL_WPS_PRESENT_SPELL1  '||CHR(10) 
                ||' (DATEOFATTENDANCE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, GROUPCODE, UNITCODE, SHIFTCODE) '||CHR(10)
                ||' SELECT DISTINCT TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') DATEOFATTENDANCE, '||chr(10)
                ||' A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, '||chr(10) 
                ||' NVL(A.DEPARTMENTCODE,''NA'') DEPARTMENTCODE, '||chr(10) 
                ||' NVL(A.OCCUPATIONCODE,''01'') OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE, '||chr(10)
                ||' (SELECT SHIFTCODE FROM WPSSHIFTMAST '||chr(10)     
                ||'     WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE '||chr(10)
                ||' FROM WPSWORKERMAST A,  '||chr(10)  
                ||' ( '||chr(10) 
                ||'     SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE '||chr(10) 
                ||'     FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B '||chr(10)  
                ||'     WHERE A.DATEOFATTENDANCE = '''||P_DATEOFATTENDANCE||''' '||chr(10)
                ||'     AND A.TIMEOFATTENDANCE <= GRACETIMETO '||chr(10)      -- TIMETO
                ||'     AND TIMEOFATTENDANCE >= GRACETIMETO1 '||chr(10)       -- TIMETO1  
                ||'     AND B.SHIFTCODE = ''3'' '||chr(10)
                ||'     GROUP BY A.TOKENNO, A.DATEOFATTENDANCE '||chr(10)
                ||'     UNION ALL   '||chr(10)
                ||'     SELECT A.TOKENNO, '''||P_DATEOFATTENDANCE||''' DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE '||chr(10) 
                ||'     FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B '||chr(10) 
                ||'     WHERE A.DATEOFATTENDANCE = '''||lv_NextDate||''' '||chr(10)
                ||'     AND B.SHIFTCODE = ''3'' '||chr(10)
                ||'     AND TIMEOFATTENDANCE <= GRACETIMETO1 '||chr(10)         -- TIMETO1 
                ||'     GROUP BY A.TOKENNO, DATEOFATTENDANCE '||chr(10)              
                ||' ) C '||chr(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
                ||' AND A.TOKENNO = C.TOKENNO '||chr(10); 
            
        insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        values( 'PRCWPS_IMP_ATTNDATA_ONMASTER',LV_SQLERRM,SYSDATE,lv_Sql,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER');
        EXECUTE IMMEDIATE lv_Sql;
        COMMIT;

        
        ---- end ----------
        
        
        
        
        INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE,DIVISIONCODE,YEARCODE, DATEOFATTENDANCE, SHIFTCODE, PARENTSHIFTCODE, 
        WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, WORKERTYPECODE,   
        ATTENDANCEHOURS,SPELLHOURS,DEDUCTIONHOURS,SPELLTYPE, SERIALNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
        SYSROWID,USERNAME,MODULE, ATTENDANCETAG, BOOKNO, UNITCODE )
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',5,DECODE(A.SHIFTCODE,'2',3,8)) SPELLHOURS, 0 DEDUCTIONHOURS,
        'SPELL 1' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B, GBL_WPS_PRESENT_SPELL1 A
        /*(
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE,
            A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
            NVL(A.DEPARTMENTCODE,'NA') DEPARTMENTCODE, 
            NVL(A.OCCUPATIONCODE,'01') OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE,
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
            FROM WPSWORKERMAST A,  
            ( 
              SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B  
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TIMEOFATTENDANCE <= TIMETO
                AND TIMEOFATTENDANCE >= TIMETO1
                AND B.SHIFTCODE = '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
              UNION ALL
              SELECT A.TOKENNO, P_DATEOFATTENDANCE DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B 
              WHERE A.DATEOFATTENDANCE = lv_NextDate
                AND B.SHIFTCODE = '3'
                AND TIMEOFATTENDANCE <= TIMETO1
              GROUP BY A.TOKENNO, DATEOFATTENDANCE              
            ) C
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO = C.TOKENNO 
        ) A*/
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE     
        UNION ALL       --- DATA INSERT FOR SPELL 2 
        SELECT P_COMPCODE COMPANYCODE, P_DIVCODE DIVISIONCODE, P_YEARCODECODE YEARCODE, DATEOFATTENDANCE, SHIFTCODE, A.GROUPCODE,
        A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, A.DEPARTMENTCODE, A.OCCUPATIONCODE, B.WORKERTYPECODE,
        DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) ATTENDANCEHOURS, DECODE(A.SHIFTCODE,'1',3,DECODE(A.SHIFTCODE,'2',5,0)) SPELLHOURS, 0 DEDUCTIONHOURS,
        'SPELL 2' SPELLTYPE, 1 SERIALNO, lv_FNSDT FORTNIGHTSTARTDATE, lv_FNEDT FORTNIGHTENDDATE,
        1 SYSROWID, 'SWT' USERNAME,'WPS' MODULE, 'DEVICE' ATTENDANCETAG, 'ATTN/'||lv_ddmmyyyy||'/'||A.WORKERSERIAL||'/'||A.SHIFTCODE  AS BOOKNO, A.UNITCODE
        FROM WPSOCCUPATIONMAST B,  
        (
            SELECT DISTINCT TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') DATEOFATTENDANCE, A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, 
             A.DEPARTMENTCODE DEPARTMENTCODE, 
             NVL(A.OCCUPATIONCODE,'01') OCCUPATIONCODE, A.GROUPCODE, A.UNITCODE, 
            (SELECT SHIFTCODE FROM WPSSHIFTMAST 
                         WHERE ((TIMEFROM <= TIMEOFATTENDANCE AND TIMETO >= TIMEOFATTENDANCE) OR (TIMEFROM1 <= TIMEOFATTENDANCE AND TIMETO1 >= TIMEOFATTENDANCE))) SHIFTCODE
            FROM WPSWORKERMAST A,  
            ( 
              /*SELECT TOKENNO, DATEOFATTENDANCE, MIN(TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA WHERE DATEOFATTENDANCE = P_DATEOFATTENDANCE
              GROUP BY TOKENNO, DATEOFATTENDANCE */
              SELECT A.TOKENNO, A.DATEOFATTENDANCE, MIN(A.TIMEOFATTENDANCE) TIMEOFATTENDANCE 
              FROM WPSATTENDANCEDEVICERAWDATA A, WPSSHIFTMAST B, GBL_WPS_PRESENT_SPELL1 C      -- ATTN_SPELL1 NEW ADD
              WHERE A.DATEOFATTENDANCE = P_DATEOFATTENDANCE
                AND A.TOKENNO = C.TOKENNO
                AND A.DATEOFATTENDANCE = TO_CHAR(C.DATEOFATTENDANCE,'DD/MM/YYYY')
                AND B.SHIFTCODE = C.SHIFTCODE
                AND A.TIMEOFATTENDANCE >= B.TIMEFROM1
                AND A.TIMEOFATTENDANCE <= B.GRACETIMETO1
                AND B.SHIFTCODE <> '3'
              GROUP BY A.TOKENNO, A.DATEOFATTENDANCE
            ) C
            WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
            AND A.ATTNIDENTIFICATION = C.TOKENNO 
        ) A
        WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE
          AND A.SHIFTCODE <> '3';    
          COMMIT;
    
    END IF;
                                 
EXCEPTION
WHEN OTHERS THEN
 --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
 LV_SQLERRM := SQLERRM ;
 INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_ATTNDATA_ONMASTER',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'ATTENDANCE DATA IMPORT');
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNOTDATA_LASTWORK;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_ATTNOTDATA_LASTWORK(P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_YEARCODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT                          NUMBER := 0;
lv_Cnt1                         NUMBER := 0;
lv_DateOfAttendance  date := to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY');
lv_NextDate varchar2(10) := to_char(lv_DateOfAttendance+1,'dd/mm/yyyy');
lv_lastTime varchar2(10) := '';
lv_NextDateTime date;
lv_FirstDateTime date;    
lv_FirstInTime  varchar2(10) :='';     
lv_FNSDT    date;
lv_FNEDT    date;
lv_ddmmyyyy varchar2(30) := replace(P_DATEOFATTENDANCE,'/','');
LV_SQLERRM VARCHAR2(2000):='';
lv_Sql        varchar2(6000):='';

lv_DayOffConsiderMaster varchar2(1) := 'Y';
lv_Day         varchar2(15):='';

lv_TmFrom_A1    varchar2(10):='';
lv_TmTo_A1      varchar2(10):='';
lv_TmFrom_A2    varchar2(10):='';
lv_TmTo_A2      varchar2(10):='';
lv_TmFrom_B1    varchar2(10):='';
lv_TmTo_B1      varchar2(10):='';
lv_TmFrom_B2    varchar2(10):='';
lv_TmTo_B2      varchar2(10):='';
lv_TmFrom_C1    varchar2(10):='';
lv_TmTo_C1      varchar2(10):='';
lv_TmFrom_C2    varchar2(10):='';
lv_TmTo_C2      varchar2(10):='';

BEGIN


/*INSERT INTO WPSATTENDANCEDEVICERAWDATA
(TOKENNO, ATTENDATETIME, DEVICEID, DATEOFATTENDANCE, TIMEOFATTENDANCE, SHIFT, ATTENHOURS)
SELECT TOKEN, SUBSTR(DT,5,2)||'/'||SUBSTR(DT,3,2)||'/20'||SUBSTR(DT,1,2)||' '||TIMEIN ATTENDATETIME, MACHINEID DEVICEID,
SUBSTR(DT,5,2)||'/'||SUBSTR(DT,3,2)||'/20'||SUBSTR(DT,1,2) DATEOFATTENDANCE, TIMEIN TIMEOFATTENDANCE
FROM GBL_ATTNRAWDATA */


    if to_number(substr(P_DATEOFATTENDANCE,1,2)) >= 16 then
        lv_FNSDT := to_date('16'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
        lv_FNEDT := LAST_DAY(lv_DateOfAttendance);   
    else
        lv_FNSDT := to_date('01'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
        lv_FNEDT := to_date('15'||substr(P_DATEOFATTENDANCE,3,8),'dd/mm/yyyy');
    end if;

    lv_Day := TRIM(TO_CHAR(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'MONTH'));    

    select NVL(DAYOFFCONSIDER_ATTN_IMPORT,'N') INTO lv_DayOffConsiderMaster from WPSWAGESPARAMETER;
    

    select TIMETO1 into lv_lastTime from wpsshiftmast where shiftcode = '3';
    select TIMEFROM into lv_FirstInTime from wpsshiftmast where shiftcode = '1';


    select ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 into lv_TmFrom_A1, lv_TmTo_A1, lv_TmFrom_A2, lv_TmTo_A2
    from wpsshiftmast where shiftcode = '1';

    select ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 into lv_TmFrom_B1, lv_TmTo_B1, lv_TmFrom_B2, lv_TmTo_B2
    from wpsshiftmast where shiftcode = '2';

    select ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 into lv_TmFrom_C1, lv_TmTo_C1, lv_TmFrom_C2, lv_TmTo_C2
    from wpsshiftmast where shiftcode = '3';
     
    lv_NextDateTime := TO_DATE(lv_NextDate||' '||lv_lastTime,'DD/MM/YYYY HH24:MI:SS');
    lv_FirstDateTime := TO_DATE(P_DATEOFATTENDANCE||' '||lv_FirstInTime ,'DD/MM/YYYY HH24:MI:SS');
    --dbms_output.put_line ('LV_DAYOFFCONSIDERMASTER : '||lv_NextDateTime||' '||lv_FirstDateTime);
    lv_Sql := 'SELECT COUNT(*) '||CHR(10)
            ||'  FROM ( '||CHR(10)  
            ||'        SELECT TOKENNO FROM WPSATTENDANCEDEVICERAWDATA '||CHR(10)
            ||'         WHERE TO_DATE(TRIM(ATTENDATETIME),''DD/MM/YYYY HH24:MI:SS'') >= '''||lv_FirstDateTime||''' '||CHR(10)
            ||'           AND TO_DATE(TRIM(ATTENDATETIME),''DD/MM/YYYY HH24:MI:SS'') <= '''||lv_NextDateTime||''' '||CHR(10)
            ||'       ) '||CHR(10);
    --dbms_output.put_line ('Query : '||lv_Sql);     
    EXECUTE IMMEDIATE lv_Sql INTO LV_CNT;
             
        IF LV_CNT > 0 THEN       
             
            --- update shift code based on attendance time -----
             
            lv_Sql := ' UPDATE WPSATTENDANCEDEVICERAWDATA AA '||chr(10)
                    ||' SET SHIFT = ( SELECT CASE WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_A1||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_A1||''' THEN ''A1'' '||chr(10)
                    ||'                           WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_B1||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_B1||''' THEN ''B1'' '||chr(10) 
                    ||'                           WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_A2||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_A2||''' THEN ''A2'' '||chr(10)
                    ||'                           WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_B2||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_B2||''' THEN ''B2'' '||chr(10)
                    ||'                         ELSE ''C1'' '||chr(10)
                    ||'                      END SHIFT FROM WPSATTENDANCEDEVICERAWDATA BB '||chr(10)          
                    ||'               WHERE AA.TOKENNO = BB.TOKENNO AND AA.ROWID = BB.ROWID  '||chr(10)
                    ||'             ), '||chr(10)    
                    ||'     ATTENHOURS = ( SELECT CASE WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_A1||'''   AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_A1||''' THEN 5 '||chr(10)
                    ||'                                WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_B1||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_B1||''' THEN 3 '||chr(10)
                    ||'                                WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_A2||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_A2||''' THEN 3 '||chr(10)
                    ||'                                WHEN SUBSTR(ATTENDATETIME,12) >= '''||lv_TmFrom_B2||'''  AND SUBSTR(ATTENDATETIME,12) <= '''||lv_TmTo_B2||''' THEN 5 '||chr(10)
                    ||'                                ELSE 8 '||chr(10)
                    ||'                           END ATTENHOURS '||chr(10)
                    ||'                    FROM WPSATTENDANCEDEVICERAWDATA CC '||chr(10)          
                    ||'                    WHERE AA.TOKENNO = CC.TOKENNO AND AA.ROWID = CC.ROWID '||chr(10)
                    ||'                  ) '||chr(10)
                    ||' ,DATEOFATTENDANCE= SUBSTR(ATTENDATETIME,1,10), TIMEOFATTENDANCE =  SUBSTR(ATTENDATETIME,12) '||CHR(10)
                    ||' WHERE SHIFT IS NULL '||chr(10)
                    ||' AND TO_DATE(TRIM(ATTENDATETIME),''DD/MM/YYYY HH24:MI:SS'') >= '''||lv_FirstDateTime||''' '||chr(10); 
            --DBMS_OUTPUT.PUT_LINE ('Query : '||lv_Sql);
            insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
            values( 'PRCWPS_IMP_ATTNOTDATA_LASTWORK',LV_SQLERRM,SYSDATE,lv_Sql,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER');
            EXECUTE IMMEDIATE lv_Sql;
            COMMIT;

--            UPDATE WPSATTENDANCEDEVICERAWDATA SET DATEOFATTENDANCE= SUBSTR(ATTENDATETIME,1,10), TIMEOFATTENDANCE =  SUBSTR(ATTENDATETIME,12)
--            WHERE DATEOFATTENDANCE IS NULL
--              AND TO_DATE(TRIM(ATTENDATETIME),'DD/MM/YYYY HH24:MI:SS') >= lv_FirstDateTime;


        DELETE FROM WPSATTENDANCEDAYWISE WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
        AND YEARCODE = P_YEARCODE
        AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
            
        ---- LAST WORKING DEPARTMENT AND OCCUPATION ---------
        DELETE FROM GBL_WPSLASTWORKING_DEPT;
        INSERT INTO GBL_WPSLASTWORKING_DEPT ( 
        WORKERSERIAL, DEPARTMENTCODE, OCCUPATIONCODE, LOOMCODE, HELPERNO, SARDERNO, DEPTSERIAL, LINENO, MACHINECODE1, MACHINECODE2)
        SELECT DISTINCT A.WORKERSERIAL, A.DEPARTMENTCODE, A.OCCUPATIONCODE, A.LOOMCODE, A.HELPERNO, A.SARDERNO, A.DEPTSERIAL,
               A.LINENO, A.MACHINECODE1, A.MACHINECODE2
        FROM WPSATTENDANCEDAYWISE A,
        (
            SELECT WORKERSERIAL, MAX(DATEOFATTENDANCE) DATEOFATTENDANCE
            FROM WPSATTENDANCEDAYWISE 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE 
            AND DATEOFATTENDANCE < to_date(P_DATEOFATTENDANCE,'DD/MM/YYYY')
            AND ATTENDANCETAG = 'DEVICE'
            AND SPELLTYPE = 'SPELL 1'
            AND NVL(ATTENDANCEHOURS,0) > 0
            GROUP BY WORKERSERIAL
        ) B
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
        AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE
        AND A.WORKERSERIAL = B.WORKERSERIAL
        AND NVL(A.ATTENDANCEHOURS,0) > 0
        AND A.ATTENDANCETAG = 'DEVICE'
        AND A.SPELLTYPE = 'SPELL 1';    
            
        lv_Sql := ' INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE,DIVISIONCODE,YEARCODE, DATEOFATTENDANCE, '||CHR(10) 
                ||' SHIFTCODE, PARENTSHIFTCODE, '||CHR(10) 
                ||' WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, WORKERTYPECODE, '||CHR(10)   
                ||' ATTENDANCEHOURS, OVERTIMEHOURS,'||CHR(10)
                ||' SPELLHOURS,DEDUCTIONHOURS,SPELLTYPE, SERIALNO, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||CHR(10) 
                ||' SYSROWID,USERNAME,MODULE, ATTENDANCETAG, BOOKNO, UNITCODE, '||CHR(10)
                ||' LOOMCODE, HELPERNO, SARDERNO, DEPTSERIAL, LINENO, MACHINECODE1, MACHINECODE2 ) '||CHR(10)
                ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||P_YEARCODE||''' YEARCODE, TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') DATEOFATTENDANCE, '||CHR(10)
                ||' CASE WHEN D.SHIFT IN (''A1'',''A2'') THEN ''1'' WHEN D.SHIFT IN (''B1'',''B2'') THEN ''2'' WHEN D.SHIFT IN (''C1'',''C2'') THEN ''3'' END SHIFTCODE, A.GROUPCODE PARENTSHIFTCODE,   '||CHR(10)
                ||' A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, NVL(L.DEPARTMENTCODE,A.DEPARTMENTCODE) DEPARTMENTCODE, NVL(L.OCCUPATIONCODE,A.OCCUPATIONCODE) OCCUPATIONCODE,  ''T'' WORKERTYPECODE, '||CHR(10);
        IF  lv_DayOffConsiderMaster='Y' then
            lv_Sql := lv_Sql ||' CASE WHEN NVL(A.DAYOFFDAY,''NONE'')='''||lv_Day||''' THEN 0 ELSE D.ATTENHOURS END ATTENHOURS,'||CHR(10)
                             ||' CASE WHEN NVL(A.DAYOFFDAY,''NONE'')='''||lv_Day||''' THEN D.ATTENHOURS ELSE 0 END OVERTIMEHOURS,'||CHR(10);
        else
            lv_Sql := lv_Sql ||' D.ATTENHOURS, 0 OVERTIMEHOURS, '||CHR(10); 
        end if;                   
        lv_Sql := lv_Sql ||' D.ATTENHOURS SPELLHOURS, 0 DEDUCTIONHOURS, DECODE(SUBSTR(D.SHIFT,2,1),''1'',''SPELL 1'',''SPELL 2'') AS SPELL, 1, '''||lv_FNSDT||''', '''||lv_FNEDT||''', '||chr(10)
                ||' ''1'' SYSROWID, ''SWT'' USERNAME,''WPS'' MODULE, ''DEVICE'' ATTENDANCETAG, ''ATTN/'||lv_ddmmyyyy||'/''||A.TOKENNO  AS BOOKNO, A.UNITCODE, '||chr(10)
                ||' L.LOOMCODE, L.HELPERNO, L.SARDERNO, L.DEPTSERIAL, L.LINENO, L.MACHINECODE1, L.MACHINECODE2 '||CHR(10)
                ||' FROM WPSWORKERMAST A, WPSDEPARTMENTMASTER B, WPSOCCUPATIONMAST C, GBL_WPSLASTWORKING_DEPT L, '||chr(10)
                ||' (   '||chr(10)
                ||'   SELECT DISTINCT DATEOFATTENDANCE, TOKENNO, SHIFT, ATTENHOURS '||chr(10)
                ||'   FROM ( ' ||CHR(10)
                ||'         SELECT DISTINCT DATEOFATTENDANCE, TOKENNO, SHIFT, ATTENHOURS '||chr(10) 
                ||'         FROM WPSATTENDANCEDEVICERAWDATA '||chr(10) 
                ||'         WHERE DATEOFATTENDANCE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                ||'         AND SHIFT IS NOT NULL   '||CHR(10)
                ||'        )' ||CHR(10)
                ||' ) D  '||CHR(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
                ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
                ||' AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
                ||' AND A.TOKENNO  = D.TOKENNO '||CHR(10)
                ||' AND A.COMPANYCODE = C.COMPANYCODE (+) AND A.DIVISIONCODE = C.DIVISIONCODE (+) '||CHR(10)
                ||' AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND A.OCCUPATIONCODE = C.OCCUPATIONCODE (+) '||CHR(10)
                ||' AND A.WORKERSERIAL = L.WORKERSERIAL (+) '||CHR(10);
        
        insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        values( 'PRCWPS_IMP_ATTNOTDATA_LASTWORK',LV_SQLERRM,SYSDATE,lv_Sql,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER');
        EXECUTE IMMEDIATE lv_Sql;
        COMMIT;

        ---------------- WORKING MORE THAN 8 HOURS BUT NOT MULTIPLE ON 8 -------
       /* SELECT DATEOFATTENDANCE, TOKENNO, SUM(ATTENHOURS) ATTENHOURS
        FROM (
                SELECT DISTINCT DATEOFATTENDANCE, TOKENNO, SHIFT, ATTENHOURS 
                FROM WPSATTNDEVICERAWDATA_19042016 
                WHERE DATEOFATTENDANCE = '01/04/2016'
                AND TIMEOFATTENDANCE >= '06:00:00' 
                AND SHIFT IS NOT NULL
                UNION ALL
                SELECT DISTINCT '01/04/2016', TOKENNO, SHIFT, ATTENHOURS 
                FROM WPSATTNDEVICERAWDATA_19042016 
                WHERE DATEOFATTENDANCE = '02/04/2016'
                AND TIMEOFATTENDANCE < '06:00:00' 
                AND SHIFT IS NOT NULL
            )
        GROUP BY DATEOFATTENDANCE, TOKENNO
        HAVING MOD(SUM(ATTENHOURS),8) <> 0
           AND SUM(ATTENHOURS) > 8;
      */
        FOR C1 IN (
                SELECT A.WORKERSERIAL, A.SHIFTCODE, SUM(A.ATTENDANCEHOURS) ATTENDANCEHOURS
                FROM  WPSATTENDANCEDAYWISE A,
                (
                    SELECT WORKERSERIAL, SUM(ATTENDANCEHOURS)
                    FROM WPSATTENDANCEDAYWISE
                    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                      AND YEARCODE = P_YEARCODE
                      AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                      AND ATTENDANCETAG ='DEVICE'
                    GROUP BY WORKERSERIAL
                    HAVING SUM(ATTENDANCEHOURS) > 8
                      AND MOD(SUM(ATTENDANCEHOURS),8) <> 0
                ) B
                WHERE A.COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                  AND A.YEARCODE = P_YEARCODE  
                  AND A.DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                  AND ATTENDANCETAG ='DEVICE'
                  AND A.WORKERSERIAL = B.WORKERSERIAL
                  --AND A.WORKERSERIAL = '00134'
                GROUP BY A.WORKERSERIAL, A.SHIFTCODE 
                HAVING SUM(A.ATTENDANCEHOURS) < 8 
              )
        LOOP     
             UPDATE  WPSATTENDANCEDAYWISE SET REMARKS='ATTENDANCE HOURS GREATER THAN 8'
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND YEARCODE = P_YEARCODE
              AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
              AND SHIFTCODE = C1.SHIFTCODE
              AND WORKERSERIAL = C1.WORKERSERIAL
              AND ATTENDANCETAG ='DEVICE';
              --DBMS_OUTPUT.PUT_LINE ('WORKERSERIAL '||C1.WORKERSERIAL||' , , '||C1.SHIFTCODE);           
        END LOOP;   
        COMMIT;      
        
        ---------------- WORKING 16 OR 24 HOURS  THEN FISRT SHIFT CONSIDER AS NORMAL ATTENDANCE AND OTHER SHIFT GOES TO TRANSFER TO OT HOURS -------
        
        FOR C16 IN (
                SELECT DATEOFATTENDANCE, WORKERSERIAL, SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, MIN(SHIFTCODE) SHIFTCODE  
                FROM WPSATTENDANCEDAYWISE
                WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                  AND ATTENDANCETAG = 'DEVICE'
                  AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                GROUP BY DATEOFATTENDANCE, WORKERSERIAL
                HAVING (SUM(ATTENDANCEHOURS) = 16 OR SUM(ATTENDANCEHOURS) = 24)           
              )
        LOOP     
             UPDATE  WPSATTENDANCEDAYWISE SET REMARKS='ATTENDANCE HOURS MULTIPLE OF 8'
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND YEARCODE = P_YEARCODE
              AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
              AND SHIFTCODE <> C16.SHIFTCODE
              AND WORKERSERIAL = C16.WORKERSERIAL
              AND ATTENDANCETAG ='DEVICE';           
        END LOOP;    
        commit;

        ------ START UPDATE ATTENDANCE DATA TO O.T. WHEN WORKER WORKED IN STL OR LEAVE on 16.05.2016 by Amalesh Das----------------
        FOR cLeave in (
                        SELECT WORKERSERIAL FROM WPSATTENDANCEDAYWISE 
                        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                          AND YEARCODE = P_YEARCODE
                          AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                          AND ATTENDANCEHOURS >0
                        INTERSECT
                        SELECT WORKERSERIAL FROM WPSSTLENTRY 
                        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                          AND STLFROMDATE <= TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                          AND STLTODATE >= TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                     )     
        loop
            UPDATE  WPSATTENDANCEDAYWISE SET OVERTIMEHOURS = ATTENDANCEHOURS, ATTENDANCEHOURS= 0, REMARKS = 'WORKED IN LEAVE'
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND YEARCODE = P_YEARCODE
              AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
              AND WORKERSERIAL = cLeave.WORKERSERIAL
              AND ATTENDANCEHOURS > 0 
              AND ATTENDANCETAG ='DEVICE';
        end loop;            
        commit;
        ------ START UPDATE ATTENDANCE DATA TO O.T. WHERE WORKER WORKING CONTINOUSLY last 6 DAYS ON 16.05.2017 BY AMALESH DAS --------------
     /*   FOR c6days in (
            SELECT WORKERSERIAL, COUNT(*) CNT
            FROM (
                    SELECT DISTINCT A.WORKERSERIAL, A.DATEOFATTENDANCE  
                    FROM WPSATTENDANCEDAYWISE A,
                    ( SELECT DISTINCT WORKERSERIAL 
                      FROM WPSATTENDANCEDAYWISE
                      WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                       AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                       AND ATTENDANCEHOURS > 0
                    ) B   
                    WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
                      AND A.DATEOFATTENDANCE < TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                      AND A.DATEOFATTENDANCE >= TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')-6
                      AND A.ATTENDANCEHOURS > 0
                      AND A.WORKERSERIAL = B.WORKERSERIAL
                 )
            GROUP BY WORKERSERIAL HAVING COUNT(*) >= 6        
            )
         loop
            UPDATE  WPSATTENDANCEDAYWISE SET OVERTIMEHOURS = ATTENDANCEHOURS, ATTENDANCEHOURS= 0, REMARKS = 'CONTINUOUS 6 DAYS WORKING'
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND YEARCODE = P_YEARCODE
              AND DATEOFATTENDANCE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
              AND WORKERSERIAL = c6days.WORKERSERIAL
              AND ATTENDANCEHOURS > 0 
              AND ATTENDANCETAG ='DEVICE';
         end loop;
         commit;  */ 
        ------ START UPDATE ATTENDANCE DATA TO O.T. WHERE WORKER WORKING CONTINOUSLY last 6 DAYS ON 16.05.2017 BY AMALESH DAS --------------        
    END IF;  
                                 
EXCEPTION
    WHEN OTHERS THEN
     --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
     LV_SQLERRM := SQLERRM ;
     INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_ATTNOTDATA_ONMASTER',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'ATTENDANCE DATA IMPORT');
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFATTENDANCE VARCHAR2,
                                                       P_DEPARTMENT VARCHAR2 DEFAULT NULL,  
                                                       P_VALIDORUPDATE CHAR DEFAULT NULL,
                                                       P_USER          VARCHAR2 DEFAULT 'SWT', 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL,
                                                       P_DEPCODE VARCHAR2 DEFAULT NULL)


AS 

    LV_SQLERRM          VARCHAR2(2000):='';
    lv_SqlStr           VARCHAR2(4000) := '';
    lv_YearCode         VARCHAR2(10) := '';
    lv_FortnightStartDate         VARCHAR2(10) := '';
    lv_FortnightEndDate         VARCHAR2(10) := '';
BEGIN

    SELECT YEARCODE, TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/YYYY'),  TO_CHAR(FORTNIGHTENDDATE,'DD/MM/YYYY') 
    INTO lv_YearCode, lv_FortnightStartDate, lv_FortnightEndDate FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE;
    
    

    lv_SqlStr := 'DELETE FROM WPSATTENDANCEDAYWISE
    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DATEOFATTENDANCE = TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'')' ;
    IF P_DEPARTMENT IS NOT NULL THEN
        lv_SqlStr := lv_SqlStr || '  AND DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
    END IF;
    
   -- DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
     EXECUTE IMMEDIATE  lv_SqlStr;
     
    lv_SqlStr := ' DROP TABLE WPSATTENDANCEDEVICERAWDATA_TMP';
    
    BEGIN
        EXECUTE IMMEDIATE lv_SqlStr;
    EXCEPTION
        WHEN OTHERS THEN NULL;
    END;  
    
    lv_SqlStr := 'CREATE TABLE WPSATTENDANCEDEVICERAWDATA_TMP AS SELECT * FROM WPSATTENDANCEDEVICERAWDATA WHERE ATTN_DT = '''||P_DATEOFATTENDANCE||'''';
    
    EXECUTE IMMEDIATE lv_SqlStr;
    
    lv_SqlStr := 'UPDATE WPSATTENDANCEDEVICERAWDATA_TMP SET TOKENNO = SUBSTR(TOKENNO,2) WHERE TOKENNO LIKE ''BB%'' AND ATTENDANCETAG=''OTHERS''';
    EXECUTE IMMEDIATE lv_SqlStr;
    COMMIT;
    
    ---- OUTSIDE WORKER TOKEN NO UPDATE BASED DEPARMENT WITH INCREMENTAL SERIAL NO. -------------
--    lv_SqlStr := 'UPDATE WPSATTENDANCEDEVICERAWDATA_TMP SET TOKENNO = TOKENNO||''-''||LPAD(DEPTSERIAL,3,0) WHERE TOKENNO LIKE ''B%'' AND ATTENDANCETAG=''OTHERS''';
--    DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
--    EXECUTE IMMEDIATE lv_SqlStr;
    
    FOR C1 IN (
                SELECT REMARKS,TOKENNO, DEPARTMENT, SECTION, OCP_CODE, ACTUAL_SHIFT, DEPTSERIAL,
                TOKENNO||'-'||LPAD(RANK () OVER (PARTITION BY TOKENNO, DEPARTMENT 
                                  ORDER BY TOKENNO, DEPARTMENT, SECTION, OCP_CODE, ACTUAL_SHIFT, DEPTSERIAL),3,0) SERIALNO  
                FROM WPSATTENDANCEDEVICERAWDATA_TMP 
                WHERE 1=1
                AND ATTN_DT = P_DATEOFATTENDANCE
                AND TOKENNO LIKE 'B%' 
              )  
    LOOP
        UPDATE WPSATTENDANCEDEVICERAWDATA_TMP SET TOKENNO=C1.SERIALNO
        WHERE TOKENNO = C1.TOKENNO 
          AND DEPARTMENT = C1.DEPARTMENT
          AND SECTION = C1.SECTION AND OCP_CODE = C1.OCP_CODE
          AND ACTUAL_SHIFT=C1.ACTUAL_SHIFT
          AND DEPTSERIAL = C1.DEPTSERIAL
          AND REMARKS = C1.REMARKS
          AND TOKENNO LIKE 'B%';   
    END LOOP          
    
    COMMIT; 
    
    ------------ UPDATE LOOM CODE FOR WEAVING DEPARTMENT -----------------
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE WPSATTN_LOOMUPDT_TMP';
    EXCEPTION
        WHEN OTHERS THEN NULL;     
    END;
    
    lv_SqlStr := ' CREATE TABLE WPSATTN_LOOMUPDT_TMP AS 
                SELECT A.DEPARTMENTCODE, SECTIONCODE, MACHINECODE, A.LOOMCODE FROM WPSMACHINELOOMMAPPING A,
                (
                    SELECT DEPARTMENTCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE 
                    FROM WPSMACHINELOOMMAPPING
                    WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
                    GROUP BY DEPARTMENTCODE
                ) B
                WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||'''
                  AND A.DEPARTMENTCODE = B.DEPARTMENTCODE 
                  AND A.EFFECTIVEDATE = B.EFFECTIVEDATE';
    EXECUTE IMMEDIATE lv_SqlStr;                   
    COMMIT;
    
    lv_SqlStr := ' UPDATE WPSATTENDANCEDEVICERAWDATA_TMP A SET A.LOOMCODE = ( SELECT B.LOOMCODE FROM WPSATTN_LOOMUPDT_TMP B
                                                     WHERE /*A.DEPARTMENTCODE*/ A.DEPARTMENT = B.DEPARTMENTCODE AND /*A.MACHINECODE1*/ A.MACHINE1=B.MACHINECODE )
                WHERE 1=1 /*AND A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||'''*/
                  AND TO_DATE(A.ATTN_DT,''DD/MM/YYYY'') >=TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') 
                  AND TO_DATE(A.ATTN_DT,''DD/MM/YYYY'') <=TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'')
                  AND /*A.MACHINECODE1*/ A.MACHINE1 IS NOT NULL
                  AND /*A.DEPARTMENTCODE*/ A.DEPARTMENT||/*A.MACHINECODE1*/ A.MACHINE1 IN ( SELECT DEPARTMENTCODE||MACHINECODE FROM WPSATTN_LOOMUPDT_TMP)';
    
    EXECUTE IMMEDIATE lv_SqlStr;                   
    COMMIT;
    
    lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE, DIVISIONCODE, YEARCODE, 
    FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DATEOFATTENDANCE, FEWORKINGDAYS, 
    DEPARTMENTCODE, SECTIONCODE, GROUPCODE, SHIFTCODE, 
    WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, DEPTSERIAL, WORKERTYPECODE, HELPERNO, SARDARNO, RELIVERNO, 
    MACHINECODE1, MACHINECODE2, LOOMCODE, ATTENDANCEHOURS, ATN_DAYS, 
    OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STATUTORYHOURS, NIGHTALLOWANCEHOURS, OT_NSHRS, 
    SERIALNO, NPF_ADJ, PF_ADJ, PF_ADJ_DEDN, NPF_ADJ_DEDN, 
    INCENTIVE, REMARKS,LASTMODIFIED,USERNAME,SYSROWID,MODULE, ATTENDANCETAG, ATTN_REWARDS_EXTRAHRS)

    SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, 
    TO_DATE('''||lv_FortnightStartDate||''',''DD/MM/YYYY'') FORTNIGHTSTARTDATE, TO_DATE('''||lv_FortnightEndDate||''',''DD/MM/YYYY'') FORTNIGHTENDDATE, TO_DATE(ATTN_DT,''DD/MM/YYYY'') DATEOFATTENDANCE, A.ATTN_DAYS FEWORKINGDAYS,
    A.DEPARTMENT DEPARTMENTCODE, A.SECTION SECTIONCODE,  DECODE (A.PARENT_SHIFT,''B'',''2'',''C'',''3'',''1'') GROUPCODE, DECODE (A.PARENT_SHIFT,''B'',''2'',''C'',''3'',''1'') SHIFTCODE,
    B.WORKERSERIAL, A.TOKENNO, B.WORKERCATEGORYCODE, A.OCP_CODE OCCUPATIONCODE, A.DEPTSERIAL,  NULL WORKERTYPECODE, A.HELPERNO, A.SARDARNO, A.RELIVERNO, 
    A.MACHINE1 MACHINECODE1, A.MACHINE2 MACHINECODE2, A.LOOMCODE, A.ATTN_HRS ATTENDANCEHOURS, A.ATTN_DAYS,
    A.OT_HRS OVERTIMEHOURS, A.HOL_HRS HOLIDAYHOURS, NVL(LAYOFF_HRS,0) LAYOFFHOURS,A.FALLBACK_HRS FBKHOURS, 0  STATUTORYHOURS, A.NS_HRS NIGHTALLOWANCEHOURS, A.OTNS_HRS OT_NSHRS,
    A.REMARKS SERIALNO, ADJ_EARN_NON_PF NPF_ADJ, ADJ_EARN_PF_LNKD PF_ADJ,  ADJ_DED_PF_LNKD PF_ADJ_DEDN, A.ADJ_DED_NON_PF NPF_ADJ_DEDN, 
    A.INCENTIVE, A.REMARKS, SYSDATE LASTMODIFIED, '''||P_USER||''' USERNAME, SYS_GUID() SYSROWID, ''WPS'' MODULE, ''IMPORT FROM TAB'' ATTENDANCETAG, A.ATTN_REWARDS_EXTRAHRS 
    FROM /*WPSATTENDANCEDEVICERAWDATA*/ WPSATTENDANCEDEVICERAWDATA_TMP A, WPSWORKERMAST B
    WHERE A.TOKENNO = B.TOKENNO 
    AND ATTN_DT = '''||P_DATEOFATTENDANCE||'''';
    
    IF P_DEPARTMENT IS NOT NULL THEN
        lv_SqlStr := lv_SqlStr || '  AND A.DEPARTMENT = '''||P_DEPARTMENT||''' ';
    END IF;
    
    DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    EXECUTE IMMEDIATE  lv_SqlStr;
   
   
   
   BEGIN               
    EXECUTE IMMEDIATE 'DROP TABLE WPSATTERAWDATA_EXCLUDED';        
    EXCEPTION WHEN OTHERS THEN NULL;
   END;
   
   
   lv_SqlStr := '  CREATE TABLE WPSATTERAWDATA_EXCLUDED AS   
                   SELECT * FROM WPSATTENDANCEDEVICERAWDATA
                    WHERE TOKENNO IN (
                        SELECT TOKENNO FROM WPSATTENDANCEDEVICERAWDATA -- 5350
                        WHERE ATTN_DT = '''||P_DATEOFATTENDANCE||'''
                    --    AND TOKENNO IN (''BB00385'',''BB02400'') -- 706       
                        MINUS
                        SELECT TOKENNO FROM WPSATTENDANCEDAYWISE
                        WHERE DATEOFATTENDANCE = TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'')
                    )
                    AND ATTN_DT = '''||P_DATEOFATTENDANCE||'''';
   
    --DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    EXECUTE IMMEDIATE  lv_SqlStr;

END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL1;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL1 (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFATTENDANCE VARCHAR2,
                                                       P_VALIDORUPDATE CHAR,
                                                       P_USER          VARCHAR2, 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL,
                                                       P_DEPCODE VARCHAR2 DEFAULT NULL)                                                       
AS
/* ----- SAMPLE PROCEDURE ----- */                                                       
LV_CNT              NUMBER := 0;
tmpVar              NUMBER := 0;
LV_SQLERRM          VARCHAR2(2000):='';
lv_SqlStr           VARCHAR2(4000) := '';
lv_error_remark     VARCHAR2(4000) := '' ;
lv_yearcode         VARCHAR2(20) :='';
lv_entryday         VARCHAR2(20) := LTRIM(RTRIM(TO_CHAR(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'DAY')));
lv_PROCNAME         varchar2(30) := 'PRCWPS_IMP_ATTNOTDATA_MANUAL';
lv_BookNoPrefix     varchar2(20) := '';
lv_Remarks          varchar2(100) := '';
lv_FnStDt           varchar2(10) := '';
lv_FnEnDt           varchar2(10) := '' ;
lv_MAXSPELLHOURS_SPELL1    NUMBER ;
lv_MAXSPELLHOURS_SPELL2    NUMBER ;
lv_upd              varchar2(1) ;
/* FOLLOWING CONDITION CHECKED IN THIS PROCEDURE BEFORE VERIFIED
    1. Checking whether Date of Attendance Parameter is Greater than the Current Date
    2. Normal and O.T. Hours in same shift in Raw data.   
    3. Spell Wise hours can't exceed the maximum hours
    4. ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD 
    5. INVALID DEPARTMENT AND OCCUPATION CODE , AND INVALID SHIFT
    6. INVALID TOKEN No.
    7. Checking Normal attendance in different shift 
    7. Norma attendance hours more than 8
    8. Normal attendance in Master Day Off
    9. Data already exist in in attendance table based on date, shift, occupation (CONSIDER BOTH VERIFIED AND APPROVED ) 
   10. Worker in STL but normal attendance found        (CONSIDER BOTH VERIFIED AND APPROVED )
   11. Worker in Leave (other than STL) but normal attendance found   (CONSIDER BOTH VERIFIED AND APPROVED )
*/
--EXEC PRCWPS_IMP_ATTNOTDATA_MANUAL ('0001','0002','01/06/2019','V','SWT')    
BEGIN   
  select count(*) into LV_CNT from WPSATTNCSVDATA_STAGE ;
  if LV_CNT > 0 then   
   BEGIN
        
--    delete from WPSATTENDANCECSVRAWDATA where (ATTENDATE, SHIFT, TOKENNO) 
--      in ( SELECT ATTENDATE, SHIFT, TOKENNO  FROM WPSATTNCSVDATA_STAGE );

    UPDATE WPSATTNCSVDATA_STAGE set SECTION = LPAD(LTRIM(RTRIM(SECTION)),4,'0'),OCCUPATION =LPAD(LTRIM(RTRIM(OCCUPATION)),3,'0') WHERE ATTENDATE = P_DATEOFATTENDANCE;
      
    FOR C1 IN ( SELECT DISTINCT SECTION, SHIFT FROM WPSATTNCSVDATA_STAGE)
    LOOP
        DELETE FROM WPSATTENDANCECSVRAWDATA WHERE ATTENDATE = P_DATEOFATTENDANCE
        AND SECTION = C1.SECTION AND SHIFT = C1.SHIFT;
    END LOOP;
                          
      
    insert into WPSATTENDANCECSVRAWDATA( ATTENDATE,DEPARTMENT, SECTION, SHIFT, OCCUPATION, TOKENNO, SPELLHRS_1, SPELLHRS_2, OTHOURS, APPROVED, VERIFIED ,USERNAME    )
    select ATTENDATE,DEPARTMENTCODE, SECTION, SHIFT, OCCUPATION, TOKENNO, SPELLHRS_1, SPELLHRS_2, OTHOURS, 'N', 'N',P_USER
    from WPSATTNCSVDATA_STAGE A,WPSSECTIONMAST B
    WHERE B.COMPANYCODE=P_COMPCODE
        AND B.DIVISIONCODE=P_DIVCODE
        AND B.SECTIONCODE=A.SECTION ;
        
    --delete from WPSATTNCSVDATA_STAGE;
    commit;  
   EXCEPTION
    WHEN OTHERS THEN
     ROLLBACK;
   END; 
  end if;
    tmpVar := 0;

    if substr(P_DATEOFATTENDANCE,1,2) <= 15 then
        lv_FnStDt   := '01'||substr(P_DATEOFATTENDANCE,3);
        lv_FnEnDt   := '15'||substr(P_DATEOFATTENDANCE,3);
    else
        lv_FnStDt   := '16'||substr(P_DATEOFATTENDANCE,3);
        lv_FnEnDt   := TO_CHAR(LAST_DAY(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')),'DD/MM/YYYY');
    end if;
   -- dbms_output.put_line ('XXAXAXXAAX');
    DELETE FROM WPS_ERROR_LOG WHERE PROC_NAME = lv_PROCNAME;
    COMMIT;    
    
    SELECT LTRIM(RTRIM(YEARCODE)) INTO lv_yearcode FROM FINANCIALYEAR WHERE 1=1
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE 
    AND TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') BETWEEN STARTDATE AND ENDDATE;
  -- dbms_output.put_line ('out '||lv_yearcode||'-'||P_DATEOFATTENDANCE);
   -- UPDATE WPSATTENDANCECSVRAWDATA SET SHIFTCODE=DECODE(SHIFT,'A1','1','A2','1','B1','2','B2','2','3'),
-- UPDATE WPSATTENDANCECSVRAWDATA  SET    SPELLTYPE=DECODE(SHIFT,'A1','SPELL 1','A2','SPELL 2','B1','SPELL 1','B2','SPELL 2','SPELL 1');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 1' WHERE (SHIFT = '1' AND SPELLHRS_1 <= '5' ) OR (SHIFT = '2' AND SPELLHRS_2 <= '3');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 2' WHERE (SHIFT = '2' AND SPELLHRS_1 <= '3' ) OR (SHIFT = '2' AND SPELLHRS_2 <= '5');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 3' WHERE (SHIFT = '3' AND SPELLHRS_1 <= '8' ) ;  
    commit;
    --DBMS_OUTPUT.PUT_LINE ('0_0 DATA INSERT DONE');
    IF P_VALIDORUPDATE='V' THEN     
       /* Checking whether Date of Attendance Parameter is Greater than the Current Date */     
        IF TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') > TRUNC(SYSDATE) THEN
            lv_error_remark := 'Validation Failure : [Date of Attendance cannot be greater than Current Date.]';
            --dbms_output.put_line (lv_error_remark); 
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;   
        
        UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='Y' 
           WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
           AND TOKENNO||SHIFT||SECTION IN ( SELECT TOKENNO||SHIFT||SECTION FROM WPSATTNCSVDATA_STAGE );
       --     WHERE ATTENDATE = P_DATEOFATTENDANCE;      
       --dbms_output.put_line (lv_yearcode||'-'||P_DATEOFATTENDANCE);

        /* 2. Checking Normal and O.T. Hours in same shift in Raw data. */
        lv_Remarks := 'Ckecking Normal attendance, O.T. hrs in Samae Shift';
        lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal attendance Hourns, O.T Hours both found.'' '||chr(10)
                   ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' '||CHR(10)
                   ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) >0 '||CHR(10)
                   ||'   AND NVL(OTHOURS,0) > 0 '||CHR(10)
                   ||'   AND VERIFIED = ''Y'' '||CHR(10); 
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_COMPCODE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
      --  DBMS_OUTPUT.PUT_LINE ('1_0 CURRENT DATE CHECKING DONE');
        /* Checking Spell Wise hours can't exceed the maximum hours */
        lv_Remarks := 'Hours can not be more than Spell Hours 1';
        FOR cSpellHrs in ( /*SELECT A.ATTENDATE, A.SHIFT, A.TOKENNO,  A.OTHOURS, A.VERIFIED   
                            FROM WPSATTENDANCECSVRAWDATA A, WPSSPELLMASTER B
                            WHERE ATTENDATE = P_DATEOFATTENDANCE
                              AND VERIFIED = 'Y'
                              AND B.COMPANYCODE=P_COMPCODE AND B.DIVISIONCODE=P_DIVCODE
                              AND A.SHIFT = B.SHIFTCODE AND A.SPELLTYPE = B.SPELLTYPE
                              AND ( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0) >  NVL(MAXSPELLHOURS,0) OR  NVL(A.OTHOURS,0) >  NVL(MAXSPELLHOURS,0))*/
                         
                          SELECT A.ATTENDATE, A.SHIFT,A.TOKENNO , A.SPELLHRS_1, A.SPELLHRS_2, A.SPELLTYPE
                          FROM WPSATTENDANCECSVRAWDATA A 
                          WHERE A.ATTENDATE = P_DATEOFATTENDANCE
                          AND A.DEPARTMENT||A.SHIFT NOT IN (SELECT DEPARTMENTCODE||'C' FROM WPSDEPARTMENTMASTER WHERE NSAAPPLICABLE='Y')
                          AND A.VERIFIED = 'Y'
                          ORDER BY A.TOKENNO
                         )        
        loop   
           -- DBMS_OUTPUT.PUT_LINE ('1_1 INSIDE LOOP'||cSpellHrs.TOKENNO );      
            if  cSpellHrs.shift = 'A' then
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL1 from WPSSPELLMASTER where shiftcode = '1' and SPELLTYPE = 'SPELL 1' ;
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL2 from WPSSPELLMASTER where shiftcode = '1' and SPELLTYPE = 'SPELL 2' ;
           --    DBMS_OUTPUT.PUT_LINE ('1_2 INSIDE LOOP A'); 
            elsif  cSpellHrs.shift = 'B' then            
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL1 from WPSSPELLMASTER where shiftcode = '2' and SPELLTYPE = 'SPELL 1' ;
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL2 from WPSSPELLMASTER where shiftcode = '2' and SPELLTYPE = 'SPELL 2' ;
            --   DBMS_OUTPUT.PUT_LINE ('1_2 INSIDE LOOP B');
            else
               select MAXSPELLHOURS,0 into lv_MAXSPELLHOURS_SPELL1 , lv_MAXSPELLHOURS_SPELL2  from WPSSPELLMASTER  where shiftcode = '3' and SPELLTYPE = 'SPELL 1' ;
            --   DBMS_OUTPUT.PUT_LINE ('1_3 INSIDE LOOP C');
            end if;
                
            if cSpellHrs.SPELLHRS_1  > lv_MAXSPELLHOURS_SPELL1 or  cSpellHrs.SPELLHRS_2  > lv_MAXSPELLHOURS_SPELL2 then
            --  DBMS_OUTPUT.PUT_LINE ('1_4 INSIDE LOOP CHECK SPELL HOURS');  
              update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
              where ATTENDATE = cSpellHrs.ATTENDATE AND TOKENNO = cSpellHrs.TOKENNO 
                    AND SHIFT = cSpellHrs.SHIFT;
            end if;
            --DBMS_OUTPUT.PUT_LINE ('1_6 INSIDE LOOP OUTSIDE IF CONDITION');
        end loop;
        commit;
        --DBMS_OUTPUT.PUT_LINE ('2_0 Hours can not be more than Spell Hours  DONE');
        --dbms_output.put_line ('Hours can not be more than Spell Hours - COMPLETE');
        
             /* Checking Spell Wise hours can't exceed the maximum hours in night allowence department*/
        lv_Remarks := 'Hours can not be more than Spell Hours 2';
        FOR cSpellHrs in ( /*SELECT A.ATTENDATE, A.SHIFT, A.TOKENNO,  A.OTHOURS, A.VERIFIED   
                            FROM WPSATTENDANCECSVRAWDATA A, WPSSPELLMASTER B
                            WHERE ATTENDATE = P_DATEOFATTENDANCE
                              AND VERIFIED = 'Y'
                              AND B.COMPANYCODE=P_COMPCODE AND B.DIVISIONCODE=P_DIVCODE
                              AND A.SHIFT = B.SHIFTCODE AND A.SPELLTYPE = B.SPELLTYPE
                              AND ( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0) >  NVL(MAXSPELLHOURS,0) OR  NVL(A.OTHOURS,0) >  NVL(MAXSPELLHOURS,0))*/
                         
                          SELECT A.ATTENDATE, A.SHIFT,A.TOKENNO , A.SPELLHRS_1, A.SPELLHRS_2, A.SPELLTYPE
                          FROM WPSATTENDANCECSVRAWDATA A,(SELECT * FROM WPSDEPARTMENTMASTER WHERE NSAAPPLICABLE='Y') B 
                          WHERE A.ATTENDATE = P_DATEOFATTENDANCE
                          AND A.DEPARTMENT||A.SHIFT=B.DEPARTMENTCODE||'C'
                          AND A.VERIFIED = 'Y'
                          ORDER BY A.TOKENNO
                         )        
        loop   
               select (MAXSPELLHOURS+.5),0 into lv_MAXSPELLHOURS_SPELL1 , lv_MAXSPELLHOURS_SPELL2  from WPSSPELLMASTER  where shiftcode = '3' and SPELLTYPE = 'SPELL 1' ;
                
            if cSpellHrs.SPELLHRS_1  > lv_MAXSPELLHOURS_SPELL1 or  cSpellHrs.SPELLHRS_2  > lv_MAXSPELLHOURS_SPELL2 then
            --  DBMS_OUTPUT.PUT_LINE ('1_4 INSIDE LOOP CHECK SPELL HOURS');  
              update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
              where ATTENDATE = cSpellHrs.ATTENDATE AND TOKENNO = cSpellHrs.TOKENNO 
                    AND SHIFT = cSpellHrs.SHIFT;
            end if;
            --DBMS_OUTPUT.PUT_LINE ('1_6 INSIDE LOOP OUTSIDE IF CONDITION');
        end loop;
        commit;
                              
        /* Checking ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD */
               
        FOR cDupli IN (
                        SELECT A.ATTENDATE, A.TOKENNO, A.SHIFT, COUNT(*) CNT
                            FROM WPSATTENDANCECSVRAWDATA A                         
                                GROUP BY A.ATTENDATE, A.TOKENNO, A.SHIFT
                                HAVING COUNT(*)>1
                        )
        LOOP    
           UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='N', REMARKS='Duplicate Entry Found.' 
                WHERE ATTENDATE=cDupli.ATTENDATE AND TOKENNO=cDupli.TOKENNO 
                    AND SHIFT=cDupli.SHIFT;
--                    AND VERIFIED='Y';
        END LOOP;
        COMMIT;
        --dbms_output.put_line ('3_0 Checking ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD - COMPLETE');
            
        /* Checking whether Invalid Department/Occupation Code exists or not */
        FOR cDepOcc IN (
                SELECT DISTINCT DEPARTMENT||SECTION||OCCUPATION DEPTOCC FROM WPSATTENDANCECSVRAWDATA
                    WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    MINUS
                SELECT DISTINCT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE DEPTOCC FROM WPSOCCUPATIONMAST
                )
        LOOP    
            UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED ='N', REMARKS='Invalid Department/Occupation Code exists.' 
             WHERE  ATTENDATE = P_DATEOFATTENDANCE
               AND DEPARTMENT||OCCUPATION=cDepOcc.DEPTOCC
               AND VERIFIED='Y';
        END LOOP;
        COMMIT;
        --dbms_output.put_line ('4_0 Checking whether Invalid Department/Section/Occupation Code exists or not - COMPLETE');
        
        UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='N', REMARKS='INVALID SHIFT, SHIFT SHOULD BE 1,2,3'
        WHERE  ATTENDATE = P_DATEOFATTENDANCE
          --AND SHIFT NOT IN ('1','2','3'); 
          AND SHIFT NOT IN ('A','B','C');
        COMMIT;       
        /* Checking Valid Token No. */
        lv_Remarks := 'CHECKING INVALID TOKEN';
        lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED = ''N'', REMARKS=''Invalid Token'' '||chr(10)
                   ||' WHERE trim(TOKENNO) IN ( SELECT TRIM(TOKENNO) FROM WPSATTENDANCECSVRAWDATA  WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' '||CHR(10)
                   ||'              MINUS '||CHR(10)
                   ||'              SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                   ||'              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   ||'            ) AND ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
        --dbms_output.put_line ('5_0 Checking Invalid Shift - COMPLETE');
        lv_SqlStr := '';
        /* Checking Valid occupation */
        lv_Remarks := 'CHECKING INVALID TOKEN';
        lv_SqlStr  :='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED = ''N'', REMARKS=''Invalid Occupation'' '||CHR(10)
                    ||'WHERE SECTION||OCCUPATION IN('||CHR(10)
                    ||'                                 SELECT SECTION||OCCUPATION FROM WPSATTENDANCECSVRAWDATA  WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' '||CHR(10)
                    ||'                                   MINUS '||CHR(10)
                    ||'                                 SELECT SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST '||CHR(10)
                    ||'                                   WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                    ||'                             )'
                    ||' AND ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
        
        /* Checking Normal attendance IN DIFFERENT SHIFT */ 
        lv_Remarks := 'NORMAL ATTENDANCE FOUND IN DIFFERENT SHIFT';
        for cNormalHrs in ( SELECT TOKENNO, COUNT(*) CNT
                            FROM ( SELECT DISTINCT TOKENNO, SHIFT 
                                   FROM WPSATTENDANCECSVRAWDATA
                                   WHERE ATTENDATE = P_DATEOFATTENDANCE
                                     AND ( NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)  ) > 0
                                  )
                            GROUP BY TOKENNO
                            HAVING COUNT (*) >1 
                          )
         LOOP
            update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
            where ATTENDATE = P_DATEOFATTENDANCE
              and TOKENNO = cNormalHrs.TOKENNO
              and NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;
         END LOOP;                   
         --dBms_output.put_line ('6_0 NORMAL ATTENDANCE FOUND IN DIFFERENT SHIFT - COMPLETE');      
          
        /* checking normal attendance in DAYOFF */ 
        lv_Remarks := 'CHECKING NORMAL ATTENDANCE IN DAYOFF ';

        IF TRIM(LTRIM(TO_CHAR(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'DAY'))) = 'MONDAY' THEN
        
            ----- ALL FACTORY SIDE DEPARMENT MONDAY WORKING GOES TO OVERTIME ---------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal Attendance transfer to O.T.'' , OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)) '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER  WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE =''F'')'||CHR(10)
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
--                dBms_output.put_line ('7_0 CHECKING NORMAL ATTENDANCE IN DAYOFF - COMPLETE');

            ----- MONDAY NIGHT SHIFT ALL WORKERS DAY OFF ------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'', REMARKS=''Normal Attendance transfer to O.T.'', OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)) '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''''||CHR(10)
                      ||'   AND DEPARTMENT <>''3500'' '||CHR(10)
                      ||'   AND SHIFT =''C'' '||CHR(10)
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
                
--            dBms_output.put_line ('8_0 CHECKING NORMAL ATTENDANCE IN FACTORY SIDE ON MONDAY - COMPLETE');

            ----- DEPARMENT 3500 AND SHIFT 3, MONDAY WORKING GOES TO OVERTIME ---------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal Attendance transfer to O.T.'', OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0))  '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'  AND DEPARTMENT =''3300'''||CHR(10)
                      ||'  AND SHIFT =''C'' '||CHR(10)
                      ||'  AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
--            dBms_output.put_line ('9_0 CHECKING NIGHT SHIFT ON MONDAY - COMPLETE');    
           ----- FOR SECTION 0300,0400,0600 MONDAY WORKING GOES TO OVERTIME --------- 
           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'',   REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'   AND DEPARTMENT = ''0600'''||CHR(10)
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
            --- FOR WHOM DAYOFF MONDAY
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   --AND SHIFT <>''C'''||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
           ---- ALL MILL SIDE DEPARTMENT OTHER THAN SECTION 300,400,600 AND SHIFT CODE 3 -------
--           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Wrong DayOff'''||CHR(10)
--                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
--                      ||'   AND DEPARTMENT NOT IN (''0300'',''0400'',''0600'')'||CHR(10)
--                      ||'   AND SHIFT =''C'' '||CHR(10)
--                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
--                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
--                EXECUTE IMMEDIATE lv_SqlStr;
--                commit;
--           dBms_output.put_line ('8_0 CHECKING NORMAL ATTENDANCE OTHER THAN SECTION 300,400,600 - COMPLETE');     
           ---- ALL MILL SIDE WORKER'S DAY OFF MONDAY  -------
--           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Wrong DayOff'''||CHR(10)
--                     ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
--                     ||'    AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''F'')'||CHR(10)
--                     ||'    AND SECTION NOT IN (''0300'',''0400'',''0600'')'||CHR(10)
--                     ||'    AND SHIFT !=''C'''||CHR(10)
--                     ||'    AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND LTRIM(RTRIM(DAYOFFDAY))=TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY''))))'||CHR(10)
--                     ||'    AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
--                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
--                EXECUTE IMMEDIATE lv_SqlStr;
--                commit;
--            dBms_output.put_line ('9_0 CHECKING NORMAL ATTENDANCE IN FACTORY SIDE ON MONDAY - COMPLETE');    
        ELSE
             lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   AND SHIFT <>''C'''||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
            ----FOR GENERAL SHIFT NORMAL DAY OFF COMSIDER -----------
             lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE = ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;

--            dBms_output.put_line ('10_0 C - COMPLETE');    
        END IF;  
    end if;
        /* Updatng Attendance related Data */
    IF (P_VALIDORUPDATE='V' or P_VALIDORUPDATE='A') THEN
        lv_Remarks := 'DATA ALREADY EXISTS IN ATTENDANCE';
        FOR C1 IN (
                    SELECT A.TOKENNO, A.SHIFTCODE, A.SPELLTYPE 
                    FROM WPSATTENDANCEDAYWISE A, WPSATTENDANCECSVRAWDATA B
                    WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                      AND A.YEARCODE=lv_yearcode                            
                      AND A.DATEOFATTENDANCE=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                      AND trim(A.TOKENNO) = B.TOKENNO AND A.SHIFTCODE=B.SHIFT
                      AND A.SPELLTYPE=B.SPELLTYPE
                      AND B.VERIFIED='Y'
                      AND TO_DATE(B.ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                  )
                LOOP                                         
--                    UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS='Data already exists in Attendance', VERIFIED='N'
--                    WHERE ATTENDATE = P_DATEOFATTENDANCE
--                      AND TOKENNO=C1.TOKENNO AND SHIFTCODE=C1.SHIFTCODE
--                      AND SPELLTYPE = C1.SPELLTYPE;
                    
                    lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS=''Data already exists in Attendance'', VERIFIED=''N'' '||chr(10)
                                ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||chr(10)
                                ||' AND trim(TOKENNO)='''||C1.TOKENNO||''' AND SHIFT ='''||C1.SHIFTCODE||''' '||chr(10)
                                ||' AND SPELLTYPE = '''||C1.SPELLTYPE||''' '||chr(10);                        
                    
--                    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE||' - '||c1.TOKENNO, lv_Remarks);
                    execute immediate lv_SqlStr;
--                    dBms_output.put_line ('11_0 DATA ALREADY EXISTS - COMPLETE');                    
                END LOOP;              
                COMMIT;
                --dBms_output.put_line ('Checking Data Already exists in attendance - COMPLETE');
        /* cHECKING STL related Data */
        
        lv_Remarks := 'STL Data Checking';
        FOR C2 IN (
                    SELECT A.TOKENNO
                        FROM WPSSTLENTRY A, WPSATTENDANCECSVRAWDATA B, WPSWORKERMAST C
                        WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                            --AND A.YEARCODE=lv_yearcode                            
                            AND TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') BETWEEN A.STLFROMDATE AND A.STLTODATE
                            AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE AND A.WORKERSERIAL = C.WORKERSERIAL 
                            AND C.TOKENNO = B.TOKENNO 
                            AND B.VERIFIED='Y' 
                            AND B.ATTENDATE = P_DATEOFATTENDANCE
                            AND (NVL(B.SPELLHRS_1,0)+NVL(B.SPELLHRS_2,0)) > 0
                            --AND TO_DATE(B.ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                  )
                LOOP                                         
                    UPDATE WPSATTENDANCECSVRAWDATA SET  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)), REMARKS='Data already exists in STL, Normal Attendance not possible', VERIFIED='Y'
                    --WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    WHERE ATTENDATE = P_DATEOFATTENDANCE
                      AND TOKENNO=C2.TOKENNO;
                    -- dbms_output.put_line ('Others Found ROWS UPDATED - '||sql%rowcount);                                                     
                END LOOP;              
                COMMIT;  
                --dbms_output.put_line ('cHECKING STL related Data - COMPLETE');  
        /* cHECKING OTHER LEAVE  */        
        lv_Remarks := 'Other Leave Checking';        
        FOR C2 IN (
                    SELECT A.TOKENNO
                        FROM WPSLEAVEAPPLICATION A, WPSATTENDANCECSVRAWDATA B, WPSWORKERMAST C
                        WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                            AND A.LEAVESANCTIONEDON IS NOT NULL
                            AND A.LEAVEDATE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                            AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE AND A.WORKERSERIAL = C.WORKERSERIAL 
                            AND C.TOKENNO = B.TOKENNO 
                            AND B.VERIFIED='Y' 
                            AND B.ATTENDATE = P_DATEOFATTENDANCE
                            AND (NVL(B.SPELLHRS_1,0)+NVL(B.SPELLHRS_2,0)) > 0
                  )
                LOOP                                         
                    UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS='Data already exists in Leave, Normal Attendance not possible', VERIFIED='N'
                    --WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    WHERE ATTENDATE = P_DATEOFATTENDANCE
                      AND TOKENNO=C2.TOKENNO;
                    -- dbms_output.put_line ('Others Found ROWS UPDATED - '||sql%rowcount);                                                     
                END LOOP;              
                COMMIT;    
        --dbms_output.put_line ('Checking Other Leave - COMPLETE');     
        --dbms_output.put_line('process successfully completer');
    END IF;
    
    if P_VALIDORUPDATE='A' then         --- data insert into attendance table for approved ------
        lv_Remarks := 'Data Insert';
        lv_BookNoPrefix := 'ATTN/'||REPLACE(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'/','');
        lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE (COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,  '||CHR(10)
                ||' DATEOFATTENDANCE, DEPARTMENTCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, SPELLTYPE, '||CHR(10)
                ||' SPELLHOURS, DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, OVERTIMEHOURS, NIGHTALLOWANCEHOURS, '||CHR(10)
                ||' UNITCODE, MODULE, BOOKNO, ATTENDANCETAG, LASTMODIFIED, USERNAME, SYSROWID,SERIALNO ) '||CHR(10)
                ||' SELECT B.COMPANYCODE, B.DIVISIONCODE,'''||lv_YearCode||'''  YEARCODE, TO_DATE('''||lv_FnStDt||''',''DD/MM/YYYY'') FORTNIGHTSTARTDATE, TO_DATE('''||lv_FnEndt||''',''DD/MM/YYYY'') FORTNIGHTENDDATE, '||CHR(10)
                ||' TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') DATEOFATTENDANCE, A.DEPARTMENT DEPARTMENTCODE, A.SHIFT,  '||CHR(10)
                ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, A.OCCUPATION OCCUPATIONCODE, C.WORKERTYPECODE,  A.SPELLTYPE,  '||CHR(10)
                ||' NVL(LTRIM(TRIM( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0))),0) SPELLHOURS, 0 DEDUCTIONHOURS,  NVL(LTRIM(TRIM(NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0))),0) ATTNHOURS, NULL, NVL(LTRIM(TRIM(A.OTHOURS)),0) OTHOURS, 0 NIGHTALLOWANCEHOURS,  '||CHR(10)
                ||' NULL, ''WPS'' MODULE, '''||lv_BookNoPrefix||'''||''/''||B.TOKENNO BOOKNO, ''MANUAL UPLOAD'' ATTENDANCETAG, SYSDATE, '''||P_USER||''', ''1'' SYSROWID,ROWNUM   '||CHR(10)
                ||' FROM  WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C '||CHR(10)
                ||' WHERE A.ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                ||'   AND NVL(A.VERIFIED,''N'') = ''Y'' '||CHR(10)
                ||'   AND B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.TOKENNO = B.TOKENNO  '||CHR(10)
                ||'   AND C.COMPANYCODE = '''||P_COMPCODE||''' AND C.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.DEPARTMENT = C.DEPARTMENTCODE AND A.OCCUPATION = C.OCCUPATIONCODE '||CHR(10);
         
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
            commit; 
           EXECUTE IMMEDIATE lv_SqlStr;
           commit;
            
            lv_Remarks := 'Data Approved';
        lv_SqlStr := 'UPDATE WPSATTENDANCECSVRAWDATA SET APPROVED=''Y'' WHERE VERIFIED=''Y'' AND TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'')||TRIM(TOKENNO)||SHIFT||SPELLTYPE IN ( '||CHR(10)
                ||' SELECT '||CHR(10)
                ||'  TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') ||TRIM(B.TOKENNO)||A.SHIFT||SPELLTYPE'||CHR(10)
                ||' FROM  WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C '||CHR(10)
                ||' WHERE A.ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                ||'   AND NVL(A.VERIFIED,''N'') = ''Y'' '||CHR(10)
                ||'   AND B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.TOKENNO = B.TOKENNO  '||CHR(10)
                ||'   AND C.COMPANYCODE = '''||P_COMPCODE||''' AND C.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.DEPARTMENT = C.DEPARTMENTCODE AND A.OCCUPATION = C.OCCUPATIONCODE )'||CHR(10)
                ||'   AND ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10);  
           
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
            commit; 
            EXECUTE IMMEDIATE lv_SqlStr;
            commit;      
    end if;
    delete from WPSATTNCSVDATA_STAGE;
    COMMIT; 
EXCEPTION  
    WHEN OTHERS THEN
    -- Consider logging the error and then re-raise
    LV_SQLERRM := SQLERRM ;
    delete from WPSATTNCSVDATA_STAGE;
    INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    VALUES( lv_PROCNAME,LV_SQLERRM, lv_SqlStr, P_DATEOFATTENDANCE,NULL,NULL, 'ERROR in ATTENDANCE DATA IMPORT');
    COMMIT;
    --RAISE;
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL_X;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_ATTNOTDATA_MANUAL_X (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFATTENDANCE VARCHAR2,
                                                       P_VALIDORUPDATE CHAR,
                                                       P_USER          VARCHAR2, 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL,
                                                       P_DEPCODE VARCHAR2 DEFAULT NULL)                                                       
AS
/* ----- SAMPLE PROCEDURE ----- */                                                       
LV_CNT              NUMBER := 0;
tmpVar              NUMBER := 0;
LV_SQLERRM          VARCHAR2(2000):='';
lv_SqlStr           VARCHAR2(4000) := '';
lv_error_remark     VARCHAR2(4000) := '' ;
lv_yearcode         VARCHAR2(20) :='';
lv_entryday         VARCHAR2(20) := LTRIM(RTRIM(TO_CHAR(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'DAY')));
lv_PROCNAME         varchar2(30) := 'PRCWPS_IMP_ATTNOTDATA_MANUAL';
lv_BookNoPrefix     varchar2(20) := '';
lv_Remarks          varchar2(100) := '';
lv_FnStDt           varchar2(10) := '';
lv_FnEnDt           varchar2(10) := '' ;
lv_MAXSPELLHOURS_SPELL1    NUMBER ;
lv_MAXSPELLHOURS_SPELL2    NUMBER ;
lv_upd              varchar2(1) ;
/* FOLLOWING CONDITION CHECKED IN THIS PROCEDURE BEFORE VERIFIED
    1. Checking whether Date of Attendance Parameter is Greater than the Current Date
    2. Normal and O.T. Hours in same shift in Raw data.   
    3. Spell Wise hours can't exceed the maximum hours
    4. ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD 
    5. INVALID DEPARTMENT AND OCCUPATION CODE , AND INVALID SHIFT
    6. INVALID TOKEN No.
    7. Checking Normal attendance in different shift 
    7. Norma attendance hours more than 8
    8. Normal attendance in Master Day Off
    9. Data already exist in in attendance table based on date, shift, occupation (CONSIDER BOTH VERIFIED AND APPROVED ) 
   10. Worker in STL but normal attendance found        (CONSIDER BOTH VERIFIED AND APPROVED )
   11. Worker in Leave (other than STL) but normal attendance found   (CONSIDER BOTH VERIFIED AND APPROVED )
*/
--EXEC PRCWPS_IMP_ATTNOTDATA_MANUAL ('0001','0002','01/06/2019','V','SWT')    
BEGIN   
  select count(*) into LV_CNT from WPSATTNCSVDATA_STAGE ;
  if LV_CNT > 0 then   
   BEGIN
        
--    delete from WPSATTENDANCECSVRAWDATA where (ATTENDATE, SHIFT, TOKENNO) 
--      in ( SELECT ATTENDATE, SHIFT, TOKENNO  FROM WPSATTNCSVDATA_STAGE );
    DBMS_OUTPUT.PUT_LINE('INSIDE');

    UPDATE WPSATTNCSVDATA_STAGE set SECTION = LPAD(LTRIM(RTRIM(SECTION)),4,'0'),OCCUPATION =LPAD(LTRIM(RTRIM(OCCUPATION)),3,'0') WHERE ATTENDATE = P_DATEOFATTENDANCE;
      
    FOR C1 IN ( SELECT DISTINCT SECTION, SHIFT FROM WPSATTNCSVDATA_STAGE)
    LOOP
        DELETE FROM WPSATTENDANCECSVRAWDATA WHERE ATTENDATE = P_DATEOFATTENDANCE
        AND SECTION = C1.SECTION /*AND SHIFT = C1.SHIFT*/ AND COMPANYCODE=P_COMPCODE
        AND DIVISIONCODE=P_DIVCODE;
    END LOOP;
                          
      
    insert into WPSATTENDANCECSVRAWDATA( ATTENDATE,DEPARTMENT, SECTION, SHIFT, OCCUPATION, TOKENNO, SPELLHRS_1, SPELLHRS_2, OTHOURS, APPROVED, VERIFIED ,USERNAME,COMPANYCODE,DIVISIONCODE)
    select ATTENDATE,DEPARTMENTCODE, SECTION, SHIFT, OCCUPATION, TOKENNO, SPELLHRS_1, SPELLHRS_2, OTHOURS, 'N', 'N',P_USER,P_COMPCODE,P_DIVCODE
    from WPSATTNCSVDATA_STAGE A,WPSSECTIONMAST B
    WHERE B.COMPANYCODE=P_COMPCODE
        AND B.DIVISIONCODE=P_DIVCODE
        AND B.SECTIONCODE=A.SECTION ;
      DBMS_OUTPUT.PUT_LINE('INSERT');       
    --delete from WPSATTNCSVDATA_STAGE;
    commit;  
   EXCEPTION
    WHEN OTHERS THEN
     ROLLBACK;
   END; 
  end if;
    tmpVar := 0;

    if substr(P_DATEOFATTENDANCE,1,2) <= 15 then
        lv_FnStDt   := '01'||substr(P_DATEOFATTENDANCE,3);
        lv_FnEnDt   := '15'||substr(P_DATEOFATTENDANCE,3);
    else
        lv_FnStDt   := '16'||substr(P_DATEOFATTENDANCE,3);
        lv_FnEnDt   := TO_CHAR(LAST_DAY(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')),'DD/MM/YYYY');
    end if;
   -- dbms_output.put_line ('XXAXAXXAAX');
    DELETE FROM WPS_ERROR_LOG WHERE PROC_NAME = lv_PROCNAME;
    COMMIT;    
    
    SELECT LTRIM(RTRIM(YEARCODE)) INTO lv_yearcode FROM FINANCIALYEAR WHERE 1=1
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE 
    AND TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') BETWEEN STARTDATE AND ENDDATE;
  -- dbms_output.put_line ('out '||lv_yearcode||'-'||P_DATEOFATTENDANCE);
   -- UPDATE WPSATTENDANCECSVRAWDATA SET SHIFTCODE=DECODE(SHIFT,'A1','1','A2','1','B1','2','B2','2','3'),
-- UPDATE WPSATTENDANCECSVRAWDATA  SET    SPELLTYPE=DECODE(SHIFT,'A1','SPELL 1','A2','SPELL 2','B1','SPELL 1','B2','SPELL 2','SPELL 1');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 1' WHERE (SHIFT = '1' AND SPELLHRS_1 <= '5' ) OR (SHIFT = '2' AND SPELLHRS_2 <= '3');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 2' WHERE (SHIFT = '2' AND SPELLHRS_1 <= '3' ) OR (SHIFT = '2' AND SPELLHRS_2 <= '5');
    UPDATE WPSATTENDANCECSVRAWDATA  SET  SPELLTYPE =  'SPELL 3' WHERE (SHIFT = '3' AND SPELLHRS_1 <= '8' ) ;  
    commit;
    --DBMS_OUTPUT.PUT_LINE ('0_0 DATA INSERT DONE');
    IF P_VALIDORUPDATE='V' THEN     
       /* Checking whether Date of Attendance Parameter is Greater than the Current Date */     
        IF TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') > TRUNC(SYSDATE) THEN
            lv_error_remark := 'Validation Failure : [Date of Attendance cannot be greater than Current Date.]';
            --dbms_output.put_line (lv_error_remark); 
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;   
        
        UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='Y' 
           WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
           AND TOKENNO||SHIFT||SECTION||COMPANYCODE||DIVISIONCODE IN ( SELECT TOKENNO||SHIFT||SECTION||P_COMPCODE||P_DIVCODE FROM WPSATTNCSVDATA_STAGE );
       --     WHERE ATTENDATE = P_DATEOFATTENDANCE;      
       --dbms_output.put_line (lv_yearcode||'-'||P_DATEOFATTENDANCE);

        /* 2. Checking Normal and O.T. Hours in same shift in Raw data. */
        lv_Remarks := 'Ckecking Normal attendance, O.T. hrs in Samae Shift';
        lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal attendance Hourns, O.T Hours both found.'' '||chr(10)
                   ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' '||CHR(10)
                   ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) >0 '||CHR(10)
                   ||'   AND NVL(COMPANYCODE,''0001'')='''||P_COMPCODE||''''||CHR(10)
                   ||'   AND NVL(DIVISIONCODE,''0002'')='''||P_DIVCODE||''''||CHR(10)
                   ||'   AND NVL(OTHOURS,0) > 0 '||CHR(10)
                   ||'   AND VERIFIED = ''Y'' '||CHR(10); 
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_COMPCODE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
      --  DBMS_OUTPUT.PUT_LINE ('1_0 CURRENT DATE CHECKING DONE');
        /* Checking Spell Wise hours can't exceed the maximum hours */
        lv_Remarks := 'Hours can not be more than Spell Hours 1';
        FOR cSpellHrs in ( /*SELECT A.ATTENDATE, A.SHIFT, A.TOKENNO,  A.OTHOURS, A.VERIFIED   
                            FROM WPSATTENDANCECSVRAWDATA A, WPSSPELLMASTER B
                            WHERE ATTENDATE = P_DATEOFATTENDANCE
                              AND VERIFIED = 'Y'
                              AND B.COMPANYCODE=P_COMPCODE AND B.DIVISIONCODE=P_DIVCODE
                              AND A.SHIFT = B.SHIFTCODE AND A.SPELLTYPE = B.SPELLTYPE
                              AND ( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0) >  NVL(MAXSPELLHOURS,0) OR  NVL(A.OTHOURS,0) >  NVL(MAXSPELLHOURS,0))*/
                         
                          SELECT A.ATTENDATE, A.SHIFT,A.TOKENNO , A.SPELLHRS_1, A.SPELLHRS_2, A.SPELLTYPE
                          FROM WPSATTENDANCECSVRAWDATA A 
                          WHERE A.ATTENDATE = P_DATEOFATTENDANCE
                          AND COMPANYCODE=P_COMPCODE
                          AND DIVISIONCODE=P_DIVCODE
                          AND A.DEPARTMENT||A.SHIFT NOT IN (SELECT DEPARTMENTCODE||'C' FROM WPSDEPARTMENTMASTER WHERE NSAAPPLICABLE='Y')
                          AND A.VERIFIED = 'Y'
                          ORDER BY A.TOKENNO
                         )        
        loop   
           -- DBMS_OUTPUT.PUT_LINE ('1_1 INSIDE LOOP'||cSpellHrs.TOKENNO );      
            if  cSpellHrs.shift = 'A' then
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL1 from WPSSPELLMASTER where shiftcode = '1' and SPELLTYPE = 'SPELL 1' ;
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL2 from WPSSPELLMASTER where shiftcode = '1' and SPELLTYPE = 'SPELL 2' ;
           --    DBMS_OUTPUT.PUT_LINE ('1_2 INSIDE LOOP A'); 
            elsif  cSpellHrs.shift = 'B' then            
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL1 from WPSSPELLMASTER where shiftcode = '2' and SPELLTYPE = 'SPELL 1' ;
               select MAXSPELLHOURS into lv_MAXSPELLHOURS_SPELL2 from WPSSPELLMASTER where shiftcode = '2' and SPELLTYPE = 'SPELL 2' ;
            --   DBMS_OUTPUT.PUT_LINE ('1_2 INSIDE LOOP B');
            else
               select MAXSPELLHOURS,0 into lv_MAXSPELLHOURS_SPELL1 , lv_MAXSPELLHOURS_SPELL2  from WPSSPELLMASTER  where shiftcode = '3' and SPELLTYPE = 'SPELL 1' ;
            --   DBMS_OUTPUT.PUT_LINE ('1_3 INSIDE LOOP C');
            end if;
                
            if cSpellHrs.SPELLHRS_1  > lv_MAXSPELLHOURS_SPELL1 or  cSpellHrs.SPELLHRS_2  > lv_MAXSPELLHOURS_SPELL2 then
            --  DBMS_OUTPUT.PUT_LINE ('1_4 INSIDE LOOP CHECK SPELL HOURS');  
              update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
              where ATTENDATE = cSpellHrs.ATTENDATE AND TOKENNO = cSpellHrs.TOKENNO 
                    AND SHIFT = cSpellHrs.SHIFT;
            end if;
            --DBMS_OUTPUT.PUT_LINE ('1_6 INSIDE LOOP OUTSIDE IF CONDITION');
        end loop;
        commit;
        --DBMS_OUTPUT.PUT_LINE ('2_0 Hours can not be more than Spell Hours  DONE');
        --dbms_output.put_line ('Hours can not be more than Spell Hours - COMPLETE');
        
             /* Checking Spell Wise hours can't exceed the maximum hours in night allowence department*/
        lv_Remarks := 'Hours can not be more than Spell Hours 2';
        FOR cSpellHrs in ( /*SELECT A.ATTENDATE, A.SHIFT, A.TOKENNO,  A.OTHOURS, A.VERIFIED   
                            FROM WPSATTENDANCECSVRAWDATA A, WPSSPELLMASTER B
                            WHERE ATTENDATE = P_DATEOFATTENDANCE
                              AND VERIFIED = 'Y'
                              AND B.COMPANYCODE=P_COMPCODE AND B.DIVISIONCODE=P_DIVCODE
                              AND A.SHIFT = B.SHIFTCODE AND A.SPELLTYPE = B.SPELLTYPE
                              AND ( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0) >  NVL(MAXSPELLHOURS,0) OR  NVL(A.OTHOURS,0) >  NVL(MAXSPELLHOURS,0))*/
                         
                          SELECT A.ATTENDATE, A.SHIFT,A.TOKENNO , A.SPELLHRS_1, A.SPELLHRS_2, A.SPELLTYPE
                          FROM WPSATTENDANCECSVRAWDATA A,(SELECT * FROM WPSDEPARTMENTMASTER WHERE NSAAPPLICABLE='Y') B 
                          WHERE A.ATTENDATE = P_DATEOFATTENDANCE
                          AND A.COMPANYCODE=P_COMPCODE
                          AND A.DIVISIONCODE=P_DIVCODE
                          AND A.DEPARTMENT||A.SHIFT=B.DEPARTMENTCODE||'C'
                          AND A.VERIFIED = 'Y'
                          ORDER BY A.TOKENNO
                         )        
        loop   
               select (MAXSPELLHOURS+.5),0 into lv_MAXSPELLHOURS_SPELL1 , lv_MAXSPELLHOURS_SPELL2  from WPSSPELLMASTER  where shiftcode = '3' and SPELLTYPE = 'SPELL 1' ;
                
            if cSpellHrs.SPELLHRS_1  > lv_MAXSPELLHOURS_SPELL1 or  cSpellHrs.SPELLHRS_2  > lv_MAXSPELLHOURS_SPELL2 then
            --  DBMS_OUTPUT.PUT_LINE ('1_4 INSIDE LOOP CHECK SPELL HOURS');  
              update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
              where ATTENDATE = cSpellHrs.ATTENDATE AND TOKENNO = cSpellHrs.TOKENNO 
                    AND SHIFT = cSpellHrs.SHIFT;
            end if;
            --DBMS_OUTPUT.PUT_LINE ('1_6 INSIDE LOOP OUTSIDE IF CONDITION');
        end loop;
        commit;
                              
        /* Checking ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD */
               
        FOR cDupli IN (
                        SELECT A.ATTENDATE, A.TOKENNO, A.SHIFT, COUNT(*) CNT
                            FROM WPSATTENDANCECSVRAWDATA A 
                            WHERE COMPANYCODE=P_COMPCODE
                                AND DIVISIONCODE=P_DIVCODE                       
                                GROUP BY A.ATTENDATE, A.TOKENNO, A.SHIFT
                                HAVING COUNT(*)>1
                        )
        LOOP    
           UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='N', REMARKS='Duplicate Entry Found.' 
                WHERE ATTENDATE=cDupli.ATTENDATE AND TOKENNO=cDupli.TOKENNO 
                    AND SHIFT=cDupli.SHIFT;
--                    AND VERIFIED='Y';
        END LOOP;
        COMMIT;
        --dbms_output.put_line ('3_0 Checking ATTENDANCE DATE, TOKEN, SHIFT WISE DUPLICATE RECORD - COMPLETE');
            
        /* Checking whether Invalid Department/Occupation Code exists or not */
        FOR cDepOcc IN (
                SELECT DISTINCT DEPARTMENT||SECTION||OCCUPATION DEPTOCC FROM WPSATTENDANCECSVRAWDATA
                    WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    AND COMPANYCODE=P_COMPCODE
                    AND DIVISIONCODE=P_DIVCODE
                    MINUS
                SELECT DISTINCT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE DEPTOCC FROM WPSOCCUPATIONMAST
                )
        LOOP    
            UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED ='N', REMARKS='Invalid Department/Occupation Code exists.' 
             WHERE  ATTENDATE = P_DATEOFATTENDANCE
               AND DEPARTMENT||OCCUPATION=cDepOcc.DEPTOCC
               AND VERIFIED='Y';
        END LOOP;
        COMMIT;
        --dbms_output.put_line ('4_0 Checking whether Invalid Department/Section/Occupation Code exists or not - COMPLETE');
        
        UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED='N', REMARKS='INVALID SHIFT, SHIFT SHOULD BE 1,2,3'
        WHERE  ATTENDATE = P_DATEOFATTENDANCE
                    AND COMPANYCODE=P_COMPCODE
                    AND DIVISIONCODE=P_DIVCODE
          --AND SHIFT NOT IN ('1','2','3'); 
          AND SHIFT NOT IN ('A','B','C');
        COMMIT;       
        /* Checking Valid Token No. */
        lv_Remarks := 'CHECKING INVALID TOKEN';
        lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED = ''N'', REMARKS=''Invalid Token'' '||chr(10)
                   ||' WHERE trim(TOKENNO) IN ( SELECT TRIM(TOKENNO) FROM WPSATTENDANCECSVRAWDATA  WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                   ||'                          AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                   ||'              MINUS '||CHR(10)
                   ||'              SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                   ||'              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   ||'            ) AND ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
        --dbms_output.put_line ('5_0 Checking Invalid Shift - COMPLETE');
        lv_SqlStr := '';
        /* Checking Valid occupation */
        lv_Remarks := 'CHECKING INVALID TOKEN';
        lv_SqlStr  :='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED = ''N'', REMARKS=''Invalid Occupation'' '||CHR(10)
                    ||'WHERE SECTION||OCCUPATION IN('||CHR(10)
                    ||'                                 SELECT SECTION||OCCUPATION FROM WPSATTENDANCECSVRAWDATA  WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' AND VERIFIED=''Y'' AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                   ||'                                      AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                    ||'                                   MINUS '||CHR(10)
                    ||'                                 SELECT SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST '||CHR(10)
                    ||'                                   WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                    ||'                             )'
                    ||' AND ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
        insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
        EXECUTE IMMEDIATE lv_SqlStr;
        commit;
        
        /* Checking Normal attendance IN DIFFERENT SHIFT */ 
        lv_Remarks := 'NORMAL ATTENDANCE FOUND IN DIFFERENT SHIFT';
        for cNormalHrs in ( SELECT TOKENNO, COUNT(*) CNT
                            FROM ( SELECT DISTINCT TOKENNO, SHIFT 
                                   FROM WPSATTENDANCECSVRAWDATA
                                   WHERE ATTENDATE = P_DATEOFATTENDANCE
                                     AND COMPANYCODE=P_COMPCODE
                                     AND DIVISIONCODE=P_DIVCODE
                                     AND ( NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)  ) > 0
                                  )
                            GROUP BY TOKENNO
                            HAVING COUNT (*) >1 
                          )
         LOOP
            update WPSATTENDANCECSVRAWDATA set VERIFIED='N', REMARKS= lv_Remarks
            where ATTENDATE = P_DATEOFATTENDANCE
              and TOKENNO = cNormalHrs.TOKENNO
              and NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;
         END LOOP;                   
         --dBms_output.put_line ('6_0 NORMAL ATTENDANCE FOUND IN DIFFERENT SHIFT - COMPLETE');      
          
        /* checking normal attendance in DAYOFF */ 
        lv_Remarks := 'CHECKING NORMAL ATTENDANCE IN DAYOFF ';

        IF TRIM(LTRIM(TO_CHAR(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'DAY'))) = 'MONDAY' THEN
        
            ----- ALL FACTORY SIDE DEPARMENT MONDAY WORKING GOES TO OVERTIME ---------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal Attendance transfer to O.T.'' , OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)) '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                      ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                      ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER  WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE =''F'')'||CHR(10)
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, 'xx');
               -- commit;
                --dBms_output.put_line ('lv_SqlStr1' || lv_SqlStr);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
             --  dBms_output.put_line ('lv_SqlStr2' || lv_SqlStr);
--                dBms_output.put_line ('7_0 CHECKING NORMAL ATTENDANCE IN DAYOFF - COMPLETE');

            ----- MONDAY NIGHT SHIFT ALL WORKERS DAY OFF ------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'', REMARKS=''Normal Attendance transfer to O.T.'', OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)) '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''''||CHR(10)
                      ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                      ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                      ||'   AND DEPARTMENT <>''3500'' '||CHR(10)
                      ||'   AND SHIFT =''C'' '||CHR(10)
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
                
--            dBms_output.put_line ('8_0 CHECKING NORMAL ATTENDANCE IN FACTORY SIDE ON MONDAY - COMPLETE');

            ----- DEPARMENT 3500 AND SHIFT 3, MONDAY WORKING GOES TO OVERTIME ---------
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Normal Attendance transfer to O.T.'', OTHOURS= (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0))  '||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                      ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                      ||'  AND DEPARTMENT =''3300'''||CHR(10)
                      ||'  AND SHIFT =''C'' '||CHR(10)
                      ||'  AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
--            dBms_output.put_line ('9_0 CHECKING NIGHT SHIFT ON MONDAY - COMPLETE');    
           ----- FOR SECTION 0300,0400,0600 MONDAY WORKING GOES TO OVERTIME --------- 
           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'',   REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
                      ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                      ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                      --Chnages on 29/10/2019 as Asit Da talk over phone
                      --||'   AND DEPARTMENT IN (''0300'',''0400'',''0600'')'||CHR(10)
                      ||'   AND DEPARTMENT IN (''0600'')'||CHR(10)
                      ||'   AND SECTION IN (''0404'',''0409'',''0304'',''0309'',''0809'')'||CHR(10)
                      --Chnages on 29/10/2019 as Asit Da talk over phone
                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
            --- FOR WHOM DAYOFF MONDAY
            lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                        ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   --AND SHIFT <>''C'''||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
           ---- ALL MILL SIDE DEPARTMENT OTHER THAN SECTION 300,400,600 AND SHIFT CODE 3 -------
--           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Wrong DayOff'''||CHR(10)
--                      ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
--                      ||'   AND DEPARTMENT NOT IN (''0300'',''0400'',''0600'')'||CHR(10)
--                      ||'   AND SHIFT =''C'' '||CHR(10)
--                      ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0;'||CHR(10);
--                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
--                EXECUTE IMMEDIATE lv_SqlStr;
--                commit;
--           dBms_output.put_line ('8_0 CHECKING NORMAL ATTENDANCE OTHER THAN SECTION 300,400,600 - COMPLETE');     
           ---- ALL MILL SIDE WORKER'S DAY OFF MONDAY  -------
--           lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''N'', REMARKS=''Wrong DayOff'''||CHR(10)
--                     ||'WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||CHR(10)
--                     ||'    AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''F'')'||CHR(10)
--                     ||'    AND SECTION NOT IN (''0300'',''0400'',''0600'')'||CHR(10)
--                     ||'    AND SHIFT !=''C'''||CHR(10)
--                     ||'    AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND LTRIM(RTRIM(DAYOFFDAY))=TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY''))))'||CHR(10)
--                     ||'    AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) > 0'||CHR(10);
--                insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
--                EXECUTE IMMEDIATE lv_SqlStr;
--                commit;
--            dBms_output.put_line ('9_0 CHECKING NORMAL ATTENDANCE IN FACTORY SIDE ON MONDAY - COMPLETE');    
        ELSE
             lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                        ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   AND SHIFT <>''C'''||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE <> ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;
            ----FOR GENERAL SHIFT NORMAL DAY OFF COMSIDER -----------
             lv_SqlStr:='UPDATE WPSATTENDANCECSVRAWDATA SET VERIFIED=''Y'',  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)+NVL(OTHOURS,0)), SPELLHRS_1 = ''0'', SPELLHRS_2 = ''0'', REMARKS=''Normal Attn Transfer to OT for DayOff'''||CHR(10)
                        ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                        ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                        ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                        ||'   AND TOKENNO IN (SELECT TOKENNO FROM WPSWORKERMAST '||CHR(10)
                        ||'                        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                        ||'                          AND LTRIM(RTRIM(DAYOFFDAY)) =  TRIM(LTRIM(TO_CHAR(TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY''),''DAY'')))  ) '||CHR(10)
                        ||'   AND DEPARTMENT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER WHERE DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE = ''G'') '||CHR(10)
                        ||'   AND NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)> 0 '||CHR(10);
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
                EXECUTE IMMEDIATE lv_SqlStr;
                commit;

--            dBms_output.put_line ('10_0 C - COMPLETE');    
        END IF;  
    end if;
        /* Updatng Attendance related Data */
    IF (P_VALIDORUPDATE='V' or P_VALIDORUPDATE='A') THEN
        lv_Remarks := 'DATA ALREADY EXISTS IN ATTENDANCE';
        FOR C1 IN (
                    SELECT A.TOKENNO, A.SHIFTCODE, A.SPELLTYPE 
                    FROM WPSATTENDANCEDAYWISE A, WPSATTENDANCECSVRAWDATA B
                    WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                      AND A.YEARCODE=lv_yearcode                            
                      AND A.DATEOFATTENDANCE=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                      AND trim(A.TOKENNO) = B.TOKENNO AND A.SHIFTCODE=B.SHIFT
                      AND A.SPELLTYPE=B.SPELLTYPE
                      AND B.VERIFIED='Y'
                      AND TO_DATE(B.ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                  )
                LOOP                                         
--                    UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS='Data already exists in Attendance', VERIFIED='N'
--                    WHERE ATTENDATE = P_DATEOFATTENDANCE
--                      AND TOKENNO=C1.TOKENNO AND SHIFTCODE=C1.SHIFTCODE
--                      AND SPELLTYPE = C1.SPELLTYPE;
                    
                    lv_SqlStr := ' UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS=''Data already exists in Attendance'', VERIFIED=''N'' '||chr(10)
                                ||' WHERE ATTENDATE = '''||P_DATEOFATTENDANCE||''' '||chr(10)
                                ||'   AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                                ||'   AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                                ||' AND trim(TOKENNO)='''||C1.TOKENNO||''' AND SHIFT ='''||C1.SHIFTCODE||''' '||chr(10)
                                ||' AND SPELLTYPE = '''||C1.SPELLTYPE||''' '||chr(10);                        
                    
--                    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE||' - '||c1.TOKENNO, lv_Remarks);
                    execute immediate lv_SqlStr;
--                    dBms_output.put_line ('11_0 DATA ALREADY EXISTS - COMPLETE');                    
                END LOOP;              
                COMMIT;
                --dBms_output.put_line ('Checking Data Already exists in attendance - COMPLETE');
        /* cHECKING STL related Data */
        
        lv_Remarks := 'STL Data Checking';
        FOR C2 IN (
                    SELECT A.TOKENNO
                        FROM WPSSTLENTRY A, WPSATTENDANCECSVRAWDATA B, WPSWORKERMAST C
                        WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                            AND B.COMPANYCODE=P_COMPCODE
                            AND B.DIVISIONCODE=P_DIVCODE                            
                            AND TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY') BETWEEN A.STLFROMDATE AND A.STLTODATE
                            AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE AND A.WORKERSERIAL = C.WORKERSERIAL 
                            AND C.TOKENNO = B.TOKENNO 
                            AND B.VERIFIED='Y' 
                            AND B.ATTENDATE = P_DATEOFATTENDANCE
                            AND (NVL(B.SPELLHRS_1,0)+NVL(B.SPELLHRS_2,0)) > 0
                            --AND TO_DATE(B.ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                  )
                LOOP                                         
                    UPDATE WPSATTENDANCECSVRAWDATA SET  OTHOURS = (NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0)), REMARKS='Data already exists in STL, Normal Attendance not possible', VERIFIED='Y'
                    --WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    WHERE ATTENDATE = P_DATEOFATTENDANCE
                      AND TOKENNO=C2.TOKENNO;
                    -- dbms_output.put_line ('Others Found ROWS UPDATED - '||sql%rowcount);                                                     
                END LOOP;              
                COMMIT;  
                --dbms_output.put_line ('cHECKING STL related Data - COMPLETE');  
        /* cHECKING OTHER LEAVE  */        
        lv_Remarks := 'Other Leave Checking';        
        FOR C2 IN (
                    SELECT A.TOKENNO
                        FROM WPSLEAVEAPPLICATION A, WPSATTENDANCECSVRAWDATA B, WPSWORKERMAST C
                        WHERE A.COMPANYCODE=P_COMPCODE AND A.DIVISIONCODE=P_DIVCODE
                            AND B.COMPANYCODE=P_COMPCODE
                            AND B.DIVISIONCODE=P_DIVCODE                            
                            AND A.LEAVESANCTIONEDON IS NOT NULL
                            AND A.LEAVEDATE = TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                            AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE AND A.WORKERSERIAL = C.WORKERSERIAL 
                            AND C.TOKENNO = B.TOKENNO 
                            AND B.VERIFIED='Y' 
                            AND B.ATTENDATE = P_DATEOFATTENDANCE
                            AND (NVL(B.SPELLHRS_1,0)+NVL(B.SPELLHRS_2,0)) > 0
                  )
                LOOP                                         
                    UPDATE WPSATTENDANCECSVRAWDATA SET REMARKS='Data already exists in Leave, Normal Attendance not possible', VERIFIED='N'
                    --WHERE TO_DATE(ATTENDATE,'DD/MM/YYYY')=TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY')
                    WHERE ATTENDATE = P_DATEOFATTENDANCE
                      AND TOKENNO=C2.TOKENNO;
                    -- dbms_output.put_line ('Others Found ROWS UPDATED - '||sql%rowcount);                                                     
                END LOOP;              
                COMMIT;    
        --dbms_output.put_line ('Checking Other Leave - COMPLETE');     
        --dbms_output.put_line('process successfully completer');
    END IF;
    
    if P_VALIDORUPDATE='A' then         --- data insert into attendance table for approved ------
        lv_Remarks := 'Data Insert';
        lv_BookNoPrefix := 'ATTN/'||REPLACE(TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'/','');
        lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE (COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,  '||CHR(10)
                ||' DATEOFATTENDANCE, DEPARTMENTCODE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, OCCUPATIONCODE, WORKERTYPECODE, SPELLTYPE, '||CHR(10)
                ||' SPELLHOURS, DEDUCTIONHOURS, ATTENDANCEHOURS, MACHINECODE1, OVERTIMEHOURS, NIGHTALLOWANCEHOURS, '||CHR(10)
                ||' UNITCODE, MODULE, BOOKNO, ATTENDANCETAG, LASTMODIFIED, USERNAME, SYSROWID,SERIALNO ) '||CHR(10)
                ||' SELECT B.COMPANYCODE, B.DIVISIONCODE,'''||lv_YearCode||'''  YEARCODE, TO_DATE('''||lv_FnStDt||''',''DD/MM/YYYY'') FORTNIGHTSTARTDATE, TO_DATE('''||lv_FnEndt||''',''DD/MM/YYYY'') FORTNIGHTENDDATE, '||CHR(10)
                ||' TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') DATEOFATTENDANCE, A.DEPARTMENT DEPARTMENTCODE, A.SHIFT,  '||CHR(10)
                ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, A.OCCUPATION OCCUPATIONCODE, C.WORKERTYPECODE,  A.SPELLTYPE,  '||CHR(10)
                ||' NVL(LTRIM(TRIM( NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0))),0) SPELLHOURS, 0 DEDUCTIONHOURS,  NVL(LTRIM(TRIM(NVL(A.SPELLHRS_1,0)+NVL(A.SPELLHRS_2,0))),0) ATTNHOURS, NULL, NVL(LTRIM(TRIM(A.OTHOURS)),0) OTHOURS, 0 NIGHTALLOWANCEHOURS,  '||CHR(10)
                ||' NULL, ''WPS'' MODULE, '''||lv_BookNoPrefix||'''||''/''||B.TOKENNO BOOKNO, ''MANUAL UPLOAD'' ATTENDANCETAG, SYSDATE, '''||P_USER||''', ''1'' SYSROWID,ROWNUM   '||CHR(10)
                ||' FROM  WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C '||CHR(10)
                ||' WHERE A.ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                ||'   AND NVL(A.VERIFIED,''N'') = ''Y'' '||CHR(10)
                ||'   AND B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.TOKENNO = B.TOKENNO  '||CHR(10)
                ||'   AND C.COMPANYCODE = '''||P_COMPCODE||''' AND C.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.DEPARTMENT = C.DEPARTMENTCODE AND A.OCCUPATION = C.OCCUPATIONCODE '||CHR(10);
         
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
            commit; 
           EXECUTE IMMEDIATE lv_SqlStr;
           commit;
            
            lv_Remarks := 'Data Approved';
        lv_SqlStr := 'UPDATE WPSATTENDANCECSVRAWDATA SET APPROVED=''Y'' WHERE VERIFIED=''Y'' AND TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'')||TRIM(TOKENNO)||SHIFT||SPELLTYPE IN ( '||CHR(10)
                ||' SELECT '||CHR(10)
                ||'  TO_DATE('''||P_DATEOFATTENDANCE||''',''DD/MM/YYYY'') ||TRIM(B.TOKENNO)||A.SHIFT||SPELLTYPE'||CHR(10)
                ||' FROM  WPSATTENDANCECSVRAWDATA A, WPSWORKERMAST B, WPSOCCUPATIONMAST C '||CHR(10)
                ||' WHERE A.ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10)
                ||'   AND NVL(A.VERIFIED,''N'') = ''Y'' '||CHR(10)
                ||'   AND B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.TOKENNO = B.TOKENNO  '||CHR(10)
                ||'   AND C.COMPANYCODE = '''||P_COMPCODE||''' AND C.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.DEPARTMENT = C.DEPARTMENTCODE AND A.OCCUPATION = C.OCCUPATIONCODE )'||CHR(10)
                ||'   AND ATTENDATE = '''||P_DATEOFATTENDANCE||'''  '||CHR(10);  
           
            insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, REMARKS ) values( lv_PROCNAME,lv_sqlerrm,lv_SqlStr,P_DATEOFATTENDANCE, lv_Remarks);
            commit; 
            EXECUTE IMMEDIATE lv_SqlStr;
            commit;      
    end if;
    delete from WPSATTNCSVDATA_STAGE;
    COMMIT; 
EXCEPTION  
    WHEN OTHERS THEN
    -- Consider logging the error and then re-raise
    LV_SQLERRM := SQLERRM ;
    delete from WPSATTNCSVDATA_STAGE;
    INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    VALUES( lv_PROCNAME,LV_SQLERRM, lv_SqlStr, P_DATEOFATTENDANCE,NULL,NULL, 'ERROR in ATTENDANCE DATA IMPORT');
    COMMIT;
    RAISE;
END;
/


DROP PROCEDURE PRCWPS_IMP_ATTNRAWDATA;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_ATTNRAWDATA(P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2, P_USERNAME VARCHAR2)
AS
    LV_SQLSTR      VARCHAR2(1000) := '';
    LV_CNT         NUMBER := 0;
    LV_ATTNDATE    VARCHAR2(20) := '';
    LV_PROC_NAME   VARCHAR2(100) := '';
    LV_DT          VARCHAR2(100) := '';
BEGIN
    SELECT COUNT(*)
      INTO LV_CNT
      FROM GBL_ATTNRAWDATA;
    IF LV_CNT>0 THEN
        SELECT MIN(DT)
          INTO LV_DT
          FROM GBL_ATTNRAWDATA
         WHERE DT <= (
            SELECT MAX(DT)
              FROM GBL_ATTNRAWDATA
         );
        IF NVL(LV_DT,'NA') <> 'NA' THEN
            SELECT SUBSTR(LV_DT,5,2)||'/'||SUBSTR(LV_DT,3,2)||'/20'||SUBSTR(LV_DT,1,2)
              INTO LV_ATTNDATE
              FROM DUAL;
            END IF;
        IF NVL(LV_ATTNDATE,'NA') <> 'NA' THEN 
            FOR C1 IN (SELECT DISTINCT DT
                         FROM GBL_ATTNRAWDATA
                         )
            LOOP
                LV_SQLSTR := 'DELETE '||CHR(10)
                           ||'  FROM WPSATTENDANCEDEVICERAWDATA '||CHR(10)
                           ||' WHERE DATEOFATTENDANCE = '''||SUBSTR(C1.DT,5,2)||'/'||SUBSTR(C1.DT,3,2)||'/20'||SUBSTR(C1.DT,1,2)||''' '||CHR(10);
                --DBMS_OUTPUT.PUT_LINE ('Query 1 '||LV_SQLSTR);
                EXECUTE IMMEDIATE LV_SQLSTR;
            END LOOP;
        END IF;
        --DBMS_OUTPUT.PUT_LINE ('Query 1 ');
        LV_SQLSTR := 'INSERT '||CHR(10) 
                   ||'  INTO WPSATTENDANCEDEVICERAWDATA '||CHR(10)
                   ||'       (TOKENNO, ATTENDATETIME, DEVICEID, DATEOFATTENDANCE, TIMEOFATTENDANCE, SHIFT, ATTENHOURS) '||CHR(10)
                   ||'SELECT TOKEN, SUBSTR(DT,5,2)||''/''||SUBSTR(DT,3,2)||''/20''||SUBSTR(DT,1,2)||'' ''||TIMEIN ATTENDATETIME, MACHINEID DEVICEID, '||CHR(10)
                   ||'       SUBSTR(DT,5,2)||''/''||SUBSTR(DT,3,2)||''/20''||SUBSTR(DT,1,2) DATEOFATTENDANCE, TIMEIN TIMEOFATTENDANCE,'''','''' '||CHR(10)
                   ||'  FROM GBL_ATTNRAWDATA '||CHR(10);
                   
        --DBMS_OUTPUT.PUT_LINE ('Query 2 '||LV_SQLSTR);
        EXECUTE IMMEDIATE LV_SQLSTR;
        
        LV_SQLSTR := 'SELECT ATTN_IMPORT_PROCEDURE '||CHR(10)
                   ||'  FROM WPSWAGESPARAMETER '||CHR(10)
                   ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' '||CHR(10)
                   ||'   AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10);
                   
        
        EXECUTE IMMEDIATE LV_SQLSTR INTO LV_PROC_NAME;
        
        --DBMS_OUTPUT.PUT_LINE ('Procedure PRCWPS_IMP_ATTNOTDATA_LASTWORK('||P_COMPCODE||','||P_DIVCODE||','||LV_ATTNDATE||','||P_YEARCODE||','||P_USERNAME||')');
        
        LV_SQLSTR := LV_PROC_NAME||'('''||P_COMPCODE||''','''||P_DIVCODE||''','''||LV_ATTNDATE||''','''||P_YEARCODE||''','''||P_USERNAME||''') ';
        --DBMS_OUTPUT.PUT_LINE (LV_SQLSTR);
        --DBMS_OUTPUT.PUT_LINE ('BEGIN '||LV_SQLSTR||'; END ;');
        
        insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        values( 'PRCWPS_IMP_ATTNRAWDATA','',SYSDATE,LV_SQLSTR,'',TO_DATE(SYSDATE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER 2');
        EXECUTE IMMEDIATE 'BEGIN '||LV_SQLSTR||'; END ;';
        
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
     insert into WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        values( 'PRCWPS_IMP_ATTNRAWDATA','',SYSDATE,LV_SQLSTR,'',TO_DATE(SYSDATE,'DD/MM/YYYY'),'ATTENDANCE DEVICE DATA TRANSFER 2');
END;
/


DROP PROCEDURE PRCWPS_IMP_GPPROCESS;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_GPPROCESS(P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_YEARCODE VARCHAR2,
                                                          P_USERNAME VARCHAR2 
                                                        )
IS
LV_CNT NUMBER := 0;
LV_DATEOFATTENDANCE  DATE := TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
LV_SQLERRM VARCHAR2(2000):='';
LV_SQL        VARCHAR2(6000):='';
LV_TMFROM_A1    VARCHAR2(10):='';
LV_TMTO_A1      VARCHAR2(10):='';
LV_TMFROM_A2    VARCHAR2(10):='';
LV_TMTO_A2      VARCHAR2(10):='';
LV_TMFROM_B1    VARCHAR2(10):='';
LV_TMTO_B1      VARCHAR2(10):='';
LV_TMFROM_B2    VARCHAR2(10):='';
LV_TMTO_B2      VARCHAR2(10):='';
LV_TMFROM_C1    VARCHAR2(10):='';
LV_TMTO_C1      VARCHAR2(10):='';
LV_TMFROM_C2    VARCHAR2(10):='';
LV_TMTO_C2      VARCHAR2(10):='';
LV_GPB4SAVEPROCNAME VARCHAR2(30) := '';


BEGIN  

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_A1, LV_TMTO_A1, LV_TMFROM_A2, LV_TMTO_A2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '1';

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_B1, LV_TMTO_B1, LV_TMFROM_B2, LV_TMTO_B2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '2';

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_C1, LV_TMTO_C1, LV_TMFROM_C2, LV_TMTO_C2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '3';
    
    LV_SQL := 'SELECT COUNT(*) '||CHR(10)
            ||'  FROM WPSGATEPASSRAWDATA_TEMP '||CHR(10);
            
    dbms_output.put_line ('Query : '||LV_SQL);     
    EXECUTE IMMEDIATE LV_SQL INTO LV_CNT;
    
    IF LV_CNT > 0 THEN
    
        LV_SQL := 'DELETE '||CHR(10)
                ||'  FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||' WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10);
                
        dbms_output.put_line ('Query : '||LV_SQL);     
        EXECUTE IMMEDIATE LV_SQL;
    
        LV_SQL := 'INSERT INTO WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||'SELECT '''||P_COMPCODE||''', '''||P_DIVCODE||''', '''||LV_DATEOFATTENDANCE||''', '||CHR(10) 
                ||'       CASE WHEN SPELL = ''A1'' OR SPELL = ''B1'' OR SPELL = ''C'' THEN ''SPELL 1'' '||CHR(10) 
                ||'            WHEN SPELL = ''A2'' OR SPELL = ''B2'' THEN ''SPELL 2'' '||CHR(10)
                ||'        END SPELL, '''' SPELLHOURS, A.TOKENNO, A.WORKERSERIAL, TO_NUMBER(DEDUCTIONHOURS,2), '||CHR(10) 
                ||'       ''GATE PASS'' TRANSACTIONTAG, ''DATA MIGRATED ON 19/04/2018'' REMARKS, '''||P_YEARCODE||''' YEARCODE, '||CHR(10) 
                ||'       CASE WHEN SPELL = ''A1'' OR SPELL = ''A2'' THEN ''1'' '||CHR(10) 
                ||'            WHEN SPELL = ''B1'' OR SPELL = ''B2'' THEN ''2'' '||CHR(10)
                ||'        END SHIFTCODE '||CHR(10)
                ||'  FROM WPSGATEPASSRAWDATA_TEMP A, WPSWORKERMAST B '||CHR(10)
                ||' WHERE A.TOKENNO=B.TOKENNO '||CHR(10);
                
        dbms_output.put_line ('Query : '||LV_SQL);     
        EXECUTE IMMEDIATE LV_SQL;
        
    END IF;
    
    LV_SQL := 'SELECT COUNT(*) '||CHR(10)
            ||'  FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
            ||' WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||'''; '||CHR(10);
    dbms_output.put_line ('Query : '||LV_SQL);     
    EXECUTE IMMEDIATE LV_SQL INTO LV_CNT; 
             
        IF LV_CNT > 0 THEN       
             
            --- updatespell hours based on shiftcode and spell -----
             
            LV_SQL := ' UPDATE WPSGATEPASSCSVRAWDATA AA '||CHR(10)
                    ||'    SET DEDUCTIONHOURS = ( SELECT '||CHR(10)
                    ||'                             CASE WHEN SHIFTCODE = ''1'' AND SPELL = ''SPELL 1'' THEN TO_NUMBER('''||LV_TMTO_A1||''') - TO_NUMBER('''||LV_TMFROM_A1||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''1'' AND SPELL = ''SPELL 2'' THEN TO_NUMBER('''||LV_TMTO_A2||''') - TO_NUMBER('''||LV_TMFROM_A2||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''2'' AND SPELL = ''SPELL 2'' THEN TO_NUMBER('''||LV_TMTO_B1||''') - TO_NUMBER('''||LV_TMFROM_B1||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''2'' AND SPELL = ''SPELL 2'' THEN TO_NUMBER('''||LV_TMTO_B2||''') - TO_NUMBER('''||LV_TMFROM_B2||''') '||CHR(10)
                    ||'                                  ELSE 8 '||CHR(10)
                    ||'                              END DEDUCTIONHOURS '||CHR(10)
                    ||'                             FROM WPSGATEPASSCSVRAWDATA CC '||CHR(10)          
                    ||'                            WHERE AA.TOKENNO = CC.TOKENNO '||CHR(10)
                    ||'                              AND AA.ROWID = CC.ROWID '||CHR(10)
                    ||'                         ) '||CHR(10)
                    ||'  WHERE DEDUCTIONHOURS IS NULL '||CHR(10)
                    ||'    AND DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10); 
            DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
            INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
            VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
            EXECUTE IMMEDIATE LV_SQL;    
            
        LV_SQL := ' INSERT INTO WPSACCIDENTGATEPASSDETAILS_TEMP ( COMPANYCODE, DATEOFATTENDANCE, DEDUCTIONHOURS, DIVISIONCODE, REMARKS, '||CHR(10)
                ||'             SHIFTCODE, SPELL, SPELLHOURS, TOKENNO, TRANSACTIONTAG, WORKERSERIAL, YEARCODE ), '||CHR(10) 
                ||' SELECT * '||CHR(10)
                ||'   FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||'  WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10);
                
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
                
        INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
        EXECUTE IMMEDIATE LV_SQL;
                
        LV_SQL := ' SELECT FUNCTIONCALL_BEFORE '||CHR(10)
                ||'   FROM MENUMASTER_RND '||CHR(10)
                ||'  WHERE PROJECTNAME = ''WPS'' '||CHR(10)
                ||'    AND MENUTAG = ''GATE PASS ENTRY'' '||CHR(10);
                
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
        
        INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
        EXECUTE IMMEDIATE LV_SQL INTO LV_GPB4SAVEPROCNAME;
        
        LV_SQL := 'BEGIN '||LV_GPB4SAVEPROCNAME||' END;'||CHR(10);
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
                
    END IF;  
                                 
EXCEPTION
    WHEN OTHERS THEN
     --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
     LV_SQLERRM := SQLERRM ;
     INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'GATE PASS DATA TRANSAFER');
END;
/


DROP PROCEDURE PRCWPS_IMP_GPPROCESS_T;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_GPPROCESS_T(P_COMPCODE VARCHAR2, 
                                                          P_DIVCODE VARCHAR2,
                                                          P_DATEOFATTENDANCE VARCHAR2, 
                                                          P_YEARCODE VARCHAR2
                                                        )
IS
LV_CNT NUMBER := 0;
LV_DATEOFATTENDANCE  DATE := TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY');
LV_SQLERRM VARCHAR2(2000):='';
LV_SQL        VARCHAR2(6000):='';
LV_TMFROM_A1    VARCHAR2(10):='';
LV_TMTO_A1      VARCHAR2(10):='';
LV_TMFROM_A2    VARCHAR2(10):='';
LV_TMTO_A2      VARCHAR2(10):='';
LV_TMFROM_B1    VARCHAR2(10):='';
LV_TMTO_B1      VARCHAR2(10):='';
LV_TMFROM_B2    VARCHAR2(10):='';
LV_TMTO_B2      VARCHAR2(10):='';
LV_TMFROM_C1    VARCHAR2(10):='';
LV_TMTO_C1      VARCHAR2(10):='';
LV_TMFROM_C2    VARCHAR2(10):='';
LV_TMTO_C2      VARCHAR2(10):='';
LV_GPB4SAVEPROCNAME VARCHAR2(30) := '';


BEGIN  

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_A1, LV_TMTO_A1, LV_TMFROM_A2, LV_TMTO_A2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '1';

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_B1, LV_TMTO_B1, LV_TMFROM_B2, LV_TMTO_B2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '2';

    SELECT ATTNFROM, ATTNTO, ATTNFROM1, ATTNTO1 INTO LV_TMFROM_C1, LV_TMTO_C1, LV_TMFROM_C2, LV_TMTO_C2
    FROM WPSSHIFTMAST WHERE SHIFTCODE = '3';
    
    LV_SQL := 'SELECT COUNT(*) '||CHR(10)
            ||'  FROM WPSGATEPASSRAWDATA_TEMP '||CHR(10)
            ||' WHERE DATEOFATTENDANCE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
            
    dbms_output.put_line ('Query : '||LV_SQL);     
    EXECUTE IMMEDIATE LV_SQL INTO LV_CNT;
    
    IF LV_CNT > 0 THEN
    
        LV_SQL := 'DELETE '||CHR(10)
                ||'  FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||' WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10);
                
        dbms_output.put_line ('Query : '||LV_SQL);     
        EXECUTE IMMEDIATE LV_SQL;
    
        LV_SQL := 'INSERT INTO WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||'SELECT '''||P_COMPCODE||''', '''||P_DIVCODE||''', '''||LV_DATEOFATTENDANCE||''', '||CHR(10) 
                ||'       ''SPELL 1'' SPELL, '''' SPELLHOURS, B.TOKENNO, B.WORKERSERIAL, DEDUCTIONHOURS, '||CHR(10) 
                ||'       ''GATE PASS'' TRANSACTIONTAG, ''DATA MIGRATED ON 19/04/2018'' REMARKS, '''||P_YEARCODE||''' YEARCODE, '||CHR(10) 
                ||'       CASE WHEN SPELL = ''A'' THEN ''1'' '||CHR(10) 
                ||'            WHEN SPELL = ''B'' THEN ''2'' '||CHR(10)
                ||'            ELSE ''3'' '||CHR(10)
                ||'        END SHIFTCODE '||CHR(10)
                ||'  FROM WPSGATEPASSRAWDATA_TEMP A, WPSWORKERMAST B '||CHR(10)
                ||' WHERE A.TOKENNO=B.TOKENNO '||CHR(10)
                ||'   AND A.DATEOFATTENDANCE = '''||P_DATEOFATTENDANCE||''' '||CHR(10);
                
        dbms_output.put_line ('Query : '||LV_SQL);     
        EXECUTE IMMEDIATE LV_SQL;
        
        UPDATE WPSGATEPASSCSVRAWDATA SET SPELL = 'SPELL 2' WHERE TOKENNO = 'C4217' AND DEDUCTIONHOURS = '2.25' AND DATEOFATTENDANCE ='15-APR-2018';
        
    END IF;
    
    LV_SQL := 'SELECT COUNT(*) '||CHR(10)
            ||'  FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
            ||' WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10);
    dbms_output.put_line ('Query : '||LV_SQL);     
    EXECUTE IMMEDIATE LV_SQL INTO LV_CNT; 
             
        IF LV_CNT > 0 THEN       
             
            --- updatespell hours based on shiftcode and spell -----
             
            LV_SQL := ' UPDATE WPSGATEPASSCSVRAWDATA AA '||CHR(10)
                    ||'    SET SPELLHOURS = ( SELECT '||CHR(10)
                    ||'                             CASE WHEN SHIFTCODE = ''1'' AND SPELL = ''SPELL 1'' THEN ''5'' '||CHR(10)--TO_NUMBER('''||LV_TMTO_A1||''') - TO_NUMBER('''||LV_TMFROM_A1||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''1'' AND SPELL = ''SPELL 2'' THEN ''3'' '||CHR(10)--TO_NUMBER('''||LV_TMTO_A2||''') - TO_NUMBER('''||LV_TMFROM_A2||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''2'' AND SPELL = ''SPELL 1'' THEN ''3'' '||CHR(10)--TO_NUMBER('''||LV_TMTO_B1||''') - TO_NUMBER('''||LV_TMFROM_B1||''') '||CHR(10)
                    ||'                                  WHEN SHIFTCODE = ''2'' AND SPELL = ''SPELL 2'' THEN ''5'' '||CHR(10)--TO_NUMBER('''||LV_TMTO_B2||''') - TO_NUMBER('''||LV_TMFROM_B2||''') '||CHR(10)
                    ||'                                  ELSE ''8'' '||CHR(10)
                    ||'                              END SPELLHOURS '||CHR(10)
                    ||'                             FROM WPSGATEPASSCSVRAWDATA CC '||CHR(10)          
                    ||'                            WHERE AA.TOKENNO = CC.TOKENNO '||CHR(10)
                    ||'                              AND AA.ROWID = CC.ROWID '||CHR(10)
                    ||'                         ) '||CHR(10)
                    ||'  WHERE SPELLHOURS IS NULL '||CHR(10)
                    ||'    AND DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10); 
            DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
            INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
            VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
            EXECUTE IMMEDIATE LV_SQL;    
            
        DELETE FROM GBL_WPSACCIDENTGATEPASSDETAILS;
            
        LV_SQL := ' INSERT INTO GBL_WPSACCIDENTGATEPASSDETAILS ( COMPANYCODE, DATEOFATTENDANCE, DEDUCTIONHOURS, DIVISIONCODE, REMARKS, '||CHR(10)
                ||'             SHIFTCODE, SPELL, SPELLHOURS, TOKENNO, TRANSACTIONTAG, WORKERSERIAL, YEARCODE,OPERATIONMODE ) '||CHR(10) 
                ||' SELECT  COMPANYCODE, DATEOFATTENDANCE, DEDUCTIONHOURS, DIVISIONCODE, REMARKS, '||CHR(10)
                ||'             SHIFTCODE, SPELL, SPELLHOURS, TOKENNO, TRANSACTIONTAG, WORKERSERIAL, YEARCODE,''A'' '||CHR(10)
                ||'   FROM WPSGATEPASSCSVRAWDATA '||CHR(10)
                ||'  WHERE DATEOFATTENDANCE = '''||LV_DATEOFATTENDANCE||''' '||CHR(10);
                
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
                
        INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
        EXECUTE IMMEDIATE LV_SQL;
                
        LV_SQL := ' SELECT FUNCTIONCALL_BEFORE '||CHR(10)
                ||'   FROM MENUMASTER_RND '||CHR(10)
                ||'  WHERE PROJECTNAME = ''WPS'' '||CHR(10)
                ||'    AND MENUTAG = ''GATE PASS ENTRY'' '||CHR(10);
                
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
        
        INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
        EXECUTE IMMEDIATE LV_SQL INTO LV_GPB4SAVEPROCNAME;
        
        PRCWPS_ACCGATEDTLSB4SAVE_T;
        
        LV_SQL := ' INSERT INTO WPSACCIDENTGATEPASSDETAILS ( COMPANYCODE, DATEOFATTENDANCE, DEDUCTIONHOURS, DIVISIONCODE, REMARKS, '||CHR(10)
                ||'             SHIFTCODE, SPELL, SPELLHOURS, TOKENNO, TRANSACTIONTAG, WORKERSERIAL, YEARCODE ) '||CHR(10) 
                ||' SELECT  COMPANYCODE, DATEOFATTENDANCE, DEDUCTIONHOURS, DIVISIONCODE, REMARKS, '||CHR(10)
                ||'             SHIFTCODE, SPELL, SPELLHOURS, TOKENNO, TRANSACTIONTAG, WORKERSERIAL, YEARCODE '||CHR(10)
                ||'   FROM GBL_WPSACCIDENTGATEPASSDETAILS '||CHR(10);
                
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
                
        INSERT INTO WPS_ERROR_LOG (PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,REMARKS ) 
        VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,SYSDATE,LV_SQL,P_DATEOFATTENDANCE,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),'GATE PASS DATA TRANSAFER');
        EXECUTE IMMEDIATE LV_SQL;
        
        DBMS_OUTPUT.PUT_LINE ('Query : '||LV_SQL);
                
    END IF;  
                                 
EXCEPTION
    WHEN OTHERS THEN
     --INSERT INTO ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) VALUES( 'ERROR SQL',LV_SQLSTR,LV_SQLSTR,LV_PARVALUES,LV_REMARKS);
     LV_SQLERRM := SQLERRM ;
     INSERT INTO WPS_ERROR_LOG(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) VALUES( 'PRCWPS_IMP_GPPROCESS',LV_SQLERRM,NULL,NULL,TO_DATE(P_DATEOFATTENDANCE,'DD/MM/YYYY'),NULL, 'GATE PASS DATA TRANSAFER');
END;
/


DROP PROCEDURE PRCWPS_IMP_PRODUCTION_MAN_DEB;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_PRODUCTION_MAN_DEB (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFPRODUCTION VARCHAR2,
                                                       P_DEPARTMENT VARCHAR2 DEFAULT NULL,  
                                                       P_VALIDORUPDATE CHAR DEFAULT NULL,
                                                       P_USER          VARCHAR2 DEFAULT 'SWT', 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL,
                                                       P_DEPCODE VARCHAR2 DEFAULT NULL)


AS 

LV_SQLERRM          VARCHAR2(2000):='';
lv_SqlStr           VARCHAR2(20000) := '';
lv_YearCode         VARCHAR2(10) := '';
lv_ProductionNo         VARCHAR2(20) := '';
lv_ParValue         varchar2(200):='';
lv_Remarks          varchar2(100):='';
lv_ProcName         varchar2(30) := 'PRCWPS_IMP_PRODUCTION_MANUAL';
BEGIN

    SELECT YEARCODE INTO lv_YearCode  FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE;
    
    
    

    lv_SqlStr := 'DELETE FROM WPSPRODUCTIONSUMMARY
    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND STARTDATE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')' ;
    IF P_DEPARTMENT IS NOT NULL THEN
        lv_SqlStr := lv_SqlStr || '  AND DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
    END IF;
    
   -- DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
     EXECUTE IMMEDIATE  lv_SqlStr;



     FOR C1 IN (SELECT DISTINCT PRODUCTIONDATE, PRODUCTIONTYPE, SHIFT FROM  WPSPRODRAWDATATAB
                 WHERE PRODUCTIONDATE = P_DATEOFPRODUCTION     
                 ORDER BY   PRODUCTIONTYPE, SHIFT
               )
    LOOP
            SELECT FN_AUTOGEN_PARAMS(P_COMPCODE, P_DIVCODE, lv_YearCode, 'WPS PRODUCTION ENTRY', P_DATEOFPRODUCTION) INTO lv_ProductionNo FROM DUAL;
    
--            lv_SqlStr := 'INSERT INTO WPSPRODUCTIONSUMMARY ( 
--            COMPANYCODE, DIVISIONCODE, YEARCODE, STARTDATE, DEPARTMENTCODE, PRODUCTIONNO, PRODUCTIONTYPE, WORKERSERIAL, MACHINECODE, LOOMCODE,
--            QUALITYCODE, QUALITYUOMCODE, SHIFTCODE, PRODUCTION, TOTALPRODUCTION, OCCUPATIONCODE, ISATTANDANCE, USERNAME, SYSROWID, 
--            LASTMODIFIED, GROUPCODE, TRANSACTIONTYPE, WEEK, ATTNSERIAL, SECTIONCODE)
--            
--            SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_YearCode||''' YEARCODE,
--            TO_DATE(PRODUCTIONDATE,''DD/MM/YYYY'') STARTDATE, A.DEPARTMENTCODE,'''||lv_ProductionNo||''' PRODUCTIONNO, A.PRODUCTIONTYPE,
--             M.WORKERSERIAL, A.MACHINE MACHINECODE, A.LOOMCODE, A.QUALITYCODE,A.QUALITYUOM QUALITYUOMCODE, A.SHIFT, A.PRODUCTION, 
--             A.PRODUCTION  TOTALPRODUCTION, A.OCCUPATION, ''N'' ISATTANDANCE, '''||P_USER||''' USERNAME, SYS_GUID() SYSROWID,
--              SYSDATE LASTMODIFIED, M.GROUPCODE, ''GENERAL'' TRANSACTIONTYPE, A.WEEK, A.ATTN_SERIAL ATTNSERIAL, M.SECTIONCODE     
--            FROM WPSPRODRAWDATATAB A, WPSWORKERMAST M
--             WHERE A.TOKENNO = M.TOKENNO 
--             AND A.PRODUCTIONDATE = '''||C1.PRODUCTIONDATE||'''
--             AND A.PRODUCTIONTYPE = '''||C1.PRODUCTIONTYPE||'''
--             AND A.SHIFTCODE = '''||C1.SHIFT||'''';

--            IF P_DEPARTMENT IS NOT NULL THEN
--                lv_SqlStr := lv_SqlStr || '  AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
--            END IF;
            

        lv_SqlStr := ' INSERT INTO WPSPRODUCTIONSUMMARY_DEB ( '||chr(10) 
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, STARTDATE, PRODUCTIONNO, '||chr(10) 
            ||' DEPARTMENTCODE, PRODUCTIONTYPE, SECTIONCODE, WORKERSERIAL, MACHINECODE, LOOMCODE, '||chr(10)
            ||' QUALITYCODE, QUALITYUOMCODE, SHIFTCODE, WORKINGHOURS, PRODUCTION, TOTALPRODUCTION,  '||chr(10)
            ||' OCCUPATIONCODE, ISATTANDANCE, USERNAME, SYSROWID, '||chr(10)
            ||' LASTMODIFIED, GROUPCODE, TRANSACTIONTYPE, WEEK, ATTNSERIAL,SERIALNO) '||chr(10)
                          
                  
            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||'''  DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, TO_DATE(PRODUCTIONDATE,''DD/MM/YYYY'') STARTDATE, '''||lv_ProductionNo||'''  PRODUCTIONNO, '||chr(10)  
            ||' P.DEPARTMENTCODE, A.PRODUCTIONTYPE, P.SECTIONCODE, M.WORKERSERIAL, A.MACHINE MACHINECODE, A.LOOMCODE,  '||chr(10)
            ||' A.QUALITYCODE, NVL(P.QUALITYUOMCODE,A.UOM) QUALITYUOMCODE, DECODE(A.SHIFT,''B'',''2'',''C'',''3'',''1'') SHIFTCODE, NVL(A.MACHINEHOURS,0) WORKINGHOURS, A.PRODUCTION, A.PRODUCTION  TOTALPRODUCTION, '||chr(10) 
            ||' P.OCCUPATIONCODE, ''N'' ISATTANDANCE, ''SWT'' USERNAME, SYS_GUID() SYSROWID, '||chr(10)
            ||' SYSDATE LASTMODIFIED, M.GROUPCODE, ''GENERAL'' TRANSACTIONTYPE, A.WEEK, A.ATTN_SERIAL ATTNSERIAL,A.DEPTSERIAL '||chr(10)     
            ||' FROM WPSPRODRAWDATATAB A, WPSWORKERMAST M, WPSPRODUCTIONTYPEMAST P '||chr(10)
            ||'  WHERE A.TOKENNO = M.TOKENNO '||chr(10) 
            ||'    AND A.PRODUCTIONTYPE = P.PRODUCTIONTYPECODE '||chr(10)
            ||'    AND A.PRODUCTIONDATE = '''||C1.PRODUCTIONDATE||''' '||chr(10)
            ||'    AND A.PRODUCTIONTYPE = '''||C1.PRODUCTIONTYPE||''' '||chr(10)
            ||'    AND A.SHIFT = '''||C1.SHIFT||''' '||chr(10);
        IF P_DEPARTMENT IS NOT NULL THEN
            lv_SqlStr := lv_SqlStr || '    AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
        END IF;
        lv_ParValue := 'Production Type - '||C1.PRODUCTIONTYPE||', Shift - '||C1.SHIFT||', PRODUCTION NO - '||lv_ProductionNo||'';
        lv_Remarks := C1.PRODUCTIONTYPE||' - Production Data INSERT';
        insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(C1.PRODUCTIONDATE,'DD/MM/YYYY'), TO_DATE(C1.PRODUCTIONDATE,'DD/MM/YYYY'), lv_Remarks);

      --  DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
        EXECUTE IMMEDIATE lv_SqlStr;  
        COMMIT;

        
    
    END LOOP;

    ----------- LOOM CODE UPDATE MACHINE CODE FOR WEAVING PRODUCTION ---------
    
    --PRCWPS_MACHINELOOM_UPDT (P_COMPCODE,P_DIVCODE,P_DATEOFPRODUCTION,P_DEPARTMENT,'WPSPRODUCTIONSUMMARY',P_USER,P_UNITCODE);
    
--    BEGIN
--        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMP_MACHINELOOM';
--    EXCEPTION
--        when others then null;    
--    END;
--    
--    lv_SqlStr := 'CREATE TABLE WPSTEMP_MACHINELOOM AS 
--        SELECT DEPARTMENTCODE, SECTIONCODE, MACHINECODE, LOOMCODE  
--        FROM WPSMACHINELOOMMAPPING
--        WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--          AND DEPARTMENTCODE = ''22''
--          AND EFFECTIVEDATE = ( SELECT MAX(EFFECTIVEDATE) FROM WPSMACHINELOOMMAPPING
--                                WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--                                  AND DEPARTMENTCODE =''22''
--                              )';
--                      
--    
--    lv_Remarks := 'TEMP TABLE CREATION FOR LOOM UPDATE';
--    lv_Parvalue := '';
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);
--
--      --  DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
--    EXECUTE IMMEDIATE lv_SqlStr;  
--    COMMIT;    
--    
--    lv_SqlStr := 'UPDATE WPSPRODUCTIONSUMMARY A SET A.LOOMCODE = ( SELECT B.LOOMCODE FROM WPSTEMP_MACHINELOOM B 
--                                                     WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE
--                                                       AND A.MACHINECODE= B.MACHINECODE
--                                                   )
--    WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--      AND STARTDATE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')
--      AND DEPARTMENTCODE =''22''
--      AND A.MACHINECODE IN (SELECT MACHINECODE FROM WPSTEMP_MACHINELOOM)';
--    
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);
--
--    EXECUTE IMMEDIATE lv_SqlStr;  
--    COMMIT;    
    

END;
/


DROP PROCEDURE PRCWPS_ITAXCOMPUTATION_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_ITAXCOMPUTATION_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_PISITAXCOMPUTATION%rowtype;
lv_MaxDRCRdate            date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
    --RETURN;
   
    select *
    into lv_Master
    from GBL_PISITAXCOMPUTATION
    WHERE ROWNUM<=1;
    
    
     
     IF lv_Master.OPERATIONMODE = 'A' THEN
     
        IF lv_Master.ISPROCESSALL = 'Y' THEN
            
            FOR C1 IN ( select CATEGORYCODE, GRADECODE, TOKENNO
                        from PISEMPLOYEEMASTER 
                        WHERE COMPANYCODE =  lv_Master.COMPANYCODE
                        AND DIVISIONCODE =  lv_Master.DIVISIONCODE
                        AND CATEGORYCODE = lv_Master.CATEGORYCODE
                        AND GRADECODE = lv_Master.GRADECODE 
                        
                        )
                LOOP
                
                
                    IF C1.TOKENNO <> lv_Master.TOKENNO THEN   
                     
                     PROC_PISITAX_COMPUTATION (lv_Master.COMPANYCODE, lv_Master.DIVISIONCODE, lv_Master.YEARCODE,C1.CATEGORYCODE,C1.GRADECODE, C1.TOKENNO);
                     
                     INSERT INTO GBL_PISITAXCOMPUTATION
                     (
                         COMPONENTHEADER, COMPONENTCODE, COMPACTUALVALUE, COMPPROJCTEDVALUE, COMPMANUALVALUE,COMPARREARVALUE, COLUMNFORSUBTOTAL, COLUMNNO, COMPVALUE,
                         COMPONENTTYPE,  ACTUALCOMPCODE, FORMULARATE, MANUALFORMULA, SERIALNO, COMPANYCODE, DIVISIONCODE, YEARCODE,
                         WORKERSERIAL, TOKENNO, USERNAME, SYSROWID, OPERATIONMODE, CATEGORYCODE, GRADECODE  
                     )
                     SELECT COMPONENTHEADER, COMPONENTCODE, COMPACTUALVALUE, COMPPROJCTEDVALUE, COMPMANUALVALUE,COMPARREARVALUE, COLUMNFORSUBTOTAL, COLUMNNO, COMPVALUE,
                     COMPONENTTYPE,  ACTUALCOMPCODE, FORMULARATE, MANUALFORMULA, SERIALNO, COMPANYCODE, DIVISIONCODE, YEARCODE,
                     WORKERSERIAL, TOKENNO, lv_Master.USERNAME, NULL SYSROWID, lv_Master.OPERATIONMODE, CATEGORYCODE, GRADECODE
                     FROM GTTPISITAXCOMPUTATION
                     WHERE NVL(DISPLAYINGRID,'N')='Y';
                    
                     
                     END IF;
                      
                END LOOP;
            
        END IF;      
     
     END IF;
     
     
end;
/


DROP PROCEDURE PRCWPS_LOANENTRY_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_LOANENTRY_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_LOANTRANSACTION%rowtype;
lv_ApplicationNo        varchar2(50);

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_LOANTRANSACTION
    WHERE ROWNUM<=1;

    select count(*)
    into lv_cnt
    from GBL_LOANTRANSACTION;
        
     IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
        
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;            

    if nvl(lv_Master.operationmode,'NA') = 'A' then
        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'LOAN TRANSACTION',TO_CHAR(lv_Master.LOANDATE,'DD/MM/YYYY')) 
        into lv_ApplicationNo
        from dual;
            
        update GBL_LOANTRANSACTION
        set APPLICATIONNO = lv_ApplicationNo;
                
      end if;
        
    if nvl(lv_Master.operationmode,'NA') = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' WPS LOAN TRANSACTION NUMBER : ' || lv_ApplicationNo || ' Dated : ' || TO_CHAR(lv_Master.LOANDATE,'DD/MM/YYYY'));
    end if;  
    
    IF lv_master.LOANCF='F' AND NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 THEN
     UPDATE GBL_LOANTRANSACTION SET 
     AMOUNT=NVL(AMOUNT,0)+NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0);
    
    END IF;
    
    IF NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 AND lv_Master.OPERATIONMODE <>'D' THEN
     INSERT INTO LOANBREAKUP 
     (COMPANYCODE, DIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,
      LOANCODE, LOANDATE, EFFECTYEARMONTH, INTERESTPERCENTAGE, AMOUNT, REPAYAMOUNT, REPAYCAPITAL, REPAYINTEREST,REMARKS,
      TRANSACTIONTYPE, EFFECTFORTNIGHT, PAIDON, DEDUCTEDAMT, SYSROWID, USERNAME
     )
     SELECT COMPANYCODE, DIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,
      LOANCODE, LOANDATE, YEARMONTH, INTERESTPERCENTAGE, AMOUNT, 0, LOANAMOUNTADJUSTED, LOANINTAMOUNTADJUSTED, 'ADJUSTED WITH THE LOAN CODE '|| LOANCODE || ' DATED ' || TO_DATE(LOANDATE,'DD/MM/YYYY'),
      'REPAY', LOANDATE, LOANDATE, 0, SYSROWID, USERNAME FROM GBL_LOANTRANSACTION;
    END IF;
    
      
    IF NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 AND lv_Master.OPERATIONMODE ='D' THEN
          DELETE FROM LOANBREAKUP 
           WHERE  TOKENNO=LV_MASTER.TOKENNO 
           AND WORKERSERIAL=LV_MASTER.WORKERSERIAL
           AND LOANCODE=LV_MASTER.LOANCODE
           AND LOANDATE=LV_MASTER.LOANDATE;
    END IF;
end;
/


DROP PROCEDURE PRCWPS_LOANINTSTOP_AFTERSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_LOANINTSTOP_AFTERSAVE" 
AS
LV_CNT                  NUMBER;
LV_SERIALNO               NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_LOANINTERESTCALCSTOP%ROWTYPE;
LV_TRANSACTIONNO        VARCHAR2(50);
LV_SQLSTR               VARCHAR2(5000) := '' ;
LV_SYS_TFMAP_TABLEID    NUMBER := 0;
LV_SYS_TFMAP_COLUMN_SEQUENCE    NUMBER := 0;          
      

BEGIN

    LV_RESULT:='#SUCCESS#';

        SELECT COUNT(*)
        INTO LV_CNT
        FROM GBL_LOANINTERESTCALCSTOP;

        SELECT *
        INTO LV_MASTER
        FROM GBL_LOANINTERESTCALCSTOP
        WHERE ROWNUM<=1;        
        
         IF NVL(LV_CNT,0)=0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Blank data not allowded to save!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
  
        IF LV_MASTER.OPERATIONMODE IS NULL THEN
            LV_ERROR_REMARK := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;            

        IF (NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A')   THEN        
            UPDATE LOANTRANSACTION  SET LOANSTOP='Y' WHERE TOKENNO=LV_MASTER.TOKENNO AND LOANCODE=LV_MASTER.LOANCODE
             AND LOANDATE=LV_MASTER.LOANDATE;           
        END IF;
        
         IF (NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D')   THEN
        
            UPDATE LOANTRANSACTION  SET LOANSTOP='N' WHERE TOKENNO=LV_MASTER.TOKENNO AND LOANCODE=LV_MASTER.LOANCODE
             AND LOANDATE=LV_MASTER.LOANDATE;           
        END IF;

END;
/


DROP PROCEDURE PRCWPS_LOANSTOP_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_LOANSTOP_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_PFLOANDEDUCTIONSTOP%rowtype;
lv_MaxDRCRdate          date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_PFLOANDEDUCTIONSTOP
    WHERE ROWNUM<=1;

    select count(*)
    into lv_cnt
    from GBL_PFLOANDEDUCTIONSTOP;
        
     IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
        
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;            

    if nvl(lv_Master.operationmode,'NA') = 'A' then
        select fn_autogen_params(lv_Master.companycode,lv_Master.divisioncode,lv_Master.yearcode,'WPS LOAN STOP APPLICATION',TO_CHAR(lv_Master.applicationdate,'DD/MM/YYYY')) 
        into lv_TransactionNo
        from dual;
            
        update GBL_PFLOANDEDUCTIONSTOP
        set APPLICATIONNO = lv_TransactionNo;
                
        UPDATE GBL_PFLOANDEDUCTIONSTOP
          SET MODULE='WPS';  
          
        if nvl(lv_Master.pfno,'NA') = 'NA' then
           UPDATE GBL_PFLOANDEDUCTIONSTOP
              SET FULLMILLCAPITAL='Y', FULLMILLINTEREST='Y';
        end if;
    end if;
        
    if nvl(lv_Master.operationmode,'NA') = 'A' then
        insert into SYS_GBL_PROCOUTPUT_INFO
        values (' WPS LOAN STOP APPLICATION NUMBER : ' || lv_TransactionNo || ' Dated : ' || TO_CHAR(lv_Master.applicationdate,'DD/MM/YYYY'));
    end if;  
end;
/


DROP PROCEDURE PRCWPS_MACHINELOOM_UPDT;

CREATE OR REPLACE PROCEDURE PRCWPS_MACHINELOOM_UPDT (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFPRODUCTION VARCHAR2,
                                                       P_DEPARTMENT VARCHAR2 DEFAULT NULL,  
                                                       P_TABLENAME VARCHAR2 DEFAULT 'WPSPRODUCTIONSUMMARY',
                                                       P_USER          VARCHAR2 DEFAULT 'SWT', 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL)
AS 

lv_SqlStr           VARCHAR2(20000) := '';
lv_YearCode         VARCHAR2(10) := '';
lv_ParValue         varchar2(200):='';
lv_Remarks          varchar2(100):='';
lv_ProcName         varchar2(30) := 'PRCWPS_MACHINELOOM_UPDT';
BEGIN

    SELECT YEARCODE INTO lv_YearCode  FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE;
    
    ----------- LOOM CODE UPDATE MACHINE CODE FOR WEAVING PRODUCTION ---------
    
    
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMP_MACHINELOOM';
    EXCEPTION
        when others then null;    
    END;
    
    lv_SqlStr := 'CREATE TABLE WPSTEMP_MACHINELOOM AS 
        SELECT DEPARTMENTCODE, SECTIONCODE, MACHINECODE, LOOMCODE  
        FROM WPSMACHINELOOMMAPPING
        WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
          AND DEPARTMENTCODE = ''22''
          AND EFFECTIVEDATE = ( SELECT MAX(EFFECTIVEDATE) FROM WPSMACHINELOOMMAPPING
                                WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
                                  AND DEPARTMENTCODE =''22''
                              )';
                      
    
    lv_Remarks := 'TEMP TABLE CREATION FOR LOOM UPDATE';
    lv_Parvalue := '';
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);

      --  DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    EXECUTE IMMEDIATE lv_SqlStr;  
    COMMIT;    
    
    IF P_TABLENAME='WPSPRODUCTIONSUMMARY' THEN
        lv_ParValue := 'WPSPRODUCTIONSUMMARY'; 
        lv_SqlStr := 'UPDATE WPSPRODUCTIONSUMMARY A SET A.LOOMCODE = ( SELECT B.LOOMCODE FROM WPSTEMP_MACHINELOOM B 
                                                         WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE
                                                           AND A.MACHINECODE= B.MACHINECODE
                                                       )
        WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
          AND STARTDATE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')
          AND DEPARTMENTCODE =''22''
          AND A.MACHINECODE IN (SELECT MACHINECODE FROM WPSTEMP_MACHINELOOM)';
    ELSE
        lv_ParValue := 'WPSATTENDANCEDAYWISE';
        lv_SqlStr := 'UPDATE WPSATTENDANCEDAYWISE A SET A.LOOMCODE = ( SELECT B.LOOMCODE FROM WPSTEMP_MACHINELOOM B 
                                                         WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE
                                                           AND A.MACHINECODE1= B.MACHINECODE
                                                       )
        WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
          AND A.YEARCODE ='''||lv_YearCode||'''  
          AND A.DATEOFATTENDANCE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')
          AND A.MACHINECODE1 IS NOT NULL 
          AND DEPARTMENTCODE =''22''
          AND A.MACHINECODE1 IN (SELECT MACHINECODE FROM WPSTEMP_MACHINELOOM)';        
    END IF;  
      
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);

    EXECUTE IMMEDIATE lv_SqlStr;  
    COMMIT;    
    

END;
/


DROP PROCEDURE PRCWPS_PFEMPMSTR_AFTERSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_PFEMPMSTR_AFTERSAVE" 
(
LV_COMPANYCODE        VARCHAR2,
LV_DIVISIONCODE       VARCHAR2,
LV_PFNO               VARCHAR2,
LV_SETTDATE           VARCHAR2,
LV_FORM3RCPTDT        VARCHAR2,
LV_SEPADVDT           VARCHAR2,
LV_STATUSDT           VARCHAR2,
LV_FORM3CEASEDT       VARCHAR2,
LV_SEPDT              VARCHAR2,
LV_EMPSTATUS          VARCHAR2
)  
AS
lv_sqlstr   varchar2(2000);
BEGIN

 lv_sqlstr :=' UPDATE PFEMPLOYEEMASTER  
                    SET (PFSETTLEMENTDATE,FORM3RECEIPTDATE,SEPARATIONADVICEDATE,STATUSDATE,FORM3CEASEDATE,SEPARATIONDATE,EMPLOYEESTATUS)
                    =(select TO_DATE('''||LV_SETTDATE||''',''DD/MM/YYYY''),TO_DATE('''||LV_FORM3RCPTDT||''',''DD/MM/YYYY''),TO_DATE('''||LV_SEPADVDT||''',''DD/MM/YYYY''),
                    TO_DATE('''||LV_STATUSDT||''',''DD/MM/YYYY''),TO_DATE('''||LV_FORM3CEASEDT||''',''DD/MM/YYYY''),TO_DATE('''||LV_SEPDT||''',''DD/MM/YYYY''),'''||LV_EMPSTATUS||''' from dual)
               WHERE COMPANYCODE='''||LV_COMPANYCODE||'''
                     AND DIVISIONCODE='''||LV_DIVISIONCODE||'''
                     AND PFNO='''||LV_PFNO||''' ';
              
     -- dbms_output.put_line(lv_sqlstr);
         execute immediate lv_sqlstr;

END;
/


DROP PROCEDURE PRCWPS_PFLOANSANCTION_B4SAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_PFLOANSANCTION_B4SAVE 
IS
LV_CNT                  NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_PFLOANTRANSACTION%ROWTYPE;
LV_MAXDRCRDATE          DATE;
LV_TRANSACTIONNO        VARCHAR2(50);
LV_CNTCHKDUP            NUMBER;
LV_ITEMVSCHARGE         VARCHAR2(4000);
LV_PF_C NUMBER;
LV_PF_E NUMBER;
LV_VPF  NUMBER; 
LV_CONTRIBUTION  NUMBER;
LV_EMPCOM VARCHAR2(10);
LV_EMPDIV VARCHAR2(10);
LV_CATCODE   VARCHAR2(10);
LV_APPLICATIONNO VARCHAR2(15);
LV_FORTNIGHTSTARTDATE VARCHAR2(10);
LV_FORTNIGHTENDDATE VARCHAR2(10);
LV_LOANCODE VARCHAR2(10);

BEGIN

    LV_RESULT:='#SUCCESS#';
        SELECT *
        INTO LV_MASTER
        FROM GBL_PFLOANTRANSACTION
        WHERE ROWNUM<=1;

        SELECT COUNT(*)
        INTO LV_CNT
        FROM GBL_PFLOANTRANSACTION;
        
         IF NVL(LV_CNT,0)=0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Blank data not allowded to save!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
       
        
        IF LV_MASTER.OPERATIONMODE IS NULL THEN
            LV_ERROR_REMARK := 'Validation Failure : [Choose the activity you want to accomplish? ]'||LV_MASTER.OPERATIONMODE||' RECORD COUNT '||LV_CNT;
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;
        
        
         SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR'),TO_CHAR(FORTNIGHTENDDATE,'DD/MM/RRRR') 
           INTO LV_FORTNIGHTSTARTDATE,LV_FORTNIGHTENDDATE
           FROM WPSWAGEDPERIODDECLARATION
          WHERE TO_DATE(LV_MASTER.LOANDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;
        
        SELECT COMPANYCODE,DIVISIONCODE,CATEGORYCODE
          INTO LV_EMPCOM,LV_EMPDIV,LV_CATCODE
          FROM PFEMPLOYEEMASTER
         WHERE PFNO=LV_MASTER.PFNO;            
      FOR C1 IN (SELECT PFNO,LOANCODE,LOANDATE FROM GBL_PFLOANTRANSACTION)
      LOOP
         DELETE FROM PFLOANTRANSACTION 
           WHERE  PFNO=C1.PFNO 
           AND LOANCODE=C1.LOANCODE
           AND LOANDATE=C1.LOANDATE;
      END LOOP;
         
    --UPDATE GBL_PFLOANAPPLICATION SET TOTALEMIAMOUNT = CAPITALINSTALLMENTAMT;   
      
    IF NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 AND lv_Master.OPERATIONMODE <>'D' THEN
    
     INSERT INTO PFLOANBREAKUP 
     (COMPANYCODE, DIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,PFNO,
      LOANCODE, LOANDATE, EFFECTYEARMONTH, INTERESTPERCENTAGE, AMOUNT, REPAYAMOUNT, REPAYCAPITAL, REPAYINTEREST,REMARKS,
      TRANSACTIONTYPE, EFFECTFORTNIGHT, PAIDON, DEDUCTEDAMT, SYSROWID, USERNAME
     )
     SELECT COMPANYCODE, DIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,PFNO,
      AGAINSTLOANCODE, AGAINSTLOANDATE, YEARMONTH, INTERESTPERCENTAGE, LOANAMOUNTADJUSTED + LOANINTAMOUNTADJUSTED, LOANAMOUNTADJUSTED + LOANINTAMOUNTADJUSTED, LOANAMOUNTADJUSTED, LOANINTAMOUNTADJUSTED, 'ADJUSTED WITH THE LOAN CODE '|| LOANCODE || ' DATED ' || TO_DATE(LOANDATE,'DD/MM/YYYY'),
      'REPAY', DEDUCTIONSTARTDATE, LOANDATE, 0, SYSROWID, USERNAME FROM GBL_PFLOANTRANSACTION;
    END IF;
    
        IF lv_Master.OPERATIONMODE <>'D' THEN
           
         FOR C1 IN (SELECT PFNO,LOANCODE,LOANDATE FROM GBL_PFLOANTRANSACTION)
         LOOP
           DELETE FROM PFLOANINTEREST 
           WHERE PFNO = C1.PFNO
           AND LOANCODE = C1.LOANCODE
           AND YEARMONTH=TO_CHAR(C1.LOANDATE,'YYYYMM');
         END LOOP;
           
           
            INSERT INTO PFLOANINTEREST
            (COMPANYCODE, DIVISIONCODE, YEARCODE, YEARMONTH, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,LOANCODE, WORKERSERIAL, TOKENNO, PFNO,
            LOANDATE, LOANAMOUNT, INTERESTAPPLICABLEON, INTERESTPERCENTAGE, INTERESTAMOUNT, MODULE, TRANSACTIONTYPE, REMARKS, 
            USERNAME, SYSROWID
            )
            SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, YEARMONTH, TO_DATE(LV_FORTNIGHTSTARTDATE,'DD/MM/RRRR'), TO_DATE(LV_FORTNIGHTENDDATE,'DD/MM/RRRR'), LOANCODE, WORKERSERIAL, TOKENNO, PFNO,
            LOANDATE, ACTUALLOANAMOUNT, ACTUALLOANAMOUNT, INTERESTPERCENTAGE, INTERESTAMOUNT, MODULE,'ADD',NULL,
            USERNAME, 1 SYSROWID  FROM GBL_PFLOANTRANSACTION; 
            
            UPDATE GBL_PFLOANAPPLICATION SET TOTALEMIAMOUNT = CAPITALINSTALLMENTAMT;
            UPDATE GBL_PFLOANAPPLICATION SET INTERESTINSTALLMENTAMT = ROUND(INTERESTAMOUNT/4,0);
            
        END IF;
   
end;
/


DROP PROCEDURE PRCWPS_PFLOAN_AFTERSAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_PFLOAN_AFTERSAVE 
IS
LV_CNT                  NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_PFLOANAPPLICATION%ROWTYPE;
LV_PF_C NUMBER;
LV_PF_E NUMBER;
LV_VPF  NUMBER; 
LV_FORTNIGHTSTARTDATE   VARCHAR2(10);
LV_FORTNIGHTENDDATE     VARCHAR2(10);
LV_LOANADJTYPE          VARCHAR2(1);

BEGIN
    lv_result:='#SUCCESS#';
    
    LV_PF_E :=0;
    LV_PF_C :=0;
    LV_VPF  :=0;
    
    if nvl(lv_master.loantype,'XX')='NONREFUNDABLE' then
        SELECT NVL(PF_E,0) PF_E, NVL(PF_C,0) PF_C, NVL(VPF,0) VPF INTO LV_PF_E ,LV_PF_C ,LV_VPF   
        FROM GBL_LOANSANCTION_DETAILS
        WHERE COMPANYCODE = lv_master.companycode
          AND DIVISIONCODE = lv_master.divisioncode
          AND PFNO = LV_MASTER.PFNO
          AND LOANCODE = LV_MASTER.LOANCODE
          AND LOANDATE = LV_MASTER.LOANDATE
          AND PARAM_NAME = 'SANCTION AMOUNT';
    END IF;    
    
    select *
    into lv_master
    from gbl_pfloanapplication
    where rownum<=1;

    select count(*)
    into lv_cnt
    from gbl_pfloanapplication;
        
    if nvl(lv_cnt,0)=0 then
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(fn_display_error( 'COMMON')),fn_display_error( 'COMMON',5,lv_error_remark));
    end if;
       
    if lv_master.operationmode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(fn_display_error( 'COMMON')),fn_display_error( 'COMMON',6,lv_error_remark));
    end if;
    
    IF lv_master.operationmode <> 'A' THEN
        RETURN;
    END IF;
    UPDATE GBL_PFLOANAPPLICATION   A
    SET (EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE,GRADECODE, PF_E, PF_C, VPF) =
    (
        SELECT CURRENTCOMPANYCODE,CURRENTDIVISIONCODE,GRADECODE, LV_PF_E ,LV_PF_C ,LV_VPF 
        FROM PFEMPLOYEEMASTER
        WHERE PFNO = LV_MASTER.PFNO
        AND COMPANYCODE = LV_MASTER.COMPANYCODE
        AND DIVISIONCODE = LV_MASTER.DIVISIONCODE
    )
    WHERE PFNO = LV_MASTER.PFNO
    AND COMPANYCODE = LV_MASTER.COMPANYCODE
    AND DIVISIONCODE = LV_MASTER.DIVISIONCODE;
    
    
    UPDATE PFLOANAPPLICATION   A
    SET (EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE,GRADECODE,PF_E, PF_C, VPF) =
    (
        SELECT CURRENTCOMPANYCODE,CURRENTDIVISIONCODE,GRADECODE, LV_PF_E ,LV_PF_C ,LV_VPF 
        FROM PFEMPLOYEEMASTER
        WHERE PFNO = LV_MASTER.PFNO
        AND COMPANYCODE = LV_MASTER.COMPANYCODE
        AND DIVISIONCODE = LV_MASTER.DIVISIONCODE
    )
    WHERE PFNO = LV_MASTER.PFNO
    AND COMPANYCODE = LV_MASTER.COMPANYCODE
    AND DIVISIONCODE = LV_MASTER.DIVISIONCODE;
     
     
    select *
    into lv_master
    from gbl_pfloanapplication
    where rownum<=1;

    INSERT INTO PFLOANTRANSACTION  
    (
        COMPANYCODE, DIVISIONCODE, EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, YEARCODE, YEARMONTH, CATEGORYCODE, 
        GRADECODE, PFNO, WORKERSERIAL, TOKENNO, LOANCODE, LOANDATE, LOANTYPE, AMOUNT, INTERESTPERCENTAGE, NOOFINSTALLMENTS, 
        AGAINSTCOMPONENT, OPENINGBALANCE, RATIOPERCENT, COMPONENTAMOUNT, CLOSINGBALANCE, ACTUALLOANAMOUNT, ACTUALLOANDATE, 
        COMMITEDRECOVERYPERIOD, LOANCLAIMAMOUNT, INTERESTDEDNMONTHLY, LOANAMOUNTADJUSTED, LOANINTAMOUNTADJUSTED, AGAINSTLOANDATE, 
        AGAINSTLOANCODE, PAYABLEAMOUNT, APPLICATIONNO, AMOUNTINHAND, INTERESTAMOUNT, CAPITALINSTALLMENTAMT, INTERESTINSTALLMENTAMT, 
        REPAYCAPITAL, REPAYINTEREST, ADJUSTMENTDATE, REMARKS, DEPARTMENTCODE, FORTNIGHTSTARTDATE, LOANNL, NEXTLOAN, ACTUALINTERESTAMOUNT, 
        NEWINTERESTAMOUNT, DEDUCTIONSTARTDATE, INTERESTBALANCEAMOUNT, CAPITALBALANCEAMOUNT, CAPITALINSTALLMENTAMOUNT, INTERESTINSTALLMENTAMOUNT, 
        ADJUSTEDLOANDATE, TOTALEMIAMOUNT, PF_E, PF_C, VPF, MINBALANCE, ACTUALBALANCE, MODULE, PFGROSS, VOUCHERNO, VOUCHERDATE, SYSTEMVOUCHERNO, 
        SYSTEMVOUCHERDATE, CHEQUENO, CHEQUEDATE, ELIGIBLE, LASTMODIFIED, USERNAME, SYSROWID, LOANCF, SANCTIONEDAMOUNT, 
        PREV_LOAN_CAP_EMI, PREV_LOAN_INT_EMI, CURR_INT_EMI, CURR_CAP_EMI  
    )    
    SELECT  COMPANYCODE, DIVISIONCODE, EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, YEARCODE, YEARMONTH, CATEGORYCODE, 
    GRADECODE, PFNO, WORKERSERIAL, TOKENNO, LOANCODE, LOANDATE, LOANTYPE, AMOUNT, INTERESTPERCENTAGE, NOOFINSTALLMENTS, 
    AGAINSTCOMPONENT, OPENINGBALANCE, RATIOPERCENT, COMPONENTAMOUNT, CLOSINGBALANCE, ACTUALLOANAMOUNT, ACTUALLOANDATE, 
    COMMITEDRECOVERYPERIOD, LOANCLAIMAMOUNT, INTERESTDEDNMONTHLY, LOANAMOUNTADJUSTED, LOANINTAMOUNTADJUSTED, AGAINSTLOANDATE, 
    AGAINSTLOANCODE, PAYABLEAMOUNT, APPLICATIONNO, AMOUNTINHAND, INTERESTAMOUNT, CAPITALINSTALLMENTAMT, INTERESTINSTALLMENTAMT, 
    REPAYCAPITAL, REPAYINTEREST, ADJUSTMENTDATE, REMARKS, DEPARTMENTCODE, FORTNIGHTSTARTDATE, LOANNL, NEXTLOAN, ACTUALINTERESTAMOUNT, 
    NEWINTERESTAMOUNT, DEDUCTIONSTARTDATE, INTERESTBALANCEAMOUNT, CAPITALBALANCEAMOUNT, CAPITALINSTALLMENTAMOUNT, INTERESTINSTALLMENTAMOUNT, 
    ADJUSTEDLOANDATE, TOTALEMIAMOUNT, PF_E, PF_C, VPF, MINBALANCE, ACTUALBALANCE, MODULE, PFGROSS, VOUCHERNO, VOUCHERDATE, SYSTEMVOUCHERNO, 
    SYSTEMVOUCHERDATE, CHEQUENO, CHEQUEDATE, ELIGIBLE,SYSDATE LASTMODIFIED, USERNAME, SYSROWID, LOANCF, SANCTIONEDAMOUNT, 
    PREV_LOAN_CAP_EMI, PREV_LOAN_INT_EMI, CURR_INT_EMI, CURR_CAP_EMI
    FROM PFLOANAPPLICATION
    WHERE PFNO = LV_MASTER.PFNO
      AND LOANCODE = LV_MASTER.LOANCODE
      AND LOANDATE = LV_MASTER.LOANDATE;
    
    SELECT LOANADJTYPE INTO LV_LOANADJTYPE
    FROM PFLOANMASTER
    WHERE COMPANYCODE = LV_MASTER.COMPANYCODE
      AND DIVISIONCODE = LV_MASTER.DIVISIONCODE
      AND LOANCODE = LV_MASTER.LOANCODE;
   
--    IF LV_LOANADJTYPE = 'D' THEN 
    IF (LV_MASTER.LOANAMOUNTADJUSTED + LV_MASTER.LOANINTAMOUNTADJUSTED) > 0 THEN 
      
        INSERT INTO PFLOANBREAKUP 
        (
            COMPANYCODE, DIVISIONCODE,EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,PFNO,
            LOANCODE, LOANDATE, EFFECTYEARMONTH, INTERESTPERCENTAGE, AMOUNT, REPAYAMOUNT, REPAYCAPITAL, REPAYINTEREST,REMARKS,
            TRANSACTIONTYPE, EFFECTFORTNIGHT, PAIDON, DEDUCTEDAMT, SYSROWID, USERNAME
        )
        SELECT COMPANYCODE, DIVISIONCODE,EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, MODULE, YEARCODE, YEARMONTH, CATEGORYCODE, GRADECODE, WORKERSERIAL, TOKENNO,PFNO,
               AGAINSTLOANCODE, AGAINSTLOANDATE, YEARMONTH, INTERESTPERCENTAGE, LOANAMOUNTADJUSTED + LOANINTAMOUNTADJUSTED, 
               LOANAMOUNTADJUSTED + LOANINTAMOUNTADJUSTED, LOANAMOUNTADJUSTED, LOANINTAMOUNTADJUSTED, 
               'ADJUSTED WITH THE LOAN CODE '|| LOANCODE || ' DATED ' || TO_DATE(LOANDATE,'DD/MM/YYYY'),
               'REPAY', DEDUCTIONSTARTDATE, LOANDATE, 0, SYSROWID, USERNAME 
          FROM PFLOANAPPLICATION
         WHERE PFNO = LV_MASTER.PFNO
           AND LOANCODE = LV_MASTER.LOANCODE
           AND LOANDATE = LV_MASTER.LOANDATE;
      
    END IF;  

    if nvl(lv_master.module,'XX')='WPS' then
        select to_char(fortnightstartdate,'DD/MM/RRRR'),to_char(fortnightenddate,'DD/MM/RRRR') 
          into lv_fortnightstartdate,lv_fortnightenddate
          from wpswagedperioddeclaration
         where companycode=lv_master.EMPLOYEECOMPANYCODE and divisioncode=lv_master.EMPLOYEEdivisioncode and to_date(lv_master.loandate,'DD/MM/RRRR') between fortnightstartdate and fortnightenddate;
    else
        select '01/'||substr(lv_master.loandate,4),TO_CHAR(last_day(to_date(lv_master.loandate,'DD/MM/RRRR')),'DD/MM/YYYY') 
          into lv_fortnightstartdate,lv_fortnightenddate
          from dual;
    end if;

    if nvl(lv_master.loantype,'XX')='NONREFUNDABLE' then
--        if nvl(lv_master.module,'XX')='WPS' then
--            select to_char(fortnightstartdate,'DD/MM/RRRR'),to_char(fortnightenddate,'DD/MM/RRRR') 
--              into lv_fortnightstartdate,lv_fortnightenddate
--              from wpswagedperioddeclaration
--             where companycode=lv_master.companycode and divisioncode=lv_master.divisioncode and to_date(lv_master.loandate,'DD/MM/RRRR') between fortnightstartdate and fortnightenddate;
--        else
--            select '01/'||substr(lv_master.loandate,4),TO_CHAR(last_day(to_date(lv_master.loandate,'DD/MM/RRRR')),'DD/MM/YYYY') 
--              into lv_fortnightstartdate,lv_fortnightenddate
--              from dual;
--        end if;
        
        SELECT PF_E,PF_C,VPF INTO LV_PF_E ,LV_PF_C ,LV_VPF   
        FROM GBL_LOANSANCTION_DETAILS
        WHERE COMPANYCODE = lv_master.companycode
          AND DIVISIONCODE = lv_master.divisioncode
          AND PFNO = LV_MASTER.PFNO
          AND LOANCODE = LV_MASTER.LOANCODE
          AND LOANDATE = LV_MASTER.LOANDATE
          AND PARAM_NAME = 'SANCTION AMOUNT';
        
        delete from pftransactiondetails 
        where companycode=lv_master.companycode
          and divisioncode=lv_master.divisioncode
          and yearmonth=lv_master.yearmonth
          and startdate=to_date(lv_fortnightstartdate,'dd/mm/yyyy') 
          and enddate=to_date(lv_fortnightenddate,'dd/mm/yyyy')
          and workerserial=lv_master.workerserial
          and pfno=lv_master.pfno
          and transactiontype='LOAN';
        
        if LV_PF_E >0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'PF_E' componentcode, -1*LV_PF_E componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, pf_e total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
        
        if LV_PF_C >0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'PF_C' componentcode, -1*LV_PF_C componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, pf_c total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
        
        if LV_VPF>0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'VPF' componentcode, -1*LV_VPF componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, vpf total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
    ELSE
       
             FOR C1 IN (SELECT PFNO,LOANCODE,LOANDATE FROM GBL_PFLOANAPPLICATION)
             LOOP
               DELETE FROM PFLOANINTEREST 
               WHERE PFNO = C1.PFNO
               AND LOANCODE = C1.LOANCODE
               AND YEARMONTH=TO_CHAR(C1.LOANDATE,'YYYYMM');
             END LOOP;
           
           
            INSERT INTO PFLOANINTEREST
            (
                COMPANYCODE, DIVISIONCODE,EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, YEARCODE, YEARMONTH, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,LOANCODE, WORKERSERIAL, TOKENNO, PFNO,
                LOANDATE, LOANAMOUNT, INTERESTAPPLICABLEON, INTERESTPERCENTAGE, INTERESTAMOUNT, MODULE, TRANSACTIONTYPE, REMARKS, 
                USERNAME, SYSROWID
            )
            SELECT COMPANYCODE, DIVISIONCODE,EMPLOYEECOMPANYCODE, EMPLOYEEDIVISIONCODE, YEARCODE, YEARMONTH, TO_DATE(LV_FORTNIGHTSTARTDATE,'DD/MM/RRRR'), TO_DATE(LV_FORTNIGHTENDDATE,'DD/MM/RRRR'), LOANCODE, WORKERSERIAL, TOKENNO, PFNO,
            LOANDATE, ACTUALLOANAMOUNT, ACTUALLOANAMOUNT, INTERESTPERCENTAGE, INTERESTAMOUNT+LOANINTAMOUNTADJUSTED, MODULE,'ADD',NULL,
            USERNAME, 1 SYSROWID  FROM GBL_PFLOANAPPLICATION; 
            
            
            
            --ADDED ON 29/07/2020
--            IF LV_MASTER.LOANINTAMOUNTADJUSTED > 0 AND LV_LOANADJTYPE = 'D' THEN
--                INSERT INTO PFLOANINTEREST
--                (
--                    COMPANYCODE, DIVISIONCODE, YEARCODE, YEARMONTH, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,LOANCODE, WORKERSERIAL, TOKENNO, PFNO,
--                    LOANDATE, LOANAMOUNT, INTERESTAPPLICABLEON, INTERESTPERCENTAGE, INTERESTAMOUNT, MODULE, TRANSACTIONTYPE, REMARKS, 
--                    USERNAME, SYSROWID
--                )
--                SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, YEARMONTH, TO_DATE(LV_FORTNIGHTSTARTDATE,'DD/MM/RRRR'), TO_DATE(LV_FORTNIGHTENDDATE,'DD/MM/RRRR'), AGAINSTLOANCODE, WORKERSERIAL, TOKENNO, PFNO,
--                AGAINSTLOANDATE, ACTUALLOANAMOUNT, LOANAMOUNTADJUSTED, INTERESTPERCENTAGE, LOANINTAMOUNTADJUSTED, MODULE,'ADD',NULL,
--                USERNAME, 1 SYSROWID  FROM GBL_PFLOANAPPLICATION; 
--            END IF;
            --ENDED ON 29/07/2020
            
       
            
           
    end if;
    
end;
/


DROP PROCEDURE PRCWPS_PFLOAN_AFTERSAVE_160319;

CREATE OR REPLACE PROCEDURE PRCWPS_PFLOAN_AFTERSAVE_160319
IS
LV_CNT                  NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_PFLOANAPPLICATION%ROWTYPE;
LV_PF_C NUMBER;
LV_PF_E NUMBER;
LV_VPF  NUMBER; 
LV_FORTNIGHTSTARTDATE VARCHAR2(10);
LV_FORTNIGHTENDDATE VARCHAR2(10);

BEGIN
    lv_result:='#SUCCESS#';
    
    select *
    into lv_master
    from gbl_pfloanapplication
    where rownum<=1;

    select count(*)
    into lv_cnt
    from gbl_pfloanapplication;
        
    if nvl(lv_cnt,0)=0 then
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(fn_display_error( 'COMMON')),fn_display_error( 'COMMON',5,lv_error_remark));
    end if;
       
    if lv_master.operationmode is null then
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(fn_display_error( 'COMMON')),fn_display_error( 'COMMON',6,lv_error_remark));
    end if;
        
    if nvl(lv_master.loantype,'XX')='NONREFUNDABLE' then
        if nvl(lv_master.module,'XX')='WPS' then
            select to_char(fortnightstartdate,'DD/MM/RRRR'),to_char(fortnightenddate,'DD/MM/RRRR') 
              into lv_fortnightstartdate,lv_fortnightenddate
              from wpswagedperioddeclaration
             where to_date(lv_master.loandate,'DD/MM/RRRR') between fortnightstartdate and fortnightenddate;
        else
            select '01/'||substr(lv_master.loandate,4),TO_CHAR(last_day(to_date(lv_master.loandate,'DD/MM/RRRR')),'DD/MM/YYYY') 
              into lv_fortnightstartdate,lv_fortnightenddate
              from dual;
        end if;
        
        delete from pftransactiondetails 
        where companycode=lv_master.companycode
          and divisioncode=lv_master.divisioncode
          and yearmonth=lv_master.yearmonth
          and startdate=to_date(lv_fortnightstartdate,'dd/mm/yyyy') 
          and enddate=to_date(lv_fortnightenddate,'dd/mm/yyyy')
          and workerserial=lv_master.workerserial
          and pfno=lv_master.pfno
          and transactiontype='LOAN';
        
        if lv_master.pf_e>0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'PF_E' componentcode, -1*pf_e componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, pf_e total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
        
        if lv_master.pf_c>0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'PF_C' componentcode, -1*pf_c componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, pf_c total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
        
        if lv_master.vpf>0 then
            insert into pftransactiondetails
            select companycode, divisioncode, yearcode, yearmonth, to_date(lv_fortnightstartdate,'dd/mm/yyyy') startdate, 
                   to_date(lv_fortnightenddate,'dd/mm/yyyy') enddate, pfno, workerserial, tokenno, 
                   'VPF' componentcode, -1*vpf componentamount, 'LOAN' transactiontype, lv_master.module postedfrom, 
                   'WORKER' employmenttype, 'LESS' addless, null pftrustcode, 
                   0 int_per, 0 int_amt, vpf total_amt, null pensionno, 0 averagebalance, employeecompanycode, employeedivisioncode, 
                   module, 0 adj_amt, remarks, voucherno, voucherdate, systemvoucherno, systemvoucherdate, 
                   loandate applicationdate, applicationno,SYSDATE LASTMODIFIEDDATE,username,SYSROWID
             from pfloantransaction
            where companycode=lv_master.companycode
              and divisioncode=lv_master.divisioncode
              and yearmonth=lv_master.yearmonth
              and loandate between to_date(lv_fortnightstartdate,'dd/mm/yyyy') and to_date(lv_fortnightenddate,'dd/mm/yyyy')
              and workerserial=lv_master.workerserial
              and pfno=lv_master.pfno;
        end if;
    end if;
    
end;
/


DROP PROCEDURE PRCWPS_PFLOAN_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_PFLOAN_B4SAVE" 
IS
LV_CNT                  NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_PFLOANAPPLICATION%ROWTYPE;
lv_LoanMasterRow        PFLOANMASTER%ROWTYPE;
LV_MAXDRCRDATE          DATE;
LV_TRANSACTIONNO        VARCHAR2(50);
LV_CNTCHKDUP            NUMBER;
LV_ITEMVSCHARGE         VARCHAR2(4000);
LV_PF_C NUMBER;
LV_PF_E NUMBER;
LV_VPF  NUMBER; 
LV_CONTRIBUTION  NUMBER;
LV_EMPCOM VARCHAR2(10);
LV_EMPDIV VARCHAR2(10);
LV_CATCODE   VARCHAR2(10);
LV_APPLICATIONNO VARCHAR2(15);
LV_FORTNIGHTSTARTDATE VARCHAR2(10);
LV_FORTNIGHTENDDATE VARCHAR2(10);
LV_LOANCODE VARCHAR2(10);
lv_Prev_LoanCode    varchar2(10) := '';
lv_Prev_LoanDate    date;    
LV_EMP_STATUS VARCHAR2(20);
BEGIN

    LV_RESULT:='#SUCCESS#';
        SELECT *
        INTO LV_MASTER
        FROM GBL_PFLOANAPPLICATION
        WHERE ROWNUM<=1;


        SELECT COUNT(*)
        INTO LV_CNT
        FROM GBL_PFLOANAPPLICATION;
        
        IF NVL(LV_CNT,0)=0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Blank data not allowded to save!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
       
        
        IF LV_MASTER.OPERATIONMODE IS NULL THEN
            LV_ERROR_REMARK := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;
        
        
        select nvl(employeestatus,'NA') INTO LV_EMP_STATUS 
        from pfemployeemaster 
        where TOKENNO=LV_MASTER.TOKENNO
        AND COMPANYCODE=LV_MASTER.COMPANYCODE
        AND DIVISIONCODE=LV_MASTER.DIVISIONCODE; --'30397';
        
        IF(LV_EMP_STATUS = 'NA') THEN
            LV_ERROR_REMARK := 'Validation Failure : [This Token No ('|| LV_MASTER.TOKENNO ||') is inactive.]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        ELSIF(LV_EMP_STATUS <> 'ACTIVE') THEN
            LV_ERROR_REMARK := 'Validation Failure : [This Token No ('|| LV_MASTER.TOKENNO ||') is '||LV_EMP_STATUS||'.]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
--        
--         SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR'),TO_CHAR(FORTNIGHTENDDATE,'DD/MM/RRRR') 
--           INTO LV_FORTNIGHTSTARTDATE,LV_FORTNIGHTENDDATE
--           FROM WPSWAGEDPERIODDECLARATION
--          WHERE COMPANYCODE=LV_MASTER.COMPANYCODE AND DIVISIONCODE=LV_MASTER.DIVISIONCODE 
--          AND TO_DATE(LV_MASTER.LOANDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;
--            
        
         SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR'),TO_CHAR(FORTNIGHTENDDATE,'DD/MM/RRRR') 
           INTO LV_FORTNIGHTSTARTDATE,LV_FORTNIGHTENDDATE
           FROM WPSWAGEDPERIODDECLARATION
          WHERE 1=1 --COMPANYCODE=LV_MASTER.EMPLOYEECOMPANYCODE AND DIVISIONCODE=LV_MASTER.EMPLOYEEDIVISIONCODE 
          AND TO_DATE(LV_MASTER.LOANDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;
            
        SELECT COMPANYCODE,DIVISIONCODE,CATEGORYCODE
          INTO LV_EMPCOM,LV_EMPDIV,LV_CATCODE
          FROM PFEMPLOYEEMASTER
         WHERE PFNO=LV_MASTER.PFNO;            
           
        SELECT NVL(PF_C,0),NVL(PF_E,0),NVL(VPF,0) , NVL(PF_C,0)+NVL(PF_E,0)+NVL(VPF,0)
          INTO LV_PF_C,LV_PF_E,LV_VPF,LV_CONTRIBUTION 
          FROM GBL_PFLOANAPPLICATION
          WHERE  PFNO=LV_MASTER.PFNO 
          AND LOANCODE=LV_MASTER.LOANCODE
          AND LOANDATE=LV_MASTER.LOANDATE;
        
        IF NVL(LV_MASTER.AMOUNTINHAND,0) = 0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Amount In Hand Should Be Zero!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
        
        update GBL_PFLOANAPPLICATION a 
        set gradecode = ( select gradecode from pfemployeemaster 
        where companycode=a.companycode and divisioncode=a.divisioncode and pfno=a.pfno
        ) where 1=1; 
        
        
        IF LV_MASTER.OPERATIONMODE ='D' THEN
        
            SELECT COUNT(*) INTO LV_CNT FROM PFLOANBREAKUP
            WHERE 1=1
            AND COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND TOKENNO=lv_master.TOKENNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;

            IF LV_CNT > 0 THEN
                LV_ERROR_REMARK := 'Validation Failure : [Transaction Found!!! This Loan can not be deleted.!]';
                RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));

            END IF;
            --            AND TRANSACTIONTYPE='REPAY'
            BEGIN
                SELECT AGAINSTLOANCODE, AGAINSTLOANDATE INTO lv_Prev_LoanCode, lv_Prev_LoanDate 
                FROM PFLOANTRANSACTION
                WHERE COMPANYCODE=lv_master.COMPANYCODE
                AND DIVISIONCODE=lv_master.DIVISIONCODE
                AND PFNO=lv_master.PFNO
                AND LOANCODE=lv_master.LOANCODE
                AND LOANDATE=lv_master.LOANDATE
                AND (NVL(LOANAMOUNTADJUSTED,0)+NVL(LOANINTAMOUNTADJUSTED,0)) >0;
                
                DELETE FROM PFLOANBREAKUP
                WHERE COMPANYCODE=lv_master.COMPANYCODE
                AND DIVISIONCODE=lv_master.DIVISIONCODE
                AND PFNO=lv_master.PFNO
                AND LOANCODE=lv_Prev_LoanCode
                AND LOANDATE=lv_Prev_LoanDate
                AND TRANSACTIONTYPE='REPAY';
                
            EXCEPTION WHEN OTHERS THEN
                NULL;
            END;


            DELETE FROM PFLOANTRANSACTION
            WHERE COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND PFNO=lv_master.PFNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;

            DELETE FROM PFLOANAPPLICATION
            WHERE COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND PFNO=lv_master.PFNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;
            
        
            DELETE FROM LOANSANCTION_DETAILS
            where COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND TOKENNO=lv_master.TOKENNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;

        ELSE
        -- GENERATING APPLICATIONNO
            IF LV_MASTER.OPERATIONMODE ='A' THEN
                SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'PF LOAN',TO_CHAR(LV_MASTER.LOANDATE,'dd/mm/yyyy')) 
                INTO LV_APPLICATIONNO
                FROM DUAL;

                UPDATE GBL_PFLOANAPPLICATION
                SET APPLICATIONNO = LV_APPLICATIONNO;

                SELECT COUNT(*)
                INTO LV_CNT
                FROM SYS_GBL_PROCOUTPUT_INFO;
                    
           
                DELETE FROM LOANSANCTION_DETAILS
                where COMPANYCODE=lv_master.COMPANYCODE
                AND DIVISIONCODE=lv_master.DIVISIONCODE
                AND TOKENNO=lv_master.TOKENNO
                AND LOANCODE=lv_master.LOANCODE
                AND LOANDATE=lv_master.LOANDATE;
    --        SELECT * FROM LOANSANCTION_DETAILS        
        
           END IF;
           
               
            IF LV_CNT = 0 THEN
                INSERT INTO SYS_GBL_PROCOUTPUT_INFO
                VALUES ('[PF LOAN APPLICATION NO. : ' || LV_APPLICATIONNO || ' Dated : ' || LV_MASTER.LOANDATE || ']');
            ELSE
                UPDATE SYS_GBL_PROCOUTPUT_INFO
                SET SYS_SAVE_INFO = NVL(SYS_SAVE_INFO,'') || ('[PF LOAN APPLICATIONNO NO. : ' || LV_APPLICATIONNO || ' Dated : ' || LV_MASTER.LOANDATE || ']');
            END IF;   
                  
            UPDATE GBL_PFLOANAPPLICATION
            SET YEARMONTH=(SELECT TO_CHAR(LOANDATE,'YYYYMM') 
            FROM DUAL);

            UPDATE GBL_PFLOANAPPLICATION
            SET EMPLOYEECOMPANYCODE=LV_EMPCOM,
            EMPLOYEEDIVISIONCODE=LV_EMPDIV,
            CATEGORYCODE=lv_CATCODE;

            IF lv_master.LOANCF='F' AND NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 THEN
                UPDATE GBL_PFLOANAPPLICATION SET 
                AMOUNT=NVL(AMOUNT,0)+NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0);
            END IF;

            select * INTO lv_LoanMasterRow FROM PFLOANMASTER WHERE COMPANYCODE=LV_MASTER.COMPANYCODE AND DIVISIONCODE=LV_MASTER.DIVISIONCODE AND LOANCODE=LV_MASTER.LOANCODE;
            
            IF lv_LoanMasterRow.REFUNDTYPE = 'REFUNDABLE' THEN
                IF lv_LoanMasterRow.DEDUCTIONTYPE = 'DEDUCT CAPITAL FULL THEN INTEREST' THEN
                    UPDATE GBL_PFLOANAPPLICATION SET TOTALEMIAMOUNT = CAPITALINSTALLMENTAMT, INTERESTINSTALLMENTAMT = CAPITALINSTALLMENTAMT; 
                END IF;
            END IF;

            UPDATE GBL_PFLOANAPPLICATION SET REMARKS= (SELECT CASE WHEN REMARKS IS NULL THEN 'ELIGIBLE' ELSE REMARKS END REMARKS FROM GBL_PFLOANELIGIBLE WHERE LOANCODE = lv_master.LOANCODE AND PFNO = lv_master.PFNO);

       END IF;
       
       
        
end;
/


DROP PROCEDURE PRCWPS_PFLOAN_B4SAVE_BK;

CREATE OR REPLACE PROCEDURE "PRCWPS_PFLOAN_B4SAVE_BK" 
IS
LV_CNT                  NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_PFLOANAPPLICATION%ROWTYPE;
lv_LoanMasterRow        PFLOANMASTER%ROWTYPE;
LV_MAXDRCRDATE          DATE;
LV_TRANSACTIONNO        VARCHAR2(50);
LV_CNTCHKDUP            NUMBER;
LV_ITEMVSCHARGE         VARCHAR2(4000);
LV_PF_C NUMBER;
LV_PF_E NUMBER;
LV_VPF  NUMBER; 
LV_CONTRIBUTION  NUMBER;
LV_EMPCOM VARCHAR2(10);
LV_EMPDIV VARCHAR2(10);
LV_CATCODE   VARCHAR2(10);
LV_APPLICATIONNO VARCHAR2(15);
LV_FORTNIGHTSTARTDATE VARCHAR2(10);
LV_FORTNIGHTENDDATE VARCHAR2(10);
LV_LOANCODE VARCHAR2(10);
lv_Prev_LoanCode    varchar2(10) := '';
lv_Prev_LoanDate    date;    
LV_EMP_STATUS VARCHAR2(20);
BEGIN

    LV_RESULT:='#SUCCESS#';
        SELECT *
        INTO LV_MASTER
        FROM GBL_PFLOANAPPLICATION
        WHERE ROWNUM<=1;


        SELECT COUNT(*)
        INTO LV_CNT
        FROM GBL_PFLOANAPPLICATION;
        
         IF NVL(LV_CNT,0)=0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Blank data not allowded to save!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
       
        
        IF LV_MASTER.OPERATIONMODE IS NULL THEN
            LV_ERROR_REMARK := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;
        
        
        select nvl(employeestatus,'NA') INTO LV_EMP_STATUS 
        from pfemployeemaster 
        where TOKENNO=LV_MASTER.TOKENNO
        AND COMPANYCODE=LV_MASTER.COMPANYCODE
        AND DIVISIONCODE=LV_MASTER.DIVISIONCODE; --'30397';
        
        IF(LV_EMP_STATUS = 'NA') THEN
            LV_ERROR_REMARK := 'Validation Failure : [This Token No ('|| LV_MASTER.TOKENNO ||') is inactive.]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        ELSIF(LV_EMP_STATUS <> 'ACTIVE') THEN
            LV_ERROR_REMARK := 'Validation Failure : [This Token No ('|| LV_MASTER.TOKENNO ||') is '||LV_EMP_STATUS||'.]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
--        
--         SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR'),TO_CHAR(FORTNIGHTENDDATE,'DD/MM/RRRR') 
--           INTO LV_FORTNIGHTSTARTDATE,LV_FORTNIGHTENDDATE
--           FROM WPSWAGEDPERIODDECLARATION
--          WHERE COMPANYCODE=LV_MASTER.COMPANYCODE AND DIVISIONCODE=LV_MASTER.DIVISIONCODE 
--          AND TO_DATE(LV_MASTER.LOANDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;
--            
        
         SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR'),TO_CHAR(FORTNIGHTENDDATE,'DD/MM/RRRR') 
           INTO LV_FORTNIGHTSTARTDATE,LV_FORTNIGHTENDDATE
           FROM WPSWAGEDPERIODDECLARATION
          WHERE 1=1 --COMPANYCODE=LV_MASTER.EMPLOYEECOMPANYCODE AND DIVISIONCODE=LV_MASTER.EMPLOYEEDIVISIONCODE 
          AND TO_DATE(LV_MASTER.LOANDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;
            
        SELECT COMPANYCODE,DIVISIONCODE,CATEGORYCODE
          INTO LV_EMPCOM,LV_EMPDIV,LV_CATCODE
          FROM PFEMPLOYEEMASTER
         WHERE PFNO=LV_MASTER.PFNO;            
           
        SELECT NVL(PF_C,0),NVL(PF_E,0),NVL(VPF,0) , NVL(PF_C,0)+NVL(PF_E,0)+NVL(VPF,0)
          INTO LV_PF_C,LV_PF_E,LV_VPF,LV_CONTRIBUTION 
          FROM GBL_PFLOANAPPLICATION
          WHERE  PFNO=LV_MASTER.PFNO 
          AND LOANCODE=LV_MASTER.LOANCODE
          AND LOANDATE=LV_MASTER.LOANDATE;
        
        IF NVL(LV_MASTER.AMOUNTINHAND,0) = 0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Amount In Hand Should Be Zero!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
        
        update GBL_PFLOANAPPLICATION a 
        set gradecode = ( select gradecode from pfemployeemaster 
        where companycode=a.companycode and divisioncode=a.divisioncode and pfno=a.pfno
        ) where 1=1; 
        
        -- GENERATING APPLICATIONNO
        IF LV_MASTER.OPERATIONMODE ='A' THEN
          SELECT FN_AUTOGEN_PARAMS(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,LV_MASTER.YEARCODE,'PF LOAN',TO_CHAR(LV_MASTER.LOANDATE,'dd/mm/yyyy')) 
          INTO LV_APPLICATIONNO
          FROM DUAL;

           UPDATE GBL_PFLOANAPPLICATION
           SET APPLICATIONNO = LV_APPLICATIONNO;
           
            SELECT COUNT(*)
            INTO LV_CNT
            FROM SYS_GBL_PROCOUTPUT_INFO;
                
       
        DELETE FROM LOANSANCTION_DETAILS
        where COMPANYCODE=lv_master.COMPANYCODE
        AND DIVISIONCODE=lv_master.DIVISIONCODE
        AND TOKENNO=lv_master.TOKENNO
        AND LOANCODE=lv_master.LOANCODE
        AND LOANDATE=lv_master.LOANDATE;
--        SELECT * FROM LOANSANCTION_DETAILS        
    
       END IF;
       
       
        IF LV_CNT = 0 THEN
            INSERT INTO SYS_GBL_PROCOUTPUT_INFO
            VALUES ('[PF LOAN APPLICATION NO. : ' || LV_APPLICATIONNO || ' Dated : ' || LV_MASTER.LOANDATE || ']');
        ELSE
            UPDATE SYS_GBL_PROCOUTPUT_INFO
            SET SYS_SAVE_INFO = NVL(SYS_SAVE_INFO,'') || ('[PF LOAN APPLICATIONNO NO. : ' || LV_APPLICATIONNO || ' Dated : ' || LV_MASTER.LOANDATE || ']');
        END IF;   
                  
         UPDATE GBL_PFLOANAPPLICATION
         SET YEARMONTH=(SELECT TO_CHAR(LOANDATE,'YYYYMM') 
                          FROM DUAL);

         UPDATE GBL_PFLOANAPPLICATION
            SET EMPLOYEECOMPANYCODE=LV_EMPCOM,
                EMPLOYEEDIVISIONCODE=LV_EMPDIV,
                CATEGORYCODE=lv_CATCODE;
         
         IF lv_master.LOANCF='F' AND NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0)>0 THEN
         UPDATE GBL_PFLOANAPPLICATION SET 
         AMOUNT=NVL(AMOUNT,0)+NVL(lv_master.LOANAMOUNTADJUSTED,0)+NVL(lv_master.LOANINTAMOUNTADJUSTED,0);
         
        END IF;
        
        select * INTO lv_LoanMasterRow FROM PFLOANMASTER WHERE COMPANYCODE=LV_MASTER.COMPANYCODE AND DIVISIONCODE=LV_MASTER.DIVISIONCODE AND LOANCODE=LV_MASTER.LOANCODE;
        IF lv_LoanMasterRow.REFUNDTYPE = 'REFUNDABLE' THEN
            IF lv_LoanMasterRow.DEDUCTIONTYPE = 'DEDUCT CAPITAL FULL THEN INTEREST' THEN
                UPDATE GBL_PFLOANAPPLICATION SET TOTALEMIAMOUNT = CAPITALINSTALLMENTAMT, INTERESTINSTALLMENTAMT = CAPITALINSTALLMENTAMT; 
            END IF;
        END IF;
                
        UPDATE GBL_PFLOANAPPLICATION SET REMARKS= (SELECT CASE WHEN REMARKS IS NULL THEN 'ELIGIBLE' ELSE REMARKS END REMARKS FROM GBL_PFLOANELIGIBLE WHERE LOANCODE = lv_master.LOANCODE AND PFNO = lv_master.PFNO);
        
        
        IF LV_MASTER.OPERATIONMODE ='D' THEN
          
            SELECT COUNT(*) INTO LV_CNT FROM PFLOANBREAKUP
            WHERE 1=1
            AND COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND TOKENNO=lv_master.TOKENNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;
            
            IF LV_CNT > 0 THEN
                LV_ERROR_REMARK := 'Validation Failure : [Transaction Found!!! This Loan can not be deleted.!]';
                RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
    
            END IF;
--            AND TRANSACTIONTYPE='REPAY'
            SELECT AGAINSTLOANCODE, AGAINSTLOANDATE INTO lv_Prev_LoanCode, lv_Prev_LoanDate 
            FROM PFLOANTRANSACTION
            WHERE COMPANYCODE=lv_master.COMPANYCODE
              AND DIVISIONCODE=lv_master.DIVISIONCODE
              AND PFNO=lv_master.PFNO
              AND LOANCODE=lv_master.LOANCODE
              AND LOANDATE=lv_master.LOANDATE
              AND (NVL(LOANAMOUNTADJUSTED,0)+NVL(LOANINTAMOUNTADJUSTED,0)) >0;
            
            DELETE FROM PFLOANBREAKUP
            WHERE COMPANYCODE=lv_master.COMPANYCODE
              AND DIVISIONCODE=lv_master.DIVISIONCODE
              AND PFNO=lv_master.PFNO
              AND LOANCODE=lv_Prev_LoanCode
              AND LOANDATE=lv_Prev_LoanDate
              AND TRANSACTIONTYPE='REPAY';
            
            DELETE FROM PFLOANTRANSACTION
            WHERE COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND PFNO=lv_master.PFNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;
            
            DELETE FROM PFLOANAPPLICATION
            WHERE COMPANYCODE=lv_master.COMPANYCODE
            AND DIVISIONCODE=lv_master.DIVISIONCODE
            AND WORKERSERIAL=lv_master.WORKERSERIAL
            AND PFNO=lv_master.PFNO
            AND LOANCODE=lv_master.LOANCODE
            AND LOANDATE=lv_master.LOANDATE;
            
--            DELETE FROM PFLOANTRANSACTION
--            WHERE COMPANYCODE=lv_master.COMPANYCODE
--            AND DIVISIONCODE=lv_master.DIVISIONCODE
--            AND WORKERSERIAL=lv_master.WORKERSERIAL
--            AND PFNO=lv_master.PFNO
--            AND LOANCODE=lv_master.LOANCODE
--            AND LOANDATE=lv_master.LOANDATE;
            
        END IF;

end;
/


DROP PROCEDURE PRCWPS_PFPREVLOANDETAILS;

CREATE OR REPLACE PROCEDURE "PRCWPS_PFPREVLOANDETAILS" (p_com varchar2,p_div varchar2,p_pfno varchar2,
                                                             p_date varchar2,p_module varchar2,
                                                             p_NRloancode varchar2)
/*  PFNO,LOANDATE,WPS/PIS       exec prcWPS_PFPrevLoanDetails('HC0001','0022','90107','10/03/2016','WPS','''10'',''9'''  ) */
is
lv_pdate varchar2(50) := p_date ;
--lv_startendTag varchar2(50)  := UPPER(p_startendTag);
lv_startDate VARCHAR2(10) := '';
lv_endDate varchar2(10) :='';
lv_cnt number := 0 ;

BEGIN

        SELECT fn_getFortnightStartEndDate(p_date,'END')
          INTO lv_endDate
         FROM DUAL;
          
        SELECT COUNT(*) INTO LV_CNT FROM
        (    
            SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
            FROM PFLOANTRANSACTION  
            WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
            AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
            AND  INSTR(p_NRloancode,LOANCODE) = 0  
            GROUP BY PFNO
        ) ; 
        
      IF LV_CNT >0 THEN  
            INSERT INTO GBL_PFLOANBALACE         
            SELECT B.EMPLOYEEID TOKENNO, A.PFNO, A.LOANCODE, A.LOANDATE, SUM(A.AMOUNT) PFLOAN_BAL, CASE WHEN SUM(INTERESTAMOUNT) > 0 THEN SUM(INTERESTAMOUNT) ELSE 0 END PFLOAN_INT_BAL,  
                 SUM(LN_CAP_DEDUCT) PFLN_CAP_DEDUCT, SUM(LN_INT_DEDUCT) PFLN_INT_DEDUCT  
                 FROM (  
                         SELECT DISTINCT A.PFNO, A.LOANCODE, A.LOANDATE, AMOUNT, 0 INTERESTAMOUNT , 0 LN_CAP_DEDUCT, 0 LN_INT_DEDUCT  
                         FROM PFLOANTRANSACTION A,  
                         (  
                             SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
                             FROM PFLOANTRANSACTION  
                             WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
                             AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                             AND  INSTR(p_NRloancode,LOANCODE) = 0  
                             GROUP BY PFNO  
                         ) B  
                         WHERE A.PFNO = B.PFNO AND A.LOANDATE = B.LOANDATE  AND AMOUNT > 0 
                         UNION ALL  
                         SELECT A.PFNO, A.LOANCODE, A.LOANDATE,   
                           (CASE WHEN TRANSACTIONTYPE ='CAPITAL' THEN AMOUNT  
                                WHEN TRANSACTIONTYPE ='REPAY' THEN REPAYCAPITAL  
                                WHEN TRANSACTIONTYPE ='REPAYCAP' THEN AMOUNT  
                                ELSE 0  
                           END)*(-1) AMOUNT, 0 INTERESTAMOUNT 
                           , 0 LN_CAP_DEDUCT, 0 LN_INT_DEDUCT       
                         FROM PFLOANBREAKUP A,  
                         (  
                             SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
                             FROM PFLOANTRANSACTION  
                             WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
                             AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                             AND INSTR(p_NRloancode,LOANCODE) = 0  
                             GROUP BY PFNO  
                         ) B  
                         WHERE A.PFNO = B.PFNO AND A.LOANDATE = B.LOANDATE  
                         AND A.EFFECTFORTNIGHT <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                         AND TRANSACTIONTYPE <> 'INTEREST'  
                         UNION ALL  
                         SELECT DISTINCT A.PFNO, A.LOANCODE, A.LOANDATE, 0 AMOUNT, SUM(NVL(C.INTERESTAMOUNT,0)) INTERESTAMOUNT 
                         , 0 LN_CAP_DEDUCT, 0 LN_INT_DEDUCT  
                         FROM ( SELECT DISTINCT PFNO, LOANCODE, LOANDATE 
                                FROM PFLOANTRANSACTION 
                                WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div
                              ) A, 
                            (  
                                 SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
                                FROM PFLOANTRANSACTION  
                                WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
                                AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                                AND INSTR(p_NRloancode,LOANCODE) = 0  
                                GROUP BY PFNO  
                            ) B, PFLOANINTEREST C  
                         WHERE A.PFNO = B.PFNO AND A.LOANDATE = B.LOANDATE  
                         AND A.PFNO = C.PFNO AND A.LOANDATE = C.LOANDATE AND A.LOANCODE = C.LOANCODE  
                         AND C.FORTNIGHTENDDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                         AND C.TRANSACTIONTYPE = 'ADD'  
                         GROUP BY A.PFNO, A.LOANCODE, A.LOANDATE  
                         UNION ALL  
                         SELECT A.PFNO, A.LOANCODE, A.LOANDATE, 0 AMOUNT,   
                           (CASE WHEN TRANSACTIONTYPE ='INTEREST' THEN AMOUNT  
                                WHEN TRANSACTIONTYPE ='REPAY' THEN REPAYINTEREST  
                                WHEN TRANSACTIONTYPE ='REPAYINT' THEN AMOUNT  
                                ELSE 0  
                           END)*(-1) INTERESTAMOUNT 
                           , 0 LN_CAP_DEDUCT, 0 LN_INT_DEDUCT       
                         FROM PFLOANBREAKUP A,  
                         (  
                             SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
                             FROM PFLOANTRANSACTION  
                             WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
                             AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                             AND INSTR(p_NRloancode,LOANCODE) = 0  
                             GROUP BY PFNO  
                         ) B  
                         WHERE A.PFNO = B.PFNO AND A.LOANDATE = B.LOANDATE  
                         AND A.EFFECTFORTNIGHT <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                         AND TRANSACTIONTYPE <> 'CAPITAL' 
                         UNION ALL 
                         SELECT A.PFNO, A.LOANCODE, A.LOANDATE, 0 AMOUNT,  0 INTERESTAMOUNT,  
                         DECODE(TRANSACTIONTYPE,'CAPITAL',AMOUNT,0) LN_CAP_DEDUCT, DECODE(TRANSACTIONTYPE,'INTEREST',AMOUNT,0) LN_INT_DEDUCT 
                         FROM PFLOANBREAKUP A,  
                         (  
                             SELECT DISTINCT PFNO, MAX(LOANDATE) LOANDATE  
                             FROM PFLOANTRANSACTION  
                             WHERE COMPANYCODE = p_com AND DIVISIONCODE = p_div  
                             AND LOANDATE <= TO_DATE(lv_endDate,'DD/MM/YYYY')  
                             AND INSTR(p_NRloancode,LOANCODE) = 0  
                             GROUP BY PFNO  
                         ) B  
                         WHERE A.PFNO = B.PFNO AND A.LOANDATE = B.LOANDATE  
                         AND A.EFFECTFORTNIGHT = TO_DATE(lv_endDate,'DD/MM/YYYY')  
                         AND TRANSACTIONTYPE IN ('CAPITAL','INTEREST')                    
                     ) A, PFEMPLOYEEMASTER B  /*WPSWORKERMAST B */ 
                 WHERE A.PFNO = B.PFNO  
                   AND A.PFNO = p_pfno 
                 /*GROUP BY B.WORKERSERIAL, A.PFNO, A.LOANCODE, A.LOANDATE */
                 GROUP BY B.EMPLOYEEID, A.PFNO, A.LOANCODE, A.LOANDATE;
           
       END IF;
END;
/


DROP PROCEDURE PRCWPS_QUARTERALLOC_AFTERSAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_QUARTERALLOC_AFTERSAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_QUARTERALLOCATION%rowtype;
lv_MaxAllocationdate    date;
lv_Lastdate             date;
lv_LastStatus           varchar2(50);
lv_LastTokenNo          varchar2(50);
lv_LastWorkerSerialNo          varchar2(50);
lv_DateCount                  number; 

begin

    lv_result:='#SUCCESS#';
    
    --return;
    
        select *
        into lv_Master
        from GBL_QUARTERALLOCATION
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_QUARTERALLOCATION;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF; 
        
        
        select count(*)
        into lv_cnt
        FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO;
        --AND TOKENNO=lv_Master.TOKENNO
        --AND WORKERSERIAL=lv_Master.WORKERSERIAL
        --AND QUARTERSTATUS=lv_Master.QUARTERSTATUS;              
        
       
        
        IF lv_cnt>0 THEN
        
            select count(*)
            into lv_cnt
            FROM QUARTERALLOCATIONDETAILS
            WHERE 1=1
            AND COMPANYCODE=lv_Master.COMPANYCODE
            AND DIVISIONCODE=lv_Master.DIVISIONCODE
            AND LINENO=lv_Master.LINENO
            AND QUARTERNO=lv_Master.QUARTERNO
            AND EFFECTIVEDATE=
            (
            SELECT MAX(EFFECTIVEDATE) FROM QUARTERALLOCATIONDETAILS
            WHERE 1=1
            AND COMPANYCODE=lv_Master.COMPANYCODE
            AND DIVISIONCODE=lv_Master.DIVISIONCODE
            AND LINENO=lv_Master.LINENO
            AND QUARTERNO=lv_Master.QUARTERNO
            )AND ROWNUM=1;
            
             
            
            IF lv_cnt>0 THEN 
                SELECT QUARTERSTATUS,EFFECTIVEDATE,TOKENNO,WORKERSERIAL 
                into 
                lv_LastStatus,lv_MaxAllocationdate,lv_LastTokenNo,lv_LastWorkerSerialNo 
                FROM QUARTERALLOCATIONDETAILS
                WHERE 1=1
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO
                AND EFFECTIVEDATE=
                (
                SELECT MAX(EFFECTIVEDATE) FROM QUARTERALLOCATIONDETAILS
                WHERE 1=1
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO
                )AND ROWNUM=1;
                
               --lv_error_remark := 'lv_LastStatus'||lv_LastStatus;
                --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
             
                UPDATE QUARTERMASTER SET QUARTERSTATUS=lv_LastStatus
                WHERE
                    COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO;
                
            
            END IF;
        
        ELSE
        
         UPDATE QUARTERMASTER SET QUARTERSTATUS='VACANT'
                WHERE
                    COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO;
        
        END IF;
        
        IF NVL(LV_MASTER.OPERATIONMODE,'NA') = 'D' THEN
           
           UPDATE  QUARTERALLOCATIONDETAILS SET RELEASEDATE=NULL
                WHERE 1=1
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO
                AND EFFECTIVEDATE=
                (
                SELECT MAX(EFFECTIVEDATE) FROM QUARTERALLOCATIONDETAILS
                WHERE 1=1
                AND COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO
                )AND ROWNUM=1;
        END IF;
       
end;
/


DROP PROCEDURE PRCWPS_QUARTERALLOC_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_QUARTERALLOC_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_QUARTERALLOCATION%rowtype;
lv_MaxAllocationdate    date;
lv_Lastdate             date;
lv_LastStatus           varchar2(50);
lv_LastTokenNo          varchar2(50);
lv_LastWorkerSerialNo          varchar2(50);
lv_DateCount                  number; 
lv_QUARTERNO_Allocated varchar2(50);

begin

    lv_result:='#SUCCESS#';
    
    --return;
    
        select *
        into lv_Master
        from GBL_QUARTERALLOCATION
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_QUARTERALLOCATION;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF; 
        
        IF lv_Master.TOKENNO IS NULL  AND lv_Master.QUARTERSTATUS='ALLOCATED' THEN
            lv_error_remark := 'Validation Failure : [Token No No is blank!!! ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
        
        
        UPDATE GBL_QUARTERALLOCATION SET TOKENNO=lv_Master.COMPANYCODE,WORKERSERIAL=lv_Master.COMPANYCODE
        WHERE WORKERSERIAL IS NULL;
       
       if nvl(lv_Master.operationmode,'NA') = 'A' then
        
        select count(*)
        into lv_cnt
        FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND WORKERSERIAL=lv_Master.WORKERSERIAL
        AND QUARTERSTATUS='ALLOCATED'
        AND RELEASEDATE IS NULL;             
        
        IF NVL(lv_cnt,0)>0 THEN
        
            select QUARTERNO
            into lv_QUARTERNO_Allocated
            FROM QUARTERALLOCATIONDETAILS
            WHERE 1=1
            AND COMPANYCODE=lv_Master.COMPANYCODE
            AND DIVISIONCODE=lv_Master.DIVISIONCODE
            AND WORKERSERIAL=lv_Master.WORKERSERIAL
            AND QUARTERSTATUS='ALLOCATED'
            AND RELEASEDATE IS NULL 
            and rownum=1;   
        
            lv_error_remark := 'Validation Failure : [TOKEN NO Already Allocated With Different Quarter - '||lv_QUARTERNO_Allocated||' ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF; 
         
        select count(*)
        into lv_cnt
        FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO
        --AND TOKENNO=lv_Master.TOKENNO
        AND WORKERSERIAL=lv_Master.WORKERSERIAL
        AND QUARTERSTATUS=lv_Master.QUARTERSTATUS;
        
         IF lv_cnt>0 THEN
            lv_error_remark := 'Validation Failure : [Already Allocated this Quarter With this Token No!!! ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF; 
         
        select count(*)
        into lv_cnt
        FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO
        AND EFFECTIVEDATE=
        (
        SELECT MAX(EFFECTIVEDATE) FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO
        )AND ROWNUM=1;
        
    IF lv_cnt>0 THEN 
        SELECT QUARTERSTATUS,EFFECTIVEDATE,TOKENNO,WORKERSERIAL 
        into 
        lv_LastStatus,lv_MaxAllocationdate,lv_LastTokenNo,lv_LastWorkerSerialNo 
        FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO
        AND EFFECTIVEDATE=
        (
        SELECT MAX(EFFECTIVEDATE) FROM QUARTERALLOCATIONDETAILS
        WHERE 1=1
        AND COMPANYCODE=lv_Master.COMPANYCODE
        AND DIVISIONCODE=lv_Master.DIVISIONCODE
        AND LINENO=lv_Master.LINENO
        AND QUARTERNO=lv_Master.QUARTERNO
        )AND ROWNUM=1;
        
         
        
        
            
        IF lv_MaxAllocationdate IS NOT NULL THEN 
        SELECT lv_Master.EFFECTIVEDATE -  
        lv_MaxAllocationdate into lv_DateCount
        FROM   dual;
        
        --lv_error_remark := 'lv_DateCount'||lv_DateCount;
        --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        
        IF lv_DateCount<0 THEN
            lv_error_remark := 'Validation Failure : [Current Effective Date Cannot be Less than Last Effective Date]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF; 
        
        if lv_DateCount>0 then
            select (lv_Master.EFFECTIVEDATE-1) into lv_Lastdate from dual;
        end if;
        
        --lv_error_remark := 'lv_Lastdate~'||lv_Lastdate;
        --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        
        END IF;
            if lv_Lastdate is not null then 
        
                UPDATE QUARTERALLOCATIONDETAILS SET RELEASEDATE=lv_Lastdate 
                where
                    COMPANYCODE=lv_Master.COMPANYCODE
                AND DIVISIONCODE=lv_Master.DIVISIONCODE
                AND LINENO=lv_Master.LINENO
                AND QUARTERNO=lv_Master.QUARTERNO
                AND EFFECTIVEDATE=lv_MaxAllocationdate
                AND RELEASEDATE IS NULL;
            end if;
    END IF; 

       end if;
       
end;
/


DROP PROCEDURE PRCWPS_STLENTITLE_PROCESS_NJML;

CREATE OR REPLACE PROCEDURE prcWPS_STLENTITLE_PROCESS_NJML( P_COMPCODE varchar2, 
                                                       P_DIVCODE varchar2, 
                                                       P_YEAR varchar2, 
                                                       P_USER varchar2,
                                                       p_StandardSTLHours number,
                                                       p_AdjustmentSTLHours number default 0,
                                                       p_Workerserial varchar2 default null,
                                                       p_HoursforOnedaySTL number default 160
                                                   )
as
lv_ProcName             varchar2(30):= 'prcWPS_STLENTITLE_PROCESS_NJML';
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '';
lv_Remarks              varchar2(1000) := '';
lv_ParValues            varchar2(500) := '';
lv_SqlErrm              varchar2(500) := '';
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;
lv_PrevYear             varchar2(4); --2016
lv_B4PrevYear           varchar2(4); --2015
lv_PrevB4PrevYear       varchar2(4); --2014
lv_fn_stdt              date;
lv_fn_endt              date;
lv_Cur_fn_stdt              date;
lv_Cur_fn_endt              date;

lv_Yr_endt              date;
lv_YearCode             varchar2(10);
lv_Sql                  varchar2(10000);
lv_ApplicableStndhrs    number :=1920;
lv_StndSTLDays          number :=Round(p_StandardSTLHours/8,0);
lv_AdjSTLDays           number :=0;

--EXEC prcWPS_STLENTITLE_PROCESS_NJML('CJ0048','0003','2017','SWT',1920, 0,'', 160 )
begin
    ---- FOLLOWING POINTS CONSIDER IN THIS PROCEDURE FOR STL ENTILEMENT CALCULATION --------
    ---- 1. Previous year STL consider in the same year in column prev. year STL 
    ---- 2. When wokrer join in the current calendar year then STL consider working days 20 in enverymonth.
    
    lv_result:='#SUCCESS#';
    lv_Remarks := 'STLENTITLE PROCESS';
    lv_PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-1;
    lv_B4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-2;
    lv_PrevB4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-3;
    
    lv_fn_stdt := to_date('01/01/'||P_YEAR,'DD/MM/YYYY');
    lv_fn_endt := to_date('15/01/'||P_YEAR,'DD/MM/YYYY');
    lv_Yr_endt := to_date('31/12/'||P_YEAR,'DD/MM/YYYY');
    
    lv_Cur_fn_stdt := to_date('01/01/'||TO_CHAR(P_YEAR+1),'DD/MM/YYYY');
    lv_Cur_fn_endt := to_date('15/01/'||TO_CHAR(P_YEAR+1),'DD/MM/YYYY');
       
    lv_ApplicableStndhrs := p_StandardSTLHours - p_AdjustmentSTLHours;
    
    lv_ParValues := 'YEAR - '||P_YEAR||',STANDARD HRS - '||p_StandardSTLHours||', Adj Hrs - '||p_AdjustmentSTLHours;
        
    SELECT YEARCODE INTO lv_YearCode 
    FROM FINANCIALYEAR 
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
    AND STARTDATE <= lv_fn_stdt AND ENDDATE >= lv_fn_stdt;

    lv_sql := 'DELETE FROM WPSSTLTRANSACTION WHERE TRANSACTIONTYPE <>''OPENING'' AND FROMYEAR='||P_YEAR||' '||chr(10);
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    --execute immediate lv_Sql;
        

    lv_Sql := 'DELETE FROM WPSSTLENTITLEMENTCALCDETAILS '||chr(10) 
        ||' WHERE FORTNIGHTSTARTDATE='''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE='''||lv_Cur_fn_endt||''' '||chr(10);
    
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    execute immediate lv_Sql;


    lv_Remarks := 'STL ENTITLEMENT CALCULATION PROCESS'; 
--    DBMS_OUTPUT.PUT_LINE ('1_1');

    lv_Sql := ' INSERT INTO WPSSTLENTITLEMENTCALCDETAILS ( '||CHR(10)
        ||' COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, CATEGORYCODE, FROMYEAR, YEARCODE, '||CHR(10) 
        ||' FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DEPARTMENTCODE, SHIFTCODE, '||CHR(10) 
        ||' ATTNHOURS, FESTHOURS, HOLIDAYHOURS, TOTALHOURS, STLHRSTAKEN, STLDAYSTAKEN, '||CHR(10) 
        ||' STANDARDSTLHOURS, ADJUSTEDHOURS, APPLICABLESTANDHOURS, STLDAYS, STLHOURS, STLDAYS_BF, '||CHR(10) 
        ||' TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIED, SYSROWID, STLHOURSTAKEN_CURYEAR) '||CHR(10)
        ||' SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, '''||TO_CHAR(P_YEAR)||''' FROMYEAR, '''||lv_YearCode||''' YEARCODE, '||CHR(10)
        ||' '''||lv_Cur_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_Cur_fn_endt||''' FORTNIGHTENDDATE, DEPARTMENTCODE, ''1'' SHIFTCODE, '||CHR(10)
        ||' ATTN_HRS ATTNHOURS, 0 FESTHOURS, HOL_HRS HOLIDAYHOURS, (ATTN_HRS) TOTALHOURS, STL_HRS, STL_DAYS STLDAYSTAKEN, '||CHR(10)
        ||' STNDHRS STANDARDSTLHOURS, '||p_AdjustmentSTLHours||' ADJUSTEDHOURS, '||lv_ApplicableStndhrs||' APPLICABLESTANDHOURS, ENT_DAYS STLDAYS, ENT_DAYS*8 STLHOURS, PREV_ENT_STLDAYS STLDAYS_BF, '||CHR(10);
 --    DBMS_OUTPUT.PUT_LINE ('1_2');        
     lv_Sql := lv_Sql ||' ''ENTITLEMENT'' TRANSACTIONTYPE, ''ADD'' ADDLESS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, WORKERSERIAL||''-''||TO_CHAR(SYSDATE,''YYYYMMDDHHMISS'') SYSROWID '||CHR(10)
        ||' , 0 STLHOURSTAKEN_CURYEAR '||CHR(10) 
        ||' FROM ( '||CHR(10)
        ||' SELECT B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE, B.DATEOFJOINING, '||CHR(10)
        ||' SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS, '||CHR(10)
        ||' SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS, CASE WHEN SUM(STL_HRS) > 0 THEN case when (SUM(STL_HRS) - SUM(PRV_STLHRS_CALC)) > 0 then SUM(STL_HRS) - SUM(PRV_STLHRS_CALC) else 0 end ELSE 0 END STL_HRS, '||CHR(10)
        ||' SUM(ELIGIBLE_HRS) ELIGIBLE_HRS, SUM(ATTN_DAYS) ATTN_DAYS, SUM(STL_DAYS) STL_DAYS, SUM(HOL_DAYS) HOL_DAYS, '||CHR(10) 
        ||' SUM(ELIGIBLE_DAYS) ELIGIBLE_DAYS, '||CHR(10)
        ||' CASE WHEN SUM(STLENCASH_HRS)> 0 THEN 0 ELSE SUM(PREV_STLDAYS) - SUM(STL_DAYS) END PREV_ENT_STLDAYS, '||CHR(10)
        ||' CASE WHEN SUM(STLENCASH_HRS) > 0 THEN 0 '||CHR(10)
        ||' ELSE '||CHR(10) 
        ||'     CASE WHEN B.DATEOFJOINING <= '''||lv_fn_stdt||''' THEN '||CHR(10) 
        ||'         CASE WHEN SUM(ELIGIBLE_HRS) >='||p_StandardSTLHours||' THEN ROUND(SUM(ATTN_DAYS)/20,0) ELSE 0 END '||CHR(10)
        ||'     ELSE CASE WHEN SUM(ELIGIBLE_HRS) >= '||p_StandardSTLHours||' - ((TO_NUMBER(TO_CHAR(DATEOFJOINING,''MM''))-1)*'||  p_HoursforOnedaySTL || ') THEN ROUND(SUM(ATTN_DAYS)/20,0) '||CHR(10)
        ||'             ELSE 0 END '||CHR(10)
        ||'     END '||CHR(10)
        ||' END ENT_DAYS '||CHR(10)
        ||' , CASE WHEN B.DATEOFJOINING <= '''||lv_fn_stdt||''' THEN '||p_StandardSTLHours||' '||CHR(10)
        ||'        ELSE  ((12-TO_NUMBER(TO_CHAR(DATEOFJOINING,''MM'')))*'|| p_HoursforOnedaySTL || ') END STNDHRS '||CHR(10)
        ||' FROM (  '||CHR(10)
        ||'        select WORKERSERIAL, SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS, '||CHR(10) 
        ||'         SUM(PRV_STLHRS_CALC) PRV_STLHRS_CALC,SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS,  '||CHR(10) 
        ||'         SUM(STL_HRS) STL_HRS, SUM(STLENCASH_HRS) STLENCASH_HRS,'||CHR(10)
        ||'         (SUM(NVL(ATTN_HRS,0)) + (CASE WHEN SUM(STL_HRS) > 0 THEN CASE WHEN  (SUM(STL_HRS)- SUM(PRV_STLHRS_CALC)) > 0 THEN (SUM(STL_HRS)- SUM(PRV_STLHRS_CALC)) ELSE 0 END ELSE 0 END)) ELIGIBLE_HRS,  '||CHR(10) 
        ||'         ROUND(SUM(NVL(ATTN_HRS,0))/8,2) ATTN_DAYS,  '||CHR(10)
        ||'         ROUND(SUM(NVL(STL_HRS,0))/8,2) STL_DAYS,  '||CHR(10)
        ||'         ROUND(SUM(NVL(HOL_HRS,0))/8,2) HOL_DAYS,  '||CHR(10)
        ||'         ROUND((SUM(NVL(ATTN_HRS,0)) + (CASE WHEN  (SUM(STL_HRS)- SUM(PRV_STLHRS_CALC)) > 0 THEN (SUM(STL_HRS)- SUM(PRV_STLHRS_CALC)) ELSE 0 END ))/8,2) ELIGIBLE_DAYS  '||CHR(10)
        ||'         FROM (  '||CHR(10) 
        ||'                 SELECT WORKERSERIAL, /*FORTNIGHTSTARTDATE, */ 0 PREV_STLDAYS,  0 PRV_STLHRS, '||CHR(10)
        ||'                 0 PRV_STLHRS_CALC,SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(HOLIDAYHOURS,0)) HOL_HRS, '||CHR(10)
        ||'                 SUM(NVL(STLHOURS,0)+NVL(STLHOURS_ENCASH,0)) STL_HRS, SUM(NVL(STLHOURS_ENCASH,0)) STLENCASH_HRS, '||CHR(10)
        ||'                 SUM(NVL(ATTENDANCEHOURS,0)) + SUM(NVL(STLHOURS,0)+NVL(STLHOURS_ENCASH,0)) ELIGIBLE_HRS, '||CHR(10)
        ||'                 ROUND(SUM(NVL(ATTENDANCEHOURS,0))/8,2) ATTN_DAYS, '||CHR(10) 
        ||'                 ROUND(SUM(NVL(STLHOURS,0)+NVL(STLHOURS_ENCASH,0))/8,2) STL_DAYS, '||CHR(10)
        ||'                 ROUND(SUM(NVL(HOLIDAYHOURS,0))/8,2) HOL_DAYS, '||CHR(10)
        ||'                 round((SUM(NVL(ATTENDANCEHOURS,0) + NVL(STLHOURS,0)+NVL(STLHOURS_ENCASH,0)))/8,2) ELIGIBLE_DAYS '||CHR(10)
        ||'                 FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B '||CHR(10)  
        ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'                 AND A.FORTNIGHTSTARTDATE >= '''||lv_fn_stdt||''' '||CHR(10)
        ||'                 AND A.FORTNIGHTENDDATE <= '''||lv_Yr_endt||''' '||CHR(10)
        ||'                 AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE '||CHR(10)
        ||'                 AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE '||CHR(10)
        ||'                 AND NVL(B.STLAPPLICABLE,''N'')=''Y'' '||CHR(10)
        ||'                 GROUP BY A.WORKERSERIAL/*, A.FORTNIGHTSTARTDATE */'||CHR(10)
        ||'                 UNION ALL '||CHR(10)
        ||'                 SELECT WORKERSERIAL, /*FORTNIGHTSTARTDATE,*/ SUM(NVL(STLDAYS,0)+NVL(PREV_STLDAYS,0)) PREV_STLDAYS, SUM(NVL(STLHOURS,0)+NVL(PREV_STLHRS,0)) PRV_STLHRS, '||CHR(10)
        ||'                 SUM(NVL(PREV_STLHRS,0)) PRV_STLHRS_CALC  ,0 ATTN_HRS, 0 HOL_HRS, 0 STL_HRS, 0 STLENCASH_HRS, '||CHR(10) 
        ||'                 0 ELIGIBLE_HRS, 0 ATTN_DAYS, 0 STL_DAYS, 0 HOL_DAYS, 0 ELIGIBLE_DAYS '||CHR(10)
        ||'                 FROM WPSSTLTRANSACTION '||CHR(10)
        ||'                 WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'                 AND FORTNIGHTSTARTDATE >= '''||lv_fn_stdt||''' '||CHR(10)
        ||'                 AND FORTNIGHTENDDATE <= '''||lv_fn_endt||''' '||CHR(10)
        ||'                 GROUP BY WORKERSERIAL/*, FORTNIGHTSTARTDATE */'||CHR(10)
        ||'             ) GROUP BY WORKERSERIAL '||CHR(10)
        ||' ) A, WPSWORKERMAST B '||CHR(10)
        ||' WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' /*AND B.ACTIVE=''Y'' */'||CHR(10)
        ||' AND B.WORKERSERIAL = A.WORKERSERIAL '||CHR(10)    
        ||' GROUP BY B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE,B.DATEOFJOINING '||CHR(10)        
        ||' ) '||CHR(10);

 DBMS_OUTPUT.PUT_LINE (lv_Sql);
        
         lv_Sql := '          INSERT INTO WPSSTLENTITLEMENTCALCDETAILS '||CHR(10)
                 ||'          ('||CHR(10)
                 ||'            COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, CATEGORYCODE, FROMYEAR, YEARCODE,'||CHR(10)
                 ||'            FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DEPARTMENTCODE, SHIFTCODE,'||CHR(10)
                 ||'            ATTNHOURS, FESTHOURS, HOLIDAYHOURS, TOTALHOURS, STLHRSTAKEN, STLDAYSTAKEN,'||CHR(10)
                 ||'            STANDARDSTLHOURS, ADJUSTEDHOURS, APPLICABLESTANDHOURS, STLDAYS, STLHOURS, STLDAYS_BF,'||CHR(10)
                 ||'            TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIED, SYSROWID'||CHR(10)
                 ||'          )'||CHR(10)
                 ||'         SELECT B.COMPANYCODE, B.DIVISIONCODE, B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, '''||TO_CHAR(P_YEAR)||''' FROMYEAR,'''||lv_YearCode||''' YEARCODE,'||CHR(10)
                 ||'                '''||lv_Cur_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_Cur_fn_endt||''' FORTNIGHTENDDATE,B.DEPARTMENTCODE,''1'' SHIFTCODE,'||CHR(10)
                 ||'                SUM(ATTN_HRS)ATTN_HRS,0 FESTHOURS,SUM(HOL_HRS)HOL_HRS,SUM(ELIGIBLE_HRS)TOTALHOURS,SUM(STL_HRS)STL_HRS,SUM(STL_DAYS)STL_DAYS,'||CHR(10)
                 ||'                CASE WHEN B.DATEOFJOINING <= '''||lv_fn_stdt||''' THEN '||p_StandardSTLHours||''||CHR(10)
                 ||'                ELSE  ((12-TO_NUMBER(TO_CHAR( B.DATEOFJOINING,''MM'')))*'|| p_HoursforOnedaySTL || ') END STNDHRS ,0 ADJUSTEDHOURS,'||lv_ApplicableStndhrs||' APPLICABLESTANDHOURS,'||CHR(10)
                 ||'                SUM(STL_DAYS)STLDAYS,SUM(STL_HRS)STLHOURS,0 STLDAYS_BF,'||CHR(10)
                 ||'                ''ENTITLEMENT'' TRANSACTIONTYPE, ''ADD'' ADDLESS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED,'||CHR(10)
                 ||'                 B.WORKERSERIAL||''-''||TO_CHAR(SYSDATE,''YYYYMMDDHHMISS'') SYSROWID'||CHR(10)
                 ||'--                SUM(PREV_STLDAYS)PREV_STLDAYS,SUM(PRV_STLHRS)PRV_STLHRS,'||CHR(10)
                 ||'--                SUM(PRV_STLHRS_CALC)PRV_STLHRS_CALC'||CHR(10)
                 ||'--                ,SUM(STLENCASH_HRS)STLENCASH_HRS,'||CHR(10)
                 ||'--                SUM(ATTN_DAYS)ATTN_DAYS,SUM(HOL_DAYS)HOL_DAYS'||CHR(10)
                 ||'--               SUM(ELIGIBLE_HRS)ELIGIBLE_HRS,SUM(ELIGIBLE_DAYS)ELIGIBLE_DAYS'||CHR(10)
                 ||'                FROM('||CHR(10)
                 ||'                     SELECT WORKERSERIAL,  0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
                 ||'                     0 PRV_STLHRS_CALC,SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(HOLIDAYHOURS,0)) HOL_HRS,'||CHR(10)
                 ||'                     0 STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
                 ||'                     ROUND(SUM(NVL(ATTENDANCEHOURS,0))/8,2) ATTN_DAYS,'||CHR(10)
                 ||'                     0 STL_DAYS,'||CHR(10)
                 ||'                     ROUND(SUM(NVL(HOLIDAYHOURS,0))/8,2) HOL_DAYS,'||CHR(10)
                 ||'                     SUM(NVL(FEWORKINGDAYS,0)*8) ELIGIBLE_HRS,'||CHR(10)
                 ||'                     SUM(NVL(FEWORKINGDAYS,0)) ELIGIBLE_DAYS,'||CHR(10)
                 ||'                     SUM(NVL(FEWORKINGDAYS,0)) STLELIGIBLEDAYS'||CHR(10)
                 ||'                     FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B '||CHR(10)
                 ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
                 ||'                     AND A.FORTNIGHTSTARTDATE >= '''||lv_fn_stdt||''''||CHR(10)
                 ||'                     AND A.FORTNIGHTENDDATE <= '''||lv_Yr_endt||''''||CHR(10)
                 ||'                     AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE '||CHR(10)
                 ||'                     AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE'||CHR(10)
                 ||'                     AND NVL(B.STLAPPLICABLE,''N'')=''Y'''||CHR(10)
                 ||'                     GROUP BY A.WORKERSERIAL'||CHR(10)
                 ||'                     UNION ALL'||CHR(10)
                 ||'                     SELECT WORKERSERIAL,  0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
                 ||'                     0 PRV_STLHRS_CALC,0 ATTN_HRS, 0 HOL_HRS,'||CHR(10)
                 ||'                     SUM(NVL(STLHOURS,0)) STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
                 ||'                     0 ATTN_DAYS,'||CHR(10)
                 ||'                     SUM(NVL(STLDAYS,0)) STL_DAYS,'||CHR(10)
                 ||'                     0 HOL_DAYS,'||CHR(10)
                 ||'                     SUM(NVL(STLHOURS,0)) ELIGIBLE_HRS,'||CHR(10)
                 ||'                     SUM(NVL(STLDAYS,0)) ELIGIBLE_DAYS,'||CHR(10)
                 ||'                     0 STLELIGIBLEDAYS'||CHR(10)
                 ||'                     FROM WPSSTLWAGESDETAILS A, WPSWORKERCATEGORYMAST B'||CHR(10)
                 ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
                 ||'                     AND A.PAYMENTDATE >= '''||lv_fn_stdt||''''||CHR(10)
                 ||'                     AND A.PAYMENTDATE <= '''||lv_Yr_endt||''''||CHR(10)
                 ||'                     AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE'||CHR(10)
                 ||'                     AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE'||CHR(10)
                 ||'                     AND NVL(B.STLAPPLICABLE,''N'')=''Y'''||CHR(10)
                 ||'                     GROUP BY A.WORKERSERIAL'||CHR(10)
                 ||'                )A, WPSWORKERMAST B'||CHR(10)
                 ||'                WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
                 ||'                AND B.WORKERSERIAL = A.WORKERSERIAL'||CHR(10)
                 ||'                GROUP BY B.COMPANYCODE, B.DIVISIONCODE, B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE, B.DATEOFJOINING'||CHR(10)
                 ||'                HAVING (SUM(ELIGIBLE_DAYS)+'||p_AdjustmentSTLHours||')>('||lv_StndSTLDays||')'||CHR(10);
        
        
         
     DBMS_OUTPUT.PUT_LINE (lv_Sql);
       
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
          
     execute immediate lv_Sql;
     
     lv_Sql := ' INSERT INTO WPSSTLTRANSACTION_0912  '||chr(10)
             ||'  (COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, FROMYEAR, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'  STLDAYS, STLHOURS, TRANSACTIONTYPE, ADDLESS, USERNAME, PREV_STLHRS, PREV_STLDAYS) '||chr(10)
             ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE,WORKERSERIAL,TOKENNO,'''||P_YEAR||''','''||lv_YearCode||''' YEARCODE, '||chr(10) 
             ||'         FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'        /*  STLDAYS, STLDAYS * 8 STLHOURS,*/ '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END STLDAYS, '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END * 8 STLHOURS, '||chr(10) 
             ||'        ''ENTITLEMENT'' TRANSACTIONTYPE,''ADD'' ADDLESS, '''||P_USER||''', '||chr(10)
             ||'        CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN 0 ELSE STLDAYS_BF END *8 STLHRS_BF, '||chr(10)
             ||'        CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN 0 ELSE STLDAYS_BF END STLDAYS_BF '||chr(10)
             ||'        /*STLDAYS_BF * 8, STLDAYS_BF */ '||chr(10)
             ||'    FROM WPSSTLENTITLEMENTCALCDETAILS '||CHR(10)
             ||'    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
             ||'      AND FORTNIGHTSTARTDATE = '''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_Cur_fn_endt||''' '||chr(10)
             ||'      AND ( NVL(STLDAYS,0) > 0 OR NVL(STLDAYS_BF,0) <> 0) '||CHR(10); 
             --||'      AND (NVL(STLDAYS,0)+NVL(STLDAYS_BF,0)) > 0 '||chr(10);
     dbms_output.put_line(lv_Sql);
     lv_Remarks := 'WPSSTLTRANSACTION INSERT';
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
     execute immediate lv_Sql;
    COMMIT;
    
    
    
EXCEPTION 
    WHEN OTHERS THEN
     lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
    insert into WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values( lv_ProcName,lv_sqlerrm, sysdate, lv_Sql, lv_ParValues,lv_fn_stdt,lv_fn_endt, lv_Remarks);
 COMMIT;
        
end;
/


DROP PROCEDURE PRCWPS_STLENT_PROCESS_YRWISE;

CREATE OR REPLACE PROCEDURE PRCWPS_STLENT_PROCESS_YRWISE( P_COMPCODE varchar2, 
                                                       P_DIVCODE varchar2, 
                                                       P_YEAR varchar2, 
                                                       P_USER varchar2,
                                                       p_StandardSTLHours number,
                                                       p_AdjustmentSTLHours number default 0,
                                                       p_Workerserial varchar2 default null,
                                                       p_StandardSTLHours1 number default 1920,
                                                       p_HoursforOnedaySTL number default 160
                                                   )
as
lv_ProcName             varchar2(30):= 'prcWPS_STLENT_PROCESS_YRWISE';
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '';
lv_Remarks              varchar2(1000) := '';
lv_ParValues            varchar2(500) := '';
lv_SqlErrm              varchar2(500) := '';
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;
lv_PrevYear             varchar2(4); --2016
lv_B4PrevYear           varchar2(4); --2015
lv_PrevB4PrevYear       varchar2(4); --2014
lv_fn_stdt              date;
lv_fn_endt              date;
lv_Cur_fn_stdt              date;
lv_Cur_fn_endt              date;

lv_Yr_endt              date;
lv_YearCode             varchar2(10);
lv_Sql                  varchar2(10000);
lv_ApplicableStndhrs    number :=1920;
lv_ApplicableStndDays    number :=240;
lv_StndSTLDays          number :=Round(p_StandardSTLHours/8,0);
lv_AdjSTLDays           number :=0;
lv_MaxSTLDays           number :=15; -- added on 28/01/2021
lv_STLTakenConsiderYear varchar2(4) := '0';      


--EXEC  prcWPS_STLENT_PROCESS_YRWISE('NJ0001','0002','2020','SWT',1920, 0,'', 160 )
begin
    ---- FOLLOWING POINTS CONSIDER IN THIS PROCEDURE FOR STL ENTILEMENT CALCULATION --------
    ---- 1. Previous year STL consider in the same year in column prev. year STL 
    ---- 2. When wokrer join in the current calendar year then STL consider working days 20 in enverymonth.
    
     dbms_output.put_line(P_YEAR);
    
    if to_number(P_YEAR) < 2021 then
    
        dbms_output.put_line(P_YEAR);
    
        lv_error_remark := 'Validation Failure : [STL Entitlement not applicable for the year '||P_YEAR||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
--    return;
    
begin
    lv_result:='#SUCCESS#';
    lv_Remarks := 'STLENTITLE PROCESS';
    lv_PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-1;
    lv_B4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-2;
    lv_PrevB4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-3;
    
    lv_STLTakenConsiderYear := lv_B4PrevYear;
    
    lv_fn_stdt := to_date('01/01/'||lv_PrevYear,'DD/MM/YYYY');
    lv_fn_endt := to_date('15/01/'||lv_PrevYear,'DD/MM/YYYY');
    lv_Yr_endt := to_date('31/12/'||lv_PrevYear,'DD/MM/YYYY');
    
--    lv_fn_stdt := to_date('01/01/'||P_YEAR,'DD/MM/YYYY');
--    lv_fn_endt := to_date('15/01/'||P_YEAR,'DD/MM/YYYY');
--    lv_Yr_endt := to_date('31/12/'||P_YEAR,'DD/MM/YYYY');
    
    lv_Cur_fn_stdt := to_date('01/01/'||TO_CHAR(P_YEAR),'DD/MM/YYYY');
    lv_Cur_fn_endt := to_date('15/01/'||TO_CHAR(P_YEAR),'DD/MM/YYYY');
       
    lv_ApplicableStndhrs := p_StandardSTLHours - p_AdjustmentSTLHours;
    lv_ApplicableStndDays := (p_StandardSTLHours/8) - p_AdjustmentSTLHours;
    
    lv_ParValues := 'YEAR - '||P_YEAR||',STANDARD HRS - '||p_StandardSTLHours||', Adj Hrs - '||p_AdjustmentSTLHours;
        
    SELECT YEARCODE INTO lv_YearCode 
    FROM FINANCIALYEAR 
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
    AND STARTDATE <= lv_fn_stdt AND ENDDATE >= lv_fn_stdt;

    lv_YearCode := P_YEAR;
    
    lv_sql := 'DELETE FROM WPSSTLTRANSACTION WHERE TRANSACTIONTYPE <>''OPENING'' AND FROMYEAR='||lv_PrevYear||' '||chr(10);
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    execute immediate lv_Sql;
        

    lv_Sql := 'DELETE FROM WPSSTLENTITLEMENTCALCDETAILS '||chr(10) 
        ||' WHERE FORTNIGHTSTARTDATE='''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE='''||lv_Cur_fn_endt||''' '||chr(10);
    
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    execute immediate lv_Sql;


    lv_Remarks := 'STL ENTITLEMENT CALCULATION PROCESS'; 
--    DBMS_OUTPUT.PUT_LINE ('1_1');


    lv_Sql := 'INSERT INTO WPSSTLENTITLEMENTCALCDETAILS'||CHR(10)
            ||' ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, CATEGORYCODE, FROMYEAR, YEARCODE,'||CHR(10)
            ||' FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DEPARTMENTCODE, SHIFTCODE,'||CHR(10)
            ||' ATTNHOURS, FESTHOURS, HOLIDAYHOURS, TOTALHOURS, STLHRSTAKEN, STLDAYSTAKEN,'||CHR(10)
            ||' STANDARDSTLHOURS, ADJUSTEDHOURS, APPLICABLESTANDHOURS, STLDAYS, STLHOURS, STLDAYS_BF,'||CHR(10)
            ||' TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIED, SYSROWID,GRACEDAYS, ATTNDAYS '||CHR(10)
            ||' )'||CHR(10)
            ||' SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, '''||lv_PrevYear||'''  FROMYEAR, '''||lv_YearCode||''' YEARCODE,'||CHR(10)
            ||' '''||lv_Cur_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_Cur_fn_endt||''' FORTNIGHTENDDATE, DEPARTMENTCODE, ''1'' SHIFTCODE,'||CHR(10)
            ||' ATTN_HRS ATTNHOURS, 0 FESTHOURS, HOL_HRS HOLIDAYHOURS, (ELIGIBLE_HRS) TOTALHOURS, STL_HRS, STL_DAYS STLDAYSTAKEN,'||CHR(10)
            ||' STNDDAYS*8 STANDARDSTLHOURS, 0 ADJUSTEDHOURS, '||lv_ApplicableStndhrs||' APPLICABLESTANDHOURS, CASE WHEN ENT_DAYS > '||lv_MaxSTLDays||' THEN '||lv_MaxSTLDays||' ELSE ENT_DAYS END STLDAYS, CASE WHEN ENT_DAYS > '||lv_MaxSTLDays||' THEN '||lv_MaxSTLDays||'*8 ELSE ENT_DAYS*8 END STLHOURS, PREV_ENT_STLDAYS STLDAYS_BF,'||CHR(10)
            ||' ''ENTITLEMENT'' TRANSACTIONTYPE, ''ADD'' ADDLESS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, WORKERSERIAL||''-''||TO_CHAR(SYSDATE,''YYYYMMDDHHMISS'') SYSROWID,GRACEDAYS , ATTN_DAYS'||CHR(10)
            ||' FROM ('||CHR(10)
            ||'SELECT'||CHR(10)
            ||' B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE, B.TERMINATIONDATE,'||CHR(10)
            ||' SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS,'||CHR(10)
            ||' SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS, CASE WHEN SUM(STL_HRS) > 0 THEN case when (SUM(STL_HRS) - SUM(PRV_STLHRS_CALC)) > 0 then SUM(STL_HRS) - SUM(PRV_STLHRS_CALC) else 0 end ELSE 0 END STL_HRS,'||CHR(10)
            ||' SUM(ELIGIBLE_HRS) ELIGIBLE_HRS, SUM(ATTN_DAYS) ATTN_DAYS, SUM(STL_DAYS) STL_DAYS, SUM(HOL_DAYS) HOL_DAYS,'||CHR(10)
            ||' SUM(ELIGIBLE_DAYS) ELIGIBLE_DAYS, SUM(GRACEDAYS)  GRACEDAYS, '||CHR(10)
            ||' 0 PREV_ENT_STLDAYS,'||CHR(10)
            ||'     CASE WHEN B.TERMINATIONDATE IS  NULL THEN'||CHR(10)
            ||'         CASE WHEN ROUND(SUM(ELIGIBLE_DAYS+NVL(GRACEDAYS,0)),0) >= '||lv_ApplicableStndDays||' THEN ROUND(SUM(ATTN_DAYS)/20,0) ELSE 0 END'||CHR(10)
            ||'          WHEN B.TERMINATIONDATE BETWEEN '''||lv_fn_stdt||'''  AND '''||lv_Yr_endt||''' AND SUM(ELIGIBLE_DAYS+NVL(GRACEDAYS,0)) >= '||lv_ApplicableStndDays||'-((TO_NUMBER(TO_CHAR(TERMINATIONDATE,''MM''))-TO_NUMBER(TO_CHAR(TO_DATE('''||lv_fn_stdt||''',''DD/MM/YYYY''),''MM'')-1))*'||  round(p_HoursforOnedaySTL/8) || ')  THEN'||CHR(10)
            ||'          ROUND(SUM(ATTN_DAYS)/20,0)'||CHR(10)
            ||'          ELSE 0'||CHR(10)
            ||'     END'||CHR(10)
            ||'     ENT_DAYS'||CHR(10)
            ||' , CASE WHEN B.TERMINATIONDATE IS  NULL  THEN '||lv_ApplicableStndDays||''||CHR(10)
            ||'        WHEN B.TERMINATIONDATE BETWEEN '''||lv_fn_stdt||'''  AND '''||lv_Yr_endt||''' THEN'||CHR(10)
            ||'        ((TO_NUMBER(TO_CHAR(TERMINATIONDATE,''MM''))-TO_NUMBER(TO_CHAR(TO_DATE('''||lv_fn_stdt||''',''DD/MM/YYYY''),''MM'')-1))*'||  round(p_HoursforOnedaySTL/8,2) || ')'||CHR(10)
            ||'        ELSE 0 END'||CHR(10)
            ||'        STNDDAYS'||CHR(10)
            ||' FROM ('||CHR(10)
            ||'         select WORKERSERIAL, SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS,'||CHR(10)
            ||'         SUM(PRV_STLHRS_CALC) PRV_STLHRS_CALC,SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS,'||CHR(10)
            ||'         SUM(STL_HRS) STL_HRS, SUM(STLENCASH_HRS) STLENCASH_HRS,'||CHR(10)
            ||'         SUM(ELIGIBLE_HRS) ELIGIBLE_HRS,'||CHR(10)
            ||'         SUM(FEWORKINGDAYS) ATTN_DAYS,'||CHR(10)
            ||'         ROUND(SUM(NVL(STL_HRS,0))/8,2) STL_DAYS,'||CHR(10)
            ||'         ROUND(SUM(NVL(HOL_HRS,0))/8,2) HOL_DAYS,'||CHR(10)
            ||'         SUM(ELIGIBLE_DAYS) ELIGIBLE_DAYS ,'||CHR(10)
            ||'         SUM(FEWORKINGDAYS) FEWORKINGDAYS'||CHR(10)
            ||'         FROM ('||CHR(10)
            ||'                 SELECT WORKERSERIAL,  0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
            ||'                 0 PRV_STLHRS_CALC,SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(HOLIDAYHOURS,0)) HOL_HRS,'||CHR(10)
            ||'                 0 STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
            ||'                 SUM(NVL(FEWORKINGDAYS*8,0))  ELIGIBLE_HRS,'||CHR(10)
            ||'                 ROUND(SUM(NVL(ATTENDANCEHOURS,0))/8,2) ATTN_DAYS,'||CHR(10)
            ||'                 0 STL_DAYS,'||CHR(10)
            ||'                 ROUND(SUM(NVL(HOLIDAYHOURS,0))/8,2) HOL_DAYS,'||CHR(10)
            ||'                 SUM(NVL(ATN_DAYS,0)) ELIGIBLE_DAYS,'||CHR(10)
            ||'                 SUM(NVL(ATN_DAYS,0)) FEWORKINGDAYS'||CHR(10)
            ||'                 FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B'||CHR(10)
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||'                 AND A.FORTNIGHTSTARTDATE >= '''||lv_fn_stdt||''''||CHR(10)
            ||'                 AND A.FORTNIGHTENDDATE <= '''||lv_Yr_endt||''''||CHR(10)
            ||'                 AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE'||CHR(10)
            ||'                 AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE'||CHR(10)
            ||'                 AND NVL(B.STLAPPLICABLE,''N'')=''Y'''||CHR(10)
            ||'                 GROUP BY A.WORKERSERIAL'||CHR(10)
            ||'                 UNION ALL'||CHR(10)
            ||'                 SELECT WORKERSERIAL, /*FORTNIGHTSTARTDATE, */ 0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
            ||'                 0 PRV_STLHRS_CALC,0 ATTN_HRS, 0 HOL_HRS,'||CHR(10)
            ||'                 SUM(NVL(LEAVEHOURS,0)) STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
            ||'                 SUM(NVL(LEAVEHOURS,0)) ELIGIBLE_HRS,'||CHR(10)
            ||'                 0 ATTN_DAYS,'||CHR(10)
            ||'                  SUM(NVL(LEAVEDAYS,0)) STL_DAYS,'||CHR(10)
            ||'                 0 HOL_DAYS,'||CHR(10)
            ||'                 SUM(NVL(LEAVEDAYS,0)) ELIGIBLE_DAYS ,'||CHR(10)
            ||'                 0 FEWORKINGDAYS'||CHR(10)
            ||'                 FROM WPSSTLENTRYDETAILS A '||chr(10) 
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||'                   AND A.PAYMENTDATE >= '''||lv_fn_stdt||''''||CHR(10)
            ||'                   AND A.PAYMENTDATE <= '''||lv_Yr_endt||''''||CHR(10)
            ||'                   AND A.YEAR='''||lv_STLTakenConsiderYear||''' AND NVL(ISSANCTIONED,''N'')=''Y'' '||chr(10)
            ||'                 GROUP BY A.WORKERSERIAL'||CHR(10)
            ||'             )'||CHR(10)
            ||'              GROUP BY WORKERSERIAL'||CHR(10)
            ||' ) A, WPSWORKERMAST B, WPSWORKERSTLGRACEPERIODDAYS C'||CHR(10)
            ||' WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||' AND B.WORKERSERIAL = A.WORKERSERIAL AND B.WORKERSERIAL = C.WORKERSERIAL(+)'||CHR(10)
            ||' GROUP BY B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE,B.TERMINATIONDATE'||CHR(10)
            ||' ) WHERE NVL(ATTN_DAYS,0) > 0'||CHR(10);
 DBMS_OUTPUT.PUT_LINE (lv_Sql);
        
        
       
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
          
     execute immediate lv_Sql;
     
     lv_Sql := ' INSERT INTO WPSSTLTRANSACTION'||chr(10)
             ||'  (COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, FROMYEAR, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'  STLDAYS, STLHOURS, TRANSACTIONTYPE, ADDLESS, USERNAME, PREV_STLHRS, PREV_STLDAYS,SYSROWID) '||chr(10)
             ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE,WORKERSERIAL,TOKENNO,'''||lv_PrevYear||''','''||lv_YearCode||''' YEARCODE, '||chr(10) 
             ||'         FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'        /*  STLDAYS, STLDAYS * 8 STLHOURS,*/ '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END STLDAYS, '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END * 8 STLHOURS, '||chr(10) 
             ||'        ''ENT'' TRANSACTIONTYPE,''ADD'' ADDLESS, '''||P_USER||''', '||chr(10)
             ||'        0 STLHRS_BF, '||chr(10)
             ||'        0 STLDAYS_BF '||chr(10)
             ||'        /*STLDAYS_BF * 8, STLDAYS_BF */ '||chr(10)
             ||'        , FN_GENERATE_SYSROWID  SYSROWID'||chr(10)
             ||'    FROM WPSSTLENTITLEMENTCALCDETAILS '||CHR(10)
             ||'    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
             ||'      AND FORTNIGHTSTARTDATE = '''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_Cur_fn_endt||''' '||chr(10)
             ||'      AND NVL(STLDAYS,0) > 0 '||CHR(10); 
             --||'      AND (NVL(STLDAYS,0)+NVL(STLDAYS_BF,0)) > 0 '||chr(10);
     dbms_output.put_line(lv_Sql);
     lv_Remarks := 'WPSSTLTRANSACTION INSERT';
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
     execute immediate lv_Sql;
    COMMIT;
    
    
    
EXCEPTION 
    WHEN OTHERS THEN
     lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
    insert into WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values( lv_ProcName,lv_sqlerrm, sysdate, lv_Sql, lv_ParValues,lv_fn_stdt,lv_fn_endt, lv_Remarks);
 COMMIT;
 end;
        
end;
/


DROP PROCEDURE PRCWPS_STLENT_PROCESS_YRWISE1;

CREATE OR REPLACE PROCEDURE PRCWPS_STLENT_PROCESS_YRWISE1( P_COMPCODE varchar2, 
                                                       P_DIVCODE varchar2, 
                                                       P_YEAR varchar2, 
                                                       P_USER varchar2,
                                                       p_StandardSTLHours number,
                                                       p_AdjustmentSTLHours number default 0,
                                                       p_Workerserial varchar2 default null,
                                                       p_HoursforOnedaySTL number default 160
                                                   )
as
lv_ProcName             varchar2(30):= 'prcWPS_STLENT_PROCESS_YRWISE';
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '';
lv_Remarks              varchar2(1000) := '';
lv_ParValues            varchar2(500) := '';
lv_SqlErrm              varchar2(500) := '';
lv_FNStartDate          date;
lv_FNEndDate            date;
lv_Cnt                  number:=0;
lv_PrevYear             varchar2(4); --2016
lv_B4PrevYear           varchar2(4); --2015
lv_PrevB4PrevYear       varchar2(4); --2014
lv_fn_stdt              date;
lv_fn_endt              date;
lv_Cur_fn_stdt              date;
lv_Cur_fn_endt              date;

lv_Yr_endt              date;
lv_YearCode             varchar2(10);
lv_Sql                  varchar2(10000);
lv_ApplicableStndhrs    number :=1920;
lv_StndSTLDays          number :=Round(p_StandardSTLHours/8,0);
lv_AdjSTLDays           number :=0;

--EXEC  prcWPS_STLENT_PROCESS_YRWISE('NJ0001','0002','2020','SWT',1920, 0,'', 160 )
begin
    ---- FOLLOWING POINTS CONSIDER IN THIS PROCEDURE FOR STL ENTILEMENT CALCULATION --------
    ---- 1. Previous year STL consider in the same year in column prev. year STL 
    ---- 2. When wokrer join in the current calendar year then STL consider working days 20 in enverymonth.
    
    lv_result:='#SUCCESS#';
    lv_Remarks := 'STLENTITLE PROCESS';
    lv_PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-1;
    lv_B4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-2;
    lv_PrevB4PrevYear := substr(P_YEAR,1,2)|| to_number(substr(P_YEAR,3))-3;
    
    lv_fn_stdt := to_date('01/01/'||P_YEAR,'DD/MM/YYYY');
    lv_fn_endt := to_date('15/01/'||P_YEAR,'DD/MM/YYYY');
    lv_Yr_endt := to_date('31/12/'||P_YEAR,'DD/MM/YYYY');
    
    lv_Cur_fn_stdt := to_date('01/01/'||TO_CHAR(P_YEAR+1),'DD/MM/YYYY');
    lv_Cur_fn_endt := to_date('15/01/'||TO_CHAR(P_YEAR+1),'DD/MM/YYYY');
       
    lv_ApplicableStndhrs := p_StandardSTLHours - p_AdjustmentSTLHours;
    
    lv_ParValues := 'YEAR - '||P_YEAR||',STANDARD HRS - '||p_StandardSTLHours||', Adj Hrs - '||p_AdjustmentSTLHours;
        
    SELECT YEARCODE INTO lv_YearCode 
    FROM FINANCIALYEAR 
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
    AND STARTDATE <= lv_fn_stdt AND ENDDATE >= lv_fn_stdt;

    lv_sql := 'DELETE FROM WPSSTLTRANSACTION WHERE TRANSACTIONTYPE <>''OPENING'' AND FROMYEAR='||P_YEAR||' '||chr(10);
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    execute immediate lv_Sql;
        

    lv_Sql := 'DELETE FROM WPSSTLENTITLEMENTCALCDETAILS '||chr(10) 
        ||' WHERE FORTNIGHTSTARTDATE='''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE='''||lv_Cur_fn_endt||''' '||chr(10);
    
--    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    
    execute immediate lv_Sql;


    lv_Remarks := 'STL ENTITLEMENT CALCULATION PROCESS'; 
--    DBMS_OUTPUT.PUT_LINE ('1_1');


    lv_Sql := 'INSERT INTO WPSSTLENTITLEMENTCALCDETAILS'||CHR(10)
            ||' ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, CATEGORYCODE, FROMYEAR, YEARCODE,'||CHR(10)
            ||' FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DEPARTMENTCODE, SHIFTCODE,'||CHR(10)
            ||' ATTNHOURS, FESTHOURS, HOLIDAYHOURS, TOTALHOURS, STLHRSTAKEN, STLDAYSTAKEN,'||CHR(10)
            ||' STANDARDSTLHOURS, ADJUSTEDHOURS, APPLICABLESTANDHOURS, STLDAYS, STLHOURS, STLDAYS_BF,'||CHR(10)
            ||' TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIED, SYSROWID'||CHR(10)
            ||' )'||CHR(10)
            ||' SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, '''||TO_CHAR(P_YEAR)||'''  FROMYEAR, '''||lv_YearCode||''' YEARCODE,'||CHR(10)
            ||' '''||lv_Cur_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_Cur_fn_endt||''' FORTNIGHTENDDATE, DEPARTMENTCODE, ''1'' SHIFTCODE,'||CHR(10)
            ||' ATTN_HRS ATTNHOURS, 0 FESTHOURS, HOL_HRS HOLIDAYHOURS, (ELIGIBLE_HRS) TOTALHOURS, STL_HRS, STL_DAYS STLDAYSTAKEN,'||CHR(10)
            ||' STNDHRS STANDARDSTLHOURS, 0 ADJUSTEDHOURS, '||lv_ApplicableStndhrs||' APPLICABLESTANDHOURS, ENT_DAYS STLDAYS, ENT_DAYS*8 STLHOURS, PREV_ENT_STLDAYS STLDAYS_BF,'||CHR(10)
            ||' ''ENTITLEMENT'' TRANSACTIONTYPE, ''ADD'' ADDLESS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, WORKERSERIAL||''-''||TO_CHAR(SYSDATE,''YYYYMMDDHHMISS'') SYSROWID'||CHR(10)
            ||' FROM ('||CHR(10)
            ||'SELECT'||CHR(10)
            ||' B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE, B.TERMINATIONDATE,'||CHR(10)
            ||' SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS,'||CHR(10)
            ||' SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS, CASE WHEN SUM(STL_HRS) > 0 THEN case when (SUM(STL_HRS) - SUM(PRV_STLHRS_CALC)) > 0 then SUM(STL_HRS) - SUM(PRV_STLHRS_CALC) else 0 end ELSE 0 END STL_HRS,'||CHR(10)
            ||' SUM(ELIGIBLE_HRS) ELIGIBLE_HRS, SUM(ATTN_DAYS) ATTN_DAYS, SUM(STL_DAYS) STL_DAYS, SUM(HOL_DAYS) HOL_DAYS,'||CHR(10)
            ||' SUM(ELIGIBLE_DAYS) ELIGIBLE_DAYS,'||CHR(10)
            ||' 0 PREV_ENT_STLDAYS,'||CHR(10)
            ||'     CASE WHEN B.TERMINATIONDATE IS  NULL THEN'||CHR(10)
            ||'         CASE WHEN SUM(ELIGIBLE_HRS) >='||lv_ApplicableStndhrs||' THEN ROUND(SUM(FEWORKINGDAYS)/20,0) ELSE 0 END'||CHR(10)
            ||'          WHEN B.TERMINATIONDATE BETWEEN '''||lv_fn_stdt||'''  AND '''||lv_Yr_endt||''' AND SUM(ELIGIBLE_HRS) >= '||lv_ApplicableStndhrs||'-((TO_NUMBER(TO_CHAR(TERMINATIONDATE,''MM''))-TO_NUMBER(TO_CHAR(TO_DATE('''||lv_fn_stdt||''',''DD/MM/YYYY''),''MM'')-1))*'||  p_HoursforOnedaySTL || ')  THEN'||CHR(10)
            ||'          ROUND(SUM(FEWORKINGDAYS)/20,0)'||CHR(10)
            ||'          ELSE 0'||CHR(10)
            ||'     END'||CHR(10)
            ||'     ENT_DAYS'||CHR(10)
            ||' , CASE WHEN B.TERMINATIONDATE IS  NULL  THEN '||lv_ApplicableStndhrs||''||CHR(10)
            ||'        WHEN B.TERMINATIONDATE BETWEEN '''||lv_fn_stdt||'''  AND '''||lv_Yr_endt||''' THEN'||CHR(10)
            ||'        ((TO_NUMBER(TO_CHAR(TERMINATIONDATE,''MM''))-TO_NUMBER(TO_CHAR(TO_DATE('''||lv_fn_stdt||''',''DD/MM/YYYY''),''MM'')-1))*'||  p_HoursforOnedaySTL || ')'||CHR(10)
            ||'        ELSE 0 END'||CHR(10)
            ||'        STNDHRS'||CHR(10)
            ||' FROM ('||CHR(10)
            ||'         select WORKERSERIAL, SUM(PREV_STLDAYS) PREV_STLDAYS, SUM(PRV_STLHRS) PRV_STLHRS,'||CHR(10)
            ||'         SUM(PRV_STLHRS_CALC) PRV_STLHRS_CALC,SUM(ATTN_HRS) ATTN_HRS, SUM(HOL_HRS) HOL_HRS,'||CHR(10)
            ||'         SUM(STL_HRS) STL_HRS, SUM(STLENCASH_HRS) STLENCASH_HRS,'||CHR(10)
            ||'         SUM(ELIGIBLE_HRS) ELIGIBLE_HRS,'||CHR(10)
            ||'         ROUND(SUM(NVL(ATTN_HRS,0))/8,2) ATTN_DAYS,'||CHR(10)
            ||'         ROUND(SUM(NVL(STL_HRS,0))/8,2) STL_DAYS,'||CHR(10)
            ||'         ROUND(SUM(NVL(HOL_HRS,0))/8,2) HOL_DAYS,'||CHR(10)
            ||'         SUM(ELIGIBLE_DAYS) ELIGIBLE_DAYS ,'||CHR(10)
            ||'         SUM(FEWORKINGDAYS)FEWORKINGDAYS'||CHR(10)
            ||'         FROM ('||CHR(10)
            ||'                 SELECT WORKERSERIAL,  0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
            ||'                 0 PRV_STLHRS_CALC,SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(HOLIDAYHOURS,0)) HOL_HRS,'||CHR(10)
            ||'                 0 STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
            ||'                 SUM(NVL(FEWORKINGDAYS*8,0))  ELIGIBLE_HRS,'||CHR(10)
            ||'                 ROUND(SUM(NVL(ATTENDANCEHOURS,0))/8,2) ATTN_DAYS,'||CHR(10)
            ||'                 0 STL_DAYS,'||CHR(10)
            ||'                 ROUND(SUM(NVL(HOLIDAYHOURS,0))/8,2) HOL_DAYS,'||CHR(10)
            ||'                 SUM(NVL(FEWORKINGDAYS,0)) ELIGIBLE_DAYS,'||CHR(10)
            ||'                 SUM(NVL(FEWORKINGDAYS,0)) FEWORKINGDAYS'||CHR(10)
            ||'                 FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B'||CHR(10)
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||'                 AND A.FORTNIGHTSTARTDATE >= '''||lv_fn_stdt||''''||CHR(10)
            ||'                 AND A.FORTNIGHTENDDATE <= '''||lv_Yr_endt||''''||CHR(10)
            ||'                 AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE'||CHR(10)
            ||'                 AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE'||CHR(10)
            ||'                 AND NVL(B.STLAPPLICABLE,''N'')=''Y'''||CHR(10)
            ||'                 GROUP BY A.WORKERSERIAL'||CHR(10)
            ||'                 UNION ALL'||CHR(10)
            ||'                 SELECT WORKERSERIAL, /*FORTNIGHTSTARTDATE, */ 0 PREV_STLDAYS,  0 PRV_STLHRS,'||CHR(10)
            ||'                 0 PRV_STLHRS_CALC,0 ATTN_HRS, 0 HOL_HRS,'||CHR(10)
            ||'                 SUM(NVL(STLHOURS,0)) STL_HRS, 0 STLENCASH_HRS,'||CHR(10)
            ||'                 SUM(NVL(STLHOURS,0)) ELIGIBLE_HRS,'||CHR(10)
            ||'                 0 ATTN_DAYS,'||CHR(10)
            ||'                  SUM(NVL(STLDAYS,0)) STL_DAYS,'||CHR(10)
            ||'                 0 HOL_DAYS,'||CHR(10)
            ||'                 SUM(NVL(STLDAYS,0)) ELIGIBLE_DAYS ,'||CHR(10)
            ||'                 0 FEWORKINGDAYS'||CHR(10)
            ||'                 FROM WPSSTLWAGESDETAILS A, WPSWORKERCATEGORYMAST B'||CHR(10)
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||'                 AND A.PAYMENTDATE >= '''||lv_fn_stdt||''''||CHR(10)
            ||'                 AND A.PAYMENTDATE <= '''||lv_Yr_endt||''''||CHR(10)
            ||'                 AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE'||CHR(10)
            ||'                 AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE'||CHR(10)
            ||'                 AND NVL(B.STLAPPLICABLE,''N'')=''Y'''||CHR(10)
            ||'                 GROUP BY A.WORKERSERIAL'||CHR(10)
            ||'             )'||CHR(10)
            ||'              GROUP BY WORKERSERIAL'||CHR(10)
            ||' ) A, WPSWORKERMAST B'||CHR(10)
            ||' WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
            ||' AND B.WORKERSERIAL = A.WORKERSERIAL'||CHR(10)
            ||' GROUP BY B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, B.DEPARTMENTCODE,B.TERMINATIONDATE'||CHR(10)
            ||' )'||CHR(10);
 DBMS_OUTPUT.PUT_LINE (lv_Sql);
        
        
       
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
          
--     execute immediate lv_Sql;
     
     lv_Sql := ' INSERT INTO WPSSTLTRANSACTION'||chr(10)
             ||'  (COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, FROMYEAR, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'  STLDAYS, STLHOURS, TRANSACTIONTYPE, ADDLESS, USERNAME, PREV_STLHRS, PREV_STLDAYS) '||chr(10)
             ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE,WORKERSERIAL,TOKENNO,'''||P_YEAR||''','''||lv_YearCode||''' YEARCODE, '||chr(10) 
             ||'         FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
             ||'        /*  STLDAYS, STLDAYS * 8 STLHOURS,*/ '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END STLDAYS, '||chr(10)
             ||'         CASE WHEN STLDAYS > 0 AND STLDAYS_BF < 0 THEN STLDAYS+STLDAYS_BF ELSE STLDAYS END * 8 STLHOURS, '||chr(10) 
             ||'        ''ENTITLEMENT'' TRANSACTIONTYPE,''ADD'' ADDLESS, '''||P_USER||''', '||chr(10)
             ||'        0 STLHRS_BF, '||chr(10)
             ||'        0 STLDAYS_BF '||chr(10)
             ||'        /*STLDAYS_BF * 8, STLDAYS_BF */ '||chr(10)
             ||'    FROM WPSSTLENTITLEMENTCALCDETAILS '||CHR(10)
             ||'    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
             ||'      AND FORTNIGHTSTARTDATE = '''||lv_Cur_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_Cur_fn_endt||''' '||chr(10)
             ||'      AND ( NVL(STLDAYS,0) > 0 OR NVL(STLDAYS_BF,0) <> 0) '||CHR(10); 
             --||'      AND (NVL(STLDAYS,0)+NVL(STLDAYS_BF,0)) > 0 '||chr(10);
     dbms_output.put_line(lv_Sql);
     lv_Remarks := 'WPSSTLTRANSACTION INSERT';
     INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
        VALUES (lv_ProcName, null, sysdate, lv_Sql, lv_ParValues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
--     execute immediate lv_Sql;
    COMMIT;
    
    
    
EXCEPTION 
    WHEN OTHERS THEN
     lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
    insert into WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values( lv_ProcName,lv_sqlerrm, sysdate, lv_Sql, lv_ParValues,lv_fn_stdt,lv_fn_endt, lv_Remarks);
 COMMIT;
        
end;
/


DROP PROCEDURE PRCWPS_TOKENCHANGE_B4SAVE;

CREATE OR REPLACE PROCEDURE prcWPS_TOKENCHANGE_b4Save
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWORKERTOKENCHANGE%rowtype;
lv_ApplicationNo        varchar2(50);

begin

    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSWORKERTOKENCHANGE
    WHERE ROWNUM<=1;
            
    select count(*)
    into lv_cnt
    from GBL_WPSWORKERTOKENCHANGE;
        
     IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
        
    IF lv_Master.OPERATIONMODE IS NULL THEN
        lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    END IF;

/*
            
    lv_cnt :=0;
    select count(*)
    into lv_cnt
    from WPSATTENDANCEDAYWISE
    WHERE DATEOFATTENDANCE=to_date(lv_Master.EFFECTIVEDATE,'DD/MM/RRRR');

    IF NVL(lv_cnt,0)>0 THEN
        lv_error_remark := 'Validation Failure : [Attendance exist in this effectivedate!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
 */   
    lv_cnt :=0;
    select count(*)
    into lv_cnt
    from WPSWORKERMAST
    WHERE TOKENNO=TRIM(lv_Master.OLDTOKENNO);

    IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Invalid Old Tokenno!] ' || lv_Master.OLDTOKENNO;
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
    
    lv_cnt :=0;
    select count(*)
    into lv_cnt
    from WPSWORKERMAST
    WHERE TOKENNO=TRIM(lv_Master.NEWTOKENNO);

    IF NVL(lv_cnt,0)> 0 THEN
        lv_error_remark := 'Validation Failure : [New Tokenno already exist!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
    
    lv_cnt :=0;
    select count(*)
    into lv_cnt
    from WPSWORKERCATEGORYMAST
    WHERE WORKERCATEGORYCODE=TRIM(lv_Master.NEWWORKERCATEGORYCODE);

    IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Invalid Categorycode!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
    
    
    UPDATE WPSWORKERMAST 
       SET  TOKENNO = TRIM(lv_Master.NEWTOKENNO),
            WORKERCATEGORYCODE=TRIM(lv_Master.NEWWORKERCATEGORYCODE),
            CONTRACTORCODE=TRIM(lv_Master.NEWCONTRACTORCODE),
            CONTRACTORNAME=TRIM(lv_Master.NEWCONTRACTORNAME),
            FIXEDBASIC=lv_Master.NEWBASIC,
            DARATE=lv_Master.NEWDA
     WHERE COMPANYCODE = TRIM(lv_Master.COMPANYCODE)
       AND DIVISIONCODE = TRIM(lv_Master.DIVISIONCODE)
       AND TOKENNO = TRIM(lv_Master.OLDTOKENNO)
       AND WORKERSERIAL=TRIM(lv_Master.WORKERSERIAL);
       
    UPDATE WPSATTENDANCEDAYWISE
       SET TOKENNO = TRIM(lv_Master.NEWTOKENNO),
           WORKERCATEGORYCODE=TRIM(lv_Master.NEWWORKERCATEGORYCODE)
     WHERE DATEOFATTENDANCE >=to_date(lv_Master.EFFECTIVEDATE,'DD/MM/RRRR')
       AND TOKENNO = TRIM(lv_Master.OLDTOKENNO)
       AND WORKERSERIAL=TRIM(lv_Master.WORKERSERIAL);
    
end;
/


DROP PROCEDURE PRCWPS_WAGESPERIOD_DECLARE;

CREATE OR REPLACE PROCEDURE "PRCWPS_WAGESPERIOD_DECLARE" ( P_COMPANYCODE  VARCHAR2, 
    P_DIVISIONCODE   VARCHAR2, 
    P_YEARCODE  VARCHAR2,
    P_PERIOD_TYPE CHAR ,
    P_PERIOD_STDT VARCHAR2,
    P_PERIOD_ENDT  VARCHAR2, 
    P_USER VARCHAR2 DEFAULT 'SWT'
    )
AS 
   ---------------------------------- BEGIN DECLARE ---------------------------
      LV_COMPANYCODE         VARCHAR2(10 BYTE) := LTRIM(TRIM(P_COMPANYCODE)) ;   
      LV_DIVISIONCODE        VARCHAR2(10 BYTE) := LTRIM(TRIM(P_DIVISIONCODE)) ;
      LV_YEARCODE            VARCHAR2(10 BYTE) := LTRIM(TRIM(P_YEARCODE)) ;
      LV_PERIOD_TYPE         CHAR(1)  := LTRIM(TRIM(UPPER(P_PERIOD_TYPE))) ;
      LV_PERIOD_STDT         DATE := TO_DATE(P_PERIOD_STDT,'DD/MM/YYYY')    ;
      LV_PERIOD_ENDT         DATE := TO_DATE(P_PERIOD_ENDT,'DD/MM/YYYY')    ;
      LV_USERNAME            VARCHAR2(100 BYTE) := LTRIM(TRIM(P_USER)) ; 
      LV_FNSDT  DATE ;
      LV_FNEDT  DATE ;
      LV_YEARMONTH VARCHAR2(10 BYTE) ;
      LV_ROWSRL INT := 0 ; 
    FUNCTION FN_WPS_RET_FNDT( P_PERIOD_TYPE VARCHAR2 , P_DATE VARCHAR2 , P_RET_TYPE VARCHAR2)
    RETURN DATE
    AS
    --LV_RET_TYPE VARCHAR2(10) := 'CFNENDT' ;
    LV_RET_TYPE VARCHAR2(10) := P_RET_TYPE ; --'NFNSTDT' ;
    LV_DATE  DATE := TO_DATE(P_DATE,'DD/MM/YYYY') ;
    LV_RET_DT date ;
    LV_PERIOD_TYPE VARCHAR2(1) := P_PERIOD_TYPE ;--'M' ;
    LV_NEXT_FNSTDT DATE;
    BEGIN
    IF LV_PERIOD_TYPE  = 'F' THEN
         IF SUBSTR(TO_CHAR(TRUNC(LV_DATE),'DD/MM/YYYY'),1,2) = '01' THEN
           LV_RET_DT := TRUNC(LV_DATE)+14 ;
         ELSE
           LV_RET_DT :=  LAST_DAY(TRUNC(LV_DATE)) ;
         END IF;
         IF LV_RET_TYPE = 'CFNENDT' THEN
           DBMS_OUTPUT.PUT_LINE(TO_CHAR(LV_RET_DT,'DD/MM/YYYY'));
           RETURN LV_RET_DT ;
         END IF;
         IF LV_RET_TYPE = 'NFNSTDT' THEN
          DBMS_OUTPUT.PUT_LINE(TO_CHAR(LV_DATE+1,'DD/MM/YYYY'));
          RETURN LV_DATE+1 ;
         END IF;
    ELSE
        IF SUBSTR(TO_CHAR(TRUNC(LV_DATE),'DD/MM/YYYY'),1,2) = '01' THEN
          LV_RET_DT :=  LAST_DAY(TRUNC(LV_DATE)) ;       
        ELSE
          LV_RET_DT := TRUNC(LV_DATE)+1 ;      
        END IF;
        DBMS_OUTPUT.PUT_LINE(TO_CHAR(LV_RET_DT,'DD/MM/YYYY'));
        RETURN LV_RET_DT ;
    END IF;
    END;
  --------------------------  END DECLARE ---------------------------
BEGIN
  if (LV_PERIOD_TYPE is NULL) or ( LV_PERIOD_TYPE not in ('F','M') ) then
     raise_application_error(-20004,'~RAISE ERROR START~ INVALID PERIOD TYE.. RE-ENTER....~RAISE ERROR END~');
  end if;
  if LV_PERIOD_STDT > LV_PERIOD_ENDT then
     raise_application_error(-20004,'~RAISE ERROR START~ INVALID PERIOD START DATE-END DATE RANGE.. RE-ENTER....~RAISE ERROR END~');
  end if;
  --------------
  delete from WPSWAGEDPERIODDECLARATION 
  where 
  COMPANYCODE  = LV_COMPANYCODE 
  AND DIVISIONCODE = LV_DIVISIONCODE 
  AND YEARCODE = LV_YEARCODE
  AND FORTNIGHTSTARTDATE  >= LV_PERIOD_STDT   
  AND FORTNIGHTENDDATE   <=  LV_PERIOD_ENDT ;
    
  LV_FNSDT := TRUNC(LV_PERIOD_STDT) ;
  LV_FNEDT := TRUNC(LV_PERIOD_STDT) ;  
  WHILE LV_FNEDT < LV_PERIOD_ENDT 
  LOOP
   LV_ROWSRL := LV_ROWSRL+1 ;
   IF LV_PERIOD_TYPE = 'F' THEN
      DBMS_OUTPUT.PUT_LINE(' INSIDE LOOP '||LV_ROWSRL);
      LV_FNEDT := FN_WPS_RET_FNDT('F', TO_CHAR(LV_FNSDT,'DD/MM/YYYY'),'CFNENDT') ;
      LV_YEARMONTH := SUBSTR(TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),4,2)||SUBSTR(TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),7,4) ;
      INSERT INTO WPSWAGEDPERIODDECLARATION(COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WAGEPERIODNO, STATUS,  YEARMONTH, USERNAME, LASTMODIFIED )
                                  values(LV_COMPANYCODE,LV_DIVISIONCODE,LV_YEARCODE,LV_FNSDT,LV_FNEDT,LV_ROWSRL,'N',LV_YEARMONTH,LV_USERNAME,SYSDATE) ;
      LV_FNSDT :=  FN_WPS_RET_FNDT('F', TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),'NFNSTDT') ;
   ELSE
      LV_FNEDT := FN_WPS_RET_FNDT('M', TO_CHAR(LV_FNSDT,'DD/MM/YYYY'),'CFNENDT') ;
      LV_YEARMONTH := SUBSTR(TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),4,2)||SUBSTR(TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),7,4) ;
      INSERT INTO WPSWAGEDPERIODDECLARATION(COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WAGEPERIODNO, STATUS,  YEARMONTH, USERNAME, LASTMODIFIED )
                                  values(LV_COMPANYCODE,LV_DIVISIONCODE,LV_YEARCODE,LV_FNSDT,LV_FNEDT,LV_ROWSRL,'N',LV_YEARMONTH,LV_USERNAME,SYSDATE) ;
      LV_FNSDT :=  FN_WPS_RET_FNDT('M', TO_CHAR(LV_FNEDT,'DD/MM/YYYY'),'NFNSTDT') ;   
   END IF;         
  END LOOP;  
END;
/


DROP PROCEDURE PRCWPS_WAGES_PROCESS;

CREATE OR REPLACE PROCEDURE "PRCWPS_WAGES_PROCESS" (P_PROCESSTYPE varchar2, P_COMPCODE varchar2, P_DIVCODE varchar2, P_YEARCODE varchar2,
                                                  P_USERNAME VARCHAR2,   
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL)
as
lv_SqlStr VARCHAR2(4000) := '';
lv_result VARCHAR2(100);
lv_error_remark         varchar2(4000) := '' ;
lv_Cnt    number(7,2) := 0;
begin
    lv_result:='#SUCCESS#';
    IF P_PROCESSTYPE='WAGES PROCESS' AND P_FNSTDT ='01/09/2020' THEN
        RETURN;
    END IF;
    DELETE FROM WPS_ERROR_LOG;
    COMMIT;
    for cur_proc_params in( select COMPANYCODE, DIVISIONCODE, PROCESSTYPE, PROCEDURE_NAME, PHASE, CALCULATIONINDEX, PARAM_1, PARAM_2, PARAM_3 
                            from WPSWAGESPROCESSTYPE_PHASE  
                            where COMPANYCODE = P_COMPCODE and DIVISIONCODE = P_DIVCODE
                              and PROCESSTYPE = P_PROCESSTYPE
                            ORDER BY PHASE, CALCULATIONINDEX
                          )     
    loop
        lv_SqlStr := cur_proc_params.PROCEDURE_NAME||'('''||P_COMPCODE||''','''||P_DIVCODE||''','''||P_YEARCODE||''','''||P_FNSTDT||''','''||P_FNENDT||''','''||cur_proc_params.PHASE||''','''||cur_proc_params.PARAM_1||''','''||cur_proc_params.PARAM_2||''','''||P_WORKKERSERIAL||''','''||cur_proc_params.PROCESSTYPE||''')' ;
--        dbms_output.put_line('EXEC '||lv_sqlstr||';');
        execute immediate 'BEGIN '||lv_SqlStr||'; END ;';
        
        ------ ERROR CHECING IN WAGES PROCESS -----
        SELECT count(*) into lv_Cnt from WPS_ERROR_LOG
        WHERE COMPANYCODE =P_COMPCODE AND DIVISIONCODE=P_DIVCODE
          AND ORA_ERROR_MESSG IS NOT NULL;
        if lv_Cnt > 0 then
            lv_result:='Error found in Wages Process... Contact SWT Adminsitrator...';
            lv_error_remark :='Error found in Wages Process... Contact SWT Adminsitrator...';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            return;
        end if;  
        
    end loop;
exception
when others then
    lv_error_remark := sqlerrm;
    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    --dbms_output.put_line(sqlerrm);
end;
/


DROP PROCEDURE PRCWPS_WORKERRATECHANGE_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_WORKERRATECHANGE_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWORKERWISERATEUPDATE%rowtype;
lv_MaxDRCRdate            date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
    --RETURN;
   
    select *
    into lv_Master
    from GBL_WPSWORKERWISERATEUPDATE
    WHERE ROWNUM<=1;
    
    DELETE FROM WPSWORKERWISERATEUPDATE
    WHERE WORKERSERIAL IN (SELECT WORKERSERIAL FROM GBL_WPSWORKERWISERATEUPDATE)
    AND   EFFECTIVEDATE = lv_Master.EFFECTIVEDATE
    AND   WORKERCATEGORYCODE = lv_Master.WORKERCATEGORYCODE;

end;
/


DROP PROCEDURE PRCWPS_WORKERUPD_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_WORKERUPD_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWORKERWISERATEUPDATE%rowtype;
lv_Maxdate              date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin
    lv_result:='#SUCCESS#';
    
    select *
    into lv_Master
    from GBL_WPSWORKERWISERATEUPDATE
    WHERE ROWNUM<=1;

    select count(*)
    into lv_cnt
    from GBL_WPSWORKERWISERATEUPDATE;
        
     IF NVL(lv_cnt,0)=0 THEN
        lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;
    
    select MAX(EFFECTIVEDATE)
    into lv_Maxdate
    from WPSWORKERWISERATEUPDATE;
    
    IF lv_Master.EFFECTIVEDATE < lv_Maxdate THEN
        lv_error_remark := 'Validation Failure : [You cannot Update Rate before.] '||TO_CHAR(lv_Maxdate,'DD/MM/YYYY');
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
    END IF;           

    if nvl(lv_Master.operationmode,'NA') = 'A' then 
        FOR C1 IN (SELECT * FROM GBL_WPSWORKERWISERATEUPDATE
                    ORDER BY WORKERSERIAL
            ) LOOP
            
            DELETE FROM WPSWORKERWISERATEUPDATE WHERE COMPANYCODE=C1.COMPANYCODE AND DIVISIONCODE=C1.DIVISIONCODE 
               AND WORKERSERIAL=C1.WORKERSERIAL AND EFFECTIVEDATE=C1.EFFECTIVEDATE;
               
            UPDATE WPSWORKERMAST SET FIXEDBASIC=DECODE(NVL(C1.FIXEDBASIC,0),0,FIXEDBASIC,C1.FIXEDBASIC),
                                     FIXEDBASIC_PEICERT=DECODE(NVL(C1.FIXEDBASIC_PEICERT,0),0,FIXEDBASIC_PEICERT,C1.FIXEDBASIC_PEICERT),
                                     DARATE=DECODE(NVL(C1.DARATE,0),0,DARATE,C1.DARATE),
                                     INCREMENTAMOUNT=DECODE(NVL(C1.INCREMENTAMOUNT,0),0,INCREMENTAMOUNT,C1.INCREMENTAMOUNT),
                                     CARATE=DECODE(NVL(C1.CARATE,0),0,CARATE,C1.CARATE),
                                     ADHOCRATE=DECODE(NVL(C1.ADHOCRATE,0),0,ADHOCRATE,C1.ADHOCRATE),
                                     SPL_ALLOW_RATE=DECODE(NVL(C1.SPL_ALLOW_RATE,0),0,SPL_ALLOW_RATE,C1.SPL_ALLOW_RATE),
                                     PPRATE=DECODE(NVL(C1.PPRATE,0),0,PPRATE,C1.PPRATE),
                                     COP_DEDN=DECODE(NVL(C1.COP_DEDN,0),0,COP_DEDN,C1.COP_DEDN),
                                     ELEC_DUE=DECODE(NVL(C1.ELEC_DUE,0),0,ELEC_DUE,C1.ELEC_DUE),
                                     ADDLBASIC_RATE=DECODE(NVL(C1.ADDLBASIC_RATE,0),0,ADDLBASIC_RATE,C1.ADDLBASIC_RATE),
                                     DAILYBASICRATE=DECODE(NVL(C1.DAILYBASICRATE,0),0,DAILYBASICRATE,C1.DAILYBASICRATE)
             WHERE COMPANYCODE=C1.COMPANYCODE AND DIVISIONCODE=C1.DIVISIONCODE 
               AND WORKERSERIAL=C1.WORKERSERIAL;
        END LOOP;
    end if;
end;
/


DROP PROCEDURE PRCWPS_WORKER_B4SAVE;

CREATE OR REPLACE PROCEDURE "PRCWPS_WORKER_B4SAVE" 
is
lv_cnt                  number;
lv_result               varchar2(10);
lv_error_remark         varchar2(4000) := '' ;
lv_Master               GBL_WPSWORKERMAST%rowtype;
lv_MaxDRCRdate            date;
lv_TransactionNo        varchar2(50);
lv_cntChkdup            number;
lv_ItemVSCharge         varchar2(4000);      

begin

    lv_result:='#SUCCESS#';
    
    --return;
    
        select *
        into lv_Master
        from GBL_WPSWORKERMAST
        WHERE ROWNUM<=1;

        select count(*)
        into lv_cnt
        from GBL_WPSWORKERMAST;
        
         IF NVL(lv_cnt,0)=0 THEN
            lv_error_remark := 'Validation Failure : [Blank data not allowded to save!]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,lv_error_remark));
        END IF;
        
        IF lv_Master.OPERATIONMODE IS NULL THEN
            lv_error_remark := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;            

        if nvl(lv_Master.operationmode,'NA') = 'A' then
           
            select fn_autogen_params(lv_Master.CompanyCode,lv_Master.DivisionCode,lv_Master.YEARCODE,'WPS_WORKERSERIAL',to_char(lv_Master.DATEOFJOINING,'dd/mm/yyyy')) 
            into lv_TransactionNo
            from dual;
            
            IF nvl(lv_TransactionNo,'NA') <>'NA' then
                update GBL_WPSWORKERMAST
                set WORKERSERIAL = lv_TransactionNo;
                
                update GBL_WPSWORKERWISERATEUPDATE
                set WORKERSERIAL = lv_TransactionNo;
                
                UPDATE GBL_NOMINEMAST
                set WORKERSERIAL = lv_TransactionNo;
                --raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,'PROC_WORKERMAST_RATESAVE ('||LV_MASTER.DEPARTMENTCODE||','|| LV_MASTER.WORKERCATEGORYCODE||','|| lv_TransactionNo||','||lv_Master.operationmode||')'));
                --PROC_WORKERMAST_RATESAVE (LV_MASTER.DEPARTMENTCODE, LV_MASTER.WORKERCATEGORYCODE, lv_TransactionNo);
               -- DELETE FROM GBL_WORKERMAST_RATE;
            else
                lv_error_remark := 'WORKERSERIAL No not generated. Check Parameters for Auto Gen.';
                raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
            end if;
            
        end if;
        
 --exception when others then
--    lv_error_remark:= lv_error_remark || '#UNSUCC#ESSFULL#';
--    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
end;
/


DROP PROCEDURE PRC_CREATE_DYNAMIC_VIEW_WPS;

CREATE OR REPLACE PROCEDURE prc_create_dynamic_view_wps
(
    p_compcode   varchar2, 
    p_divcode    varchar2,
    p_impexptype varchar2, 
    p_impexpqry  varchar2,
    p_yearmonth  varchar2,
    p_optmode    varchar2,
    p_readonly   varchar2 default null
)
as
lv_SqlStr       varchar2(30000) := '';
lv_temp_table   varchar2(30) := 'GBL_TBL_G_DYNAMIC';
lv_tabexists    number;
lv_result       varchar2(10);
lv_error_remark varchar2(4000) := '';
lv_readonly     varchar2(10);
lv_componentCriteria varchar2(200) := '';
lv_instrChar    varchar2(1) := '';
begin
    lv_result:='#SUCCESS#';
    
    if nvl(p_optmode,'NA') = 'A' then
        lv_instrChar := ' ';
    else
        lv_instrChar := '.';
    end if;
    
    if p_readonly is null then
        lv_readonly := 'true';
    else
        lv_readonly := p_readonly;
    end if;
    
    if p_impexptype is not null then
        if p_impexptype = 'WORKERRATE' then
            lv_componentCriteria := 'MASTERCOMPONENT=''Y''';
        end if;
        if p_impexptype = 'ATTENDANCEADJUSTMENT' or p_impexptype = 'ATTENDANCEADJUSTMENTED' then
            lv_componentCriteria := 'AMOUNTORFORMULA=''AMOUNT''';
        end if;
    end if;
    
    ----- Checking for Global Table Exists or not and recreate table
    select count(*) into lv_tabexists from user_tables where table_name = UPPER(lv_temp_table) ;
    if lv_tabexists > 0 then
        lv_sqlstr := 'DROP TABLE ' || lv_temp_table ;
        execute immediate lv_sqlstr ;
    end if;
    
    lv_SqlStr := 'CREATE GLOBAL TEMPORARY TABLE ' || lv_temp_table || CHR(10)
               ||'AS ' || CHR(10) || p_impexpqry;
    --DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    execute immediate lv_SqlStr;
    ----- Checking for Global Table Exists or not and recreate table
    
    ----- for Dynamic View for variable column as per Global Table
    lv_SqlStr := 'create or replace force view vw_auto_dynamicgrid'|| chr(10);
    lv_SqlStr := lv_SqlStr || '('|| chr(10);
    lv_SqlStr := lv_SqlStr || '   companycode,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_name,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_header,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_length,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_data,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || ')'|| chr(10);
    lv_SqlStr := lv_SqlStr || 'as'|| chr(10);
    lv_SqlStr := lv_SqlStr || 'select  '''||p_compcode||''' companycode,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_name || '','')order by x.serialno).extract (''//text()''),'','') column_name'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select ''^'' ||cname||''^'' column_name, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_name,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_header || '','')order by x.serialno).extract (''//text()''),'','') column_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select initcap(cname) column_header, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_header,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);          
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_length || '','')order by x.serialno).extract (''//text()''),'','') column_length'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select case when upper(cname) in (''COMPANYCODE'',''DIVISIONCODE'',''YEARCODE'',''SERIALNO'',''USERNAME'',''SYSROWID'',''LASTMODIFIED'',''WORKERSERIAL'',''UNITCODE'',''YEARMONTH'',''GRADECODE'',''TOTALDAYS'',''CALCULATIONDAYS'',''ADJUSTMENTDAYS'', ''DEPARTMENTDESC'', ''ATTENDANCETAG'',''DATEOFATTENDANCE'',''BOOKNO'',''FORTNIGHTSTARTDATE'',''FORTNIGHTENDDATE'',''SHIFTCODE'',''COMPVALUE'') then 1 '|| chr(10);
    lv_SqlStr := lv_SqlStr || '          when upper(cname) in (''TOKENNO'') then 80 '|| chr(10);
    lv_SqlStr := lv_SqlStr || '          when upper(cname) in (''WORKERNAME'') then 200 else'|| chr(10);    
    lv_SqlStr := lv_SqlStr || '                        decode(coltype,''VARCHAR2'',120,''DATE'',100,''NUMBER'',70,''CHAR'',50,1) end column_length, colno serialno from col '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_length,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ''[''||('|| chr(10);         
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_data || '','')order by x.serialno).extract (''//text()''),'','') column_data'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select trim(''{ data: ^''||cname|| ''^, type: $''||'|| chr(10);
--    lv_SqlStr := lv_SqlStr || '                             decode(coltype,''VARCHAR2'',''text'',''NUMBER'',''numeric$,format:$0.00000'',''text'')|| ''$''||'|| chr(10);  
    lv_SqlStr := lv_SqlStr || '                             decode(coltype,''VARCHAR2'',''text'',''NUMBER'',CASE WHEN cname in (''FBASIC'',''FBASIC_PEICERT'') THEN ''numeric$,format:$0.0000'' ELSE ''numeric$,format:$0.00'' END,''text'')|| ''$''||'|| chr(10);    
    lv_SqlStr := lv_SqlStr || '                             case when cname in (select substr(columnname,instr(columnname,'''||lv_instrChar||''')+1) from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and cname not like ''ATTENDANCEHOURS'' and cname not like ''OVERTIMEHOURS'' and cname not like ''TOKENNO'' and cname not like ''SPELLTYPE'' and cname not like ''HOLIDAYHOURS'') then '', readOnly: true, nedit'' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when cname in (select substr(columnname,instr(columnname,'''||lv_instrChar||''')+1) from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and (cname like ''ATTENDANCEHOURS'' or cname like ''OVERTIMEHOURS'' or cname like ''TOKENNO'' or cname like ''SPELLTYPE'' or cname like ''HOLIDAYHOURS'')) then '', readOnly: false'' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when cname in (select componentshortname from wpscomponentmaster where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and '||lv_componentCriteria||') then '', readOnly: '||lv_readonly||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when instr((select columnname from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and columnname like ''%,%'' and rownum=1),cname)>0 then '', readOnly: '||lv_readonly||''' else '', readOnly: true, nedit'' end ||'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                             '' }'') column_data, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x)||'']'' column_data,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);          
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.qry_header || '','')order by x.serialno).extract (''//text()''),'','') qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select case when coltype=''DATE'' then ''TO_CHAR(''||cname||'',$DD/MM/YYYY$) ''||cname else cname end qry_header, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || ' from dual';
    --DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
   -- DELETE FROM TBL_CLOB;
    --INSERT INTO TBL_CLOB VALUES(lv_SqlStr);
    execute immediate lv_SqlStr;

    
    -- for Dynamic View for variable column as per Global Table
exception
when others then
    lv_error_remark := sqlerrm;
    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    --dbms_output.put_line(sqlerrm);
end;
/


DROP PROCEDURE PRC_CREATE_DYNAMIC_VIEW_WPS_O;

CREATE OR REPLACE PROCEDURE prc_create_dynamic_view_wps_O
(
    p_compcode   varchar2, 
    p_divcode    varchar2,
    p_impexptype varchar2, 
    p_impexpqry  varchar2,
    p_yearmonth  varchar2,
    p_readonly   varchar2 default null
)
as
lv_SqlStr       varchar2(30000) := '';
lv_temp_table   varchar2(30) := 'GBL_TBL_G_DYNAMIC';
lv_tabexists    number;
lv_result       varchar2(10);
lv_error_remark varchar2(4000) := '';
lv_readonly     varchar2(10);
lv_componentCriteria varchar2(200) := '';
begin
    lv_result:='#SUCCESS#';
    
    if p_readonly is null then
        lv_readonly := 'true';
    else
        lv_readonly := p_readonly;
    end if;
    
    if p_impexptype is not null then
        if p_impexptype = 'WORKERRATE' then
            lv_componentCriteria := 'MASTERCOMPONENT=''Y''';
        end if;
        if p_impexptype = 'ATTENDANCEADJUSTMENT' then
            lv_componentCriteria := 'AMOUNTORFORMULA=''AMOUNT''';
        end if;
    end if;
    
    ----- Checking for Global Table Exists or not and recreate table
    select count(*) into lv_tabexists from user_tables where table_name = UPPER(lv_temp_table) ;
    if lv_tabexists > 0 then
        lv_sqlstr := 'DROP TABLE ' || lv_temp_table ;
        execute immediate lv_sqlstr ;
    end if;
    
    lv_SqlStr := 'CREATE GLOBAL TEMPORARY TABLE ' || lv_temp_table || CHR(10)
               ||'AS ' || CHR(10) || p_impexpqry;
    --DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    execute immediate lv_SqlStr;
    ----- Checking for Global Table Exists or not and recreate table
    
    ----- for Dynamic View for variable column as per Global Table
    lv_SqlStr := 'create or replace force view vw_auto_dynamicgrid'|| chr(10);
    lv_SqlStr := lv_SqlStr || '('|| chr(10);
    lv_SqlStr := lv_SqlStr || '   companycode,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_name,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_header,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_length,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   column_data,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '   qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || ')'|| chr(10);
    lv_SqlStr := lv_SqlStr || 'as'|| chr(10);
    lv_SqlStr := lv_SqlStr || 'select  '''||p_compcode||''' companycode,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_name || '','')order by x.serialno).extract (''//text()''),'','') column_name'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select ''^'' ||cname||''^'' column_name, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_name,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_header || '','')order by x.serialno).extract (''//text()''),'','') column_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select initcap(cname) column_header, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_header,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);          
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_length || '','')order by x.serialno).extract (''//text()''),'','') column_length'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select case when upper(cname) in (''COMPANYCODE'',''DIVISIONCODE'',''YEARCODE'',''SERIALNO'',''USERNAME'',''SYSROWID'',''LASTMODIFIED'',''WORKERSERIAL'',''UNITCODE'',''YEARMONTH'',''GRADECODE'',''TOTALDAYS'',''CALCULATIONDAYS'',''ADJUSTMENTDAYS'', ''DEPARTMENTDESC'', ''SPELLTYPE'',''ATTENDANCETAG'',''SHIFTCODE'',''DATEOFATTENDANCE'',''BOOKNO'',''FORTNIGHTSTARTDATE'',''FORTNIGHTENDDATE'') then 1 else'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                        decode(coltype,''VARCHAR2'',120,''DATE'',100,''NUMBER'',70,''CHAR'',50,1) end column_length, colno serialno from col '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) column_length,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ''[''||('|| chr(10);         
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.column_data || '','')order by x.serialno).extract (''//text()''),'','') column_data'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select trim(''{ data: ^''||cname|| ''^, type: $''||'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                             decode(coltype,''VARCHAR2'',''text'',''NUMBER'',''numeric$,format:$0.00'',''text'')|| ''$''||'|| chr(10);    
    lv_SqlStr := lv_SqlStr || '                             case when cname in (select substr(columnname,instr(columnname,''.'')+1) from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and cname not like ''ATTENDANCEHOURS'' and cname not like ''OVERTIMEHOURS'' and cname not like ''TOKENNO'') then '', readOnly: true, nedit'' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when cname in (select substr(columnname,instr(columnname,''.'')+1) from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and (cname like ''ATTENDANCEHOURS'' or cname like ''OVERTIMEHOURS'' or cname like ''TOKENNO'')) then '', readOnly: false'' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when cname in (select componentshortname from wpscomponentmaster where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and '||lv_componentCriteria||') then '', readOnly: '||lv_readonly||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                                  when instr((select columnname from wpstagwisefixedcolumnshow where companycode='''||p_compcode||''' and divisioncode='''||p_divcode||''' and tagtype='''||p_impexptype||''' and columnname like ''%,%'' and rownum=1),cname)>0 then '', readOnly: '||lv_readonly||''' else '', readOnly: true, nedit'' end ||'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                             '' }'') column_data, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x)||'']'' column_data,'|| chr(10);
    lv_SqlStr := lv_SqlStr || '        ('|| chr(10);          
    lv_SqlStr := lv_SqlStr || '         select rtrim(xmlagg(xmlelement(e, x.qry_header || '','')order by x.serialno).extract (''//text()''),'','') qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || '           from (select case when coltype=''DATE'' then ''TO_CHAR(''||cname||'',$DD/MM/YYYY$) ''||cname else cname end qry_header, colno serialno from col'|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
    lv_SqlStr := lv_SqlStr || '                  order by colno) x) qry_header'|| chr(10);
    lv_SqlStr := lv_SqlStr || ' from dual';
    --DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
    execute immediate lv_SqlStr;
    
    -- for Dynamic View for variable column as per Global Table
    
exception
when others then
    lv_error_remark := sqlerrm;
    raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    --dbms_output.put_line(sqlerrm);
end;
/


DROP PROCEDURE PRC_WPSATTENDANCECSVRAWDATA;

CREATE OR REPLACE PROCEDURE "PRC_WPSATTENDANCECSVRAWDATA" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_fromdt varchar2,
    p_todt varchar2,
    p_isverified char,
    p_isapproved char,
    p_dept      varchar2,
    p_sec       varchar2     
)
AS
    lv_sqlstr varchar2(2000);
BEGIN
    DELETE FROM GTT_WPSATTENDANCECSVRAWDATA;            
                lv_sqlstr :=' INSERT INTO GTT_WPSATTENDANCECSVRAWDATA ' ||CHR(10)
                  ||' SELECT '''||p_fromdt ||''' FROMDT,'''||p_todt||''' TODT,  '||CHR(10)
                  ||' '''||p_companycode||''' COMPANYCODE, '||CHR(10)
                  ||' (SELECT COMPANYNAME FROM COMPANYMAST D WHERE D.COMPANYCODE = '''||p_companycode||''') COMPANYNAME, '||CHR(10)
                  ||' '''||p_divisioncode||''' DIVISIONCODE, '||CHR(10);
                  IF p_isverified IS NULL AND p_isapproved IS NULL THEN
                    lv_sqlstr :=lv_sqlstr ||' ''Manual Import Data Status (All)'' PARAMNAME, '||CHR(10);
                  ELSIF NVL(p_isverified,'A')='N' AND p_isapproved IS NULL THEN
                    lv_sqlstr :=lv_sqlstr ||' ''Manual Import Data Status (Not Verified)'' PARAMNAME, '||CHR(10);
                  ELSIF p_isverified IS NULL AND NVL(p_isapproved,'B') ='Y' THEN
                    lv_sqlstr :=lv_sqlstr ||' ''Manual Import Data Status (Approved)'' PARAMNAME, '||CHR(10);
                  END IF;
                  lv_sqlstr :=lv_sqlstr ||' ''01'' UNITCODE, ATTENDATE, DEPARTMENT, OCCUPATION, A.SHIFT, A.TOKENNO||'' - ''||C.WORKERNAME TOKENNO, VERIFIED, A.REMARKS,NVL(SPELLHRS_1,0)+NVL(SPELLHRS_2,0) ATTNHOURS, OTHOURS OTHOURS,A.SECTION'||CHR(10)
                  ||' FROM WPSATTENDANCECSVRAWDATA A,WPSWORKERMAST C'||CHR(10)
                  ||' WHERE ATTENDATE BETWEEN ''' || p_fromdt || ''' '|| CHR(10)
                  ||'                         AND ''' || p_todt || ''' '|| CHR(10)
                  ||'   AND A.TOKENNO=C.TOKENNO'||CHR(10);
                  IF p_dept IS NOT NULL THEN
                       lv_sqlstr :=lv_sqlstr ||'   AND A. DEPARTMENT IN ('||p_dept||') '||CHR(10);
                  END IF;
                  IF p_sec IS NOT NULL THEN
                       lv_sqlstr :=lv_sqlstr ||'   AND A. SECTION IN ('||p_sec||') '||CHR(10);
                  END IF;
                  IF NVL(p_isverified,'A')='N' AND p_isapproved IS NULL THEN
                    lv_sqlstr :=lv_sqlstr ||'   AND A.VERIFIED=''N'' '||CHR(10);                  
                  ELSIF p_isverified IS NULL AND NVL(p_isapproved,'B') ='Y' THEN
                    lv_sqlstr :=lv_sqlstr ||'   AND A.APPROVED=''Y'' '||CHR(10);
                  END IF;
                  lv_sqlstr :=lv_sqlstr ||'   ORDER BY A.TOKENNO '||CHR(10);
        dbms_output.put_line(lv_sqlstr);
        execute immediate lv_sqlstr;
END;
/


DROP PROCEDURE PRC_WPSLEAVE_AFTERSAVE;

CREATE OR REPLACE PROCEDURE PRC_WPSLEAVE_AFTERSAVE
IS
lv_Master               GBL_WPSSTLENTRY%rowtype;
lv_DATE                 DATE    :=SYSDATE;
lv_WORKERSERIAL         VARCHAR2(10) := '';
lv_LeaveDays            number(5) := 0;
lv_IsSanction           varchar2(1) := '';
--LV_SECTION              VARCHAR2(10) :='';
lv_cnt                  number:=0;
lv_error_remark           VARCHAR2(5000);  
BEGIN
    select *
    into lv_Master
    from GBL_WPSSTLENTRY
    WHERE ROWNUM<=1;
    
    IF NVL(lv_Master.OPERATIONMODE,'NA') = 'A' THEN
    
        lv_DATE:=lv_Master.STLFROMDATE;
    
        FOR C1 IN ( SELECT * FROM GBL_WPSSTLENTRY)
        LOOP
            lv_WORKERSERIAL := C1.WORKERSERIAL;
            lv_DATE := C1.STLFROMDATE;
            lv_IsSanction := 'Y';
            lv_LeaveDays := 1;
            
            --SELECT SECTIONCODE into LV_SECTION FROM WPSWORKERMAST WHERE WORKERSERIAL = lv_WORKERSERIAL;
            
            WHILE (lv_WORKERSERIAL = C1.WORKERSERIAL AND lv_DATE <= C1.STLTODATE)
                loop
                
                    SELECT COUNT(1) INTO lv_cnt FROM WPSSTLENTRYDETAILS 
                    WHERE COMPANYCODE=C1.COMPANYCODE
                        AND DIVISIONCODE=C1.DIVISIONCODE
                        AND YEARCODE=C1.YEARCODE
                        AND YEAR=C1.YEAR
                        AND WORKERSERIAL=C1.WORKERSERIAL
                        AND LEAVEDATE=lv_DATE;
                        
                    IF lv_cnt>0 THEN
                        lv_error_remark := ' LEAVE IS EXIST ON '||lv_DATE||'.';--||SQLERRM ;
                        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
                    END IF; 
                                           
                    insert into WPSSTLENTRYDETAILS (COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, LEAVECODE, DOCUMENTNO, DOCUMENTDATE, 
                FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, 
                OCCUPATIONCODE, SHIFTCODE, LEAVEFROMDATE, LEAVETODATE, LEAVEDATE, LEAVEHOURS, LEAVEDAYS, STLRATE, 
                ISSANCTIONED, TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIEDDATE, SYSROWID,SECTIONCODE)
                values (C1.COMPANYCODE, C1.DIVISIONCODE, C1.YEARCODE, C1.YEAR, C1.LEAVECODE , C1.DOCUMENTNO, C1.DOCUMENTDATE, 
                C1.FORTNIGHTSTARTDATE, C1.FORTNIGHTENDDATE, C1.WORKERSERIAL, C1.TOKENNO, C1.WORKERCATEGORYCODE, C1.DEPARTMENTCODE, 
                C1.OCCUPATIONCODE, C1.SHIFTCODE, C1.STLFROMDATE, C1.STLTODATE, lv_DATE , 8 , 1 , C1.STLRATE, 
                lv_IsSanction , C1.TRANSACTIONTYPE, C1.ADDLESS, C1.USERNAME, SYSDATE, C1.SYSROWID,C1.SECTIONCODE);
                    
                      
                    lv_DATE := lv_DATE+1;               
                end loop;
        END LOOP;
    ELSIF NVL(lv_Master.OPERATIONMODE,'NA') = 'M' THEN
        DELETE FROM WPSSTLENTRYDETAILS WHERE COMPANYCODE=lv_Master.COMPANYCODE AND DIVISIONCODE=lv_Master.DIVISIONCODE AND DOCUMENTNO =lv_Master.DOCUMENTNO;
        
        lv_DATE:=lv_Master.STLFROMDATE;
    
        FOR C1 IN ( SELECT * FROM GBL_WPSSTLENTRY)
        LOOP
            lv_WORKERSERIAL := C1.WORKERSERIAL;
            lv_DATE := C1.STLFROMDATE;
            lv_IsSanction := 'Y';
            lv_LeaveDays := 1;
            WHILE (lv_WORKERSERIAL = C1.WORKERSERIAL AND lv_DATE <= C1.STLTODATE)
                loop 
                                           
                    insert into WPSSTLENTRYDETAILS (COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, LEAVECODE, DOCUMENTNO, DOCUMENTDATE, 
                FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, 
                OCCUPATIONCODE, SHIFTCODE, LEAVEFROMDATE, LEAVETODATE, LEAVEDATE, LEAVEHOURS, LEAVEDAYS, STLRATE, 
                ISSANCTIONED, TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIEDDATE, SYSROWID,SECTIONCODE)
                values (C1.COMPANYCODE, C1.DIVISIONCODE, C1.YEARCODE, C1.YEAR, C1.LEAVECODE , C1.DOCUMENTNO, C1.DOCUMENTDATE, 
                C1.FORTNIGHTSTARTDATE, C1.FORTNIGHTENDDATE, C1.WORKERSERIAL, C1.TOKENNO, C1.WORKERCATEGORYCODE, C1.DEPARTMENTCODE, 
                C1.OCCUPATIONCODE, C1.SHIFTCODE, C1.STLFROMDATE, C1.STLTODATE, lv_DATE , 8 , 1 , C1.STLRATE, 
                lv_IsSanction , C1.TRANSACTIONTYPE, C1.ADDLESS, C1.USERNAME, SYSDATE, C1.SYSROWID,C1.SECTIONCODE);
                    
                      
                    lv_DATE := lv_DATE+1;               
                end loop;
        END LOOP;
        
    ELSE
        DELETE FROM WPSSTLENTRYDETAILS WHERE COMPANYCODE=lv_Master.COMPANYCODE AND DIVISIONCODE=lv_Master.DIVISIONCODE AND DOCUMENTNO =lv_Master.DOCUMENTNO; 
    
    END IF;
     
END;
/


DROP PROCEDURE PRC_WPSWAGES_NSA_PFLINK_UPDT;

CREATE OR REPLACE PROCEDURE PRC_WPSWAGES_NSA_PFLINK_UPDT(
    P_COMPCODE varchar2, P_DIVCODE varchar2, P_YEARCODE Varchar2,
    P_FNSTDT varchar2,P_FNENDT varchar2,P_PHASE NUMBER,
    P_PHASE_TABLENAME VARCHAR2,
    P_TABLENAME varchar2 DEFAULT 'WPSWAGESDETAILS',
    P_WORKERSERIAL varchar2 DEFAULT NULL,
    P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS'
)

AS  
    lv_sql varchar2(10000):='';
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PRC_WPSWAGES_NSA_PFLINK_UPDT';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400):='';
    lv_cnt number:=0;
    lv_DetailsTable VARCHAR2(30) := '';
BEGIN

    
    IF INSTR(P_TABLENAME,'_SWT') > 0 THEN
        lv_DetailsTable :='WPSWAGESDETAILS_SWT';
    ELSE
        lv_DetailsTable :='WPSWAGESDETAILS';
    END IF;
    
    
    lv_Remarks:='NS_HRS, NS_ALLOW. UPDATE IN PF LINK NS ALLOW NS_HRS  - WPSWAGESDETAILS';
    
    
    lv_SQL := ' UPDATE '||lv_DetailsTable||'  SET NS_HRS_PFLINK = NIGHTALLOWANCEHOURS, NS_ALLOW_PFLINK = NS_ALLOW '||chr(10)
            ||' WHERE DEPARTMENTCODE||SECTIONCODE IN (SELECT DEPARTMENTCODE||SECTIONCODE '||CHR(10) 
            ||' FROM VW_WPSSECTIONMAST '||chr(10)
            ||' WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE='''||P_DIVCODE||''' AND NVL(PFLINKHOURS,0)>0) '||CHR(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10)
            ||'   AND WORKERCATEGORYCODE <> ''R'' '||CHR(10);
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;            
    COMMIT;
    lv_Remarks:='NS_HRS, NS_ALLOW. UPDATE IN NON PF LINK NS ALLOW NS_HRS  - WPSWAGESDETAILS';

    lv_Sql := ' UPDATE '||lv_DetailsTable||' WPSWAGESDETAILS  SET NS_HRS_NONPFLINK = NIGHTALLOWANCEHOURS, NS_ALLOW_NONPFLINK = NS_ALLOW '||chr(10)
            ||' WHERE DEPARTMENTCODE||SECTIONCODE IN (SELECT DEPARTMENTCODE||SECTIONCODE '||chr(10) 
            ||' FROM VW_WPSSECTIONMAST WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE='''||P_DIVCODE||''' '||chr(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10) 
            ||'  AND nvl(PFLINKHOURS,0)<=0) '||chr(10);


    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;            
    COMMIT;
    
    lv_Remarks:='NS_HRS, NS_ALLOW. UPDATE IN NON PF LINK NS ALLOW NS_HRS FOR R-CATG  - WPSWAGESDETAILS';

    lv_Sql := ' UPDATE '||lv_DetailsTable||'  SET NS_HRS_PFLINK = 0, NS_ALLOW_PFLINK = 0, '||chr(10) 
            ||' NS_HRS_NONPFLINK = NIGHTALLOWANCEHOURS, NS_ALLOW_NONPFLINK = NS_ALLOW '||chr(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10)
            ||'   AND WORKERCATEGORYCODE=''R'' '||CHR(10);
    
    
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;            
    COMMIT;
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE TMP_WPSNSHRSUPDATE_SWT';
    EXCEPTION
        WHEN OTHERS THEN NULL;    
    END ;
    
    lv_Remarks:='TEMP TABLE CREATE FOR '||P_TABLENAME||' UPDATE';
    lv_Sql := ' CREATE TABLE TMP_WPSNSHRSUPDATE_SWT AS '||CHR(10)
            ||' SELECT WORKERSERIAL, FORTNIGHTSTARTDATE,  '||CHR(10)
            ||' SUM(NVL(NS_HRS_PFLINK,0)) NS_HRS_PFLINK, SUM(NVL(NS_ALLOW_PFLINK,0)) NS_ALLOW_PFLINK, SUM(NVL(NS_HRS_NONPFLINK,0)) NS_HRS_NONPFLINK,  '||CHR(10) 
            ||' SUM(NVL(NS_ALLOW_NONPFLINK,0)) NS_ALLOW_NONPFLINK  '||CHR(10)
            ||' FROM '||lv_DetailsTable||'  '||CHR(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10)
            ||' GROUP BY WORKERSERIAL, FORTNIGHTSTARTDATE '||CHR(10);
        
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;            
    COMMIT;

    lv_Remarks:='NS_HRS, NS_ALLOW UPDATE IN '||P_TABLENAME||'';
    lv_Sql := ' UPDATE '||P_TABLENAME||' A SET (A.NS_HRS_PFLINK, A.NS_ALLOW_PFLINK, A.NS_HRS_NONPFLINK, A.NS_ALLOW_NONPFLINK) =  '||CHR(10)
            ||' ( SELECT B.NS_HRS_PFLINK, B.NS_ALLOW_PFLINK, B.NS_HRS_NONPFLINK, B.NS_ALLOW_NONPFLINK '||CHR(10)
            ||'   FROM TMP_WPSNSHRSUPDATE_SWT B '||CHR(10) 
            ||'   WHERE A.WORKERSERIAL = B.WORKERSERIAL AND A.FORTNIGHTSTARTDATE=B.FORTNIGHTSTARTDATE '||CHR(10)
            ||' ) '||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10)
            ||'   AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10)
            ||'   AND A.WORKERSERIAL IN (SELECT WORKERSERIAL FROM TMP_WPSNSHRSUPDATE_SWT) '||CHR(10);
 
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;            
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm ;
      insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
      values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
              
END;
/


DROP PROCEDURE PRC_WPS_ATTNINCENTIVE_CALC;

CREATE OR REPLACE PROCEDURE PRC_WPS_ATTNINCENTIVE_CALC (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS' )
AS
lv_Component    varchar2(32767) := '';
lv_Sql          varchar2(32767) := '';
lv_Sql_TblCreate  varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_NoOfDays     number(5) := 0;
lv_ProcName     varchar2(100) :='PRC_WPS_ATTNINCENTIVE_CALC';
lv_MinimumWorkHrs   number(7,2); 

BEGIN
    
    lv_remarks := '1 TEMP TABLE GBL_ATTN_INCENTIVE DATA PREPARATION FOR ATTENDANCE INCENTIVE';
    --- Naihati consider 88 hours in 2nd fortnight of february 
    if substr(P_FNSTDT,1,5)='16/02' then
        lv_MinimumWorkHrs := 88;
    else
        if P_FNSTDT ='01/06/2020' then
            lv_MinimumWorkHrs := 69;
        else
            lv_MinimumWorkHrs := 96;
        end if;
    end if;   
     
    DELETE FROM GBL_ATTN_INCENTIVE;
    
    --PROC_WPSVIEWCREATION ( P_COMPCODE,P_DIVCODE,'MAST',0,P_FNSTDT,P_FNENDT,P_TABLENAME);
    lv_Sql := ' INSERT INTO GBL_ATTN_INCENTIVE (COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO,  SECTIONCODE,'||CHR(10) 
            ||' WORKERCATEGORYCODE, ATTENDANCEHOURS,NS_HRS, HOLIDAYHOURS, STL_HOURS, LEAVE_HOURS, ATN_INCENTIVE,DEPARTMENTCODE,OCCUPATIONCODE,SHIFTCODE,DEPTSERIAL) '||chr(10)
            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, A.WORKERSERIAL, B.TOKENNO, X.SECTIONCODE,'||CHR(10) 
            ||' B.WORKERCATEGORYCODE, SUM(ATTN_HRS) ATTENDANCEHOURS,SUM(NS_HRS)NS_HRS, SUM(HOL_HRS) HOLIDAYHOURS, SUM(STL_HRS) STL_HOURS,SUM(LV_HRS) LV_HOURS,  '||CHR(10)
            ||' CASE WHEN (SUM(ATTN_HRS)+ SUM(NS_HRS) + SUM(HOL_HRS) + SUM(STL_HRS) + SUM(LV_HRS)) >='||lv_MinimumWorkHrs||' THEN ROUND(NVL(D.ATN_INCENTIVE,0)*((SUM(ATTN_HRS)+SUM(NS_HRS))/8),2) ELSE 0 END ATN_INCENTIVE,X.DEPARTMENTCODE,X.OCCUPATIONCODE,X.SHIFTCODE,X.DEPTSERIAL  '||CHR(10)
            ||' FROM (  '||CHR(10)
--            ||'     SELECT WORKERSERIAL, SUM(ATTN_HRS) ATTN_HRS,SUM(NS_HRS)NS_HRS, SUM(HOL_HRS) HOL_HRS, SUM(STL_HRS) STL_HRS, SUM(LV_HRS) LV_HRS '||CHR(10)
--            ||'     FROM ( '||CHR(10)
--            ||'             SELECT WORKERSERIAL, SUM(nvl(ATTENDANCEHOURS,0)) ATTN_HRS,SUM(nvl(NIGHTALLOWANCEHOURS,0))NS_HRS, SUM(NVL(HOLIDAYHOURS,0)) HOL_HRS, SUM(NVL(ATTN_REWARDS_EXTRAHRS,0)) STL_HRS, 0 LV_HRS  '||CHR(10)
--            ||'             FROM WPSATTENDANCEDAYWISE A  '||CHR(10)
--            ||'                 WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
--            ||'                   AND YEARCODE = '''||P_YEARCODE||'''  '||CHR(10)
--            ||'                   AND DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND DATEOFATTENDANCE <= '''||lv_fn_endt||'''  '||CHR(10)
--            ||'         GROUP BY WORKERSERIAL '||CHR(10) 
--            ||'         ) GROUP BY WORKERSERIAL'||CHR(10)
            
            ||'         SELECT WORKERSERIAL, SUM(ATTN_HRS) ATTN_HRS,SUM(NS_HRS)NS_HRS, SUM(HOL_HRS) HOL_HRS, SUM(STL_HRS) STL_HRS, SUM(LV_HRS) LV_HRS '||CHR(10) 
            ||'         FROM (  '||CHR(10)
            ||'                 SELECT WORKERSERIAL, nvl(ATTENDANCEHOURS,0) ATTN_HRS, NVL(HOLIDAYHOURS,0) HOL_HRS, NVL(ATTN_REWARDS_EXTRAHRS,0) STL_HRS, 0 LV_HRS, '||CHR(10)
            ||'                 CASE WHEN NVL(B.APPLICABLE_ATN_INCT,''N'') = ''Y'' THEN nvl(NIGHTALLOWANCEHOURS,0) ELSE 0 END NS_HRS   '||CHR(10)
            ||'                 FROM WPSATTENDANCEDAYWISE A, VW_WPSSECTIONMAST B '||CHR(10)
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
            ||'                   AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10)
            ||'                   AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||'''  AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||'''  '||CHR(10)
            ||'                   AND A.COMPANYCODE = B.COMPANYCODE (+) AND A.DIVISIONCODE = B.DIVISIONCODE (+) '||CHR(10)
            ||'                   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE (+) AND A.SECTIONCODE = B.SECTIONCODE (+)  '||CHR(10)
            ||'             ) GROUP BY WORKERSERIAL '||CHR(10)
            ||'     ) A, WPSWORKERMAST B, WPSWORKERCATEGORYMAST C,  '||CHR(10)
            ||' (  '||CHR(10)
            ||'     SELECT X.* FROM WPSWORKERWISERATEUPDATE X,  '||CHR(10)
            ||'     (  '||CHR(10)
            ||'         SELECT WORKERSERIAL, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||CHR(10)
            ||'         FROM WPSWORKERWISERATEUPDATE  '||CHR(10)
            ||'         WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'           AND EFFECTIVEDATE <= '''||lv_fn_endt||'''  '||CHR(10)
            ||'         GROUP BY WORKERSERIAL   '||CHR(10)
            ||'     ) Y  '||CHR(10)
            ||'     WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'       AND X.WORKERSERIAL = Y.WORKERSERIAL AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||CHR(10)
            ||' ) D,  '||CHR(10)
            ||' ( '||CHR(10)
            ||'     SELECT M.WORKERCATEGORYCODE '||CHR(10)
            ||'     FROM WPSWORKERCATEGORYVSCOMPONENT M,'||CHR(10)
            ||'     ( '||CHR(10)
            ||'         SELECT WORKERCATEGORYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||CHR(10)
            ||'         FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
            ||'         WHERE COMPANYCODE  = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'           AND EFFECTIVEDATE <= '''||lv_fn_endt||'''  '||CHR(10)
            ||'         GROUP BY WORKERCATEGORYCODE '||CHR(10)
            ||'     ) N '||CHR(10)  
            ||'     WHERE M.COMPANYCODE  = '''||P_COMPCODE||''' AND M.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'       AND M.WORKERCATEGORYCODE = N.WORKERCATEGORYCODE AND M.EFFECTIVEDATE =N.EFFECTIVEDATE '||CHR(10)
            ||'       AND M.COMPONENTSHORTNAME = ''ATN_INCENTIVE'' AND NVL(APPLICABLE,''NO'') = ''YES'' '||CHR(10)   
            ||' ) E, '||CHR(10)
            ||' (  '||CHR(10)
            ||'    SELECT A.WORKERSERIAL,A.SECTIONCODE,A.DEPARTMENTCODE,A.OCCUPATIONCODE,A.SHIFTCODE,MAX(A.DEPTSERIAL)DEPTSERIAL  '||CHR(10) 
            ||'    FROM '||P_TABLENAME||' A,  '||CHR(10)
            ||'    (  '||CHR(10)
            ||'        SELECT WORKERSERIAL, MAX((NVL(ATTENDANCEHOURS,0)/*+NVL(OVERTIMEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+NVL(HOLIDAYHOURS,0)*/)) ATTENDANCEHOURS  '||CHR(10)
            --||'        /*MAX(SECTIONCODE||DEPARTMENTCODE||DEPTSERIAL)*/MAX(DEPTSERIAL) SEC_DEP_DEPTSRL'||CHR(10)
            ||'        FROM '||P_TABLENAME||'  '||CHR(10)
            ||'        GROUP BY WORKERSERIAL  '||CHR(10)
            ||'    ) B  '||CHR(10)
            ||'    WHERE A.WORKERSERIAL = B.WORKERSERIAL AND (NVL(A.ATTENDANCEHOURS,0)/*+NVL(A.OVERTIMEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)*/) = B.ATTENDANCEHOURS  '||CHR(10)
             --||'     AND A.DEPTSERIAL=B.SEC_DEP_DEPTSRL'||CHR(10)
            ||'    GROUP BY A.WORKERSERIAL,SECTIONCODE,DEPARTMENTCODE,OCCUPATIONCODE,SHIFTCODE,DEPTSERIAL  '||CHR(10)
            ||' ) X    '||CHR(10)          
            ||' WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'   AND B.COMPANYCODE = C.COMPANYCODE AND B.DIVISIONCODE = C.DIVISIONCODE  '||CHR(10)
            ||'   AND B.WORKERCATEGORYCODE = C.WORKERCATEGORYCODE   '||CHR(10)
            ||'   AND B.COMPANYCODE = D.COMPANYCODE AND B.DIVISIONCODE = D.DIVISIONCODE  '||CHR(10)
            ||'   AND A.WORKERSERIAL = D.WORKERSERIAL   '||CHR(10)     
            ||'   AND B.WORKERCATEGORYCODE = E.WORKERCATEGORYCODE '||CHR(10)
            ||'   AND A.WORKERSERIAL = X.WORKERSERIAL '||CHR(10)
            ||'   GROUP BY A.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, D.ATN_INCENTIVE,X.SECTIONCODE,X.DEPARTMENTCODE,X.OCCUPATIONCODE,X.SHIFTCODE,X.DEPTSERIAL  '||CHR(10)
            ||'   HAVING (CASE WHEN (SUM(ATTN_HRS)+ SUM(NS_HRS) + SUM(HOL_HRS) + SUM(STL_HRS) + SUM(LV_HRS)) >='||lv_MinimumWorkHrs||' THEN NVL(D.ATN_INCENTIVE,0)*((SUM(ATTN_HRS)+SUM(NS_HRS))/8) ELSE 0 END) > 0'||CHR(10);
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_Sql;
    
    lv_remarks := '2 INSERT INTO GBL_ATTN_INCEN_UPD FOR ATTENDANCE INCENTIVE';
    DELETE FROM GBL_ATTN_INCEN_UPD;
    
     lv_Sql := 'INSERT INTO GBL_ATTN_INCEN_UPD'||CHR(10)
     ||'SELECT * FROM('||CHR(10)
--     ||'SELECT TOTALHOURS,ROW_NUMBER() OVER(PARTITION BY WORKERSERIAL order by WORKERSERIAL DESC )SRL,'||CHR(10)
--     ||'FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,DEPARTMENTCODE,SECTIONCODE,'||CHR(10)
--     ||'OCCUPATIONCODE,SHIFTCODE,WORKERSERIAL,DEPTSERIAL,ATN_INCENTIVE FROM('||CHR(10)
     ||'SELECT'||CHR(10)
     ||'MAX(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+NVL(HOLIDAYHOURS,0))TOTALHOURS,'||CHR(10)
     ||'ROW_NUMBER() OVER(PARTITION BY WORKERSERIAL order by'||CHR(10)
     ||'WORKERSERIAL,MAX(NVL(ATTENDANCEHOURS,0)/*+NVL(OVERTIMEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+NVL(HOLIDAYHOURS,0)*/)DESC,DEPTSERIAL DESC )SRL,'||CHR(10)
     ||'FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,DEPARTMENTCODE,SECTIONCODE,'||CHR(10)
     ||'OCCUPATIONCODE,SHIFTCODE,WORKERSERIAL,DEPTSERIAL,0 ATN_INCENTIVE FROM '||P_TABLENAME||''||CHR(10)
     ||'WHERE 1=1'||CHR(10)
     ||'AND COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
     ||'AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
     ||'GROUP BY FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,DEPARTMENTCODE,SECTIONCODE,'||CHR(10)
     ||'OCCUPATIONCODE,SHIFTCODE,WORKERSERIAL,DEPTSERIAL'||CHR(10)
     ||'ORDER BY MAX(NVL(ATTENDANCEHOURS,0)/*+NVL(OVERTIMEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+NVL(HOLIDAYHOURS,0)*/) DESC'||CHR(10)
     ||')'||CHR(10)
     --||')'||CHR(10)
     ||'WHERE 1=1'||CHR(10)
     ||'AND SRL=1'||CHR(10);

    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_Sql;
    
    lv_remarks := '3 UPDATE ATN_INCENTIVE INTO  GBL_ATTN_INCEN_UPD FOR ATTENDANCE INCENTIVE';
     lv_Sql := 'UPDATE GBL_ATTN_INCEN_UPD A SET ATN_INCENTIVE='||CHR(10)
     ||'('||CHR(10)
     ||'SELECT NVL(ATN_INCENTIVE,0) FROM GBL_ATTN_INCENTIVE B'||CHR(10)
     ||'WHERE A.FORTNIGHTSTARTDATE=B.FORTNIGHTSTARTDATE'||CHR(10)
     ||'  AND A.FORTNIGHTENDDATE=B.FORTNIGHTENDDATE'||CHR(10)
     ||'  AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'||CHR(10)
     ||'  AND A.SECTIONCODE=B.SECTIONCODE'||CHR(10)
     ||'  AND A.OCCUPATIONCODE=B.OCCUPATIONCODE'||CHR(10)
     ||'  AND A.SHIFTCODE=B.SHIFTCODE'||CHR(10)
     ||'  AND A.DEPTSERIAL=B.DEPTSERIAL'||CHR(10)
     ||'  AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
     ||')'||CHR(10)
     ||'WHERE 1=1'||CHR(10)
     ||'AND A.WORKERSERIAL IN'||CHR(10)
     ||'('||CHR(10)
     ||'SELECT DISTINCT WORKERSERIAL FROM GBL_ATTN_INCENTIVE'||CHR(10)
     ||')'||CHR(10)
     ||'AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''''||CHR(10);
     
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_Sql;
    
    lv_remarks := '4 DELETE ATN_INCENTIVE=0 FROM  GBL_ATTN_INCEN_UPD FOR ATTENDANCE INCENTIVE';
    lv_Sql := 'DELETE FROM GBL_ATTN_INCEN_UPD WHERE NVL(ATN_INCENTIVE,0)=0'||CHR(10);
    
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_Sql;

    lv_remarks := '5 UPDATE '||P_TABLENAME||' FOR ATTENDANCE INCENTIVE';
    
    lv_Sql := ' UPDATE '||P_TABLENAME||' A SET  A.ATN_INCENTIVE = (SELECT  NVL(B.ATN_INCENTIVE,0) FROM GBL_ATTN_INCEN_UPD B '||CHR(10)
    ||' WHERE 1=1'||CHR(10)
     ||' AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.OCCUPATIONCODE = B.OCCUPATIONCODE  '||CHR(10)
     ||' AND A.WORKERSERIAL = B.WORKERSERIAL AND A.SECTIONCODE = B.SECTIONCODE '||CHR(10)
     ||' AND A.SHIFTCODE = B.SHIFTCODE AND A.DEPTSERIAL = B.DEPTSERIAL '||CHR(10)
     ||' )  '||CHR(10)
     ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
     ||'  AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
     ||'  AND A.WORKERSERIAL IN (SELECT DISTINCT WORKERSERIAL FROM  GBL_ATTN_INCEN_UPD  '||CHR(10)
     ||'                         WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
     ||'                         AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' )  '||CHR(10)
     ||'AND ROWID  IN'||CHR(10)
     ||'( SELECT MIN(rowid) FROM '||P_TABLENAME||' '||CHR(10)
     ||'WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
     ||'AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''''||CHR(10)
     ||' GROUP BY WORKERSERIAL,DEPARTMENTCODE, OCCUPATIONCODE,SECTIONCODE,SHIFTCODE,DEPTSERIAL'||CHR(10)
     ||')'||CHR(10);
    

    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values(P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_Sql;
    commit;
exception
when others then
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
 values( lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
END;
/


DROP PROCEDURE PROC_CREATE_WPSDYNAMICVIEW;

CREATE OR REPLACE PROCEDURE PROC_CREATE_WPSDYNAMICVIEW
(
P_COMPANYCODE    VARCHAR2,  --NJ0001
P_DIVISIONCODE   VARCHAR2,  --0002
P_REF_TABLE_NAME VARCHAR2, --WPSOCCUPATIONMAST
P_REF_KEY_COL1   VARCHAR2 DEFAULT NULL  -- DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE
)
as
LV_COMPANYCODE         VARCHAR2(10 BYTE) := LTRIM(TRIM(P_COMPANYCODE)) ;   
LV_DIVISIONCODE        VARCHAR2(10 BYTE) := LTRIM(TRIM(P_DIVISIONCODE)) ;
LV_REF_TABLE_NAME      VARCHAR2(30)      := LTRIM(TRIM(P_REF_TABLE_NAME)) ;
--LV_YEARCODE            VARCHAR2(10 BYTE) := LTRIM(TRIM(P_YEARCODE)) ;
lv_CATMASTCOLS varchar2(10000) := 'SELECT ';
lv_REF_KEY_COL1 varchar2(2000);
lv_totcat_cols varchar2(2000) ;
lv_end_sql varchar2(10000) ;
lv_table varchar2(30) := LV_REF_TABLE_NAME ;
--lv_catparams_cols varchar2(4000);
lv_catparams_cols_with_null CLOB := '';
lv_catparams_cols CLOB := '';
lv_catparams_cols_list CLOB := '';
--lv_cat_param_id varchar2(10):='P';
lv_VIEW_COL_VAL varchar2(300);
lv_totcat int;
lv_catrow int;
lv_tot_param_COL int;
lv_param_row int;
lv_endstr varchar2(2);
lv_view_name varchar2(30) := 'VW_'||lv_table ;
lv_sql CLOB  := 'CREATE OR REPLACE FORCE VIEW '||lv_view_name||chr(10)||' AS '||chr(10) ;
lv_sqlerrm  VARCHAR2(250) := '';
lv_sql_create varchar2(4000) ;
lv_sqlstr     varchar2(4000) ;
lv_comp_div_cnt int := 0;
lv_tot_comp_div_cnt int;
----------  START SUB ROUTINE ------
--------------------------------------
procedure p_create_blank_view_table( p_view_tab varchar2 DEFAULT 'VIEWTAB_WPSWORKERCATEGORYMAST', p_ref_tablename varchar2 DEFAULT 'WPSWORKERCATEGORYMAST' )
         as
           lv_sql_create varchar2(4000) := 'create table '||p_view_tab||' ('||chr(10); 
           lv_rows int;
           lv_loop int;
         begin             
           select count(*) into lv_rows from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID') ;
           lv_loop := 0;   
           for c1 in (
             select column_name , DATA_TYPE , DATA_LENGTH, DATA_PRECISION, DATA_SCALE  from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id      ) loop
             lv_loop := lv_loop+1;
            -- if lv_loop < lv_rows then
              if c1.DATA_TYPE = 'VARCHAR2' then
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_LENGTH||') ,'||chr(10) ;
              elsif c1.DATA_TYPE = 'NUMBER' then
                if c1.DATA_PRECISION is not null then
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_PRECISION||','||c1.DATA_SCALE ||' ) ,'||chr(10) ;
                else
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
                end if;
              else
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
              end if;                               
            end loop;
           ----       
           select count(*) into lv_rows 
           from(
              SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE 
           );
            lv_loop:=0;
            for c1 in (
             SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE  
             order by   VIEW_COL   ) loop
             lv_loop := lv_loop+1;
             if lv_loop < lv_rows then
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') ,'||chr(10) ;
             else
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') '||chr(10)||')' ;
             end if;                        
            end loop;
            execute immediate lv_sql_create ;
end;
----------- END SUB ROUTINE ----------
--------------------------------------
BEGIN
for c2 in( select column_name from cols where table_name = LV_REF_TABLE_NAME 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id
         ) loop
       lv_CATMASTCOLS := lv_CATMASTCOLS||c2.column_name||' ,' ;       
end loop;
lv_end_sql := lv_end_sql||' from '||lv_table ;
if P_REF_KEY_COL1 is null then 
 select distinct 'COMPANYCODE,DIVISIONCODE,'||replace(KEY_COLUMN,'~',',') , replace(KEY_COLUMN,'~',',') into lv_totcat_cols, lv_REF_KEY_COL1 from SYS_SWT_TABLE_PARAMMAST where  REF_TABLE_NAME = LV_REF_TABLE_NAME ;
else
 lv_REF_KEY_COL1 := ltrim(trim(upper(P_REF_KEY_COL1)));
end if; 

 DELETE GTT_WPSDYNAMICVIEW ;
 COMMIT;
 
 lv_sqlstr := 'select count(distinct '||replace(lv_totcat_cols,',','||')||' ) from '||LV_REF_TABLE_NAME||chr(10)
              ||' where 1=1 '||chr(10)
              ||' and '||replace(lv_REF_KEY_COL1,',',' is not null and ')||' is not null ' ;
 --dbms_output.put_line( lv_sqlstr );
 execute immediate  lv_sqlstr into lv_totcat;
 
 lv_sqlstr := 'insert into GTT_WPSDYNAMICVIEW(COMPANYCODE, DIVISIONCODE, REF_KEY_COL_CONCAT)  '||chr(10)
              ||'select distinct companycode,divisioncode,'||replace(lv_REF_KEY_COL1,',','||')||' OCCUPATIONCODE  from '||LV_REF_TABLE_NAME||chr(10)
              ||' where 1=1 '||chr(10)
              ||' and '||replace(lv_REF_KEY_COL1,',',' is not null and ')||' is not null ' ;
 
-- dbms_output.put_line( lv_sqlstr );
 execute immediate  lv_sqlstr ; 
         
                lv_catrow := 0;
    for c2 in (  select COMPANYCODE,DIVISIONCODE , REF_KEY_COL_CONCAT OCCUPATIONCODE from GTT_WPSDYNAMICVIEW   -- to be changed to GTT_WPSDYNAMICVIEW  after on commit preserve rows
                 ) loop   
               -- lv_catparams_cols := ''; 
                lv_catparams_cols_with_null := '';   
                lv_catparams_cols_list := '';
                lv_catrow := lv_catrow + 1;
                select count(distinct PARAM_NAME) into lv_tot_param_COL 
                FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1
                          --  AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                          --  AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME;             
                lv_param_row := 0;
                for c1 in(
                            SELECT DISTINCT PARAM_NAME,  REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,LENGTH(REPLACE(PARAM_NAME,CHR(32)))  LEN,OBJECT_TYPE DATA_TYPE,DATA_TYPE WIDTH FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1 
                           -- AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                           -- AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                             ) loop
                           lv_param_row := lv_param_row+1;  
                           BEGIN  
                           -- select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name ;
                            select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name 
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                            AND NVL(EFFECTIVEDATE,to_date('01/01/1900','DD/MM/YYYY')  ) = ( SELECT NVL(MAX(EFFECTIVEDATE),to_date('01/01/1900','DD/MM/YYYY') ) FROM 
                                                  SYS_SWT_PARAMDETAILS WHERE  COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                  AND PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0*/  AND PARAM_ID = c2.OCCUPATIONCODE) ;
                            /*and PARAM_VALUE > 0 */
                           EXCEPTION 
                            WHEN OTHERS THEN
                              lv_VIEW_COL_VAL := 'NULL';
                           END;  
                           select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                           if lv_VIEW_COL_VAL = 'NULL' then
                            if c1.DATA_TYPE = 'VARCHAR2' then
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                            -- lv_catparams_cols := lv_catparams_cols||''''||RPAD(CHR(32),c1.WIDTH,CHR(32)) ||'''  AS '||c1.VIEW_COL||lv_endstr ;                             
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||'  CAST( RPAD(CHR(32),'||c1.WIDTH||',CHR(32)) AS VARCHAR2('||c1.WIDTH||') )   AS '||c1.VIEW_COL||lv_endstr ;
                            else
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr; 
                          --   lv_catparams_cols := lv_catparams_cols||' 0  AS '||c1.VIEW_COL||lv_endstr ;
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||' TO_NUMBER(NULL)  AS '||c1.VIEW_COL||lv_endstr ;
                            end if;        
                           else  
                             if c1.DATA_TYPE = 'VARCHAR2' then   
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;    
                           --   lv_catparams_cols := lv_catparams_cols||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                             else
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                           --   lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                             end if; 
                           end if  ;                       
                  end loop;
    --              lv_end_sql := ' from '||lv_table||' where companycode = '''||P_COMPANYCODE||''' and divisioncode = '''||P_DIVISIONCODE||''' and categorycode = '''||c2.categorycode||'''' ;
                  lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||c2.COMPANYCODE||''' AND DIVISIONCODE = '''||c2.DIVISIONCODE||''' AND '||replace(lv_REF_KEY_COL1,',','||')||' = '''||c2.OCCUPATIONCODE||'''' ;            
      if lv_tot_param_COL > 0 then    -- ab   
         if lv_catrow =1 then           
           lv_sql_create := 'drop table VIEWTAB_'||LV_REF_TABLE_NAME;
           BEGIN
            execute immediate lv_sql_create ;
           EXCEPTION
            WHEN OTHERS THEN
             NULL;
           END;
         p_create_blank_view_table( 'VIEWTAB_'||LV_REF_TABLE_NAME, LV_REF_TABLE_NAME );
         lv_sql_create := 'insert into VIEWTAB_'||LV_REF_TABLE_NAME||'('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ; 
   
         execute immediate lv_sql_create ;
        
         else           
           --lv_sql_create := 'insert into VIEWTAB_GPSOCCUPATIONMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
           lv_sql_create := 'insert into VIEWTAB_'||LV_REF_TABLE_NAME||'('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ;
           --dbms_output.put_line('INSERT '||lv_sql_create);
            execute immediate lv_sql_create ;
         end if;   
      end if;    -- ab             
    end loop;
    lv_sql := lv_sql||' SELECT * FROM VIEWTAB_'||LV_REF_TABLE_NAME; 
   -- end insert occupationmast view creation query --
insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_CREATE_WPSDYNAMICVIEW',NULL,lv_Sql);
COMMIT;
--dbms_output.put_line(' XXX '||lv_sql);
execute immediate lv_sql ;
exception
when others then
 lv_sqlerrm := sqlerrm ;
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_CREATE_WPSDYNAMICVIEW',lv_sqlerrm,lv_Sql);
 commit;
 --dbms_output.put_line(sqlerrm ||lv_sql); 
end;
/


DROP PROCEDURE PROC_INS_WPSABSENT;

CREATE OR REPLACE PROCEDURE proc_ins_wpsabsent(p_companycode varchar,p_divisioncode varchar, p_From_Dt varchar2, p_absent_dt varchar) as
--,wrksrl varchar
--,wrksrl varchar
lv_shiftcode varchar2(10);
lv_lwd date ;
lv_lwd_letry date ;
lv_lwd_letry_Fr date ;
lv_lwd_temp_DOA date ;
lv_lwd_budli date ;
lv_leavefr date;
lv_cshift char(1);
lv_temp_workerserial varchar2(10);
lv_WorkerSerial     varchar2(10);
lv_WorkerSerial1     varchar2(10);
lv_TokenNo1          varchar2(10);
lv_DOA               date;
lv_temp1             varchar2(60);
lv_temp2             varchar2(60);
lv_temp3             varchar2(60);
lv_temp4             varchar2(60);
lv_DOA_PREV          date;
lv_DOA_PREV_W        date;
lv_DOA_PREV_U        date;
lv_DOA_PREV_Z        date;
lv_ShiftCode_PREV   varchar2(3);
lv_StatusCode       varchar2(3);
lv_Temp_StatusCode  varchar2(3);
lv_Temp_Status      varchar2(3);
lv_Prev_StatusCode  varchar2(3);
lv_LastShiftCode    varchar2(3);
lv_lastDOA          date;
lv_CheckDT          date;
lv_LastStausCode    varchar2(3);
lv_boolinsert         boolean;
lv_shiftcode_budli  varchar2(10);
--lv_WorkerSerial        varchar2(10);
lv_TokenNo            varchar2(10);
lv_SqlErrM            varchar2(500);

begin
  DBMS_OUTPUT.PUT_LINE(to_char(sysdate,'HH:MI:SS AM'));
  delete from WPSABSENT_JOINT  ;
  insert into WPSABSENT_JOINT
  ---------- INSERT STL AND LEAVE DATA IN WPSABSENT_JOINT REPORT --------
  SELECT 'XXXX' SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, 'A' PSHIFT, 'A' CSHIFT,
  'STL' STATUSCODE, STLFROMDATE LEAVEFROM, STLTODATE LEAVETO
  FROM WPSSTLENTRY A
  WHERE COMPANYCODE =p_companycode AND DIVISIONCODE = p_divisioncode
  AND A.STLFROMDATE <= TO_DATE(p_absent_dt,'DD/MM/YYYY')
  AND A.STLTODATE >= TO_DATE(p_absent_dt,'DD/MM/YYYY');
--  UNION ALL
--  SELECT 'XXXX' SECTIONCODE, A.WORKERSERIAL, A.TOKENNO, 'A' PSHIFT, 'A' CSHIFT,
--  A.DOCUMENTTYPE STATUSCODE,A.LEAVEFROMDATE LEAVEFROM, A.LEAVETODATE LEAVETO
--  FROM WPSLEAVEENTRY A
--  WHERE COMPANYCODE = p_companycode AND DIVISIONCODE = p_divisioncode
--  AND LEAVEFROMDATE <= TO_DATE(p_absent_dt,'DD/MM/YYYY')
--  AND LEAVETODATE >= TO_DATE(p_absent_dt,'DD/MM/YYYY') ;

  FOR C1 IN (
  SELECT 'XXXX' SECTIONCODE, A.WORKERSERIAL, B.TOKENNO,B.GROUPCODE PSHIFT , --, DECODE(B.SHIFTCODE,'1','A',DECODE(B.SHIFTCODE,'2','B','C')) SHIFTCODE,
  A.STATUSCODE, A.LEAVETO
  FROM (
            SELECT A.WORKERSERIAL, /*A.TOKENNO, B.GROUPCODE,-*/  A.STATUSCODE, A.DATEOFATTENDANCE LEAVETO
            FROM WPSATTENDANCEDAYWISE A --,WPSWORKERMAST B
            WHERE A.COMPANYCODE = p_companycode
             AND A.DIVISIONCODE = p_divisioncode
             AND A.DATEOFATTENDANCE=TO_DATE(p_absent_dt,'DD/MM/YYYY')
             AND A.STATUSCODE='U'
             AND A.TOKENNO IS NOT NULL
            MINUS
            SELECT A.WORKERSERIAL, /*A.TOKENNO,  B.GROUPCODE,  */ 'U' STATUSCODE, A.DATEOFATTENDANCE LEAVETO
            FROM WPSATTENDANCEDAYWISE A
            WHERE A.COMPANYCODE = p_companycode 
              AND A.DIVISIONCODE = p_divisioncode
              AND A.DATEOFATTENDANCE=TO_DATE(p_absent_dt,'DD/MM/YYYY')
              AND A.STATUSCODE <>'U'
              AND A.TOKENNO IS NOT NULL
              -- NOT FOUND
--            MINUS
--            SELECT A.WORKERSERIAL, /*A.TOKENNO,  B.GROUPCODE, */'Z' STATUSCODE, A.DATEOFATTENDANCE LEAVETO
--            FROM WPSBUDLIATTENDANCE A
--            WHERE A.COMPANYCODE = p_companycode
--              AND A.DIVISIONCODE = p_divisioncode
--              AND A.DATEOFATTENDANCE=TO_DATE(p_absent_dt,'DD/MM/YYYY')
--              AND A.TOKENNO IS NOT NULL
              -- NOT FOUND
            MINUS
            SELECT A.WORKERSERIAL, /*A.TOKENNO, 'GR' GROUPCODE, */ 'U' STATUSCODE, TO_DATE(p_absent_dt,'DD/MM/YYYY') LEAVETO
            FROM WPSSTLENTRY A
            WHERE A.COMPANYCODE = p_companycode
              AND A.DIVISIONCODE = p_divisioncode
              AND A.STLFROMDATE <= TO_DATE(p_absent_dt,'DD/MM/YYYY')
              AND A.STLTODATE >= TO_DATE(p_absent_dt,'DD/MM/YYYY')
                            -- NOT FOUND
--            MINUS
--            SELECT A.WORKERSERIAL, /*A.TOKENNO, 'GR' GROUPCODE, */ 'U' STATUSCODE, TO_DATE(p_absent_dt,'DD/MM/YYYY') LEAVETO
--            FROM WPSLEAVEENTRY A
--            WHERE A.COMPANYCODE = p_companycode
--              AND A.DIVISIONCODE = p_divisioncode
--              AND A.LEAVEFROMDATE <= TO_DATE(p_absent_dt,'DD/MM/YYYY')
--              AND A.LEAVETODATE >= TO_DATE(p_absent_dt,'DD/MM/YYYY')
              -- NOT FOUND
            UNION
            SELECT A.WORKERSERIAL, /*A.TOKENNO, A.GROUPCODE, */ A.STATUSCODE, A.DATEOFATTENDANCE LEAVETO
            FROM WPSATTENDANCEDAYWISE A
            WHERE A.COMPANYCODE = p_companycode 
              AND A.DIVISIONCODE = p_divisioncode
              AND A.DATEOFATTENDANCE=TO_DATE(p_absent_dt,'DD/MM/YYYY')
              AND A.STATUSCODE='W'
              AND A.TOKENNO IS NOT NULL
        ) A, WPSWORKERMAST B 
        WHERE B.COMPANYCODE = p_companycode AND B.DIVISIONCODE = p_divisioncode
        AND A.WORKERSERIAL = B.WORKERSERIAL
        ----AND A.WORKERSERIAL ='01979'---lv_WorkerSerial1
        order by a.workerserial )
  LOOP
      begin
        lv_WorkerSerial    := c1.workerserial;
        lv_TokenNo        := c1.TokenNo;

        begin
            lv_Prev_StatusCode := null;
            lv_DOA_PREV := null;
            lv_DOA_PREV_U:=NULL;
            lv_ShiftCode_PREV := null;
            lv_lastDOA := null;
            lv_LastShiftCode := null;
            lv_lwd_budli := null;
            lv_lwd_letry := null;
            lv_lwd := null;
            lv_temp_workerserial :=null;
            lv_ShiftCode  := null;
            lv_temp1       :=null;
            lv_temp2       :=null;
            lv_temp3       :=null;
            lv_Temp_StatusCode:=NULL;
            lv_Temp_Status    :=NULL;
            lv_CheckDT := NULL;
           -- lv_DOA_PREV_W:=NULL;
            lv_lwd_temp_DOA:=null;
            BEGIN
             --IF c1.statuscode='W' then
              --lv_Temp_StatusCode:='U';
            --ELSE
                 lv_Temp_StatusCode:=C1.STATUSCODE;
            ----END IF;
            --NULL;
            END;


            For  c2 in (
            --select  /*+ INDEX(A.IDX_ATTN_ULREPORT ) */ workerserial, tokenno, dateofattendance, sectioncode,shiftcode, statuscode
            select  /*+ INDEX(A.IDX_ATTN_ULREPORT) */  workerserial, /*tokenno,*/ dateofattendance, sectioncode,shiftcode,
            DECODE(A.statuscode,'U',A.STATUSCODE,DECODE(A.STATUSCODE,'W',A.STATUSCODE,'Z'))STATUSCODE, A.STATUSCODE ORG_STATUSCODE
            from WPSATTENDANCEDAYWISE A
            WHERE A.COMPANYCODE =  p_companycode
              AND A.DIVISIONCODE = p_divisioncode
              AND A.WORKERSERIAL = C1.WORKERSERIAL
              AND A.WORKERSERIAL =lv_WorkerSerial
              AND A.TOKENNO IS NOT NULL
              AND A.DATEOFATTENDANCE >= TO_DATE(p_From_Dt,'dd/mm/yyyy')        ---- due to system start from 01.08.2011
              AND A.DATEOFATTENDANCE <= TO_DATE(p_absent_dt,'dd/mm/yyyy')
            --AND NVL(A.STATUSCODE,'ZZ') <> 'U'
            order by dateofattendance desc, shiftcode desc)   -- UNCOMMENTED BY PRASUN
            -- NOT FOUND
--            UNION ALL
--            SELECT /*+ INDEX(A.IDX_BUDLI_ATTEND_DESC) */ A.WORKERSERIAL, /*A.TOKENNO,*/ A.DATEOFATTENDANCE, A.SECTIONCODE,A.SHIFTCODE, 'Z' STATUSCODE, 'Z' ORG_STATUSCODE
--                        from WPSBUDLIATTENDANCE A
--                        WHERE A.COMPANYCODE =  p_companycode 
--                          AND A.DIVISIONCODE = p_divisioncode
--                         AND A.WORKERSERIAL = C1.WORKERSERIAL
--                        AND A.WORKERSERIAL =lv_WorkerSerial
--                        --AND A.WORKERSERIAL = '12101'
--                        AND A.DATEOFATTENDANCE >= TO_DATE(p_From_Dt,'dd/mm/yyyy')        ---- due to system start from 01.08.2011
--                        AND A.DATEOFATTENDANCE <= TO_DATE(p_absent_dt,'dd/mm/yyyy')
--                        AND A.TOKENNO IS NOT NULL
--                        AND A.DATEOFATTENDANCE <= TO_DATE('15/12/2011','dd/mm/yyyy')
--            order by dateofattendance desc,STATUSCODE DESC, shiftcode desc)
            -- NOT FOUND
         --lv_CheckDT := NULL;
         loop


          ---lv_Temp_Status:=NULL;
          lv_boolinsert:=true;

          if c2.statuscode='W' AND C2.dateofattendance=TO_DATE(p_absent_dt,'dd/mm/yyyy') then  ----FOR RUNNING  ON THE WEEKOFDAY
            --DBMS_OUTPUT.PUT_LINE('INSIDE STATUS CODE - W AND  - ');
            lv_temp2:='W';
           lv_DOA_PREV_W:=C2.dateofattendance;
          end if;
          ------------
          if c2.statuscode='W' then
            lv_temp3:=C2.dateofattendance;
          end if;
          --DBMS_OUTPUT.PUT_LINE('MY-WPREVDATE'||lv_temp2||'-'||lv_DOA_PREV_W);
          
            --DBMS_OUTPUT.PUT_LINE('MY-WPREVDATE'||lv_temp2);

          if c2.StatusCode = 'W' then
              if lv_temp1 = 'U' then
                  lv_Prev_StatusCode := lv_temp1;
                  lv_ShiftCode_PREV := lv_ShiftCode_PREV;
                  lv_DOA_PREV := lv_DOA_PREV;
                  lv_DOA_PREV_U:=lv_DOA_PREV;
                  lv_temp1 := null;
              else
                  lv_Prev_StatusCode := c2.StatusCode;
                  lv_DOA_PREV := c2.dateofattendance;
                  lv_lwd_temp_DOA:=lv_DOA_PREV;--for running on dayoffday
                  lv_ShiftCode_PREV := c2.shiftcode;
                  --lv_temp1 := c2.StatusCode;
                  lv_temp1 := null;
              end if;

              lv_temp1 := null;

          elsif c2.StatusCode = 'U' then

            if c2.dateofattendance <> nvl(lv_checkDT,to_date('01/01/1975','dd/mm/yyyy')) then       --- null date not check the condition, so imaginary like '01/01/1975 replace with null date
                lv_DOA_PREV := c2.dateofattendance;
                lv_temp1 := c2.StatusCode;
                lv_Prev_StatusCode := c2.StatusCode;
                lv_WorkerSerial1:=c2.workerserial;
                lv_temp4:= c2.dateofattendance;  ---for use in case before weekoff is UL
                ----

               -- DBMS_OUTPUT.PUT_LINE ('lv_temp4'||lv_temp4||'doa_prev'||lv_DOA_PREV);
            end if;
                 

          elsif c2.StatusCode = 'Z' then
             if lv_Prev_StatusCode = 'U'   then  ---added on 0509 or lv_Prev_StatusCode = 'W
                    lv_Temp_Status:='U';
                    lv_lastDOA := lv_DOA_PREV;
                    EXIT;

             elsif  lv_Prev_StatusCode = 'W' then
                    IF LENGTH(lv_DOA_PREV_U)>0 THEN
                        lv_lastDOA := lv_DOA_PREV_U;------lv_DOA_PREV;
                    ELSE
                        lv_lastDOA := lv_DOA_PREV;
                    END IF;
            
                  EXIT;
             ELSE
                lv_boolinsert:=false;
                EXIT;
            end if;
            lv_CheckDT := c2.dateofattendance;

          end if;

          --DBMS_OUTPUT.PUT_LINE ('Check Date '||lv_CheckDT);

         --DBMS_OUTPUT.PUT_LINE ('Previous Status Code - '||lv_Prev_StatusCode);

          --------------FOR RUNNING the report ON THE WEEKOFDAY
          if c2.StatusCode = 'U' then
           if lv_temp2='W'  THEN
                --DBMS_OUTPUT.PUT_LINE ('before cond check INSID LV_TEMP2=W,TEMP STATUS CODE '||lv_Temp_Status);
                -- START ADD BY AMALESH ON 29.09.2012 -------
                IF lv_temp2='W' and lv_DOA_PREV = c2.dateofattendance  then
                    lv_Temp_Status:='W';
                    --lv_LastDOA:=lv_DOA_PREV;
                else
                    lv_Temp_Status:='U';
                end if;

                --DBMS_OUTPUT.PUT_LINE ('After cond. check  INSID LV_TEMP2=W,TEMP STATUS CODE '||lv_Temp_Status);
                --lv_Temp_Status:='U';----FOR RUNNING  ON THE WEEKOFDAY
                -- END ADD BY AMALESH ON 29.09.2012 -------
            end if;


            --DBMS_OUTPUT.PUT_LINE ('lv_temp2 '||lv_temp2||' lv_Temp_Status'||lv_Temp_Status);
          end if;
          --------------FOR RUNNING the report ON THE WEEKOF
          lv_checkDT := c2.dateofattendance;


         end loop;

         --DBMS_OUTPUT.PUT_LINE('exit loop :- lv_temp1 '||lv_temp1||' , Prev. status code '||lv_Prev_StatusCode||' , DOA Prev. '||lv_DOA_PREV||' last DOA '||lv_LASTDOA);
            lv_ShiftCode := lv_LastShiftCode;
            lv_lwd := lv_LastDOA;
--            if length(lv_lwd_temp_DOA)>0 then
--                lv_lwd:=lv_lwd_temp_DOA;
--            ELSE
--                lv_lwd := lv_LastDOA;
--            end if;


--

            /*if c1.TokenNo='41280' then
                DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_TokenNo||' last Date/shift :'||lv_lwd||'/'||lv_ShiftCode);
            end if; */

        exception
             when others then
                   lv_SqlErrM := sqlerrm;
--                  DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_TokenNo||' Exception 1 :'||lv_SqlErrM );
                  null;

        end;
          --- max shift xx working date from  WPSBUDLIATTENDANCE --

-- NOT FOUND

--        begin
--            SELECT  MAX(A.SHIFTCODE) , MAX(A.DATEOFATTENDANCE)
--            into lv_shiftcode_budli , lv_lwd_budli
--            FROM WPSBUDLIATTENDANCE A
--            WHERE A.COMPANYCODE = p_companycode AND A.DIVISIONCODE = p_divisioncode
--            AND A.DATEOFATTENDANCE >= TO_DATE(p_From_Dt,'dd/mm/yyyy')
--            AND A.DATEOFATTENDANCE <= TO_DATE(p_absent_dt,'dd/mm/yyyy')
--            AND A.WORKERSERIAL = A.WORKERSERIAL
--            AND A.WORKERSERIAL = C1.WORKERSERIAL
--            AND A.TOKENNO IS NOT NULL
--            GROUP BY A.WORKERSERIAL, A.TOKENNO ;
--          exception
--             when others then
--               lv_SqlErrM := sqlerrm;
----               DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_TokenNo||' Exception 2 :'||lv_SqlErrM );
--              null;
--         end;
--
--         --DBMS_OUTPUT.PUT_LINE('MY-LVBUDLI'||lv_lwd_budli);
--
--        if  NVL(lv_lwd_budli,TO_DATE(p_From_Dt,'DD/MM/YYYY')) >  lv_lwd then
--            /*if c1.TokenNo='41280' then
--                DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_tokenno||' budli date greate than last attn date, Budli Date - '||lv_lwd_budli);
--            end if; */
--            lv_lwd := lv_lwd_budli ;
--        end if;
--        -----  to check whether leave from entry exists is WPSLEAVEENTRY if exists and gt attendaywise leavefrom date the it is considered as lesvre from data ---
        
---               

       
--        begin
--            SELECT max(LEAVETODATE) into lv_lwd_letry
--                FROM WPSLEAVEENTRY A
--                WHERE A.COMPANYCODE = p_companycode AND A.DIVISIONCODE = p_divisioncode
--                AND A.LEAVEFROMDATE >= TO_DATE(p_From_Dt,'dd/mm/yyyy')
--                AND LEAVEFROMDATE <= TO_DATE(p_absent_dt,'dd/mm/yyyy')
--               --- AND LEAVETODATE >= TO_DATE(p_absent_dt,'DD/MM/YYYY')
--               and A.WORKERSERIAL = C1.WORKERSERIAL
--               group by workerserial,tokenno ;
--          exception
--             when others then
--               lv_SqlErrM := sqlerrm;
----               DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_TokenNo||' Exception 3 :'||lv_SqlErrM );
--              null;
--
--         end;
--         --DBMS_OUTPUT.PUT_LINE(' CHECKING BUDLI :- lv_lwd_budli - '||lv_lwd_budli||', lv_lwd - '||lv_lwd);
--            --DBMS_OUTPUT.PUT_LINE('CHECKING LEAVE :- lv_lwd_letry - '||lv_lwd_letry||', lv_lwd - '||lv_lwd);
--            if NVL(lv_lwd_letry,TO_DATE(p_From_Dt,'DD/MM/YYYY')) > lv_lwd then
--               -----lv_lwd := lv_lwd_letry_Fr ;
--                --if c1.TokenNo='41481' then
--                  --DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_tokenno||' leave date greate than last attn date, leave Date'||lv_lwd_letry);
--                --end if;
--              lv_lwd := lv_lwd_letry ;
--            end if;
--
--             IF lv_lwd IS NULL  THEN
--                lv_lwd:=TO_DATE(p_From_Dt,'DD/MM/YYYY');
--            END IF;
--
--           -- DBMS_OUTPUT.PUT_LINE(' CHECKING CASE :- lv_lwd - '||lv_lwd||', ABSENT DATE - '||p_absent_dt);
--            select CASE WHEN lv_lwd >= TO_DATE(p_absent_dt,'DD/MM/YYYY') THEN  lv_lwd   ELSE lv_lwd  END into lv_leavefr from dual;
--            ---DBMS_OUTPUT.PUT_LINE(' CHECKING CASE LEAVEFROM :- '||lv_leavefr);
--
----             IF lv_Temp_Status='W' THEN
----                 lv_leavefr:=TO_DATE(p_absent_dt,'DD/MM/YYYY');
----             END IF;
--
--
--             select DECODE(lv_shiftcode,'1','A',DECODE(lv_shiftcode,'2','B','C')) into lv_cshift from dual ;
--
--
--             --DBMS_OUTPUT.PUT_LINE('MYfinal-lengthLVTEMPSTSTUS - '||LENGTH(lv_Temp_Status)||' TEMPSTATUS - '||lv_Temp_Status||' Leave from '||lv_leavefr||' Shift Code '||lv_cshift);
--             --DBMS_OUTPUT.PUT_LINE('MYfinal-lengthLVTEMPSTSTUS - '||LENGTH(lv_Temp_Status)||' Leave from '||lv_leavefr||' Shift Code '||lv_cshift);
--             --DBMS_OUTPUT.PUT_LINE('BOOLVALUE'||lv_boolinsert);
--            if lv_boolinsert= true then
--                IF LENGTH(lv_Temp_Status)>0 THEN
--                    insert into WPSABSENT_JOINT values( c1.sectioncode , c1.workerserial,c1.tokenno, c1.pshift,lv_cshift,lv_Temp_Status,lv_leavefr ,c1.LEAVETO );
--                    --DBMS_OUTPUT.PUT_LINE('STATUS TEMP - '||lv_Temp_Status);
--                    lv_Temp_Status:=null;
--                ELSE
--                 insert into WPSABSENT_JOINT values( c1.sectioncode , c1.workerserial,c1.tokenno, c1.pshift,lv_cshift,C1.STATUSCODE,lv_leavefr ,c1.LEAVETO );
--                 --DBMS_OUTPUT.PUT_LINE('STATUS TABLE- '||C1.STATUSCODE);
--                END IF;
--
--           end if;

              -- DBMS_OUTPUT.PUT_LINE(' AFTERXFINEMPSTATUSWorker Serial - '||lv_Temp_Status);

---               -- NOT FOUND

      exception
         when others then
           lv_SqlErrM := sqlerrm;
           DBMS_OUTPUT.PUT_LINE(' Worker Serial - '||lv_WorkerSerial||' Token - '||lv_TokenNo||' Exception last :'||lv_SqlErrM );
          null;
      end;
END LOOP;
COMMIT;
DBMS_OUTPUT.PUT_LINE(to_char(sysdate,'HH:MI:SS AM'));
exception
when others then
   DBMS_OUTPUT.PUT_LINE(sqlerrm);
end;
/


DROP PROCEDURE PROC_RPT_ABSTRACTWPS;

CREATE OR REPLACE PROCEDURE PROC_RPT_ABSTRACTWPS
(
  P_COMPCODE Varchar2, 
  P_DIVCODE Varchar2, 
  P_YEARCODE Varchar2, 
  P_FORTNIGHTSTARTDATE Varchar2,
  P_FORTNIGHTENDDATE  Varchar2,
  P_DEPARTMENTCODE Varchar2,
  P_WORKERCATEGORYCODE Varchar2 DEFAULT NULL
 )
as
/******************************************************************************
   NAME:      Prasun
   Date :     24.09.2019
   Implementing for Gloster Jute Mills 
******************************************************************************/
    LV_FORTNIGHTSTARTDATE      DATE := TO_DATE(P_FORTNIGHTSTARTDATE,'DD/MM/YYYY');
    LV_FORTNIGHTENDDATE      DATE := TO_DATE(P_FORTNIGHTENDDATE,'DD/MM/YYYY');
    LV_STRSQL           VARCHAR2(30000);
    LV_COL_HD  VARCHAR2(2000);
    LV_PIVOT  VARCHAR2(2000);
    LV_REPORTHEADER VARCHAR2(200) := 'WORKER`S FORTNIGHTLY PAY ABSTACT  FROM ' || P_FORTNIGHTSTARTDATE || ' TO ' || P_FORTNIGHTENDDATE;
    LV_COMPANYNAME  VARCHAR2(100);
    LV_DIVISIONNAME  VARCHAR2(100);
    LV_DEPARTMENTCODEALL VARCHAR2(1000);
    LV_DEPARTMENTCODE VARCHAR2(100);
begin
        SELECT COMPANYNAME INTO LV_COMPANYNAME FROM COMPANYMAST
        WHERE COMPANYCODE = P_COMPCODE;
        
        SELECT DIVISIONNAME INTO LV_DIVISIONNAME FROM DIVISIONMASTER
        WHERE DIVISIONCODE = P_DIVCODE;

        --SELECT REPLACE(P_DEPARTMENTCODE,'''','')  INTO  LV_DEPARTMENTCODE FROM DUAL;
        
        DELETE FROM GTT_ABSTRACTWPS; 
   

        IF P_DEPARTMENTCODE IS NULL THEN
        
            SELECT WM_CONCAT(DEPARTMENTCODE) INTO LV_DEPARTMENTCODEALL  FROM WPSDEPARTMENTMASTER
            WHERE COMPANYCODE = P_COMPCODE
            AND DIVISIONCODE = P_DIVCODE;
            
        ELSE
        
            LV_DEPARTMENTCODEALL :=  P_DEPARTMENTCODE; 
              
        END IF;
        
        --dbms_output.put_line('LV_DEPARTMENTCODEALL ' || LV_DEPARTMENTCODEALL);

        for I in 1..FN_WORD_CNT(REPLACE(LV_DEPARTMENTCODEALL,'''',''),NULL,',') 
        loop

                    SELECT FN_WORD_CNT(REPLACE(LV_DEPARTMENTCODEALL,'''',''),I,',') INTO LV_DEPARTMENTCODE FROM DUAL;
                   
                    
                     SELECT WM_CONCAT(' SUM(NVL(' || CNAME || ',0))' || CNAME) INTO LV_COL_HD FROM
                     (
                        SELECT CNAME 
                        From COL
                        WHERE TNAME = 'WPSWAGESDETAILS_MV'
                        AND SUBSTR(CNAME,-5) = 'HOURS'
                        ORDER BY COLNO
                     );
                     
                     SELECT WM_CONCAT(CNAME) INTO LV_PIVOT  FROM
                     (
                        SELECT CNAME 
                        From COL
                        WHERE TNAME = 'WPSWAGESDETAILS_MV'
                        AND SUBSTR(CNAME,-5) = 'HOURS'
                        ORDER BY COLNO
                     );
                     
                    --   dbms_output.put_line('LV_DEPARTMENTCODE ' || LV_DEPARTMENTCODE);
        --               dbms_output.put_line('LV_PIVOT ' || LV_PIVOT);
                     
          
                BEGIN
                    EXECUTE IMMEDIATE 'DROP TABLE TBL_COMPHOURS';
                EXCEPTION
                    WHEN OTHERS THEN NULL;     
                END;     
            

            
                 LV_STRSQL := '    CREATE TABLE TBL_COMPHOURS AS   '|| CHR(10)     
                            ||'    SELECT ROWNUM  SRL,  DEPARTMENTCODE, COMPNAME, COMPVALUE FROM '|| CHR(10)
                            ||' (  '|| CHR(10)
                            ||'    SELECT DEPARTMENTCODE, COMPNAME, COMPVALUE FROM  '|| CHR(10)
                            ||' (     '|| CHR(10)
                            ||'    SELECT * FROM ( '|| CHR(10)
                            ||'      SELECT  COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, ' || LV_COL_HD || CHR(10)
                            ||'     FROM WPSWAGESDETAILS_MV '|| CHR(10)
                            ||'     WHERE COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
                            ||'     AND   DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
                            ||'     AND   YEARCODE  = '''||P_YEARCODE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTSTARTDATE = '''||LV_FORTNIGHTSTARTDATE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTENDDATE   = '''||LV_FORTNIGHTENDDATE||'''   '|| CHR(10)
                            ||'     AND   DEPARTMENTCODE = '''||LV_DEPARTMENTCODE||'''   '|| CHR(10);
                            IF P_WORKERCATEGORYCODE IS NOT NULL THEN
                                LV_STRSQL := LV_STRSQL ||'     AND   WORKERCATEGORYCODE IN ( '||P_WORKERCATEGORYCODE||')   '|| CHR(10);
                            END IF;
                            LV_STRSQL := LV_STRSQL ||'     GROUP BY COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE '|| CHR(10)
                            ||'     )  '|| CHR(10)
                            ||'     UNPIVOT (COMPVALUE FOR COMPNAME IN ('||LV_PIVOT||'))  '|| CHR(10)
                            ||' ) A ,COL B  '|| CHR(10)
                            ||'   WHERE B.TNAME = ''WPSWAGESDETAILS_MV''  '|| CHR(10)
                            ||'     AND A.COMPNAME = B.CNAME  '|| CHR(10)
                            ||'     AND SUBSTR(CNAME,-5) = ''HOURS'' '|| CHR(10)
                            ||' ORDER BY A.DEPARTMENTCODE, B.COLNO )'|| CHR(10);

                            -- DBMS_OUTPUT.PUT_LINE(LV_STRSQL);
                             EXECUTE IMMEDIATE LV_STRSQL;   


        /****************************HOURS PART******************************************/


        /****************************EARNING PART******************************************/         
                    
                     SELECT WM_CONCAT(' SUM(NVL(' || COMP_EARN || ',0))' || COMP_EARN) INTO LV_COL_HD FROM
                     (
                       SELECT COMPONENTSHORTNAME COMP_EARN
                       From WPSCOMPONENTMASTER
                       WHERE COMPANYCODE = P_COMPCODE
                         AND DIVISIONCODE = P_DIVCODE
                         AND COMPONENTTYPE = 'EARNING' 
                         AND COMPONENTSHORTNAME <> ('GROSS_FOR_HRA') 
                         AND COMPONENTTAG = 'N' 
                      ORDER BY CALCULATIONINDEX                  
                     );
                     
                     SELECT WM_CONCAT(COMP_EARN) INTO LV_PIVOT  FROM
                     (
                        SELECT COMPONENTSHORTNAME COMP_EARN
                       From WPSCOMPONENTMASTER
                       WHERE COMPANYCODE = P_COMPCODE
                         AND DIVISIONCODE = P_DIVCODE
                         AND COMPONENTTYPE = 'EARNING' 
                         AND COMPONENTSHORTNAME <> ('GROSS_FOR_HRA') 
                         AND COMPONENTTAG = 'N' 
                      ORDER BY CALCULATIONINDEX           
                     );
                     
        --               dbms_output.put_line('LV_COL_HD ' || LV_COL_HD);
        --               dbms_output.put_line('LV_PIVOT ' || LV_PIVOT);
                     

                BEGIN
                    EXECUTE IMMEDIATE 'DROP TABLE TBL_COMPEARNING';
                EXCEPTION
                    WHEN OTHERS THEN NULL;     
                END;     
            

            
                 LV_STRSQL := '    CREATE TABLE TBL_COMPEARNING AS   '|| CHR(10)   
                            ||'    SELECT ROWNUM  SRL,  DEPARTMENTCODE, COMPNAME, COMPVALUE FROM '|| CHR(10)
                            ||' (  '|| CHR(10)           
                            ||'    SELECT DEPARTMENTCODE, COMPNAME, COMPVALUE FROM  '|| CHR(10)
                            ||' (     '|| CHR(10)
                            ||'    SELECT * FROM ( '|| CHR(10)
                            ||'      SELECT  COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, ' || LV_COL_HD || CHR(10)
                            ||'     FROM WPSWAGESDETAILS_MV '|| CHR(10)
                            ||'     WHERE COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
                            ||'     AND   DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
                            ||'     AND   YEARCODE  = '''||P_YEARCODE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTSTARTDATE = '''||LV_FORTNIGHTSTARTDATE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTENDDATE   = '''||LV_FORTNIGHTENDDATE||'''   '|| CHR(10)
                            ||'     AND   DEPARTMENTCODE =  '''||LV_DEPARTMENTCODE||'''   '|| CHR(10); 
                            IF P_WORKERCATEGORYCODE IS NOT NULL THEN
                                LV_STRSQL := LV_STRSQL ||'     AND   WORKERCATEGORYCODE IN ( '||P_WORKERCATEGORYCODE||')   '|| CHR(10);
                            END IF;
                            LV_STRSQL := LV_STRSQL ||'     GROUP BY COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE '|| CHR(10)
                            ||'     )  '|| CHR(10)
                            ||'     UNPIVOT (COMPVALUE FOR COMPNAME IN ('||LV_PIVOT||'))  '|| CHR(10)
                            ||' ) A ,WPSCOMPONENTMASTER B  '|| CHR(10)
                            ||'   WHERE A.COMPANYCODE = B.COMPANYCODE  '|| CHR(10)
                            ||'     AND A.DIVISIONCODE = B.DIVISIONCODE '|| CHR(10)
                            ||'     AND B.COMPONENTTYPE = ''EARNING''  '|| CHR(10)
                            ||'     AND A.COMPNAME = B.COMPONENTSHORTNAME  '|| CHR(10)
                            ||'     AND B.COMPONENTSHORTNAME <> (''GROSS_FOR_HRA'') '|| CHR(10)
                            ||'     AND B.COMPONENTTAG = ''N''   '|| CHR(10)
                            ||' ORDER BY A.DEPARTMENTCODE, B.CALCULATIONINDEX ) '|| CHR(10);

                            -- DBMS_OUTPUT.PUT_LINE(LV_STRSQL);
                             EXECUTE IMMEDIATE LV_STRSQL;   


        /****************************EARNING PART******************************************/


        /****************************DEDUCTION PART******************************************/         
                    
                     SELECT WM_CONCAT(' SUM(NVL(' || COMP_DEDN || ',0))' || COMP_DEDN) INTO LV_COL_HD FROM
                     (
                       SELECT COMPONENTSHORTNAME COMP_DEDN
                       From WPSCOMPONENTMASTER
                       WHERE COMPANYCODE = P_COMPCODE
                         AND DIVISIONCODE = P_DIVCODE
                         AND COMPONENTTYPE = 'DEDUCTION' 
                         AND NVL(COMPANYCONTIBUTION,'No') = 'No' 
                         AND COMPONENTTAG = 'N'
                       ORDER BY CALCULATIONINDEX   
                     );
                     
                     SELECT WM_CONCAT(COMP_DEDN) INTO LV_PIVOT  FROM
                     (
                         SELECT COMPONENTSHORTNAME COMP_DEDN
                           From WPSCOMPONENTMASTER
                           WHERE COMPANYCODE = P_COMPCODE
                             AND DIVISIONCODE = P_DIVCODE
                             AND COMPONENTTYPE = 'DEDUCTION' 
                             AND NVL(COMPANYCONTIBUTION,'No') = 'No' 
                             AND COMPONENTTAG = 'N'
                           ORDER BY CALCULATIONINDEX
                     );
                     
        --               dbms_output.put_line('LV_COL_HD ' || LV_COL_HD);
        --               dbms_output.put_line('LV_PIVOT ' || LV_PIVOT);
                     
                BEGIN
                    EXECUTE IMMEDIATE 'DROP TABLE TBL_COMPDEDUCTION';
                EXCEPTION
                    WHEN OTHERS THEN NULL;     
                END;     
            

            
                 LV_STRSQL := '    CREATE TABLE TBL_COMPDEDUCTION AS   '|| CHR(10)     
                            ||'    SELECT ROWNUM  SRL,  DEPARTMENTCODE, COMPNAME, COMPVALUE FROM '|| CHR(10)
                            ||' (  '|| CHR(10)              
                            ||'    SELECT DEPARTMENTCODE, COMPNAME, COMPVALUE FROM  '|| CHR(10)
                            ||' (     '|| CHR(10)
                            ||'    SELECT * FROM ( '|| CHR(10)
                            ||'      SELECT  COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, ' || LV_COL_HD || CHR(10)
                            ||'     FROM WPSWAGESDETAILS_MV '|| CHR(10)
                            ||'     WHERE COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
                            ||'     AND   DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
                            ||'     AND   YEARCODE  = '''||P_YEARCODE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTSTARTDATE = '''||LV_FORTNIGHTSTARTDATE||'''   '|| CHR(10)
                            ||'     AND   FORTNIGHTENDDATE   = '''||LV_FORTNIGHTENDDATE||'''   '|| CHR(10)
                            ||'     AND   DEPARTMENTCODE =  '''||LV_DEPARTMENTCODE||'''   '|| CHR(10);
                            IF P_WORKERCATEGORYCODE IS NOT NULL THEN
                                LV_STRSQL := LV_STRSQL ||'     AND   WORKERCATEGORYCODE IN ( '||P_WORKERCATEGORYCODE||')   '|| CHR(10);
                            END IF;
                            LV_STRSQL := LV_STRSQL ||'     GROUP BY COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE '|| CHR(10)
                            ||'     )  '|| CHR(10)
                            ||'     UNPIVOT (COMPVALUE FOR COMPNAME IN ('||LV_PIVOT||'))  '|| CHR(10)
                            ||' ) A ,WPSCOMPONENTMASTER B  '|| CHR(10)
                            ||'   WHERE A.COMPANYCODE = B.COMPANYCODE  '|| CHR(10)
                            ||'     AND A.DIVISIONCODE = B.DIVISIONCODE '|| CHR(10)
                            ||'     AND B.COMPONENTTYPE = ''DEDUCTION''  '|| CHR(10)
                            ||'     AND A.COMPNAME = B.COMPONENTSHORTNAME  '|| CHR(10)
                            ||'     AND NVL(B.COMPANYCONTIBUTION,''No'') = ''No''  '|| CHR(10)
                            ||'     AND B.COMPONENTTAG = ''N''   '|| CHR(10)
                            ||' ORDER BY A.DEPARTMENTCODE, B.CALCULATIONINDEX ) '|| CHR(10);

                             --DBMS_OUTPUT.PUT_LINE(LV_STRSQL);
                             EXECUTE IMMEDIATE LV_STRSQL;   

    /****************************DEDUCTION PART******************************************/

    /****************************COMMON PART******************************************/



                BEGIN
                    EXECUTE IMMEDIATE 'DROP TABLE TBL_COMPCOMMON';
                EXCEPTION
                    WHEN OTHERS THEN NULL;     
                END; 


               LV_STRSQL := '    CREATE TABLE TBL_COMPCOMMON AS   '|| CHR(10)   
                          ||'  SELECT DEPARTMENTCODE, COUNT(WORKERSERIAL) NOOFSLIPS, SUM(COINBF) COINBF, SUM(COINCF) COINCF, SUM(PF_COM) PF_COM FROM WPSWAGESDETAILS_MV '|| CHR(10)
                          ||'  WHERE COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
                          ||'     AND   DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
                          ||'     AND   YEARCODE  = '''||P_YEARCODE||'''   '|| CHR(10)
                          ||'     AND   FORTNIGHTSTARTDATE = '''||LV_FORTNIGHTSTARTDATE||'''   '|| CHR(10)
                          ||'     AND   FORTNIGHTENDDATE   = '''||LV_FORTNIGHTENDDATE||'''   '|| CHR(10)
                          ||'     AND   DEPARTMENTCODE =  '''||LV_DEPARTMENTCODE||'''   '|| CHR(10);
                          IF P_WORKERCATEGORYCODE IS NOT NULL THEN
                                LV_STRSQL := LV_STRSQL ||'     AND   WORKERCATEGORYCODE IN ( '||P_WORKERCATEGORYCODE||')   '|| CHR(10);
                            END IF;
                          LV_STRSQL := LV_STRSQL ||'     GROUP BY COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
                          
                          EXECUTE IMMEDIATE LV_STRSQL;
    /****************************COMMON PART******************************************/

                 
                 
                 LV_STRSQL := ' INSERT INTO GTT_ABSTRACTWPS '|| CHR(10)  
                           ||'  (SRL, COMPANYNAME, DIVISIONNAME, REPORTHEADER, DEPARTMENTCODE, COMPNAME_HOUR, COMPVALUE_HOUR,  '|| CHR(10)
                           ||'         COMPNAME_EARN, COMPVALUE_EARN, COMPNAME_DEDN, COMPVALUE_DEDN)   '|| CHR(10)
                           ||'     SELECT NVL(TT1.SRL,TT2.SRL) SRL,  '''|| LV_COMPANYNAME ||''' COMPANYNAME, '''|| LV_DIVISIONNAME ||''' DIVISIONNAME, '''|| LV_REPORTHEADER ||''' REPORTHEADER, '|| CHR(10) 
                           ||'     NVL(TT1.DEPARTMENTCODE,TT2.DEPARTMENTCODE) DEPARTMENTCODE, TT1.COMPNAME_HOUR,  TT1.COMPVALUE_HOUR, '|| CHR(10)
                           ||'     TT1.COMPNAME_EARN, TT1.COMPVALUE_EARN,TT2.COMPNAME COMPNAME_DEDN, TT2.COMPVALUE COMPVALUE_DEDN FROM   '|| CHR(10)
                           ||'     ( '|| CHR(10) 
                           ||'     SELECT NVL(T1.SRL,T2.SRL) SRL, NVL(T1.DEPARTMENTCODE,T2.DEPARTMENTCODE) DEPARTMENTCODE, T1.COMPNAME COMPNAME_HOUR, T1.COMPVALUE COMPVALUE_HOUR, '|| CHR(10)
                           ||'         T2.COMPNAME COMPNAME_EARN, T2.COMPVALUE COMPVALUE_EARN '|| CHR(10)
                           ||'     FROM  TBL_COMPHOURS T1 FULL OUTER JOIN TBL_COMPEARNING T2 '|| CHR(10)
                           ||'     ON T1.SRL = T2.SRL '|| CHR(10)
                           ||'     AND   T1.DEPARTMENTCODE = T2.DEPARTMENTCODE '|| CHR(10)
                           ||'     ) TT1 FULL OUTER JOIN  TBL_COMPDEDUCTION TT2 '|| CHR(10)
                           ||'     ON TT1.SRL = TT2.SRL '|| CHR(10)
                           ||'     AND   TT1.DEPARTMENTCODE = TT2.DEPARTMENTCODE '|| CHR(10)           
                           ||'     ORDER BY SRL   '|| CHR(10);  
                           
                       -- DBMS_OUTPUT.PUT_LINE(LV_STRSQL);
                         EXECUTE IMMEDIATE LV_STRSQL;   
                         
                         
                 LV_STRSQL := ' UPDATE GTT_ABSTRACTWPS '|| CHR(10)
                            ||' SET (NOOFSLIPS,COINBF,COINCF,PF_COM) = (SELECT NOOFSLIPS, COINBF, COINCF, PF_COM  FROM TBL_COMPCOMMON) '|| CHR(10)
                            ||' WHERE DEPARTMENTCODE = '''||LV_DEPARTMENTCODE||'''   '|| CHR(10);
                            
                EXECUTE IMMEDIATE LV_STRSQL;   
   /****************************COMMON PART******************************************/         
        end loop;
    
   /****************************All Division******************************************/
        LV_STRSQL := ' INSERT INTO GTT_ABSTRACTWPS '|| CHR(10)  
                   ||'  (SRL, COMPANYNAME, DIVISIONNAME, REPORTHEADER, DEPARTMENTCODE, COMPNAME_HOUR, COMPVALUE_HOUR,  '|| CHR(10)
                   ||'         COMPNAME_EARN, COMPVALUE_EARN, COMPNAME_DEDN, COMPVALUE_DEDN, NOOFSLIPS,COINBF,COINCF,PF_COM)   '|| CHR(10)
                   ||' SELECT SRL, COMPANYNAME, DIVISIONNAME, REPORTHEADER, ''ALL'' DEPARTMENTCODE, COMPNAME_HOUR, SUM(NVL(COMPVALUE_HOUR,0)) COMPVALUE_HOUR, '|| CHR(10)  
                   ||' COMPNAME_EARN,  SUM(NVL(COMPVALUE_EARN,0)) COMPVALUE_EARN, COMPNAME_DEDN, SUM(NVL(COMPVALUE_DEDN,0))  COMPVALUE_DEDN, '|| CHR(10)  
                   ||' SUM(NVL(NOOFSLIPS,0)) NOOFSLIPS, SUM(NVL(COINBF,0)) COINBF, SUM(NVL(COINCF,0)) COINCF, SUM(NVL(PF_COM,0)) PF_COM '|| CHR(10)  
                   ||' FROM GTT_ABSTRACTWPS   '|| CHR(10)  
                   ||' GROUP BY SRL, COMPANYNAME, DIVISIONNAME, REPORTHEADER, COMPNAME_HOUR, COMPNAME_EARN, COMPNAME_DEDN  '|| CHR(10)  
                   ||' ORDER BY SRL  '|| CHR(10);  
       -- DBMS_OUTPUT.PUT_LINE(LV_STRSQL);
         EXECUTE IMMEDIATE LV_STRSQL;   
/****************************All Division******************************************/

end;
/


DROP PROCEDURE PROC_RPT_WPSLEAVEREPORT;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPSLEAVEREPORT(
                                                P_COMCODE VARCHAR2,
                                                P_DIVICODE VARCHAR2,
                                                P_DOCFROMDATE VARCHAR2,
                                                P_DOCTODATE VARCHAR2,
                                                P_LEAVECODE VARCHAR2,
                                                P_DEPTCODE VARCHAR2 DEFAULT NULL,
                                                P_TOKENNO VARCHAR2 DEFAULT NULL,
                                                P_SHIFTCODE VARCHAR2 DEFAULT NULL,
                                                P_SECTION VARCHAR2 DEFAULT NULL
                                              )
AS
LV_SQLSTR   VARCHAR2(20000):='';
BEGIN
    DELETE FROM GTT_LEAVEDATA;
    
    LV_SQLSTR:='INSERT INTO GTT_LEAVEDATA'||CHR(10)
                ||'SELECT S.TOKENNO, W.WORKERNAME,SEC.DEPARTMENTCODE,S.SECTIONCODE,S.DOCUMENTNO  APPLICATIONNO,S.DOCUMENTDATE APPLICATIONDATE,S.STLFROMDATE,S.STLTODATE,S.STLDAYS,S.FORTNIGHTSTARTDATE,C.COMPANYNAME,'||CHR(10)
                ||'     D.DIVISIONNAME,'''||REPLACE(P_LEAVECODE,'''','')||' ENTRY CHECK LIST FROM '||P_DOCFROMDATE||' TO '||P_DOCTODATE||''' REPORTCAPTION,NULL EX1,NULL EX2,NULL EX3,'||CHR(10)
                ||'     NULL EX4,NULL EX5,NULL EX6,NULL EX7,NULL EX8,NULL EX9,NULL EX10'||CHR(10)
                ||'FROM WPSSTLENTRY S,WPSWORKERMAST W,COMPANYMAST C,DIVISIONMASTER D,WPSSECTIONMAST SEC'||CHR(10)
                ||'WHERE S.COMPANYCODE='''||P_COMCODE||''' '||CHR(10)
                ||'     AND S.DIVISIONCODE='''||P_DIVICODE||''' '; 
               
                 IF P_LEAVECODE IS NOT NULL THEN 
                       LV_SQLSTR:=LV_SQLSTR||'  AND S.LEAVECODE IN ('||P_LEAVECODE||')' ;
                 END IF;     
            
                LV_SQLSTR:=LV_SQLSTR||'  AND S.DOCUMENTDATE>=TO_DATE('''||P_DOCFROMDATE||''',''DD/MM/YYYY'')'||CHR(10)
                ||'     AND S.DOCUMENTDATE<=TO_DATE('''||P_DOCTODATE||''',''DD/MM/YYYY'')'||CHR(10)
                ||'     AND S.COMPANYCODE=W.COMPANYCODE'||CHR(10)
                ||'     AND S.DIVISIONCODE=W.DIVISIONCODE'||CHR(10)
                ||'     AND S.WORKERSERIAL=W.WORKERSERIAL'||CHR(10)
                ||'     AND S.COMPANYCODE=C.COMPANYCODE'||CHR(10)
                ||'     AND S.COMPANYCODE=D.COMPANYCODE'||CHR(10)
                ||'     AND S.DIVISIONCODE=D.DIVISIONCODE'||CHR(10)
                ||'     AND S.COMPANYCODE=SEC.COMPANYCODE'||CHR(10)
                ||'     AND S.DIVISIONCODE=SEC.DIVISIONCODE'||CHR(10)
                ||'     AND S.SECTIONCODE=SEC.SECTIONCODE'||CHR(10);
     IF P_DEPTCODE IS NOT NULL THEN
        LV_SQLSTR:=LV_SQLSTR||' AND S.DEPARTMENTCODE IN ('||P_DEPTCODE||')'||CHR(10);
     END IF;
    
     IF P_TOKENNO IS NOT NULL THEN
        LV_SQLSTR:=LV_SQLSTR||' AND S.TOKENNO IN ('||P_TOKENNO||')'||CHR(10);
     END IF;
    
     IF P_SHIFTCODE IS NOT NULL THEN
        LV_SQLSTR:=LV_SQLSTR||' AND S.SHIFTCODE IN ('||P_SHIFTCODE||')'||CHR(10);
     END IF;
     
     IF P_SECTION IS NOT NULL THEN
        LV_SQLSTR:=LV_SQLSTR||' AND S.SECTIONCODE IN ('||P_SECTION||')'||CHR(10);
     END IF;
    
     LV_SQLSTR:=LV_SQLSTR||'ORDER BY S.SHIFTCODE,S.TOKENNO'||CHR(10);
     
   DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
   EXECUTE IMMEDIATE LV_SQLSTR;
       
END;
/


DROP PROCEDURE PROC_RPT_WPSSTLDETAILS;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPSSTLDETAILS 
( 
    P_COMPCODE VARCHAR2, 
    P_DIVCODE VARCHAR2, 
    P_PERIODFROM VARCHAR2, 
    P_PERIODTO VARCHAR2 DEFAULT NULL, 
    P_DEPTCODE VARCHAR2 DEFAULT 'N', 
    P_CATGCODE VARCHAR2 DEFAULT 'N', 
    P_UNITCODE VARCHAR2 DEFAULT 'N', 
    P_SHIFTCODE VARCHAR2 DEFAULT 'N', 
    P_TOKENNO VARCHAR2 DEFAULT 'N'
) 
AS
LV_SQL          VARCHAR2(20000);
LV_WORKERSERIAL VARCHAR2(10);
LV_STARTOFTHEYEAR   VARCHAR2(10);
LV_RETURNVALUE  NUMBER := 0;
LV_AVLSTR VARCHAR2(500);
LV_BALSTR VARCHAR2(500);
LV_PVTSTR VARCHAR2(500);
LV_CURR_YR VARCHAR(10);
BEGIN

    DELETE FROM GTT_STLDETAILS WHERE 1=1;
    
    LV_CURR_YR := SUBSTR(P_PERIODFROM,-4);
    --EXEC PROC_RPT_WPSSTLDETAILS('NJ0001','0002','22/01/2020','15/07/2020')
    
--    PRC_STLBAL_YEARWISE ('NJ0001','0002','22/01/2020')
    PRC_STLBAL_YEARWISE (P_COMPCODE,P_DIVCODE, TO_CHAR((TO_DATE(P_PERIODFROM,'DD/MM/YYYY')-1),'DD/MM/YYYY'));
        
    DELETE FROM STLBAL_TMP WHERE 1=1;
    
    INSERT INTO STLBAL_TMP
    select * from GBL_STLBAL;
    
    if (substr(P_PERIODFROM,1,5) = '01/01') then
        PRC_STLBAL_YEARWISE (P_COMPCODE,P_DIVCODE, P_PERIODFROM);
        
        INSERT INTO STLBAL_TMP
        select COMPANYCODE, DIVISIONCODE, LEAVECODE, YEAR, ASONDATE, WORKERSERIAL, 
        TOKENNO, ENTITLE_DAYS, PREV_STLDAYS, STLTAKEN_DAYS, (STLTAKEN_DAYS+STLBAL_DAYS) STLBAL_DAYS 
        from GBL_STLBAL a where a.year not in ( select distinct year from STLBAL_TMP);
    end if;
    
    
    SELECT WM_CONCAT(''''||YEAR||''' AS YR_'||YEAR) INTO LV_PVTSTR
    FROM 
    (
        SELECT DISTINCT YEAR FROM GBL_STLBAL
        ORDER BY YEAR
    );
    
    SELECT WM_CONCAT('NVL(A.YR_'||YEAR||',0) AVL_YR_'||YEAR)  INTO LV_AVLSTR
    FROM 
    (
        SELECT DISTINCT YEAR FROM GBL_STLBAL
        ORDER BY YEAR
    );
    
    SELECT WM_CONCAT('(NVL(A.YR_'||YEAR||',0)  - NVL(B.YR_'||YEAR||',0)) BAL_YR_'||YEAR)   INTO LV_BALSTR
    FROM 
    (
        SELECT DISTINCT YEAR FROM GBL_STLBAL
        ORDER BY YEAR
    );
    
    
    DBMS_OUTPUT.PUT_LINE ('LV_PVTSTR -------'||CHR(10)||LV_PVTSTR);
    DBMS_OUTPUT.PUT_LINE ('LV_AVLSTR -------'||CHR(10)||LV_AVLSTR);
    DBMS_OUTPUT.PUT_LINE ('LV_BALSTR -------'||CHR(10)||LV_BALSTR);
    
    PRC_STLBAL_YEARWISE (P_COMPCODE,P_DIVCODE, P_PERIODTO);


    LV_SQL := LV_SQL || 'INSERT INTO GTT_STLDETAILS'|| CHR(10);
    LV_SQL := LV_SQL || '('|| CHR(10);
    LV_SQL := LV_SQL || '   TOKENNO, PREV_YR_STLBAL_1, PREV_YR_STLBAL_2, CURR_YR_STLBAL1, STL_AVAILED_YR1, STL_AVAILED_YR2, STL_AVAILED_YR3'|| CHR(10);
    LV_SQL := LV_SQL || ')'|| CHR(10);
    LV_SQL := LV_SQL || 'SELECT A.TOKENNO'|| CHR(10);
--    LV_SQL := LV_SQL || ', NVL(A.YR_2017,0) AVL_YR_2017, NVL(A.YR_2018,0) AVL_YR_2018,NVL(A.YR_2019,0) AVL_YR_2019  '|| CHR(10);
--    LV_SQL := LV_SQL || ', (NVL(B.YR_2017,0) - NVL(A.YR_2017,0)) BAL_YR_2017, '|| CHR(10);
--    LV_SQL := LV_SQL || '(NVL(B.YR_2018,0) - NVL(A.YR_2018,0)) BAL_YR_2018,'|| CHR(10);
--    LV_SQL := LV_SQL || '(NVL(B.YR_2019,0) - NVL(A.YR_2019,0)) BAL_YR_2019'|| CHR(10);

    LV_SQL := LV_SQL || ','||LV_AVLSTR|| CHR(10)|| ','||LV_BALSTR|| CHR(10);
    LV_SQL := LV_SQL || 'FROM '|| CHR(10);
    LV_SQL := LV_SQL || '('|| CHR(10);
    LV_SQL := LV_SQL || '    SELECT * FROM '|| CHR(10);
    LV_SQL := LV_SQL || '    ('|| CHR(10);
    LV_SQL := LV_SQL || '       SELECT TOKENNO,''STLBAL_DAYS'' CAPTION, STLBAL_DAYS, YEAR'|| CHR(10);
    LV_SQL := LV_SQL || '       FROM  STLBAL_TMP'|| CHR(10);
    LV_SQL := LV_SQL || '    )'|| CHR(10);
    LV_SQL := LV_SQL || '    PIVOT '|| CHR(10);
    LV_SQL := LV_SQL || '    ('|| CHR(10);
    LV_SQL := LV_SQL || '       SUM(STLBAL_DAYS)'|| CHR(10);
--    LV_SQL := LV_SQL || '       FOR YEAR IN (''2017'' AS YR_2017,''2018'' AS YR_2018,''2019'' AS YR_2019 )'|| CHR(10);
    LV_SQL := LV_SQL || '       FOR YEAR IN ('||LV_PVTSTR||')'|| CHR(10);
    LV_SQL := LV_SQL || '    )'|| CHR(10);
    LV_SQL := LV_SQL || ') A,'|| CHR(10);
    LV_SQL := LV_SQL || '('|| CHR(10);
    LV_SQL := LV_SQL || 'SELECT * FROM '|| CHR(10);
    LV_SQL := LV_SQL || '    ('|| CHR(10);
    LV_SQL := LV_SQL || '       SELECT TOKENNO,''STLBAL_DAYS'' CAPTION, STLBAL_DAYS, YEAR'|| CHR(10);
    LV_SQL := LV_SQL || '       FROM GBL_STLBAL'|| CHR(10);
    LV_SQL := LV_SQL || '    )'|| CHR(10);
    LV_SQL := LV_SQL || '    PIVOT '|| CHR(10);
    LV_SQL := LV_SQL || '    ('|| CHR(10);
    LV_SQL := LV_SQL || '       SUM(STLBAL_DAYS)'|| CHR(10);
--    LV_SQL := LV_SQL || '       FOR YEAR IN (''2017'' AS YR_2017,''2018'' AS YR_2018,''2019'' AS YR_2019 )'|| CHR(10);
    LV_SQL := LV_SQL || '       FOR YEAR IN ('||LV_PVTSTR||')'|| CHR(10);
    LV_SQL := LV_SQL || '    )'|| CHR(10);
    LV_SQL := LV_SQL || ') B'|| CHR(10);
    LV_SQL := LV_SQL || 'WHERE A.TOKENNO=B.TOKENNO'|| CHR(10);
    LV_SQL := LV_SQL || ''|| CHR(10);



    DBMS_OUTPUT.PUT_LINE (lv_Sql);
    EXECUTE IMMEDIATE LV_SQL;
    
    UPDATE GTT_STLDETAILS SET
    COMPANYCODE=P_COMPCODE,
    DIVISIONCODE=P_DIVCODE,
    TOTAL_STLBAL = (PREV_YR_STLBAL_1+PREV_YR_STLBAL_2+CURR_YR_STLBAL1), 
    STLBAL_DAYS1 = (PREV_YR_STLBAL_1 - STL_AVAILED_YR1) , 
    STLBAL_DAYS2 = (PREV_YR_STLBAL_2 - STL_AVAILED_YR2), 
    STLBAL_DAYS3 = (CURR_YR_STLBAL1 - STL_AVAILED_YR3), 
    TOTAL_STLBAL_DAYS = (NVL(STLBAL_DAYS1,0)+NVL(STLBAL_DAYS2,0)+NVL(STLBAL_DAYS3,0)),
    YR3 = TO_NUMBER(LV_CURR_YR)-1,
    YR2 = TO_NUMBER(LV_CURR_YR)-2,
    YR1 = TO_NUMBER(LV_CURR_YR)-3,
    REPORTHEADER = 'PERIOD '||P_PERIODFROM||' TO '||P_PERIODTO
    WHERE 1=1;


    UPDATE GTT_STLDETAILS SET
    TOTAL_STL_AVAILED = (STL_AVAILED_YR1+STL_AVAILED_YR2+STL_AVAILED_YR3), 
    TOTAL_STLBAL_DAYS = (NVL(STLBAL_DAYS1,0)+NVL(STLBAL_DAYS2,0)+NVL(STLBAL_DAYS3,0))
    WHERE 1=1;


    UPDATE GTT_STLDETAILS A SET
    WORKDAYS_CURR_YR = 
    (
        SELECT ATTNDAYS FROM 
        WPSSTLENTITLEMENTCALCDETAILS
        WHERE COMPANYCODE=P_COMPCODE
        AND DIVISIONCODE=P_DIVCODE
        AND TOKENNO=A.TOKENNO
--        AND TO_CHAR(FORTNIGHTSTARTDATE,'YYYY')=A.YR3
--        AND TO_CHAR(FORTNIGHTENDDATE,'YYYY')=A.YR3
        AND FROMYEAR=A.YR3
    )
    WHERE 1=1;



UPDATE GTT_STLDETAILS A SET
(COMPANYNAME, DIVISIONNAME, WORKERNAME) = 
(
    SELECT C.COMPANYNAME, D.DIVISIONNAME , W.WORKERNAME 
    FROM WPSWORKERMAST W, COMPANYMAST C, DIVISIONMASTER D
    WHERE W.COMPANYCODE=C.COMPANYCODE
    AND W.COMPANYCODE=D.COMPANYCODE
    AND W.DIVISIONCODE    = D.DIVISIONCODE
    AND W.COMPANYCODE=A.COMPANYCODE
    AND W.DIVISIONCODE    = A.DIVISIONCODE 
    AND W.TOKENNO    = A.TOKENNO 
)
WHERE 1=1;
 


END;
/


DROP PROCEDURE PROC_RPT_WPS_ACTUAL_WAGESRATE;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_ACTUAL_WAGESRATE
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE              VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR              VARCHAR2(15); 
    LV_COMPANYNAME            VARCHAR2(100);   
    LV_DIVISIONNAME           VARCHAR2(100);    
    LV_PRINTDATE           VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(25000);
    LV_DIVADDRESS            VARCHAR2(100);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
--    LV_RPT_CAPTION:= 'Statement of Actual Wages Paid & Deduction for B.M. : '||P_FROMDATE||' to '|| P_TODATE;
    LV_RPT_CAPTION:= 'Actual Wages & Rate Statement for the period from . : '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

--
--Dept. Desc.        R.W.HRS        O.W.HRS        O.T.HRS        R.C.ERN        R.N.ERN        O.T.ERN        O.C.ERN        O.N.ERN        RT.CONVEYANCE    TOT.ERN
--                RT.BASIC    RT.FE        RT.NBA        RT.INC        RT.OT        RT.TOTAL    RT.DA        RT.REC.NO    RT.OTB
--                
--1                2            3            4            5            6            7            8            9            10                11    

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
     AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 10, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 10, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 10, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

--Description        Total        Non Rec No        115 Rec No        110 Rec No        100 Rec No    157 Rec No        F Rt O No        100-115 ONo        Others
    
 AS_XLSX.CELL( 1, 4,'Description', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 2, 4,'Total', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 3, 4,'Nor Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 4, 4,'115 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 5, 4,'110 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 6, 4,'100 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 7, 4,'157 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 8, 4,'Ret Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 9, 4,'F Rt O No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 10, 4,'100-115 ONo', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 11, 4,'Others', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 

    LV_ROWNUM := 4;
-- 
    DELETE FROM GTT_ACTUAL_WAGESRATE WHERE 1=1;
--
    LV_SQLSTR := NULL;
    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_ACTUAL_WAGESRATE(COMPCODE, COMP_DESC, NRC, A_115, A_110, A_100, A_157,RRN, FR, R_100_115, OTH, TOTAL, SLNO)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT  COMPCODE,COMP_DESC, NRC, A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL,SLNO'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPCODE, NRC, A_115,A_110,A_100,A_157,RRN,FR,R_100_115, OTH,(NVL(NRC,0)+NVL(FR,0)+NVL(A_115,0)+NVL(A_110,0)+NVL(A_100,0)+NVL(A_157,0)+NVL(RRN,0)+NVL(R_100_115,0)+NVL(OTH,0))TOTAL,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    DECODE(COMPCODE,''NW_DAYS'',1,''NW_HRS'',2,''NS_HRS'',3, ''NS_HRS_PF'',4, ''NS_HRS_NPF'',5, ''OT_HRS'',6, ''NSOT_HRS'',7, ''TOTAL_WRK_HRS'',8,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''BASIC'',9, ''FE_VAL'',10,''NSA_PF_LINK'',11,''NSA_NPF_LINK'',12,''TOT_NORM_ERN'',13,''NORM_RATE'',14,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''DA_VALUE'',15,''DA_RATE'',16,''ATTN_REWARD'',17,''ADJ_PF_LINK'',18,''ADJ_NPF_LINK'',19,''OT_VALUE'',20,''INCENTIVE'',21,''ADHOC'',22,''LAY_OFF'',23,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''RATE_1'',24,''TOTAL_M'',25,''TOTAL_RATE'',26) SLNO ,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    DECODE(COMPCODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NW_DAYS'',''Normal Working Days'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NW_HRS'',''Normal Working Hrs.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS'',''N. S. Hrs'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS_PF'',''N. S. Hrs [ P.F. ]'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS_NPF'',''N. S. Hrs [ Non P.F. ]'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''OT_HRS'', ''O.T. Hrs'',  '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSOT_HRS'',''N. S. O. T. Hrs'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_WRK_HRS'',''Total Working Hrs.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''BASIC'',''Basic Value'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''FE_VAL'',''F.E. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSA_PF_LINK'',''NSA PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSA_NPF_LINK'',''NSA Non PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOT_NORM_ERN'',''Total Normal Erng.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NORM_RATE'',''Normal Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''DA_VALUE'',''D.A. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''DA_RATE'',''D.A. Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ATTN_REWARD'',''ATTN-REWARD VALUE'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADJ_PF_LINK'',''Adj PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADJ_NPF_LINK'',''Adj Non PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''OT_VALUE'',''O.T. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''INCENTIVE'',''Incentive Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADHOC'',''Adhoc Payment'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''LAY_OFF'',''Lay Off Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''RATE_1'',''Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_M'',''Total'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_RATE'',''Total Rate'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ) COMP_DESC                '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    FROM '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        SELECT * FROM '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT --SUBSTR(GRADECODE,1,3) GRADECODE1,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            DECODE(GRADECODE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100A'',''100A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100D'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110A'',''110A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110D'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115A'',''115A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''FR'',''FR'',''OTH'')GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            DECODE(GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''FR'',''FR'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''110A'',''110A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''100A'',''100A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''115A'',''115A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''115C'',''100_115'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''250A'',''250A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''257N'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157I'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100D'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257S'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157F'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157E'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257J'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157D'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205A'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257K'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157G'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257P'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257L'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257T'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257Q'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257O'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257M'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157H'',''157A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '         ''OTH'',''OTH'',''FR'')GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            /*SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC,*/ SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/ SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK, /*SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, */ SUM(NVL(A.OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)) OT_VALUE , SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSWAGESDETAILS A, VW_WPSSECTIONMAST S WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            GROUP BY A.GRADECODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''NV_FR''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            /*SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC,*/ SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,/*SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, */ SUM(NVL(A.OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)) OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 AND TOKENNO LIKE''A%'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE=''FR'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''100_115''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            /*SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC,*/ SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,/*SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, */ SUM(NVL(A.OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)) OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 AND TOKENNO LIKE''A%'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE<>''FR'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND (A.GRADECODE LIKE''100%'' OR A.GRADECODE LIKE''110%''OR  A.GRADECODE LIKE''115%'' OR A.GRADECODE LIKE''250%'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''OTH''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            /*SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC,*/ SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(ADHOC,0)+NVL(DAILY_WAGES,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,/*SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, */ SUM(NVL(A.OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)) OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 /*AND TOKENNO LIKE''B%''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE NOT LIKE''100%'' AND A.GRADECODE NOT LIKE''110%''AND  A.GRADECODE NOT LIKE''115%'' AND A.GRADECODE NOT LIKE''250%'' AND A.GRADECODE<>''FR'''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SELECT ''NRC'' GRADECODE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, 0 NS_HRS_PF, 0 NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,0 NSA_PF_LINK, 0 NSA_NPF_LINK, SUM(NVL(A.TOT_EARN,0)) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, 0 ATTN_REWARD, 0 ADJ_PF_LINK, 0 ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, SUM(NVL(A.ADHOC,0)) ADHOC, SUM(NVL(A.LAYOFFHOURS,0)) LAY_OFF,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A  WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        UNPIVOT    '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            COMP_VALUE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FOR COMPCODE IN'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                NW_DAYS,NW_HRS,NS_HRS, NS_HRS_PF, NS_HRS_NPF, OT_HRS, NSOT_HRS, TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                BASIC, FE_VAL,NSA_PF_LINK, NSA_NPF_LINK, TOT_NORM_ERN, NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                DA_VALUE, DA_RATE, ATTN_REWARD, ADJ_PF_LINK, ADJ_NPF_LINK, OT_VALUE, INCENTIVE, ADHOC, LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                RATE_1, TOTAL_M, TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    PIVOT'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        SUM(COMP_VALUE) '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        FOR GRADECODE IN'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''NRC'' AS NRC,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''115A'' AS A_115,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''110A''  AS A_110,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''100A''  AS A_100,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''157A''  AS A_157,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''100_115''  AS R_100_115,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''FR'' AS FR,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''OTH''  AS OTH'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''FR'' AS NRC,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''115A'' AS A_115,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''110A''  AS A_110,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''100A''  AS A_100,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''157A''  AS A_157,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''100_115''  AS R_100_115,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''NV_FR'' AS FR,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''250A'' AS RRN,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''OTH''  AS OTH'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY SLNO'|| CHR(10);
        
   -- DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;
  
    --Update Total Working Hrs.
    UPDATE GTT_ACTUAL_WAGESRATE SET(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
    (SELECT 
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('NW_HRS','NS_HRS_PF')
    )
    WHERE COMPCODE='TOTAL_WRK_HRS' AND SLNO=8;
    --End Total Working Hrs.------------------------------

--Normal Rate Update    
UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'NORM_RATE' as NORM_RATE,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'NORM_RATE' as NORM_RATE,
    NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE='TOT_NORM_ERN'
    )A,
(
SELECT  'NORM_RATE' as NORM_RATE,
     NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE='TOTAL_WRK_HRS'
)B
WHERE A.NORM_RATE=B.NORM_RATE 
)  
WHERE A.COMPCODE=NORM_RATE
)
WHERE A.COMPCODE='NORM_RATE';
--End Normal Rate Update  

--Update DA Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'DA_RATE' as DA_RATE,
--    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
--    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
--    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
--    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
--    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
--    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
--    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
--    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
--    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
--    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC),2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115),2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110),2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100),2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157),2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN),2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR),2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115),2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH),2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL),2)) TOTAL
    FROM (
SELECT 'DA_RATE' as DA_RATE,
    NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE='DA_VALUE'
    )A,
(
SELECT  'DA_RATE' as DA_RATE,
     NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    --WHERE COMPCODE='TOTAL_WRK_HRS'
    WHERE COMPCODE='NW_DAYS'
)B
WHERE A.DA_RATE=B.DA_RATE 
)  
WHERE A.COMPCODE=DA_RATE
)
WHERE A.COMPCODE='DA_RATE';
--end of DA RATE Update---------------------------------------------------------------


--Update Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'RATE_1' as RATE_1,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'RATE_1' as RATE_1,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE IN('ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )A,
(
SELECT  'RATE_1' as RATE_1,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('OT_HRS','NSOT_HRS','TOTAL_WRK_HRS')
)B
WHERE A.RATE_1=B.RATE_1 
)  
WHERE A.COMPCODE=RATE_1
)
WHERE A.COMPCODE='RATE_1';
--end of RATE Update---------------------------------------------------------------

--Update Total 
    UPDATE GTT_ACTUAL_WAGESRATE SET(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
    (SELECT 
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('TOT_NORM_ERN','DA_VALUE','ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )
    WHERE COMPCODE='TOTAL_M';
--End Total .------------------------------

--Update Total Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'TOTAL_RATE' as TOTAL_RATE,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'TOTAL_RATE' as TOTAL_RATE,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE IN('TOT_NORM_ERN','DA_VALUE','ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )A,
(
SELECT  'TOTAL_RATE' as TOTAL_RATE,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('OT_HRS','NSOT_HRS','TOTAL_WRK_HRS')
)B
WHERE A.TOTAL_RATE=B.TOTAL_RATE 
)  
WHERE A.COMPCODE=TOTAL_RATE
)
WHERE A.COMPCODE='TOTAL_RATE';
--end of Total Rate Update---------------------------------------------------------------
    
    FOR C1 IN (  
        SELECT COMPCODE, COMP_DESC, TOTAL, NRC, A_115, A_110, A_100, A_157,RRN, FR, R_100_115, OTH, SLNO
        FROM GTT_ACTUAL_WAGESRATE
        ORDER BY    SLNO  
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.COMP_DESC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.NRC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.A_115, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.A_110, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.A_100, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.A_157, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RRN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.FR, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.R_100_115, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.OTH, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        
        IF C1.SLNO = 8 OR C1.SLNO = 14 OR C1.SLNO = 24 THEN 
            LV_ROWNUM := LV_ROWNUM+2;
        END IF;
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
--    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
--    FOR C2 IN (  
--        SELECT SUM(OTA_HRS) OTA_HRS, SUM(OTA_AMT) OTA_AMT, SUM(OTB_HRS) OTB_HRS, SUM(OTB_AMT) OTB_AMT, SUM(OTA_AMT+OTB_AMT) TOT_AMT
--        FROM GTT_DEPT_WISE_OT_EXCEL     
--    )
--    LOOP
--        AS_XLSX.CELL( 2, LV_ROWNUM,C2.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 3, LV_ROWNUM,C2.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 4, LV_ROWNUM,C2.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 5, LV_ROWNUM,C2.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 6, LV_ROWNUM,C2.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--       
--    END LOOP;    
    

----
--    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
--    LV_ROWNUM := LV_ROWNUM + 1;  
--    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
--    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
--        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_ACTUAL_WAGESRATE1;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_ACTUAL_WAGESRATE1
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE              VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR              VARCHAR2(15); 
    LV_COMPANYNAME            VARCHAR2(100);   
    LV_DIVISIONNAME           VARCHAR2(100);    
    LV_PRINTDATE           VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(25000);
    LV_DIVADDRESS            VARCHAR2(100);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Statement of Actual Wages Paid & Deduction for B.M. : '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

--
--Dept. Desc.        R.W.HRS        O.W.HRS        O.T.HRS        R.C.ERN        R.N.ERN        O.T.ERN        O.C.ERN        O.N.ERN        RT.CONVEYANCE    TOT.ERN
--                RT.BASIC    RT.FE        RT.NBA        RT.INC        RT.OT        RT.TOTAL    RT.DA        RT.REC.NO    RT.OTB
--                
--1                2            3            4            5            6            7            8            9            10                11    

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
     AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 10, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 10, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 10, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

--Description        Total        Non Rec No        115 Rec No        110 Rec No        100 Rec No    157 Rec No        F Rt O No        100-115 ONo        Others
    
 AS_XLSX.CELL( 1, 4,'Description', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 2, 4,'Total', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 3, 4,'Nor Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 4, 4,'115 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 5, 4,'110 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 6, 4,'100 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 7, 4,'157 Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 8, 4,'Ret Rec No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 9, 4,'F Rt O No', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 10, 4,'100-115 ONo', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 11, 4,'Others', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 

    LV_ROWNUM := 4;
-- 
    DELETE FROM GTT_ACTUAL_WAGESRATE WHERE 1=1;
--
    LV_SQLSTR := NULL;
    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_ACTUAL_WAGESRATE(COMPCODE, COMP_DESC, NRC, A_115, A_110, A_100, A_157,RRN, FR, R_100_115, OTH, TOTAL, SLNO)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT  COMPCODE,COMP_DESC, NRC, A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL,SLNO'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPCODE, NRC, A_115,A_110,A_100,A_157,RRN,FR,R_100_115, OTH,(NVL(NRC,0)+NVL(FR,0)+NVL(A_115,0)+NVL(A_110,0)+NVL(A_100,0)+NVL(A_157,0)+NVL(RRN,0)+NVL(R_100_115,0)+NVL(OTH,0))TOTAL,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    DECODE(COMPCODE,''NW_DAYS'',1,''NW_HRS'',2,''NS_HRS'',3, ''NS_HRS_PF'',4, ''NS_HRS_NPF'',5, ''OT_HRS'',6, ''NSOT_HRS'',7, ''TOTAL_WRK_HRS'',8,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''BASIC'',9, ''FE_VAL'',10,''NSA_PF_LINK'',11,''NSA_NPF_LINK'',12,''TOT_NORM_ERN'',13,''NORM_RATE'',14,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''DA_VALUE'',15,''DA_RATE'',16,''ATTN_REWARD'',17,''ADJ_PF_LINK'',18,''ADJ_NPF_LINK'',19,''OT_VALUE'',20,''INCENTIVE'',21,''ADHOC'',22,''LAY_OFF'',23,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                ''RATE_1'',24,''TOTAL_M'',25,''TOTAL_RATE'',26) SLNO ,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    DECODE(COMPCODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NW_DAYS'',''Normal Working Days'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NW_HRS'',''Normal Working Hrs.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS'',''N. S. Hrs'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS_PF'',''N. S. Hrs [ P.F. ]'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NS_HRS_NPF'',''N. S. Hrs [ Non P.F. ]'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''OT_HRS'', ''O.T. Hrs'',  '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSOT_HRS'',''N. S. O. T. Hrs'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_WRK_HRS'',''Total Working Hrs.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''BASIC'',''Basic Value'', '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''FE_VAL'',''F.E. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSA_PF_LINK'',''NSA PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NSA_NPF_LINK'',''NSA Non PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOT_NORM_ERN'',''Total Normal Erng.'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''NORM_RATE'',''Normal Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''DA_VALUE'',''D.A. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''DA_RATE'',''D.A. Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ATTN_REWARD'',''ATTN-REWARD VALUE'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADJ_PF_LINK'',''Adj PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADJ_NPF_LINK'',''Adj Non PF Link'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''OT_VALUE'',''O.T. Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''INCENTIVE'',''Incentive Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''ADHOC'',''Adhoc Payment'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''LAY_OFF'',''Lay Off Value'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''RATE_1'',''Rate'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_M'',''Total'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ''TOTAL_RATE'',''Total Rate'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ) COMP_DESC                '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    FROM '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        SELECT * FROM '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT --SUBSTR(GRADECODE,1,3) GRADECODE1,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            DECODE(GRADECODE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100A'',''100A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''100D'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110A'',''110A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''110D'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115A'',''115A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115B'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''115C'',''100_115'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '             ''FR'',''FR'',''OTH'')GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            DECODE(GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''FR'',''FR'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''110A'',''110A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''100A'',''100A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''115A'',''115A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''115C'',''100_115'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''250A'',''250A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '             ''257N'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157I'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100D'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257S'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157F'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157A'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157E'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257J'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157D'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205A'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257K'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157G'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''100B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205C'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''205B'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257P'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257L'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257T'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257Q'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257O'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''257M'',''157A'','|| CHR(10);
LV_SQLSTR := LV_SQLSTR || '             ''157H'',''157A'','|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '         ''OTH'',''OTH'',''FR'')GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSWAGESDETAILS A, VW_WPSSECTIONMAST S WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            GROUP BY A.GRADECODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''NV_FR''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 AND TOKENNO LIKE''A%'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE=''FR'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''100_115''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 AND TOKENNO LIKE''A%'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE<>''FR'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND (A.GRADECODE LIKE''100%'' OR A.GRADECODE LIKE''110%''OR  A.GRADECODE LIKE''115%'' OR A.GRADECODE LIKE''250%'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            UNION ALL'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SELECT ''OTH''GRADECODE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_PF, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0  THEN NIGHTALLOWANCEHOURS ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NIGHTALLOWANCEHOURS ELSE 0 END) NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE<>''R'' THEN NS_ALLOW ELSE 0 END) NSA_PF_LINK, SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END +CASE WHEN NVL(S.PFLINKHOURS,0)>0 AND A.WORKERCATEGORYCODE=''R'' THEN NS_ALLOW ELSE 0 END) NSA_NPF_LINK, /*SUM(NVL(A.TOT_EARN,0))*/SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0))+SUM(NVL(A.FBASIC_PEICERT,0))+SUM(CASE WHEN NVL(S.PFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END)+SUM(CASE WHEN NVL(S.NONPFLINKHOURS,0)>0 THEN NS_ALLOW ELSE 0 END) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, SUM(NVL(A.ATN_INCENTIVE,0)) ATTN_REWARD, SUM(NVL(A.PF_ADJ,0))-SUM(NVL(A.PF_ADJ_DEDN,0)) ADJ_PF_LINK, SUM(NVL(A.NPF_ADJ,0))-SUM(NVL(A.NPF_ADJ_DEDN,0)) ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, /*SUM(NVL(A.ADHOC,0))  SUGGESTED BY MR RAO*/0 ADHOC, /*SUM(NVL(A.LAYOFFHOURS,0))*/SUM(NVL(A.LOWAGES,0)) LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A, VW_WPSSECTIONMAST S  WHERE 1=1 /*AND TOKENNO LIKE''B%''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.COMPANYCODE=S.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DIVISIONCODE=S.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.DEPARTMENTCODE=S.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.SECTIONCODE=S.SECTIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            AND A.GRADECODE NOT LIKE''100%'' AND A.GRADECODE NOT LIKE''110%''AND  A.GRADECODE NOT LIKE''115%'' AND A.GRADECODE NOT LIKE''250%'' AND A.GRADECODE<>''FR'''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SELECT ''NRC'' GRADECODE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.ATN_DAYS,0)) NW_DAYS,SUM(NVL(A.ATTENDANCEHOURS,0)) NW_HRS,SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HRS, 0 NS_HRS_PF, 0 NS_HRS_NPF, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,  SUM(NVL(A.OT_NSHRS,0)) NSOT_HRS, 0 TOTAL_WRK_HRS,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) BASIC, SUM(NVL(A.FBASIC_PEICERT,0)) FE_VAL,0 NSA_PF_LINK, 0 NSA_NPF_LINK, SUM(NVL(A.TOT_EARN,0)) TOT_NORM_ERN, 0 NORM_RATE,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            SUM(NVL(A.DA,0)) DA_VALUE, 0 DA_RATE, 0 ATTN_REWARD, 0 ADJ_PF_LINK, 0 ADJ_NPF_LINK,SUM(NVL(A.OT_AMOUNT,0))   OT_VALUE, SUM(NVL(A.INCENTIVE,0)) INCENTIVE, SUM(NVL(A.ADHOC,0)) ADHOC, SUM(NVL(A.LAYOFFHOURS,0)) LAY_OFF,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            0 RATE_1, 0 TOTAL_M, 0 TOTAL_RATE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            FROM WPSVOUCHERDETAILS A  WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '           AND A.FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        UNPIVOT    '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            COMP_VALUE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            FOR COMPCODE IN'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                NW_DAYS,NW_HRS,NS_HRS, NS_HRS_PF, NS_HRS_NPF, OT_HRS, NSOT_HRS, TOTAL_WRK_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                BASIC, FE_VAL,NSA_PF_LINK, NSA_NPF_LINK, TOT_NORM_ERN, NORM_RATE,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                DA_VALUE, DA_RATE, ATTN_REWARD, ADJ_PF_LINK, ADJ_NPF_LINK, OT_VALUE, INCENTIVE, ADHOC, LAY_OFF,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '                RATE_1, TOTAL_M, TOTAL_RATE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    PIVOT'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        SUM(COMP_VALUE) '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        FOR GRADECODE IN'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''NRC'' AS NRC,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''115A'' AS A_115,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''110A''  AS A_110,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''100A''  AS A_100,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''157A''  AS A_157,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''100_115''  AS R_100_115,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''FR'' AS FR,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '            ''OTH''  AS OTH'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        ('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''FR'' AS NRC,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''115A'' AS A_115,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''110A''  AS A_110,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''100A''  AS A_100,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''157A''  AS A_157,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''100_115''  AS R_100_115,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''NV_FR'' AS FR,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''250A'' AS RRN,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '            ''OTH''  AS OTH'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '        )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    )'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY SLNO'|| CHR(10);
        
    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;
  
    --Update Total Working Hrs.
    UPDATE GTT_ACTUAL_WAGESRATE SET(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
    (SELECT 
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('NW_HRS','NS_HRS_PF')
    )
    WHERE COMPCODE='TOTAL_WRK_HRS' AND SLNO=8;
    --End Total Working Hrs.------------------------------

--Normal Rate Update    
UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'NORM_RATE' as NORM_RATE,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'NORM_RATE' as NORM_RATE,
    NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE='TOT_NORM_ERN'
    )A,
(
SELECT  'NORM_RATE' as NORM_RATE,
     NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE='TOTAL_WRK_HRS'
)B
WHERE A.NORM_RATE=B.NORM_RATE 
)  
WHERE A.COMPCODE=NORM_RATE
)
WHERE A.COMPCODE='NORM_RATE';
--End Normal Rate Update  

--Update DA Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'DA_RATE' as DA_RATE,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'DA_RATE' as DA_RATE,
    NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE='DA_VALUE'
    )A,
(
SELECT  'DA_RATE' as DA_RATE,
     NVL(NRC,0) NRC, NVL(A_115,0) A_115,NVL(A_110,0) A_110,NVL(A_100,0) A_100,NVL(A_157,0) A_157, 
    NVL(RRN,0) RRN, NVL(FR,0) FR,NVL(R_100_115,0) R_100_115,NVL(OTH,0) OTH,NVL(TOTAL,0) TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE='TOTAL_WRK_HRS'
)B
WHERE A.DA_RATE=B.DA_RATE 
)  
WHERE A.COMPCODE=DA_RATE
)
WHERE A.COMPCODE='DA_RATE';
--end of DA RATE Update---------------------------------------------------------------


--Update Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'RATE_1' as RATE_1,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'RATE_1' as RATE_1,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE IN('ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )A,
(
SELECT  'RATE_1' as RATE_1,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('OT_HRS','NSOT_HRS','TOTAL_WRK_HRS')
)B
WHERE A.RATE_1=B.RATE_1 
)  
WHERE A.COMPCODE=RATE_1
)
WHERE A.COMPCODE='RATE_1';
--end of RATE Update---------------------------------------------------------------

--Update Total 
    UPDATE GTT_ACTUAL_WAGESRATE SET(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
    (SELECT 
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('TOT_NORM_ERN','DA_VALUE','ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )
    WHERE COMPCODE='TOTAL_M';
--End Total .------------------------------

--Update Total Rate---------
    UPDATE GTT_ACTUAL_WAGESRATE A SET 
(NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL)=
(
SELECT NRC,A_115,A_110,A_100,A_157,RRN,FR,R_100_115,OTH,TOTAL FROM
(
SELECT 'TOTAL_RATE' as TOTAL_RATE,
    DECODE(B.NRC,0,0,ROUND((A.NRC/B.NRC)*8,2)) NRC,
    DECODE(B.A_115,0,0,ROUND((A.A_115/B.A_115)*8,2)) A_115,
    DECODE(B.A_110,0,0,ROUND((A.A_110/B.A_110)*8,2)) A_110,
    DECODE(B.A_100,0,0,ROUND((A.A_100/B.A_100)*8,2)) A_100,
    DECODE(B.A_157,0,0,ROUND((A.A_157/B.A_157)*8,2)) A_157,
    DECODE(B.RRN,0,0,ROUND((A.RRN/B.RRN)*8,2)) RRN,
    DECODE(B.FR,0,0,ROUND((A.FR/B.FR)*8,2)) FR,
    DECODE(B.R_100_115,0,0,ROUND((A.R_100_115/B.R_100_115)*8,2)) R_100_115,
    DECODE(B.OTH,0,0,ROUND((A.OTH/B.OTH)*8,2)) OTH,
    DECODE(B.TOTAL,0,0,ROUND((A.TOTAL/B.TOTAL)*8,2)) TOTAL
    FROM (
SELECT 'TOTAL_RATE' as TOTAL_RATE,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE 
    WHERE COMPCODE IN('TOT_NORM_ERN','DA_VALUE','ATTN_REWARD','ADJ_PF_LINK','ADJ_NPF_LINK','OT_VALUE','INCENTIVE','ADHOC','LAY_OFF')
    )A,
(
SELECT  'TOTAL_RATE' as TOTAL_RATE,
    SUM(NVL(NRC,0))NRC, SUM(NVL(A_115,0))A_115, SUM(NVL(A_110,0))A_110, SUM(NVL(A_100,0))A_100, SUM(NVL(A_157,0))A_157, 
    SUM(NVL(RRN,0))RRN, SUM(NVL(FR,0))FR, SUM(NVL(R_100_115,0))R_100_115, SUM(NVL(OTH,0))OTH, SUM(NVL(TOTAL,0))TOTAL
    FROM GTT_ACTUAL_WAGESRATE
    WHERE COMPCODE IN('OT_HRS','NSOT_HRS','TOTAL_WRK_HRS')
)B
WHERE A.TOTAL_RATE=B.TOTAL_RATE 
)  
WHERE A.COMPCODE=TOTAL_RATE
)
WHERE A.COMPCODE='TOTAL_RATE';
--end of Total Rate Update---------------------------------------------------------------
    
    FOR C1 IN (  
        SELECT COMPCODE, COMP_DESC, TOTAL, NRC, A_115, A_110, A_100, A_157,RRN, FR, R_100_115, OTH, SLNO
        FROM GTT_ACTUAL_WAGESRATE
        ORDER BY    SLNO  
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.COMP_DESC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.NRC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.A_115, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.A_110, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.A_100, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.A_157, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RRN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.FR, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.R_100_115, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.OTH, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        
        IF C1.SLNO = 8 OR C1.SLNO = 14 OR C1.SLNO = 24 THEN 
            LV_ROWNUM := LV_ROWNUM+2;
        END IF;
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
--    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
--    FOR C2 IN (  
--        SELECT SUM(OTA_HRS) OTA_HRS, SUM(OTA_AMT) OTA_AMT, SUM(OTB_HRS) OTB_HRS, SUM(OTB_AMT) OTB_AMT, SUM(OTA_AMT+OTB_AMT) TOT_AMT
--        FROM GTT_DEPT_WISE_OT_EXCEL     
--    )
--    LOOP
--        AS_XLSX.CELL( 2, LV_ROWNUM,C2.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 3, LV_ROWNUM,C2.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 4, LV_ROWNUM,C2.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 5, LV_ROWNUM,C2.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--        AS_XLSX.CELL( 6, LV_ROWNUM,C2.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
--       
--    END LOOP;    
    

----
--    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
--    LV_ROWNUM := LV_ROWNUM + 1;  
--    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
--    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
--        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_DEPT_WISE_RATE;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_DEPT_WISE_RATE
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE              VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR               VARCHAR2(15); 
    LV_COMPANYNAME        VARCHAR2(100);   
    LV_DIVISIONNAME       VARCHAR2(100);    
    LV_PRINTDATE          VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(30000);
    LV_DIVADDRESS         VARCHAR2(5000);
     
BEGIN

--    DBMS_OUTPUT.PUT_LINE('TEST');
   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Department wise Wages Rate for  '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

--
--Dept. Desc.        R.W.HRS        O.W.HRS        O.T.HRS        R.C.ERN        R.N.ERN        O.T.ERN        O.C.ERN        O.N.ERN        RT.CONVEYANCE    TOT.ERN
--                RT.BASIC    RT.FE        RT.NBA        RT.INC        RT.OT        RT.TOTAL    RT.DA        RT.REC.NO    RT.OTB
--                
--1                2            3            4            5            6            7            8            9            10                11    

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 11, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 11, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 11, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    
    AS_XLSX.CELL( 1, 4,'Dept. Desc.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 1, 5,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.MERGECELLS(1, 4, 1, 5, 1); 
    
    AS_XLSX.CELL( 2, 4,'R.W.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 2, 5,'RT.BASIC', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 3, 4,'O.W.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 5,'RT.FE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 4, 4,'O.T.HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 4, 5,'RT.NSA', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 5, 4,'R.C.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 5,'RT.INC', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 6, 4,'R.N.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 5,'RT.OT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 7, 4,'O.T.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 7, 5,'RT.TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 8, 4,'O.C.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 8, 5,'RT.DA', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 9, 4,'O.N.ERN    ', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 9, 5,'RT.REC.NO', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 10, 4,'RT.CONVEYANCE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 10, 5,'RT.OTB', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 11, 4,'TOT.ERN', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 11, 5,'TOT.RATE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    

    LV_ROWNUM := 5;
-- 
    DELETE FROM GTT_DEPT_WISE_WAGERATE WHERE 1=1;
--
----    LV_SQLSTR := NULL;
--    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_DEPT_WISE_WAGERATE(DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN)'|| CHR(10);
--    
--    
--    LV_SQLSTR := LV_SQLSTR || 'SELECT A.DEPARTMENTCODE, DEPARTMENTNAME,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'SUM(ATTENDANCEHOURS) RW_HRS, SUM(NVL(A.FBASIC,0)+NVL(A.VBASIC,0)) RT_BASIC,SUM(OVERTIMEHOURS) OW_HRS,'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'SUM(NVL(A.FBASIC_PEICERT,0)) RT_FE,0 OT_HRS,SUM(NVL(A.NS_ALLOW,0)) RT_NSA, 0 RC_ERN, SUM(NVL(A.INCENTIVE,0)) RT_INC, 0 RN_ERN, 0 RT_OT, 0 OT_ERN, '|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || '0 RT_TOTAL, 0 OC_ERN, SUM(NVL(A.DA,0)) RT_DA, 0 ON_ERN, 0 RT_RECNO, 0 RT_CONVEYANCE, 0 RT_OTB, SUM(NVL(A.TOT_EARN,0)) TOT_ERN'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'FROM WPSWAGESDETAILS A, DEPARTMENTMASTER B'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'WHERE A.COMPANYCODE=B.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
--    
--    IF P_DEPT IS NOT NULL THEN
--       LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')'|| CHR(10);
--    END IF;
--    
--    LV_SQLSTR := LV_SQLSTR || 'GROUP BY A.DEPARTMENTCODE, DEPARTMENTNAME'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'ORDER BY A.DEPARTMENTCODE '|| CHR(10);


--    
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A.COMPANYCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A.DIVISIONCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A.DEPARTMENTCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=C.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=D.COMPANYCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);
--    LV_SQLSTR := LV_SQLSTR || 'ORDER BY DEPT.DEPARTMENTCODE'|| CHR(10);
    
    
    LV_SQLSTR := '
    
    INSERT INTO GTT_DEPT_WISE_WAGERATE
        (DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN,
         RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        )
    
    SELECT A.DEPARTMENTCODE, B.DEPARTMENTNAME,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) RW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_BASIC,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) OW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC_PEICERT,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_FE,
    SUM(NVL(A.OVERTIMEHOURS,0))  OT_HRS, 
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'', NVL(A.NS_ALLOW,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_NSA,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) RC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_INC,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) RN_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0))/
    --ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_OT,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0)) OT_ERN,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0)) OT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_TOTAL,
   -- SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) OC_ERN,
   SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',
    CASE WHEN A.TOKENNO LIKE ''A%'' THEN
            (NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0)) 
        ELSE
        (NVL(A.GROSS_WAGES,0)-(NVL(OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)))
    END,0)) OC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.DA,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_DA,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) ON_ERN,
--    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0))/
--    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_RECNO,
    ROUND(((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8),4) RT_RECNO,
    0 RT_CONVEYANCE,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)+
    NVL(A.OVERTIMEHOURS,0))*8),4)  RT_OTB,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0)) TOT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    (SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))+
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))))*8,4) TOT_RATE
    --FROM WPSWAGESDETAILS_VW A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, WPSSTLWAGESDETAILS D
    FROM VW_WPSWAGESDETAILS_DEPSECWISE A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, VW_WPSSTLWAGESDTLS_DEPSECWISE D
    WHERE A.COMPANYCODE=B.COMPANYCODE
    AND A.DIVISIONCODE=B.DIVISIONCODE
    AND A.DEPARTMENTCODE=B.DEPARTMENTCODE
    AND A.COMPANYCODE = C.COMPANYCODE
    AND A.DIVISIONCODE = C.DIVISIONCODE
    AND A.DEPARTMENTCODE = C.DEPARTMENTCODE
    AND A.SECTIONCODE  = C.SECTIONCODE
    AND A.COMPANYCODE = D.COMPANYCODE (+)
    AND A.DIVISIONCODE = D.DIVISIONCODE (+)
    AND A.YEARCODE = D.YEARCODE (+)
    AND A.DEPARTMENTCODE = D.DEPARTMENTCODE(+)
    AND A.SECTIONCODE = D.SECTIONCODE(+)
    AND A.WORKERSERIAL = D.WORKERSERIAL(+)
    AND D.PAYMENTDATE(+) >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND D.PAYMENTDATE(+) <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')
    AND A.COMPANYCODE='''||P_COMPANYCODE||'''
    AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''
    AND A.FORTNIGHTSTARTDATE>=  TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND A.FORTNIGHTENDDATE<= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') ';    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')';
    END IF;    
    LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'GROUP BY A.DEPARTMENTCODE, DEPARTMENTNAME
    ORDER BY A.DEPARTMENTCODE ';

 
    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;
    
-- 
    FOR C1 IN (  
        SELECT DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, 
        RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        FROM GTT_DEPT_WISE_WAGERATE     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTDESC, P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OT_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RN_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.ON_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_CONVEYANCE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
        LV_ROWNUM := LV_ROWNUM+1;

   
        AS_XLSX.CELL( 1, LV_ROWNUM, '', P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RT_BASIC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RT_FE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.RT_NSA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RT_INC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RT_OT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.RT_TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RT_DA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.RT_RECNO, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_OTB, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_RATE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
       
        AS_XLSX.MERGECELLS(1, LV_ROWNUM-1, 1, LV_ROWNUM, 1);

        LV_ROWNUM := LV_ROWNUM+1;
    
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
   
    DELETE FROM GTT_DEPT_WISE_WAGERATE;
    
    
     LV_SQLSTR := '
    
    INSERT INTO GTT_DEPT_WISE_WAGERATE
        (RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, RT_INC, RN_ERN, RT_OT, OT_ERN,
         RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        )
    
    SELECT 
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) RW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_BASIC,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)) OW_HRS,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC_PEICERT,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_FE,
    SUM(NVL(A.OVERTIMEHOURS,0))  OT_HRS, 
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'', NVL(A.NS_ALLOW,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_NSA,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) RC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_INC,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) RN_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0))/
    --ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_OT,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OT_AMOUNT,0),0)) OT_ERN,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.OVERTIMEHOURS,0))*NVL(A.HRS_RATE,0)) OT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_TOTAL,
    --SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0)) OC_ERN,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',
    CASE WHEN A.TOKENNO LIKE ''A%'' THEN
            (NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0)) 
        ELSE
        (NVL(A.GROSS_WAGES,0)-(NVL(OT_AMOUNT,0)+NVL(NS_ALLOW_OT,0)))
    END,0)) OC_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.DA,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_DA,
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(D.STLAMOUNT,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0)+NVL(A.HRA,0)+NVL(A.H_WAGES,0)+NVL(A.LOWAGES,0)+NVL(A.PF_ADJ,0)+NVL(A.NPF_ADJ,0),0)) ON_ERN,
   --ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0))/
   --SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8,4) RT_RECNO,
    ROUND(((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.FBASIC,0)+NVL(A.VBASIC,0)+NVL(A.FBASIC_PEICERT,0)+NVL(A.DA,0)+NVL(A.NS_ALLOW,0)+NVL(A.INCENTIVE,0),0))/
    SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)))*8),4) RT_RECNO,
    0 RT_CONVEYANCE,
    ROUND((SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0)+
    NVL(A.OVERTIMEHOURS,0))*8),4)  RT_OTB,
    SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0)) TOT_ERN,
    ROUND((SUM(DECODE(A.WORKERTYPE,''REGULAR'',NVL(A.TOT_EARN,0)+NVL(D.STLAMOUNT,0),0)+DECODE(A.WORKERTYPE,''NON-REGULAR'',NVL(A.TOT_EARN,0),0))/
    (SUM(DECODE(A.WORKERTYPE,''REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))+
    SUM(DECODE(A.WORKERTYPE,''NON-REGULAR'', CASE WHEN NVL(C.PFLINKHOURS,0) > 0 THEN NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) ELSE NVL(A.ATTENDANCEHOURS,0) END,0))))*8,4) TOT_RATE
   -- FROM WPSWAGESDETAILS_VW A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, WPSSTLWAGESDETAILS D
   FROM VW_WPSWAGESDETAILS_DEPSECWISE A, DEPARTMENTMASTER B, VW_WPSSECTIONMAST C, VW_WPSSTLWAGESDTLS_DEPSECWISE D
    WHERE A.COMPANYCODE=B.COMPANYCODE
    AND A.DIVISIONCODE=B.DIVISIONCODE
    AND A.DEPARTMENTCODE=B.DEPARTMENTCODE
    AND A.COMPANYCODE = C.COMPANYCODE
    AND A.DIVISIONCODE = C.DIVISIONCODE
    AND A.DEPARTMENTCODE = C.DEPARTMENTCODE
    AND A.SECTIONCODE  = C.SECTIONCODE
    AND A.COMPANYCODE = D.COMPANYCODE (+)
    AND A.DIVISIONCODE = D.DIVISIONCODE (+)
    AND A.YEARCODE = D.YEARCODE (+)
    AND A.DEPARTMENTCODE = D.DEPARTMENTCODE(+)
    AND A.SECTIONCODE = D.SECTIONCODE(+)
    AND A.WORKERSERIAL = D.WORKERSERIAL(+)
    AND D.PAYMENTDATE(+) >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND D.PAYMENTDATE(+) <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')
    AND A.COMPANYCODE='''||P_COMPANYCODE||'''
    AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''
    AND A.FORTNIGHTSTARTDATE>=  TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')
    AND A.FORTNIGHTENDDATE<= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') ';    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR ||CHR(10)|| 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')';
    END IF;    

    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

    EXECUTE IMMEDIATE LV_SQLSTR;



    FOR C1 IN (  
--        SELECT SUM(RW_HRS) RW_HRS, SUM(RT_BASIC) RT_BASIC, SUM(OW_HRS) OW_HRS, 
--        SUM(RT_FE) RT_FE, SUM(OT_HRS) OT_HRS, SUM(RT_NSA) RT_NSA, SUM(RC_ERN) RC_ERN, SUM(RT_INC) RT_INC, 
--        SUM(RN_ERN) RN_ERN, SUM(RT_OT) RT_OT, SUM(OT_ERN) OT_ERN, SUM(RT_TOTAL) RT_TOTAL, SUM(OC_ERN) OC_ERN, 
--        SUM(RT_DA) RT_DA, SUM(ON_ERN) ON_ERN, SUM(RT_RECNO) RT_RECNO, SUM(RT_CONVEYANCE) RT_CONVEYANCE, SUM(RT_OTB) RT_OTB, SUM(TOT_ERN) TOT_ERN, SUM(TOT_RATE) TOT_RATE
--        FROM GTT_DEPT_WISE_WAGERATE

        SELECT DEPARTMENTCODE, DEPARTMENTDESC, RW_HRS, RT_BASIC, OW_HRS, RT_FE, OT_HRS, RT_NSA, RC_ERN, 
        RT_INC, RN_ERN, RT_OT, OT_ERN, RT_TOTAL, OC_ERN, RT_DA, ON_ERN, RT_RECNO, RT_CONVEYANCE, RT_OTB, TOT_ERN, TOT_RATE
        FROM GTT_DEPT_WISE_WAGERATE 
    )
    LOOP
        
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OW_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OT_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RN_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.ON_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_CONVEYANCE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
        LV_ROWNUM := LV_ROWNUM+1;

   
       -- AS_XLSX.CELL( 1, LV_ROWNUM, '', P_BORDERID => AS_XLSX.GET_BORDER( '','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.RT_BASIC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RT_FE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.RT_NSA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.RT_INC, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.RT_OT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.RT_TOTAL, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.RT_DA, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.RT_RECNO, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.RT_OTB, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.TOT_RATE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.0000' ) );
        
        
        AS_XLSX.CELL( 1, LV_ROWNUM, '', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
        AS_XLSX.MERGECELLS(1, LV_ROWNUM-1, 1, LV_ROWNUM, 1);
    
    
        LV_ROWNUM := LV_ROWNUM+2;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'Description', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 2, LV_ROWNUM,'Manday', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 3, LV_ROWNUM,'Amount', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'R.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ));
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.RW_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.RC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'O.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.OW_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OC_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM,'OT.No', P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,ROUND(C1.OT_HRS/8,0), P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OT_ERN, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
    
    END LOOP; 
    
    
    

--
----
--    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
--    LV_ROWNUM := LV_ROWNUM + 1;  
--    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
--    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
--        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_OT_MONTH_CAT_WISE;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_OT_MONTH_CAT_WISE
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE           VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                 VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR               VARCHAR2(15); 
    LV_COMPANYNAME        VARCHAR2(100);   
    LV_DIVISIONNAME       VARCHAR2(100);    
    LV_PRINTDATE          VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(25000);
    LV_DIVADDRESS         VARCHAR2(500);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Department wise OT [Record no.]      '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(12,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(13,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(14,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(15,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(16,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(17,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(18,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 18, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 18, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 18, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    AS_XLSX.CELL( 1, 4,'DEPARTMENT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 2, 4,'O.T.A', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 4, 4,'O.T.B', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 4,'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
           
    AS_XLSX.CELL( 7, 4,'[FULL RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 8, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 9, 4,'[115 RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 10, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 11, 4,'[110 RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 12, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 13, 4,'[100(O) RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 14, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 15, 4,'[100 RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 16, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 17, 4,'[157 RATED]', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 18, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   

    AS_XLSX.MERGECELLS(2, 4, 3, 4, 1);  
    AS_XLSX.MERGECELLS(4, 4, 5, 4, 1);   
    AS_XLSX.MERGECELLS(7, 4, 8, 4, 1);   
    AS_XLSX.MERGECELLS(9, 4, 10, 4, 1);   
    AS_XLSX.MERGECELLS(11, 4, 12, 4, 1);   
    AS_XLSX.MERGECELLS(13, 4, 14, 4, 1);   
    AS_XLSX.MERGECELLS(15, 4, 16, 4, 1);   
    AS_XLSX.MERGECELLS(17, 4, 18, 4, 1);  
    
    AS_XLSX.CELL( 1, 5,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 2, 5,'HRS.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 4, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 5,'AMOUNT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 7, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 8, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 9, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 10, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 11, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 12, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 13, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 14, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 15, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 16, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    AS_XLSX.CELL( 17, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 18, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    



    LV_ROWNUM := 5;

    DELETE FROM GTT_WPS_OT_MONTH_CAT_WISE WHERE 1=1;

    LV_SQLSTR := NULL;

    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_WPS_OT_MONTH_CAT_WISE (COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT, FR_HRS, FR_AMT, A115_HRS, A115_AMT, A110_HRS, A110_AMT, A100_HRS, A100_AMT, B100_HRS, B100_AMT, Q_HRS, Q_AMT)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT C.COMPANYNAME, D.DIVISIONNAME,DEPT.DEPARTMENTCODE, DEPT.DEPARTMENTNAME, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(A.OTA_HRS,0) OTA_HRS, NVL(A.OTA_AMT,0) OTA_AMT, NVL(B.OTB_HRS,0) OTB_HRS, NVL(B.OTB_AMT,0) OTB_AMT , '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(FR_HRS,0) FR_HRS, NVL(FR_AMT,0) FR_AMT, NVL(A115_HRS,0) A115_HRS, NVL(A115_AMT,0) A115_AMT  , '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(A110_HRS,0) A110_HRS, NVL(A110_AMT,0) A110_AMT, NVL(A100_HRS,0) A100_HRS, NVL(A100_AMT,0) A100_AMT , '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(B100_HRS,0) B100_HRS, NVL(B100_AMT,0) B100_AMT, NVL(Q_HRS,0) Q_HRS, NVL(Q_AMT,0) Q_AMT '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM DEPARTMENTMASTER DEPT,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) OTA_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) OTA_AMT FROM WPSVOUCHERDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=2 AND WORKERCATEGORYCODE=''A'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) OTB_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) OTB_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=1 /*WORKERCATEGORYCODE=''B''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') B, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE,  '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) FR_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) FR_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE GRADECODE=''FR'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') FR,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE,  '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) A115_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) A115_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE GRADECODE LIKE ''115_'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A115,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) A110_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) A110_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE GRADECODE LIKE ''110_'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A110,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) A100_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) A100_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE GRADECODE=''100A'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A100,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) B100_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) B100_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE GRADECODE IN (''100B'',''100C'',''100D'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') B100,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) Q_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) Q_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE /*INSTR(GRADECODE,''Q'')>0*/ GRADECODE<>''FR'' AND GRADECODE NOT LIKE ''115_'' AND GRADECODE NOT LIKE ''110_'' AND GRADECODE<>''100A'' AND GRADECODE NOT IN (''100B'',''100C'',''100D'') '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') Q,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'COMPANYMAST C, DIVISIONMASTER D'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=FR.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=FR.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=FR.DEPARTMENTCODE(+) --------'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A100.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A100.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A100.DEPARTMENTCODE(+)----------'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A115.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A115.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A115.DEPARTMENTCODE(+)-------------'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A110.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A110.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A110.DEPARTMENTCODE(+)------------'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B100.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B100.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B100.DEPARTMENTCODE(+)---------------'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=Q.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=Q.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=Q.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=C.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=D.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY DEPT.DEPARTMENTCODE'|| CHR(10);
     
     
DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

EXECUTE IMMEDIATE LV_SQLSTR;
 
    FOR C1 IN (  
        SELECT COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT, 
        (OTA_AMT+OTB_AMT) TOT_AMT,FR_HRS, FR_AMT, A115_HRS, A115_AMT, A110_HRS, A110_AMT, A100_HRS, A100_AMT, B100_HRS, B100_AMT, Q_HRS, Q_AMT
        FROM GTT_WPS_OT_MONTH_CAT_WISE     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTNAME, P_BORDERID => AS_XLSX.GET_BORDER( '','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.FR_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.FR_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.A115_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.A115_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.A110_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 12, LV_ROWNUM,C1.A110_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 13, LV_ROWNUM,C1.A100_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 14, LV_ROWNUM,C1.A100_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 15, LV_ROWNUM,C1.B100_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 16, LV_ROWNUM,C1.B100_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 17, LV_ROWNUM,C1.Q_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 18, LV_ROWNUM,C1.Q_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    FOR C1 IN (  
        SELECT SUM(OTA_HRS) OTA_HRS, SUM(OTA_AMT) OTA_AMT, SUM(OTB_HRS) OTB_HRS, SUM(OTB_AMT) OTB_AMT, SUM(OTA_AMT+OTB_AMT) TOT_AMT,
        SUM(FR_HRS) FR_HRS, SUM(FR_AMT) FR_AMT, SUM(A115_HRS) A115_HRS, SUM(A115_AMT) A115_AMT, SUM(A110_HRS) A110_HRS, SUM(A110_AMT) A110_AMT, SUM(A100_HRS) A100_HRS, 
        SUM(A100_AMT) A100_AMT, SUM(B100_HRS) B100_HRS, SUM(B100_AMT) B100_AMT, SUM(Q_HRS) Q_HRS, SUM(Q_AMT) Q_AMT
        FROM GTT_WPS_OT_MONTH_CAT_WISE     
    )
    LOOP
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.FR_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.FR_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.A115_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.A115_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.A110_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 12, LV_ROWNUM,C1.A110_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 13, LV_ROWNUM,C1.A100_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 14, LV_ROWNUM,C1.A100_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 15, LV_ROWNUM,C1.B100_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 16, LV_ROWNUM,C1.B100_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 17, LV_ROWNUM,C1.Q_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 18, LV_ROWNUM,C1.Q_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
  
    END LOOP;    
    

--
    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
    LV_ROWNUM := LV_ROWNUM + 1;  
    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 18, LV_ROWNUM, 1);   
        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_OT_NO_MASTER;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_OT_NO_MASTER
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE           VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                 VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR              VARCHAR2(15); 
    LV_COMPANYNAME            VARCHAR2(100);   
    LV_DIVISIONNAME           VARCHAR2(100);    
    LV_PRINTDATE           VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(5000);
    LV_DIVADDRESS            VARCHAR2(5000);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Department wise OT & No Master Summary for  '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 6, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 6, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 6, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    AS_XLSX.CELL( 1, 4,'DEPARTMENT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 2, 4,'O.T.A', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 4, 4,'O.T.B', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 4,'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
           

    AS_XLSX.MERGECELLS(2, 4, 3, 4, 1);  
    AS_XLSX.MERGECELLS(4, 4, 5, 4, 1);  
    
    AS_XLSX.CELL( 1, 5,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 2, 5,'HRS.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 4, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 5,'AMOUNT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    LV_ROWNUM := 5;
-- 
    DELETE FROM GTT_DEPT_WISE_OT_EXCEL WHERE 1=1;

    LV_SQLSTR := NULL;
    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_DEPT_WISE_OT_EXCEL(COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT C.COMPANYNAME, D.DIVISIONNAME,DEPT.DEPARTMENTCODE, DEPT.DEPARTMENTNAME, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(A.OTA_HRS,0) OTA_HRS, NVL(A.OTA_AMT,0) OTA_AMT, NVL(B.OTB_HRS,0) OTB_HRS, NVL(B.OTB_AMT,0) OTB_AMT '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM DEPARTMENTMASTER DEPT,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) OTA_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) OTA_AMT FROM /*WPSWAGESDETAILS*/ WPSVOUCHERDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=1 /*WORKERCATEGORYCODE=''A''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(NVL(ATTENDANCEHOURS,0)+/*NVL(OVERTIMEHOURS,0)+*/NVL(NIGHTALLOWANCEHOURS,0)/*+NVL(NS_ALLOW,0)+NVL(OT_NSHRS,0)*/) OTB_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(NVL(GROSS_WAGES,0)-NVL(OT_AMOUNT,0)-NVL(NS_ALLOW_OT,0)) OTB_AMT FROM /*WPSWAGESDETAILS*/ WPSVOUCHERDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=1 /*WORKERCATEGORYCODE=''A''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') B, COMPANYMAST C, DIVISIONMASTER D'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE IN ('||P_DEPT||')'|| CHR(10);
    END IF;
    
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=C.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=D.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY DEPT.DEPARTMENTCODE'|| CHR(10);
 
DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

EXECUTE IMMEDIATE LV_SQLSTR;
 
    FOR C1 IN (  
        SELECT COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT, 
        (OTA_AMT+OTB_AMT) TOT_AMT
        FROM GTT_DEPT_WISE_OT_EXCEL     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTNAME, P_BORDERID => AS_XLSX.GET_BORDER( '','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );

    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    FOR C2 IN (  
        SELECT SUM(OTA_HRS) OTA_HRS, SUM(OTA_AMT) OTA_AMT, SUM(OTB_HRS) OTB_HRS, SUM(OTB_AMT) OTB_AMT, SUM(OTA_AMT+OTB_AMT) TOT_AMT
        FROM GTT_DEPT_WISE_OT_EXCEL     
    )
    LOOP
        AS_XLSX.CELL( 2, LV_ROWNUM,C2.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 3, LV_ROWNUM,C2.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 4, LV_ROWNUM,C2.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 5, LV_ROWNUM,C2.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C2.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
    END LOOP;    
    

--
    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
    LV_ROWNUM := LV_ROWNUM + 1;  
    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_OT_RECORD_NO;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_OT_RECORD_NO
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE           VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                 VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR              VARCHAR2(15); 
    LV_COMPANYNAME            VARCHAR2(100);   
    LV_DIVISIONNAME           VARCHAR2(100);    
    LV_PRINTDATE           VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(5000);
    LV_DIVADDRESS            VARCHAR2(5000);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Department wise OT [Record no.]      '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 6, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 6, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 6, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    AS_XLSX.CELL( 1, 4,'DEPARTMENT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 2, 4,'O.T.A', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    AS_XLSX.CELL( 4, 4,'O.T.B', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 4,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 4,'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
           

    AS_XLSX.MERGECELLS(2, 4, 3, 4, 1);  
    AS_XLSX.MERGECELLS(4, 4, 5, 4, 1);  
    
    AS_XLSX.CELL( 1, 5,'', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 2, 5,'HRS.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 3, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 4, 5,'HRS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 5, 5,'AMT.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    AS_XLSX.CELL( 6, 5,'AMOUNT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   
    LV_ROWNUM := 5;
-- 
    DELETE FROM GTT_DEPT_WISE_OT_EXCEL WHERE 1=1;

    LV_SQLSTR := NULL;
    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_DEPT_WISE_OT_EXCEL(COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT C.COMPANYNAME, D.DIVISIONNAME,DEPT.DEPARTMENTCODE, DEPT.DEPARTMENTNAME, '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'NVL(A.OTA_HRS,0) OTA_HRS, NVL(A.OTA_AMT,0) OTA_AMT, NVL(B.OTB_HRS,0) OTB_HRS, NVL(B.OTB_AMT,0) OTB_AMT '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM DEPARTMENTMASTER DEPT,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) OTA_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) OTA_AMT FROM WPSVOUCHERDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=2 AND WORKERCATEGORYCODE=''A'''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') A,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '('|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SELECT COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, /*WORKERCATEGORYCODE,*/ '|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(ATTENDANCEHOURS,0)+*/NVL(OVERTIMEHOURS,0)+/*NVL(NIGHTALLOWANCEHOURS,0)+NVL(NS_ALLOW,0)+*/NVL(OT_NSHRS,0)) OTB_HRS,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    SUM(/*NVL(GROSS_WAGES,0)*/ NVL(OT_AMOUNT,0) + NVL(NS_ALLOW_OT,0)) OTB_AMT FROM WPSWAGESDETAILS'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    WHERE 1=1 /*AND WORKERCATEGORYCODE=''B''*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTSTARTDATE >=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    AND FORTNIGHTENDDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || '    GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE/*, WORKERCATEGORYCODE*/'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || ') B, COMPANYMAST C, DIVISIONMASTER D'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'WHERE 1=1'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE IN ('||P_DEPT||')'|| CHR(10);
    END IF;
    
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=A.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=A.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=A.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=C.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.COMPANYCODE=D.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND DEPT.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY DEPT.DEPARTMENTCODE'|| CHR(10);
 
DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

EXECUTE IMMEDIATE LV_SQLSTR;
 
    FOR C1 IN (  
        SELECT COMPANYNAME, DIVISIONNAME, DEPARTMENTCODE, DEPARTMENTNAME, OTA_HRS, OTA_AMT, OTB_HRS, OTB_AMT, 
        (OTA_AMT+OTB_AMT) TOT_AMT
        FROM GTT_DEPT_WISE_OT_EXCEL     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTNAME, P_BORDERID => AS_XLSX.GET_BORDER( '','thin','', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );

    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    FOR C2 IN (  
        SELECT SUM(OTA_HRS) OTA_HRS, SUM(OTA_AMT) OTA_AMT, SUM(OTB_HRS) OTB_HRS, SUM(OTB_AMT) OTB_AMT, SUM(OTA_AMT+OTB_AMT) TOT_AMT
        FROM GTT_DEPT_WISE_OT_EXCEL     
    )
    LOOP
        AS_XLSX.CELL( 2, LV_ROWNUM,C2.OTA_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 3, LV_ROWNUM,C2.OTA_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 4, LV_ROWNUM,C2.OTB_HRS, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 5, LV_ROWNUM,C2.OTB_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C2.TOT_AMT, P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
    END LOOP;    
    

--
    LV_PRINTDATE := 'RUN DATE : '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
    LV_ROWNUM := LV_ROWNUM + 1;  
    AS_XLSX.CELL( 1, LV_ROWNUM, LV_PRINTDATE , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'left' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    AS_XLSX.MERGECELLS(1, LV_ROWNUM, 6, LV_ROWNUM, 1);   
        
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_RPT_WPS_WAGES_PAID_DED;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_WAGES_PAID_DED
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE              VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_FILE                VARCHAR2 
)
AS
    LV_RPT_CAPTION        VARCHAR2(500);
    L_DIR                 VARCHAR2(10) := 'ORA_DIR';
    L_FILE                VARCHAR2(100) := P_FILE||'.xlsx'; 
    LV_ROWNUM             NUMBER := 0;
    LV_MONTH              VARCHAR2(15); 
    LV_YEAR               VARCHAR2(15); 
    LV_COMPANYNAME        VARCHAR2(100);   
    LV_DIVISIONNAME       VARCHAR2(100);    
    LV_PRINTDATE          VARCHAR2(100);  
  
    LV_SQLSTR             VARCHAR2(5000);
    LV_DIVADDRESS         VARCHAR2(5000);
     
BEGIN

   

    SELECT COMPANYNAME, DIVISIONNAME, DIVISIONADDRESS 
    INTO LV_COMPANYNAME,LV_DIVISIONNAME,LV_DIVADDRESS
    FROM COMPANYMAST CM, DIVISIONMASTER DM                      
    WHERE CM.COMPANYCODE=DM.COMPANYCODE
    AND CM.COMPANYCODE=P_COMPANYCODE
    AND DM.DIVISIONCODE= P_DIVISIONCODE;
   
    LV_RPT_CAPTION:= 'Statement of Actual Wages Paid & Deduction for B.M. : '||P_FROMDATE||' to '|| P_TODATE;

    AS_XLSX.CLEAR_WORKBOOK;
    AS_XLSX.NEW_SHEET;

--
--Dept. Desc.        R.W.HRS        O.W.HRS        O.T.HRS        R.C.ERN        R.N.ERN        O.T.ERN        O.C.ERN        O.N.ERN        RT.CONVEYANCE    TOT.ERN
--                RT.BASIC    RT.FE        RT.NBA        RT.INC        RT.OT        RT.TOTAL    RT.DA        RT.REC.NO    RT.OTB
--                
--1                2            3            4            5            6            7            8            9            10                11    

    -- Set column Width
    AS_XLSX.SET_COLUMN_WIDTH(1,40,1);
    AS_XLSX.SET_COLUMN_WIDTH(2,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(3,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(4,20,1);
    AS_XLSX.SET_COLUMN_WIDTH(5,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(6,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(7,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(8,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(9,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(10,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(11,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(12,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(13,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(14,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(15,15,1);
    AS_XLSX.SET_COLUMN_WIDTH(16,15,1);
    
    
    AS_XLSX.MERGECELLS(1, 1, 11, 1, 1);   
    AS_XLSX.CELL( 1, 1, LV_COMPANYNAME  , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA',p_BOLD => TRUE) );              --,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )             

    AS_XLSX.MERGECELLS(1, 2, 11, 2, 1);   
    AS_XLSX.CELL( 1, 2, LV_DIVISIONNAME ||' [ '|| P_DIVISIONCODE || ']', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);

    AS_XLSX.MERGECELLS(1, 3, 11, 3, 1);   
    AS_XLSX.CELL( 1, 3, LV_RPT_CAPTION , P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 8, p_BOLD => TRUE) );--,p_borderid => as_xlsx.get_border( 'double', 'double', 'double', 'double' )
    --AS_XLSX.FREEZE_PANE(2, 5);
            
                                        

    
    
 AS_XLSX.CELL( 1, 4,'DEPARTMENTS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 2, 4,'NO OF WORKERS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 3, 4,'GROSS WAGES', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 4, 4,'STL ADJ. RECOVER', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 5, 4,'P.F.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 6, 4,'PENSION', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 7, 4,'E.S.I.', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 8, 4,'PF-L-P', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 9, 4,'PF-L-I', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 10, 4,'H/RENT', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 11, 4,'P.TAX', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 12, 4,'WELFARE', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 13, 4,'ADJ.DED    ', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 14, 4,'OTHERS', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 15, 4,'P C/F', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
 AS_XLSX.CELL( 16, 4,'NET. WAGES', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( P_HORIZONTAL => 'center', p_vertical => 'center' ),P_BORDERID => AS_XLSX.GET_BORDER( 'double', 'double', 'thin', 'thin' ),P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
   

    LV_ROWNUM := 4;
    DELETE FROM GTT_DEPT_WAGES_PAID_DED WHERE 1=1;
 




    LV_SQLSTR := NULL;
    LV_SQLSTR := LV_SQLSTR || 'INSERT INTO GTT_DEPT_WAGES_PAID_DED(DEPARTMENTCODE, DEPARTMENTDESC, NOOFWORKER, GROSSWAGES, STL_ADJ_RECOVER, PF, PENSION, ESI, PF_L_P, PF_L_I, H_RENT, P_TAX, WELFARE, ADJ_DED, OTHER, P_CF, NET_WAGES)'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SELECT A.DEPARTMENTCODE, DEPARTMENTNAME,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'COUNT(TOKENNO) NOOFWORKER,SUM(NVL(GROSS_WAGES,0)) GROSSWAGES,SUM(NVL(STL_ADV,0)) STL_ADJ_RECOVER,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SUM(NVL(PF_CONT,0)) PF,0 PENSION,SUM(NVL(A.ESI_CONT,0)) ESI,SUM(NVL(A.LOAN_PFL,0)) PF_L_P,SUM(NVL(A.LINT_PFL,0)) PF_L_I,SUM(NVL(A.HRA,0)) H_RENT,'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'SUM(NVL(A.P_TAX,0)) P_TAX,0 WELFARE,0 ADJ_DED,0 OTHER,0 P_CF,(SUM(NVL(A.TOT_EARN,0)) - SUM(NVL(A.TOT_DEDUCTION,0))) NET_WAGES'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'FROM WPSWAGESDETAILS A, DEPARTMENTMASTER B'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'WHERE A.COMPANYCODE=B.COMPANYCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'AND A.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10);
    
    IF P_DEPT IS NOT NULL THEN
       LV_SQLSTR := LV_SQLSTR || 'AND A.DEPARTMENTCODE IN ('||P_DEPT||')'|| CHR(10);
    END IF;
    
    LV_SQLSTR := LV_SQLSTR || 'GROUP BY A.DEPARTMENTCODE, DEPARTMENTNAME'|| CHR(10);
    LV_SQLSTR := LV_SQLSTR || 'ORDER BY A.DEPARTMENTCODE '|| CHR(10);
  
DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);

EXECUTE IMMEDIATE LV_SQLSTR;
-- 
    FOR C1 IN (  
        SELECT DEPARTMENTCODE, DEPARTMENTDESC, NOOFWORKER, GROSSWAGES, STL_ADJ_RECOVER, PF, 
        PENSION, ESI, PF_L_P, PF_L_I, H_RENT, P_TAX, WELFARE, ADJ_DED, OTHER, P_CF, NET_WAGES
        FROM GTT_DEPT_WAGES_PAID_DED     
    )
    LOOP
        LV_ROWNUM := LV_ROWNUM+1;
        
        AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTDESC, P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.NOOFWORKER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' )  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.GROSSWAGES, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.STL_ADJ_RECOVER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' )  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.PF, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.PENSION, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.ESI, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.PF_L_P, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.PF_L_I, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.H_RENT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.P_TAX, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 12, LV_ROWNUM,C1.WELFARE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 13, LV_ROWNUM,C1.ADJ_DED, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 14, LV_ROWNUM,C1.OTHER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 15, LV_ROWNUM,C1.P_CF, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
        AS_XLSX.CELL( 16, LV_ROWNUM,C1.NET_WAGES, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ) );
       
    
    END LOOP;       
   
    LV_ROWNUM := LV_ROWNUM + 1;  
    
    AS_XLSX.CELL( 1, LV_ROWNUM, 'TOTAL', P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'double','double','', '' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    FOR C1 IN (  
        SELECT SUM(NOOFWORKER) NOOFWORKER, SUM(GROSSWAGES) GROSSWAGES,  SUM(STL_ADJ_RECOVER) STL_ADJ_RECOVER,  SUM(PF) PF, 
         SUM(PENSION) PENSION,  SUM(ESI) ESI,  SUM(PF_L_P) PF_L_P,  SUM(PF_L_I) PF_L_I,  SUM(H_RENT) H_RENT,  SUM(P_TAX) P_TAX,  
         SUM(WELFARE) WELFARE,  SUM(ADJ_DED) ADJ_DED,  SUM(OTHER) OTHER,  SUM(P_CF) P_CF,  SUM(NET_WAGES) NET_WAGES
        FROM GTT_DEPT_WAGES_PAID_DED 
    )
    LOOP
        
        --AS_XLSX.CELL( 1, LV_ROWNUM, C1.DEPARTMENTDESC, P_ALIGNMENT => AS_XLSX.GET_ALIGNMENT( p_vertical => 'center' ), P_BORDERID => AS_XLSX.GET_BORDER( 'thin','thin','thin', 'thin' ) );
        AS_XLSX.CELL( 2, LV_ROWNUM,C1.NOOFWORKER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE)  );
        AS_XLSX.CELL( 3, LV_ROWNUM,C1.GROSSWAGES, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE)  );
        AS_XLSX.CELL( 4, LV_ROWNUM,C1.STL_ADJ_RECOVER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE)  );
        AS_XLSX.CELL( 5, LV_ROWNUM,C1.PF, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 6, LV_ROWNUM,C1.PENSION, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 7, LV_ROWNUM,C1.ESI, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 8, LV_ROWNUM,C1.PF_L_P, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 9, LV_ROWNUM,C1.PF_L_I, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 10, LV_ROWNUM,C1.H_RENT, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 11, LV_ROWNUM,C1.P_TAX, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 12, LV_ROWNUM,C1.WELFARE, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 13, LV_ROWNUM,C1.ADJ_DED, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 14, LV_ROWNUM,C1.OTHER, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 15, LV_ROWNUM,C1.P_CF, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
        AS_XLSX.CELL( 16, LV_ROWNUM,C1.NET_WAGES, P_BORDERID => AS_XLSX.GET_BORDER( 'thin', 'thin', 'thin', 'thin' ), p_numFmtId => as_xlsx.get_numFmt( '0.00' ), P_FONTID => AS_XLSX.get_font('TAHOMA', p_fontsize => 10, p_BOLD => TRUE) );
    
    END LOOP; 
    
       
    AS_XLSX.SAVE( L_DIR, L_FILE );
END;
/


DROP PROCEDURE PROC_SD_WPSDEPARTMENTTYPEMAST;

CREATE OR REPLACE PROCEDURE "PROC_SD_WPSDEPARTMENTTYPEMAST" (p_Operation char)
as

lv_int_validated    number(1)  := 0;
lv_str_validated    varchar2(4000) := '';

lv_str_insert_qry   varchar2(4000) := '';

begin

-- Validation Part
    lv_str_validated := 'SORRY ANGSHUMAN .... NOT VALIDATED INPUT....';
    lv_int_validated := 1;
    if lv_int_validated = 1 then         
        if upper(p_Operation) = 'A' then
    -- Saving Part - Inserting 
            dbms_output.put_line(fn_get_mapped_column_names('GBL_TMP_WPSDEPARTMENTTYPEMAST1'));
            lv_str_insert_qry := 'insert into wpsdepartmenttypemast (' || fn_get_mapped_column_names('GBL_TMP_WPSDEPARTMENTTYPEMAST1') || ')' ||  ' select ' || fn_get_mapped_column_names('GBL_TMP_WPSDEPARTMENTTYPEMAST1') || ' from GBL_TMP_WPSDEPARTMENTTYPEMAST1'  ;    
            dbms_output.put_line(lv_str_insert_qry);
            execute immediate lv_str_insert_qry;
            null;   
        elsif upper(p_Operation) = 'M' then
            null;

        elsif upper(p_Operation) = 'D' then
            null;
        
        end if;
    -- Delete Part
    
    else
        raise_application_error(-20010, lv_str_validated);
    end if;

end;
/


DROP PROCEDURE PROC_WPSABSTRACTEDDEPTSUMM;

CREATE OR REPLACE PROCEDURE "PROC_WPSABSTRACTEDDEPTSUMM" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_DEPTCODE VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(30000);
BEGIN
    DELETE FROM GTT_ABSTRACTEDDEPTSUMM;
    LV_SQLSTR :=    ' INSERT INTO GTT_ABSTRACTEDDEPTSUMM '|| CHR(10) 
                  ||'    SELECT A.DEPARTMENTCODE,B.HANDS,'||CHR(10)
                  ||'       SUM(NVL(GROSS_WAGES,0)) GROSS_WAGES, SUM(NVL(PF_CONT,0)) PF_CONT,SUM(NVL(FPF,0)) FPF,SUM(NVL(PF_COM,0)) PF_COM,'||CHR(10)
                  ||'       SUM(NVL(ESI_CONT,0)) ESI_CONT,SUM(NVL(P_TAX,0)) P_TAX,SUM(NVL(WF_DEDN,0)) WF_DEDN,NULL ADV,NULL LTP_ADV,'||CHR(10)
                  ||'       SUM(NVL(SHIBCO_DEDN,0)) SHIBCO_DEDN,SUM(NVL(LOAN_PFLN,0)) LOAN_PFLN,SUM(NVL(LINT_PFLN,0)) LINT_PFLN,'||CHR(10)
                  ||'       SUM(NVL(ACTUALPAYBLEAMOUNT,0)) ACTUALPAYBLEAMOUNT,C.COMPANYNAME,'||CHR(10)
                  ||'       ''Run Date '' ||TO_CHAR(SYSDATE,''DD/MM/RRRR'') AS RUNDATE,'||CHR(10)
                  ||'       ''FOR THE PERIOD FROM '' ||'''||P_FROMDATE||'''||'' TO ''||'''||P_TODATE||'''  FROMTODATE'||CHR(10)
                  ||'  FROM WPSWAGESDETAILS_MV A,'||CHR(10)
                  ||'       (SELECT DEPARTMENTCODE,COUNT(WORKERSERIAL) HANDS FROM WPSWAGESDETAILS_MV'||CHR(10)
                  ||'        WHERE COMPANYCODE='''||P_COMPANYCODE||'''   '||CHR(10) 
                  ||'          AND DIVISIONCODE='''||P_DIVISIONCODE||'''   '||CHR(10)       
                  ||'          AND FORTNIGHTSTARTDATE=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'||CHR(10)
                  ||'          AND FORTNIGHTENDDATE=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'||CHR(10)
                  ||'        GROUP BY DEPARTMENTCODE '||CHR(10)
                  ||'        ) B,COMPANYMAST C'||CHR(10)
                  ||'WHERE A.COMPANYCODE='''||P_COMPANYCODE||'''   '||CHR(10) 
                  ||'  AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''   '||CHR(10)
                  ||'  AND A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'||CHR(10)
                  ||'  AND A.FORTNIGHTENDDATE=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'||CHR(10)
                  ||'  AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'||CHR(10)
                  ||'  AND A.COMPANYCODE=C.COMPANYCODE'||CHR(10);
                  IF P_DEPTCODE IS NOT NULL THEN
                    LV_SQLSTR := LV_SQLSTR ||' AND A.DEPARTMENTCODE IN ( '||P_DEPTCODE||')  '||CHR(10);
                  END IF;                                
                  LV_SQLSTR := LV_SQLSTR   ||' GROUP BY A.DEPARTMENTCODE,B.HANDS,C.COMPANYNAME'||CHR(10)
                  ||'ORDER BY A.DEPARTMENTCODE'||CHR(10);
           
                
  --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSACCIDENTDETAILS;

CREATE OR REPLACE PROCEDURE PROC_WPSACCIDENTDETAILS (P_COMPANYCODE VARCHAR2, P_DIVISIONCODE VARCHAR2, P_FROMDATE VARCHAR2, P_TODATE VARCHAR2, P_TOKENNO VARCHAR2, P_DEPARTMENTCODE VARCHAR2, P_CATEGORYCODE VARCHAR2, P_UNITCODE VARCHAR2)
AS
LV_SQLSTR   VARCHAR2(4000)  :=  '';
BEGIN
    
    DELETE FROM GTT_WPSACCIDENTDETAILS;

    LV_SQLSTR := 'INSERT INTO GTT_WPSACCIDENTDETAILS '||CHR(10)
               ||'SELECT COM.COMPANYNAME,DIV.DIVISIONNAME,A.TOKENNO,A.WORKERNAME,B.DATEOFATTENDANCE,B.ACCIDENTTIME, '||CHR(10)
               ||'       B.SHIFTCODE,B.SPELL,B.ATTENDANCEHOURS,B.REMARKS, '||CHR(10)
               ||'       CASE WHEN '''||P_FROMDATE||''' = '''||P_TODATE||''' THEN ''As on ''|| '''||P_FROMDATE||''' '||CHR(10)
               ||'            WHEN '''||P_FROMDATE||''' <> '''||P_TODATE||''' THEN ''Period from ''|| '''||P_FROMDATE||''' ||'' to ''|| '''||P_TODATE||''' '||CHR(10)
               ||'       END PERIOD, '||chr(10)
               ||'       A.SRLNO EX1,A.GROUPCODE EX2,'''' EX3,'''' EX4,'''' EX5 '||CHR(10)
               ||'   FROM WPSWORKERMAST A, WPSACCIDENTGATEPASSDETAILS B, COMPANYMAST COM, DIVISIONMASTER DIV '||CHR(10)
               ||'  WHERE A.COMPANYCODE = '''||P_COMPANYCODE||'''  '||CHR(10)
               ||'    AND A.DIVISIONCODE = '''||P_DIVISIONCODE||'''  '||CHR(10)
               ||'    AND A.COMPANYCODE = B.COMPANYCODE  '||CHR(10)
               ||'    AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
               ||'    AND A.COMPANYCODE = COM.COMPANYCODE '||CHR(10)
               ||'    AND A.COMPANYCODE = DIV.COMPANYCODE   '||CHR(10)
               ||'    AND A.DIVISIONCODE = DIV.DIVISIONCODE  '||CHR(10)
               ||'    AND B.TRANSACTIONTAG = ''ACCIDENT'' '||CHR(10)
               ||'    AND A.TOKENNO = B.TOKENNO  '||CHR(10);
       IF NVL(P_TOKENNO,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.TOKENNO IN ('||P_TOKENNO||')  '||CHR(10);
       END IF; 
       IF NVL(P_DEPARTMENTCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.DEPARTMENTCODE IN ('||P_DEPARTMENTCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_CATEGORYCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.WORKERCATEGORYCODE IN ('||P_CATEGORYCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_UNITCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.UNITCODE IN ('||P_UNITCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_FROMDATE,'NA')<>'NA' AND NVL(P_TODATE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND B.DATEOFATTENDANCE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')  '||CHR(10)
                                 ||'    AND B.DATEOFATTENDANCE <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')  '||CHR(10);
       END IF;        
           LV_SQLSTR := LV_SQLSTR||'    AND NVL(A.ACTIVE,''N'') =''Y''  '||CHR(10);
       LV_SQLSTR := LV_SQLSTR ||' ORDER BY B.DATEOFATTENDANCE, A.TOKENNO '||CHR(10);
                                 
       --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
       
      EXECUTE IMMEDIATE LV_SQLSTR;

END;
/


DROP PROCEDURE PROC_WPSADJUSTMENTENTRY;

CREATE OR REPLACE PROCEDURE "PROC_WPSADJUSTMENTENTRY" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSADJUSTMENTENTRY;   
    LV_SQLSTR :=    ' INSERT INTO GTT_WPSADJUSTMENTENTRY '|| CHR(10)
                  ||' SELECT A.WORKERSERIAL,A.TOKENNO,B.WORKERNAME||'' -''||SUBSTR(BOOKNO,20,2) WORKERNAME,A.ATTENDANCEHOURS,A.OVERTIMEHOURS,A.HOLIDAYHOURS,A.FBKHOURS,'|| CHR(10)
                  ||'        A.LAYOFFHOURS ,A.PF_ADJ,A.NPF_ADJ,A.OT_AMOUNT,0 MISC_DEDN ,NVL(SHIBCO_DEDN,0)+ NVL(OTHR_DEDN,0) OTHR_DEDN ,C.COMPANYNAME,'|| CHR(10)
                  ||'        ''Run Date ''||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE,'|| CHR(10)
                  ||'        ''For the Period from '' ||TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') || '' to ''  ||  TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') AS FROMTODATE '|| CHR(10)
                  ||'  FROM WPSATTENDANCEDAYWISE A,WPSWORKERMAST B,COMPANYMAST C'|| CHR(10)
                  ||'  WHERE ATTENDANCETAG=''HAND WAGES'' '|| CHR(10)
                  ||'    AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
                  ||'    AND A.DIVISIONCODE=B.DIVISIONCODE '|| CHR(10)
                  ||'    AND A.WORKERSERIAL=B.WORKERSERIAL '|| CHR(10)
                  ||'    AND A.COMPANYCODE=C.COMPANYCODE '|| CHR(10)
                  ||'    AND A.COMPANYCODE='''||P_COMPANYCODE||''''|| CHR(10)
                  ||'    AND A.DIVISIONCODE='''||P_DIVISIONCODE||''''|| CHR(10)
                  ||'    AND A.DATEOFATTENDANCE >=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
                  ||'    AND A.DATEOFATTENDANCE <=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10);
                 IF P_TOKENNO IS NOT NULL THEN
                       LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
                 END IF;
                 LV_SQLSTR := LV_SQLSTR ||' ORDER BY A.TOKENNO '||CHR(10);
                         
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
  EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSATTENDANCEDETAILS;

CREATE OR REPLACE PROCEDURE "PROC_WPSATTENDANCEDETAILS" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDT VARCHAR2,
    P_TODT VARCHAR2,
    P_TOKENNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSATTENDANCEDETAILS;
    LV_SQLSTR :=    'insert into GTT_WPSATTENDANCEDETAILS '|| CHR(10)
    ||'  SELECT DISTINCT A.COMPANYCODE,A.DIVISIONCODE,A.DATEOFATTENDANCE ,'|| CHR(10) 
    ||'  A.DEPARTMENTCODE, DECODE(A.SHIFTCODE,''1'',''A'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFTCODE, A.WORKERSERIAL, A.TOKENNO, W.WORKERNAME,A.OCCUPATIONCODE,' || CHR(10)
    ||' ''[''||A.TOKENNO||'']''||W.WORKERNAME AS WORKER,' || CHR(10)
    ||' RTRIM (XMLAGG (XMLELEMENT (E,CASE WHEN A.ATTENDANCEHOURS>0 THEN A.ATTENDANCEHOURS|| ''/'' ELSE NULL END )ORDER BY A.TOKENNO,A.SPELLTYPE).EXTRACT (''//text()''), ''/'') ATTENDANCEHOURS,' || CHR(10)
    ||' RTRIM (XMLAGG (XMLELEMENT (E,CASE WHEN A.OVERTIMEHOURS>0 THEN A.OVERTIMEHOURS|| ''/'' ELSE NULL END )ORDER BY A.TOKENNO,A.SPELLTYPE).EXTRACT (''//text()''), ''/'') OVERTIMEHOURS,' || CHR(10)
    ||' RTRIM (XMLAGG (XMLELEMENT (E,CASE WHEN A.NIGHTALLOWANCEHOURS>0 THEN A.NIGHTALLOWANCEHOURS|| ''/'' ELSE NULL END )ORDER BY A.TOKENNO,A.SPELLTYPE).EXTRACT (''//text()''), ''/'') NIGHTALLOWANCEHOURS,' || CHR(10)
    ||'  A.MACHINECODE1, B.LINENO ,A.UNITCODE,'|| CHR(10)
    ||'  C.COMPANYNAME, C.COMPANYADDRESS, C.COMPANYADDRESS1, C.COMPANYADDRESS2, D.DIVISIONNAME'|| CHR(10)
    ||'  FROM WPSATTENDANCEDAYWISE A, WPSMACHINELINEMAPPING B ,COMPANYMAST C,DIVISIONMASTER D,'|| CHR(10)
    ||'  WPSWORKERMAST W'|| CHR(10)
    ||'  WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'   AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'   AND  A.COMPANYCODE=B.COMPANYCODE(+)'|| CHR(10)
    ||'   AND  A.DIVISIONCODE=B.DIVISIONCODE(+)'|| CHR(10)
    ||'   AND  A.MACHINECODE1=B.MACHINECODE(+)'||CHR(10)
    ||'   AND  A.DEPARTMENTCODE=B.DEPARTMENTCODE(+)'|| CHR(10)
    ||'   AND  A.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=D.COMPANYCODE'|| CHR(10)
    ||'   AND  A.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=W.COMPANYCODE'|| CHR(10)
    ||'   AND  A.TOKENNO=W.TOKENNO'|| CHR(10)
    ||'   AND  A.DATEOFATTENDANCE >= TO_DATE(''' || P_FROMDT || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'   AND  A.DATEOFATTENDANCE <=TO_DATE(''' || P_TODT || ''',''DD/MM/YYYY'') '|| CHR(10); 
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
       LV_SQLSTR := LV_SQLSTR ||' GROUP BY A.WORKERSERIAL, A.TOKENNO, W.WORKERNAME, A.UNITCODE, A.DEPARTMENTCODE,A.SHIFTCODE, A.OCCUPATIONCODE,'||CHR(10)
       ||'A.MACHINECODE1, B.LINENO,A.DATEOFATTENDANCE,A.COMPANYCODE,A.DIVISIONCODE,'||CHR(10)
       ||'C.COMPANYNAME, C.COMPANYADDRESS, C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME'||CHR(10)
       ||'ORDER BY A.DATEOFATTENDANCE,SHIFTCODE,A.DEPARTMENTCODE'||CHR(10);         
    
 DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSBONUSGROSS_UPDT;

CREATE OR REPLACE PROCEDURE "PROC_WPSBONUSGROSS_UPDT" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number    DEFAULT NULL, 
                                                  P_SOURCE_TABLENAME Varchar2  DEFAULT 'WPSWAGESDETAILS_MV_SWT',
                                                  P_TARGET_TABLENAME VARCHAR2 DEFAULT 'WPSWAGESDETAILS_MV',
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
lv_Sql          varchar2(32767) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_ProcName   varchar2(30) := 'PROC_WPSBONUSGROSS_UPDT';
lv_remarks   varchar2(100) := '';
BEGIN

             lv_remarks := 'UPDATE BONUS GROSS FROM PF GROSS ';

              lv_Sql := '  UPDATE '||P_TARGET_TABLENAME||' TT1 SET GR_FOR_BONUS = '||chr(10)
              ||'  (SELECT PF_GROSS  FROM  '||chr(10)
              ||'  (  '||chr(10)
              ||'      SELECT T1.COMPANYCODE, T1.DIVISIONCODE, T1.YEARCODE, T1.WORKERSERIAL, '||chr(10) 
              ||'      CASE WHEN T1.PF_GROSS > (P.MAXBONUSGROSS_MONTHLY*12) THEN (P.MAXBONUSGROSS_MONTHLY*12) ELSE  PF_GROSS END PF_GROSS  FROM '||chr(10)
              ||'      (  '||chr(10)
              ||'          SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, SUM(PF_GROSS) PF_GROSS FROM '||chr(10)
              ||'          ( '||chr(10)
              ||'          SELECT A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.WORKERSERIAL, NVL(A.PF_GROSS,0) PF_GROSS '||chr(10)
              ||'          FROM WPSWAGESDETAILS_MV A , WPSWORKERCATEGORYMAST B '||chr(10)
              ||'          WHERE A.COMPANYCODE = B.COMPANYCODE '||chr(10)
              ||'          AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
              ||'          AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE '||chr(10)
              ||'          AND B.BONUSAPPLICABLE = ''Y'' '||chr(10)
              ||'          AND A.COMPANYCODE = '''||P_COMPCODE||''' '||chr(10)
              ||'          AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
              ||'          AND A.FORTNIGHTSTARTDATE < '''||lv_fn_stdt||''' '||chr(10)
              ||'          AND A.YEARCODE = '''||P_YEARCODE||''' '||chr(10)
              ||'          UNION ALL '||chr(10)
              ||'          SELECT A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.WORKERSERIAL, NVL(A.PF_GROSS,0) PF_GROSS '||chr(10)
              ||'          FROM '||P_SOURCE_TABLENAME||' A, WPSWORKERCATEGORYMAST B '||chr(10)
              ||'          WHERE A.COMPANYCODE = B.COMPANYCODE '||chr(10)
              ||'          AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
              ||'          AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE '||chr(10)
              ||'          AND B.BONUSAPPLICABLE = ''Y'' '||chr(10)
              ||'          AND A.COMPANYCODE = '''||P_COMPCODE||''' '||chr(10)
              ||'          AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
              ||'          AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||chr(10)
              ||'          AND A.YEARCODE = '''||P_YEARCODE||''' '||chr(10)
              ||'          ) '||chr(10)
              ||'          GROUP BY COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL '||chr(10)
              ||'      ) T1, BONUSPARAMETER P '||chr(10)
              ||'      WHERE 1 =1 '||chr(10)
              ||'      AND T1.COMPANYCODE = P.COMPANYCODE '||chr(10)
              ||'      AND T1.DIVISIONCODE = P.DIVISIONCODE '||chr(10)
              ||'      AND T1.YEARCODE = P.YEARCODE '||chr(10)
              ||'  ) TT2 '||chr(10)
              ||'  WHERE TT1.COMPANYCODE = TT2.COMPANYCODE '||chr(10)
              ||'  AND TT1.DIVISIONCODE = TT2.DIVISIONCODE '||chr(10)
              ||'  AND TT1.YEARCODE = TT2.YEARCODE '||chr(10)
              ||'  AND TT1.WORKERSERIAL = TT2.WORKERSERIAL '||chr(10)
              ||'  ) '||chr(10)
              ||'  WHERE TT1.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||chr(10)
              ||'  AND TT1.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10);

            INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);    
            COMMIT;
           -- DBMS_OUTPUT.PUT_LINE(lv_Sql);
            EXECUTE IMMEDIATE lv_sql;
            COMMIT;

END;
/


DROP PROCEDURE PROC_WPSCATEGORYMASTVIEW;

CREATE OR REPLACE PROCEDURE PROC_WPSCATEGORYMASTVIEW
(
P_COMPANYCODE    VARCHAR2,
P_DIVISIONCODE   VARCHAR2,
P_REF_TABLE_NAME VARCHAR2, 
P_REF_KEY_COL1   VARCHAR2,
P_REF_KEY_COL2   VARCHAR2 DEFAULT NULL      
)
as
-- exec proc_gpscategorymastview('BJ0056','0001','GPSCATEGORYMAST') ;
--                COMPANYCODE=P_COMPANYCODE
--            AND DIVISIONCODE=P_DIVISIONCODE
--            AND MODULE = 'GPS'
--            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
LV_COMPANYCODE         VARCHAR2(10 BYTE) := LTRIM(TRIM(P_COMPANYCODE)) ;   
LV_DIVISIONCODE        VARCHAR2(10 BYTE) := LTRIM(TRIM(P_DIVISIONCODE)) ;
LV_REF_TABLE_NAME      VARCHAR2(30)      := LTRIM(TRIM(P_REF_TABLE_NAME)) ;
--LV_YEARCODE            VARCHAR2(10 BYTE) := LTRIM(TRIM(P_YEARCODE)) ;
lv_CATMASTCOLS varchar2(10000) := 'SELECT ';
lv_end_sql varchar2(10000) ;
lv_table varchar2(30) := LV_REF_TABLE_NAME ;
--lv_catparams_cols varchar2(4000);
lv_catparams_cols_with_null CLOB := '';
lv_catparams_cols CLOB := '';
lv_catparams_cols_list CLOB := '';
--lv_cat_param_id varchar2(10):='P';
lv_VIEW_COL_VAL varchar2(300);
lv_totcat int;
lv_catrow int;
lv_tot_param_COL int;
lv_param_row int;
lv_endstr varchar2(2);
lv_view_name varchar2(30) := 'VW_'||lv_table ;
lv_sql CLOB  := 'CREATE OR REPLACE FORCE VIEW '||lv_view_name||chr(10)||' AS '||chr(10) ;
lv_sqlerrm  VARCHAR2(250) := '';
lv_sql_create varchar2(4000) ;
lv_comp_div_cnt int := 0;
lv_tot_comp_div_cnt int;
----------  START SUB ROUTINE ------
--------------------------------------
procedure p_create_blank_view_table( p_view_tab varchar2 DEFAULT 'VIEWTAB_GPSCATEGORYMAST', p_ref_tablename varchar2 DEFAULT 'GPSCATEGORYMAST' )
         as
           lv_sql_create varchar2(4000) := 'create table '||p_view_tab||' ('||chr(10); 
           lv_rows int;
           lv_loop int;
         begin             
           select count(*) into lv_rows from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID') ;
           lv_loop := 0;   
           for c1 in (
             select column_name , DATA_TYPE , DATA_LENGTH, DATA_PRECISION, DATA_SCALE  from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id      ) loop
             lv_loop := lv_loop+1;
            -- if lv_loop < lv_rows then
              if c1.DATA_TYPE = 'VARCHAR2' then
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_LENGTH||') ,'||chr(10) ;
              elsif c1.DATA_TYPE = 'NUMBER' then
                if c1.DATA_PRECISION is not null then
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_PRECISION||','||c1.DATA_SCALE ||' ) ,'||chr(10) ;
                else
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
                end if;
              else
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
              end if;                               
            end loop;
           ----       
           select count(*) into lv_rows 
           from(
              SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE 
           );
            lv_loop:=0;
            for c1 in (
             SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE  
             order by   VIEW_COL   ) loop
             lv_loop := lv_loop+1;
             if lv_loop < lv_rows then
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') ,'||chr(10) ;
             else
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') '||chr(10)||')' ;
             end if;                        
            end loop;
            execute immediate lv_sql_create ;
end;
----------- END SUB ROUTINE ----------
--------------------------------------
BEGIN
for c2 in( select column_name from cols where table_name = LV_REF_TABLE_NAME 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id
         ) loop
       lv_CATMASTCOLS := lv_CATMASTCOLS||c2.column_name||' ,' ;       
end loop;
lv_end_sql := lv_end_sql||' from '||lv_table ;
----DBMS_OUTPUT.PUT_LINE(lv_CATMASTCOLS);
if lv_table = 'GPSCATEGORYMAST' then
--    select count(distinct param_id) into lv_totcat FROM SYS_SWT_PARAMDETAILS 
--                WHERE COMPANYCODE=P_COMPANYCODE
--                AND DIVISIONCODE=P_DIVISIONCODE
--                AND MODULE = 'GPS'
--                AND REF_TABLE_NAME = LV_REF_TABLE_NAME
--                AND PARAM_VALUE IS NOT NULL;                
     select count(distinct CATEGORYCODE)  into lv_totcat FROM GPSCATEGORYMAST
                WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                AND DIVISIONCODE=P_DIVISIONCODE*/                
                AND CATEGORYCODE IS NOT NULL;    
                lv_catrow := 0;
      select count(*) into lv_tot_comp_div_cnt from (
                           select distinct companycode,divisioncode from GPSCATEGORYMAST
                           );           
     FOR CD IN( SELECT DISTINCT COMPANYCODE, DIVISIONCODE FROM GPSCATEGORYMAST ) LOOP   
            lv_catrow := 0;  
            lv_comp_div_cnt := lv_comp_div_cnt+1;
            for c2 in ( select distinct categorycode FROM GPSCATEGORYMAST
                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                        AND DIVISIONCODE=P_DIVISIONCODE */                
                        AND CATEGORYCODE IS NOT NULL    ) loop  
                        lv_catparams_cols := '';    
                        lv_catrow := lv_catrow + 1;
                       -- select count(distinct PARAM_NAME) into lv_tot_param_COL 
                        select count(*) into lv_tot_param_COL 
                        FROM ( 
                               SELECT PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                                      GROUP BY PARAM_NAME, REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE    
                                    ) ;          
                        lv_param_row := 0;
                        for c1 in( SELECT PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                                    GROUP BY  PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE  
                                    order by   VIEW_COL 
                                   ) loop
                                   lv_param_row := lv_param_row+1;  
                                   BEGIN  
                                    select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE= CD.COMPANYCODE and  DIVISIONCODE = CD.DIVISIONCODE and param_id = c2.categorycode and PARAM_NAME = c1.param_name 
                                    AND EFFECTIVEDATE = ( SELECT MAX(EFFECTIVEDATE) FROM 
                                                         SYS_SWT_PARAMDETAILS WHERE REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                          AND COMPANYCODE= CD.COMPANYCODE and  DIVISIONCODE = CD.DIVISIONCODE and PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0 */AND PARAM_ID = c2.categorycode);
                                    --and PARAM_VALUE > 0 ;     
                                   EXCEPTION 
                                    WHEN OTHERS THEN
                                      lv_VIEW_COL_VAL := 'NULL';
                                   END;  
                                   lv_VIEW_COL_VAL := LTRIM(TRIM(lv_VIEW_COL_VAL));
                                  --  dbms_output.put_line(c1.VIEW_COL||chr(10)|| lv_param_row|| ' TOT'|| lv_tot_param_COL || ' UNION ALL ');
                           
                                   
                                   select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                                   if lv_VIEW_COL_VAL = 'NULL' then
                                    lv_catparams_cols := lv_catparams_cols||' NULL  AS '||c1.VIEW_COL||lv_endstr ;                                      
                                   else  
                                     if c1.DATA_TYPE = 'VARCHAR2' or c1.DATA_TYPE = 'DATE'  then       
                                      lv_catparams_cols := lv_catparams_cols||' '''||lv_VIEW_COL_VAL||'''  AS '||c1.VIEW_COL||lv_endstr ;
                                     else
                                      lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                                     -- dbms_output.put_line(c1.VIEW_COL||chr(10)||' UNION ALL ');
                                     end if; 
                                   end if  ;                       
                          end loop;
                          --- CHANGES ON 28/12/2018 -----
                          --lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||P_COMPANYCODE||''' AND DIVISIONCODE = '''||P_DIVISIONCODE||''' AND '||P_REF_KEY_COL1||' = '''||c2.categorycode||'''' ;            
                    -- if lv_tot_param_COL > 0 then 
                          lv_end_sql := ' FROM '||lv_table||' WHERE 1=1  AND '||P_REF_KEY_COL1||' = '''||c2.categorycode||'''  AND COMPANYCODE= '''||CD.COMPANYCODE||''' and  DIVISIONCODE = '''||CD.DIVISIONCODE||''' ' ;
                        /*  if lv_catrow <  lv_totcat then
                            lv_catparams_cols := SUBSTR(lv_catparams_cols,1,LENGTH(lv_catparams_cols)-1);
                           --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ');
                           lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ' ;
                          else
                           --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql);
                            if  lv_comp_div_cnt < lv_tot_comp_div_cnt then
                              lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ';
                            else
                              lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
                            end if;  
                             
                          end if;*/
                    --end if;    
                     if lv_tot_param_COL > 0 then    -- ab                            
                         if lv_catrow =1 and lv_comp_div_cnt = 1 then           
                           lv_sql_create := 'drop table VIEWTAB_GPSCATEGORYMAST ';
                           BEGIN
                            execute immediate lv_sql_create ;
                           EXCEPTION
                            WHEN OTHERS THEN
                             NULL;
                           END;                           
                          -- lv_sql_create := 'create table VIEWTAB_GPSCATEGORYMAST as '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
                          --dbms_output.put_line(lv_sql_create); 
                          --execute immediate lv_sql_create ;    
                          p_create_blank_view_table ;  
                          lv_sql_create := 'insert into VIEWTAB_GPSCATEGORYMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;                           
                           execute immediate lv_sql_create ;
                          --return;       
                          -- exit; -- create table xxxx as lv_sql
                         else
                           lv_sql_create := 'insert into VIEWTAB_GPSCATEGORYMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;                           
                           execute immediate lv_sql_create ;
                           
                         end if;   
                     end if;    -- ab  
                     
            end loop;
     END LOOP; --> COMPANY DIVISION       
     lv_sql := lv_sql||' SELECT * FROM VIEWTAB_GPSCATEGORYMAST ';  
ELSIF lv_table = 'GPSOCCUPATIONMAST' then
   /*  select count(distinct OCCUPATIONCODE)  into lv_totcat FROM GPSOCCUPATIONMAST
                WHERE COMPANYCODE=P_COMPANYCODE
                AND DIVISIONCODE=P_DIVISIONCODE                
                AND OCCUPATIONCODE IS NOT NULL;    
                lv_catrow := 0;
    for c2 in ( select distinct OCCUPATIONCODE FROM GPSOCCUPATIONMAST
                WHERE COMPANYCODE=P_COMPANYCODE
                AND DIVISIONCODE=P_DIVISIONCODE                
                AND OCCUPATIONCODE IS NOT NULL    ) loop  
                lv_catparams_cols := '';    
                lv_catrow := lv_catrow + 1;
                select count(distinct PARAM_NAME) into lv_tot_param_COL 
                FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE COMPANYCODE=P_COMPANYCODE
                            AND DIVISIONCODE=P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME;             
                lv_param_row := 0;
                for c1 in(
                            SELECT PARAM_NAME,  REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,LENGTH(REPLACE(PARAM_NAME,CHR(32)))  LEN,OBJECT_TYPE DATA_TYPE,DATA_TYPE WIDTH FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE COMPANYCODE=P_COMPANYCODE
                            AND DIVISIONCODE=P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                             ) loop
                           lv_param_row := lv_param_row+1;  
                           BEGIN  
                            select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name ;
                           EXCEPTION 
                            WHEN OTHERS THEN
                              lv_VIEW_COL_VAL := 'NULL';
                           END;  
                           select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                           if lv_VIEW_COL_VAL = 'NULL' then
                            if c1.DATA_TYPE = 'VARCHAR2' then
                             lv_catparams_cols := lv_catparams_cols||' '' ''  AS '||c1.VIEW_COL||lv_endstr ;
                            else
                             lv_catparams_cols := lv_catparams_cols||' 0  AS '||c1.VIEW_COL||lv_endstr ;
                            end if;        
                           else  
                             if c1.DATA_TYPE = 'VARCHAR2' then       
                              lv_catparams_cols := lv_catparams_cols||' '''||lv_VIEW_COL_VAL||'''  AS '||c1.VIEW_COL||lv_endstr ;
                             else
                              lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                             end if; 
                           end if  ;                       
                  end loop;
    --              lv_end_sql := ' from '||lv_table||' where companycode = '''||P_COMPANYCODE||''' and divisioncode = '''||P_DIVISIONCODE||''' and categorycode = '''||c2.categorycode||'''' ;
                  lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||P_COMPANYCODE||''' AND DIVISIONCODE = '''||P_DIVISIONCODE||''' AND '||P_REF_KEY_COL1||' = '''||c2.OCCUPATIONCODE||'''' ;            
                  if lv_catrow <  lv_totcat then
                   --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ');
                   lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ' ;
                  else
                   --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql);
                   lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
                  end if;
        ----DBMS_OUTPUT.PUT_LINE (lv_sql ||' LENGTH '||LENGtH(lv_sql));                  
    end loop;*/
    ---- insert new style of occupationmast view creation query --
   select count(distinct OCCUPATIONCODE)  into lv_totcat FROM GPSOCCUPATIONMAST
                WHERE 1=1
               -- AND COMPANYCODE=P_COMPANYCODE
               -- AND DIVISIONCODE=P_DIVISIONCODE                
                AND OCCUPATIONCODE IS NOT NULL;    
                lv_catrow := 0;
    for c2 in ( select distinct COMPANYCODE,DIVISIONCODE,OCCUPATIONCODE FROM GPSOCCUPATIONMAST
                WHERE 1=1 
                --AND COMPANYCODE=P_COMPANYCODE
                --AND DIVISIONCODE=P_DIVISIONCODE                
                AND OCCUPATIONCODE IS NOT NULL    ) loop  
               -- lv_catparams_cols := ''; 
                lv_catparams_cols_with_null := '';   
                lv_catparams_cols_list := '';
                lv_catrow := lv_catrow + 1;
                select count(distinct PARAM_NAME) into lv_tot_param_COL 
                FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1
                          --  AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                          --  AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME;             
                lv_param_row := 0;
                for c1 in(
                            SELECT DISTINCT PARAM_NAME,  REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,LENGTH(REPLACE(PARAM_NAME,CHR(32)))  LEN,OBJECT_TYPE DATA_TYPE,DATA_TYPE WIDTH FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1 
                           -- AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                           -- AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                             ) loop
                           lv_param_row := lv_param_row+1;  
                           BEGIN  
                           -- select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name ;
                             select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name 
                            AND EFFECTIVEDATE = ( SELECT MAX(EFFECTIVEDATE) FROM 
                                                  SYS_SWT_PARAMDETAILS WHERE  COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                  AND PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0*/  AND PARAM_ID = c2.OCCUPATIONCODE) ;
                            /*and PARAM_VALUE > 0 */
                           EXCEPTION 
                            WHEN OTHERS THEN
                              lv_VIEW_COL_VAL := 'NULL';
                           END;  
                           select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                           if lv_VIEW_COL_VAL = 'NULL' then
                            if c1.DATA_TYPE = 'VARCHAR2' then
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                            -- lv_catparams_cols := lv_catparams_cols||''''||RPAD(CHR(32),c1.WIDTH,CHR(32)) ||'''  AS '||c1.VIEW_COL||lv_endstr ;                             
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||'  CAST( RPAD(CHR(32),'||c1.WIDTH||',CHR(32)) AS VARCHAR2('||c1.WIDTH||') )   AS '||c1.VIEW_COL||lv_endstr ;
                            else
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr; 
                          --   lv_catparams_cols := lv_catparams_cols||' 0  AS '||c1.VIEW_COL||lv_endstr ;
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||' TO_NUMBER(NULL)  AS '||c1.VIEW_COL||lv_endstr ;
                            end if;        
                           else  
                             if c1.DATA_TYPE = 'VARCHAR2' then   
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;    
                           --   lv_catparams_cols := lv_catparams_cols||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                             else
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                           --   lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                             end if; 
                           end if  ;                       
                  end loop;
    --              lv_end_sql := ' from '||lv_table||' where companycode = '''||P_COMPANYCODE||''' and divisioncode = '''||P_DIVISIONCODE||''' and categorycode = '''||c2.categorycode||'''' ;
                  lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||c2.COMPANYCODE||''' AND DIVISIONCODE = '''||c2.DIVISIONCODE||''' AND '||P_REF_KEY_COL1||' = '''||c2.OCCUPATIONCODE||'''' ;            
               /*   if lv_catrow <  lv_totcat then
                   --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ');
                   lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql||chr(10)||' UNION ALL ' ;
                  else
                   --dbms_output.put_line(lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql);
                   lv_sql := lv_sql||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
                  end if; */
       -- --DBMS_OUTPUT.PUT_LINE (lv_sql ||' LENGTH '||LENGtH(lv_sql));  
      if lv_tot_param_COL > 0 then    -- ab   
         if lv_catrow =1 then           
           lv_sql_create := 'drop table VIEWTAB_GPSOCCUPATIONMAST ';
           BEGIN
            execute immediate lv_sql_create ;
           EXCEPTION
            WHEN OTHERS THEN
             NULL;
           END;         
         
         --lv_sql_create := 'create table VIEWTAB_GPSOCCUPATIONMAST as '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
         --dbms_output.put_line(lv_sql_create);
         
         --execute immediate lv_sql_create ; 
         --delete VIEWTAB_GPSOCCUPATIONMAST;
         --commit;
         p_create_blank_view_table( 'VIEWTAB_GPSOCCUPATIONMAST', 'GPSOCCUPATIONMAST' );
         lv_sql_create := 'insert into VIEWTAB_GPSOCCUPATIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ; 
         execute immediate lv_sql_create ;
         --  p_create_blank_view_table( 'VIEWTAB_GPSOCCUPATIONMAST', 'GPSOCCUPATIONMAST' ); -- currently commented due to  mismatch in insert colist and select collist
          -- dbms_output.put_line('CREATE '||lv_sql_create);       
          -- exit; -- create table xxxx as lv_sql
         else           
           --lv_sql_create := 'insert into VIEWTAB_GPSOCCUPATIONMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
           lv_sql_create := 'insert into VIEWTAB_GPSOCCUPATIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ;
          -- dbms_output.put_line('INSERT '||lv_sql_create);
            execute immediate lv_sql_create ;
         end if;   
      end if;    -- ab            
    end loop;
    lv_sql := lv_sql||' SELECT * FROM VIEWTAB_GPSOCCUPATIONMAST ';   
   -- end insert occupationmast view creation query --
end if;
insert into GPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_GPSCATEGORYMASTVIEW',NULL,lv_Sql);
COMMIT;
--dbms_output.put_line(' XXX '||lv_sql);
execute immediate lv_sql ;
exception
when others then
 lv_sqlerrm := sqlerrm ;
 insert into GPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_GPSCATEGORYMASTVIEW',lv_sqlerrm,lv_Sql);
 --dbms_output.put_line(sqlerrm ||lv_sql);
end;
/


DROP PROCEDURE PROC_WPSCOMPASSIGNRPT_NEW;

CREATE OR REPLACE PROCEDURE "PROC_WPSCOMPASSIGNRPT_NEW" 
(
P_COMPANYCODE VARCHAR2, 
P_DIVISIONCODE VARCHAR2, 
P_FROMDATE VARCHAR2,
P_TODATE VARCHAR2,
P_COMPONENT VARCHAR2,
P_CATEGORY VARCHAR2
)
AS 
LV_SQLSTR VARCHAR2(30000);
LV_HEADER VARCHAR2(4000);
LV_TBLHDR VARCHAR2(4000);
LV_YEARCODE VARCHAR2(10);
lv_Phase    number(2) := 0;
BEGIN
    BEGIN
        select MAX(PHASE) INTO lv_Phase
        FROM WPSCOMPONENTMASTER 
        WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
          AND COMPONENTTYPE ='DEDUCTION';
    EXCEPTION
        WHEN OTHERS THEN lv_Phase := 7;
    END;
--    DBMS_OUTPUT.PUT_LINE ('1_1');
    SELECT RTRIM (XMLAGG (XMLELEMENT (E, X.COMPONENTSHORTNAME || ',')ORDER BY X.PHASE, X.CALCULATIONINDEX).EXTRACT ('//text()'), ',') COMPONENTNAMELIST
    INTO LV_HEADER
      FROM (
             SELECT DISTINCT COMPONENTCODE, 'W.'||COMPONENTSHORTNAME COMPONENTSHORTNAME, PHASE, CALCULATIONINDEX FROM WPSCOMPONENTMASTER  
                WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE AND INSTR(NVL(P_COMPONENT,COMPONENTCODE),COMPONENTCODE)>0
                  and PHASE<= lv_Phase      --6 
               UNION ALL
               SELECT DISTINCT C.COMPONENTCODE,'W.'||D.COMPONENTSHORTNAME COMPONENTSHORTNAME, C.PHASE, C.CALCULATIONINDEX FROM WPSCOMPONENTMASTER C, 
                     (
                      SELECT DISTINCT  COMPONENTSHORTNAME FROM WPSCOMPONENTMASTER  
                       WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                         and (COMPONENTSHORTNAME LIKE '%LIBL%' OR COMPONENTSHORTNAME LIKE '%LNBL%')
                      INTERSECT
                        SELECT LOANCODE FROM (
                             SELECT DISTINCT 'LIBL_'||LOANCODE LOANCODE FROM LOANMASTER 
                             WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                               AND NVL(INTERESTPERCENTAGE,0) > 0
                             UNION ALL
                             SELECT DISTINCT 'LNBL_'||LOANCODE LOANCODE FROM LOANMASTER 
                             WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                          )   
                      INTERSECT 
                      SELECT COLUMN_NAME COMPONENTSHORTNAME FROM COLS
                       WHERE TABLE_NAME ='WPSWAGESDETAILS_MV'
                     ) D
                WHERE C.COMPONENTSHORTNAME=D.COMPONENTSHORTNAME
                  AND INSTR(NVL(P_COMPONENT,C.COMPONENTCODE),C.COMPONENTCODE)>0
               UNION ALL
               SELECT 'COINBF','W.COINBF',9999,9997 FROM DUAL
               UNION ALL
               SELECT 'COINCF','W.COINCF',9999,9998 FROM DUAL
               UNION ALL
               SELECT 'ACTUALPAYBLEAMOUNT','W.ACTUALPAYBLEAMOUNT',9999,9999 FROM DUAL
               UNION ALL
               SELECT 'ATTENDANCEHOURS','W.ATTENDANCEHOURS',0,0 FROM DUAL
               UNION ALL
               SELECT 'OVERTIMEHOURS','W.OVERTIMEHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'OTHERHOURS','W.OTHERHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'HOLIDAYHOURS','W.HOLIDAYHOURS',0,0.2 FROM DUAL
               UNION ALL
               SELECT 'NIGHTALLOWANCEHOURS','W.NIGHTALLOWANCEHOURS',0,0.3 FROM DUAL
               UNION ALL
               SELECT 'STLHOURS','W.STLHOURS',0,0.4 FROM DUAL
           ) X;
--    DBMS_OUTPUT.PUT_LINE ('1_2');       
    SELECT RTRIM (XMLAGG (XMLELEMENT (E, X.COLNAME||SRL || ',')ORDER BY X.COLNAME).EXTRACT ('//text()'), ',') COMPONENTNAMELIST
    INTO LV_TBLHDR
      FROM (
             SELECT ROWNUM SRL, 'COMP' COLNAME FROM (
             SELECT DISTINCT COMPONENTCODE, 'W.'||COMPONENTSHORTNAME COMPONENTSHORTNAME, PHASE, CALCULATIONINDEX FROM WPSCOMPONENTMASTER  
                WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE AND INSTR(NVL(P_COMPONENT,COMPONENTCODE),COMPONENTCODE)>0
                  and PHASE<=lv_Phase   --6 
               UNION ALL
               SELECT DISTINCT C.COMPONENTCODE,'W.'||D.COMPONENTSHORTNAME COMPONENTSHORTNAME, C.PHASE, C.CALCULATIONINDEX FROM WPSCOMPONENTMASTER C, 
                     (
                      SELECT DISTINCT  COMPONENTSHORTNAME FROM WPSCOMPONENTMASTER  
                       WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                         and (COMPONENTSHORTNAME LIKE '%LIBL%' OR COMPONENTSHORTNAME LIKE '%LNBL%')
                      INTERSECT
                        SELECT LOANCODE FROM (
                             SELECT DISTINCT 'LIBL_'||LOANCODE LOANCODE FROM LOANMASTER 
                             WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                               AND NVL(INTERESTPERCENTAGE,0) > 0
                             UNION ALL
                             SELECT DISTINCT 'LNBL_'||LOANCODE LOANCODE FROM LOANMASTER 
                             WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                          )   
                      INTERSECT 
                      SELECT COLUMN_NAME COMPONENTSHORTNAME FROM COLS
                       WHERE TABLE_NAME ='WPSWAGESDETAILS_MV'
                     ) D
                WHERE C.COMPONENTSHORTNAME=D.COMPONENTSHORTNAME
                  AND INSTR(NVL(P_COMPONENT,C.COMPONENTCODE),C.COMPONENTCODE)>0
               UNION ALL
               SELECT 'COINBF','W.COINBF',9999,9997 FROM DUAL
               UNION ALL
               SELECT 'COINCF','W.COINCF',9999,9998 FROM DUAL
               UNION ALL
               SELECT 'ACTUALPAYBLEAMOUNT','W.ACTUALPAYBLEAMOUNT',9999,9999 FROM DUAL
               UNION ALL
               SELECT 'ATTENDANCEHOURS','W.ATTENDANCEHOURS',0,0 FROM DUAL
               UNION ALL
               SELECT 'OVERTIMEHOURS','W.OVERTIMEHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'OTHERHOURS','W.OTHERHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'HOLIDAYHOURS','W.HOLIDAYHOURS',0,0.2 FROM DUAL
               UNION ALL
               SELECT 'NIGHTALLOWANCEHOURS','W.NIGHTALLOWANCEHOURS',0,0.3 FROM DUAL
               UNION ALL
               SELECT 'STLHOURS','W.STLHOURS',0,0.4 FROM DUAL)
           ) X;
           SELECT YEARCODE
             INTO LV_YEARCODE
             FROM WPSWAGEDPERIODDECLARATION
            WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE 
              AND TO_DATE(P_FROMDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;

--    proc_WPSFORTNIGHT_SUMMARY_1(P_COMPANYCODE,P_DIVISIONCODE,LV_YEARCODE,P_FROMDATE,P_TODATE,'0');
--    DBMS_OUTPUT.PUT_LINE ('1_3');
    DELETE FROM GTT_WPSEARNINGANDDEDUCTION; 
    LV_SQLSTR :=  ' INSERT INTO GTT_WPSEARNINGANDDEDUCTION(WORKERSERIAL,TOKENNO,WORKERNAME,UNITCODE,CATEGORYCODE,GRADECODE,DEPARTMENTCODE,PENSIONNO,SEX,DATEOFBIRTH,DATEOFJOINING,COMPANYNAME,DIVISIONNAME,FROMTODATE,'||LV_TBLHDR||') '||CHR(10)     
                ||' SELECT ''0'' WORKERSERIAL,NULL TOKENNO,NULL WORKERNAME,NULL UNITCODE,NULL CATEGORYCODE,NULL GRADECODE,NULL DEPARTMENTCODE,NULL PENSIONNO,NULL SEX,NULL DATEOFBIRTH,NULL DATEOFJOINING,C.COMPANYNAME,D.DIVISIONNAME,''Earning and Deduction Register For the Period From ''||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||''' FROMTODATE,'''||REPLACE(REPLACE(LV_HEADER,'W.',''),',',''',''')||''' FROM COMPANYMAST C, DIVISIONMASTER D WHERE C.COMPANYCODE=D.COMPANYCODE AND C.COMPANYCODE= '''||P_COMPANYCODE||''' AND D.DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10) 
                ||' UNION ALL '||CHR(10) 
                ||' SELECT /*+ ORDERED */ W.WORKERSERIAL, W.TOKENNO, A.WORKERNAME, A.UNITCODE, W.WORKERCATEGORYCODE CATEGORYCODE, A.GRADECODE, W.DEPARTMENTCODE,'||CHR(10)  
                ||'        A.PENSIONNO, DECODE(W.SHIFTCODE,''3'',''C'',''2'',''B'',''A'') SEX, A.DATEOFBIRTH, A.DATEOFJOINING, M.COMPANYNAME, V.DIVISIONNAME, ''Earning and Deduction Register For the Period From ''||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||''' FROMTODATE,'||CHR(10) 
                ||'        TO_CHAR('||REPLACE(LV_HEADER,',','),TO_CHAR(')||') '||CHR(10) 
                ||'   FROM WPSWORKERMAST A, '||CHR(10)
                ||'       ( SELECT * FROM WPSWAGESDETAILS_MV '||CHR(10)
                ||'          WHERE COMPANYCODE = '''||P_COMPANYCODE||''' AND DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10)
                ||'            AND FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'            AND FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'            /* AND nvl(ACTUALPAYBLEAMOUNT,0)>0 */  '||CHR(10)
                ||'       ) W, '||CHR(10)
                ||' COMPANYMAST M, DIVISIONMASTER V/*, WPSSHIFTMAST F */'||CHR(10)
                ||' WHERE A.COMPANYCODE = W.COMPANYCODE '||CHR(10)
                ||'   AND A.DIVISIONCODE = W.DIVISIONCODE '||CHR(10)
                ||'   AND A.WORKERSERIAL = W.WORKERSERIAL '||CHR(10)
--                ||'   AND W.TOKENNO = S.EBNO(+) '||CHR(10)
--                ||'   AND S.MAXSHIFT=F.SHIFTNAME '||CHR(10)
--                ||'   AND W.SHIFTCODE= F.SHIFTCODE '||CHR(10)
                ||'   AND A.COMPANYCODE=M.COMPANYCODE '||CHR(10)
                ||'   AND A.COMPANYCODE=V.COMPANYCODE '||CHR(10)
                ||'   AND A.DIVISIONCODE=V.DIVISIONCODE '||CHR(10)
                ||'   AND A.COMPANYCODE = '''||P_COMPANYCODE||''' '||CHR(10)
                ||'   AND A.DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10);
                IF P_CATEGORY IS NOT NULL THEN
                    LV_SQLSTR:=LV_SQLSTR||'  AND W.WORKERCATEGORYCODE IN ('||P_CATEGORY||') '||CHR(10);
                END IF;
                LV_SQLSTR:=LV_SQLSTR||'   AND W.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'   AND W.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||' ORDER BY DEPARTMENTCODE,SEX,CATEGORYCODE,TOKENNO '||CHR(10);
  
   DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
    EXECUTE  IMMEDIATE LV_SQLSTR;
END ;
/


DROP PROCEDURE PROC_WPSCUMULATIVEDETAILS;

CREATE OR REPLACE PROCEDURE "PROC_WPSCUMULATIVEDETAILS" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(30000);
BEGIN
    DELETE FROM GTT_WPSCUMULATIVEDETAILS;
    LV_SQLSTR :=    ' INSERT INTO GTT_WPSCUMULATIVEDETAILS '|| CHR(10)       
                  ||'    SELECT A.DEPARTMENTCODE,A.WORKERCATEGORYCODE ,DECODE(A.SHIFTCODE,''1'',''A'',''2'',''B'',''3'',''C'') SHIFT,'||CHR(10)
                  ||'       A.TOKENNO,B.WORKERNAME,SUM(ATTENDANCEHOURS/8) WORKINGDAYS,'||CHR(10)
                  ||'       SUM(NVL(A.CUMPF_CONT,0)) CUMPF_CONT,/* SUM(NVL(A.FINYEARBONUSDAYS,0)) FINYEARBONUSDAYS,*/'||CHR(10)
                  ||'       SUM(NVL(A.GR_BONOUS_TODATE,0)) GR_BONOUS_TODATE, /*SUM(NVL(A.FINYEARCUMSTLDAYS,0)) FINYEARCUMSTLDAYS,*/'||CHR(10)
                  ||'       SUM(NVL(A.CALENDARWORKINGDAYS,0)) CALENDARWORKINGDAYS , C.COMPANYNAME,'||CHR(10)
                  ||'       ''Run Date '' ||TO_CHAR(SYSDATE,''DD/MM/RRRR'') AS RUNDATE,'||CHR(10)
                  ||'       ''For the Period From '' ||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||'''  FROMTODATE'||CHR(10)
                  ||'FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B,COMPANYMAST C'||CHR(10)
                  ||'WHERE A.COMPANYCODE=B.COMPANYCODE'||CHR(10)
                  ||'  AND A.DIVISIONCODE=B.DIVISIONCODE'||CHR(10)
                  ||'  AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'||CHR(10)
                  ||'  AND A.WORKERCATEGORYCODE=B.WORKERCATEGORYCODE'||CHR(10)
                  ||'  AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
                  ||'  AND A.COMPANYCODE=C.COMPANYCODE'||CHR(10)
                  ||'  AND A.COMPANYCODE='''||P_COMPANYCODE||'''          '||CHR(10) 
                  ||'  AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''   '||CHR(10)  
                  ||'  AND A.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)
                  ||'  AND A.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10);
                   IF P_TOKENNO IS NOT NULL THEN
                    LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
                  END IF;
                  LV_SQLSTR := LV_SQLSTR ||' GROUP BY A.DEPARTMENTCODE,A.WORKERCATEGORYCODE,A.SHIFTCODE,A.TOKENNO,B.WORKERNAME,C.COMPANYNAME'||CHR(10)
                  ||'ORDER BY A.DEPARTMENTCODE,A.WORKERCATEGORYCODE,B.WORKERNAME,A.SHIFTCODE'||CHR(10);
            
         
  --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSDAILYHANDREPORT;

CREATE OR REPLACE PROCEDURE "PROC_WPSDAILYHANDREPORT" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_WPSDAILYHAND;
    lv_sqlstr :=    'insert into GTT_WPSDAILYHAND '|| chr(10)
    || '  SELECT X.COMPANYNAME,X.DEPARTMENTCODE,X.SHIFTCODE,X.SHIFTNAME, X.TOKENNO,X.WORKERNAME,X.OCCUPATIONCODE,X.LINENO,X.MACHINECODE1,NVL(X.OVERTIMEHOURS,0) OVERTIMEHOURS, '|| chr(10)
                || '          ''(''||RTRIM (XMLAGG (XMLELEMENT (E,X.ATTENDANCEHOURS || '' / '')ORDER BY X.TOKENNO,X.SPELLTYPE).EXTRACT (''//text()''), '' /'')||'')''  AS ATTENDANCEHOURS '|| chr(10)
                || '           , NULL EX1 , NULL EX2, NULL EX3, NULL EX4, NULL EX5 '|| chr(10)
                || ' FROM '|| chr(10)
                || ' ( '|| chr(10)
                || ' SELECT D.COMPANYNAME, A.DEPARTMENTCODE,A.SHIFTCODE,C.SHIFTNAME, A.TOKENNO,B.WORKERNAME,A.OCCUPATIONCODE,''LINE'' LINENO,A.MACHINECODE1, '|| chr(10)
                || '         A.SPELLTYPE,NVL(A.SPELLHOURS,A.ATTENDANCEHOURS) ATTENDANCEHOURS,A.OVERTIMEHOURS '|| chr(10)
                || '        FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSSHIFTMAST C, COMPANYMAST D '|| chr(10)
                || '  WHERE 1=1  '|| chr(10)
                || '   AND A.COMPANYCODE='''|| p_companycode ||''' '|| chr(10)
                || '   AND A.DIVISIONCODE='''|| p_divisioncode ||''' '|| chr(10)
                || '   AND A.COMPANYCODE=B.COMPANYCODE '|| chr(10)
                || '   AND A.DIVISIONCODE=B.DIVISIONCODE '|| chr(10)
                || '   AND A.WORKERSERIAL = B.WORKERSERIAL  '|| chr(10)
                || '   AND A.TOKENNO=B.TOKENNO '|| chr(10)
                || '   AND A.DEPARTMENTCODE=B.DEPARTMENTCODE '|| chr(10)
                || '   AND A.OCCUPATIONCODE=B.OCCUPATIONCODE '|| chr(10)
                || '   AND A.COMPANYCODE=C.COMPANYCODE  '|| chr(10)
                || '   AND A.DIVISIONCODE=C.DIVISIONCODE  '|| chr(10)
                || '   AND A.SHIFTCODE=C.SHIFTCODE  '|| chr(10)
                || '   AND A.COMPANYCODE=D.COMPANYCODE '|| chr(10)
                || '   ORDER BY A.DEPARTMENTCODE,A.SHIFTCODE,A.TOKENNO,A.SPELLTYPE '|| chr(10)
                || '   )X '|| chr(10)
                || '   GROUP BY  X.COMPANYNAME,X.DEPARTMENTCODE,X.SHIFTCODE,X.SHIFTNAME, X.TOKENNO,X.WORKERNAME,X.OCCUPATIONCODE,X.LINENO, '|| chr(10)
                || '            X.MACHINECODE1,X.OVERTIMEHOURS '|| chr(10);

                 
    dbms_output.put_line(lv_sqlstr);
   --execute immediate lv_sqlstr;
end;
/


DROP PROCEDURE PROC_WPSDEVICEDATASUMMARY;

CREATE OR REPLACE PROCEDURE "PROC_WPSDEVICEDATASUMMARY" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
     DELETE FROM GTT_WPSDEVICEDATASUMMARY;
     LV_SQLSTR :=    'INSERT INTO GTT_WPSDEVICEDATASUMMARY '|| CHR(10)     
    ||' SELECT A.DATEOFATTENDANCE,A.DEVICEID, DECODE(A.SHIFTCODE,''1'',''A'',''2'',''B'',''3'',''C'',A.SHIFTCODE) SHIFT,A.SPELLTYPE ,COUNT(A.TOKENNO) NOOFWORKER, '|| CHR(10)
    ||''' RUN DATE ''||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE,'' FROM ''|| '''||P_FROMDATE||''' ||'' TO ''||''' || P_TODATE || ''' FROMTODATE,'|| CHR(10)
    ||'   M.COMPANYCODE,N.DIVISIONCODE,M.COMPANYNAME,N.DIVISIONNAME,'|| CHR(10)
    ||'   N.DIVISIONADDRESS,N.DIVISIONADDRESS1,N.DIVISIONADDRESS2'|| CHR(10)    
    ||'    FROM WPSATTENDANCEDAYWISE A, COMPANYMAST M,DIVISIONMASTER N'|| CHR(10)
    ||'   WHERE A.SHIFTCODE IS NOT NULL '|| CHR(10);
    IF P_FROMDATE IS NOT NULL AND P_TODATE IS NOT NULL THEN
          LV_SQLSTR := LV_SQLSTR ||' AND A.DATEOFATTENDANCE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| CHR(10)
          ||' AND A.DATEOFATTENDANCE <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '|| CHR(10);
    END IF;
    LV_SQLSTR := LV_SQLSTR ||' GROUP BY A.DATEOFATTENDANCE,A.DEVICEID,A.SHIFTCODE,A.SPELLTYPE,'||CHR(10)
    ||'M.COMPANYCODE,N.DIVISIONCODE,M.COMPANYNAME,N.DIVISIONNAME, '||  CHR(10)
    ||'N.DIVISIONADDRESS,N.DIVISIONADDRESS1,N.DIVISIONADDRESS2 '|| CHR(10)
    ||'ORDER BY A.DATEOFATTENDANCE,A.DEVICEID,SHIFT,A.SPELLTYPE '|| CHR(10);
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSDOUBLE_VB_TONULL_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPSDOUBLE_VB_TONULL_UPDT ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';
lv_cnt              number(5):=0;   

begin
--     dbms_output.put_line('start : ');

    --- HERE NEED TO HARD CODE IN THE SYSTEM BECAUSE 
    --- FOR COP WINDING DEPARTMENT MAINTAIN TWO SECTION (0801,0805) FOR PEICE RATE ENTRY.
    --- BUT PRODUCTION ENTRY IN 0801 SECTION . SO AT THE TIME VB CALCULATION 0805 SECTION'S WOKRER CONSIDER AS 0801 SECTION.
    --- NOW DUE TO DUE TO SECTION SECTION BOOKING 0805 WORKER'S ALSO UPDATE THE SAME SAME VBAMOUNT IN INSERT PORCEDURE.
    --- SO NEED TO UPDATE VBAMOUNT AS ZERO FOR THOSE WORKER WHO WORKED IN BOTH 0801 and 0805 section
    FOR C1 IN (
                SELECT WORKERSERIAL, COUNT(*) CNT
                FROM (
                        SELECT WORKERSERIAL, DEPARTMENTCODE, SECTIONCODE
                        FROM WPSWAGESDETAILS_SWT 
                        WHERE COMPANYCODE = '0001' AND DIVISIONCODE ='0002'
                          AND FORTNIGHTSTARTDATE = lv_fn_stdt
                          AND FORTNIGHTENDDATE = lv_fn_endt
                          AND SECTIONCODE IN ('0801','0805')
                          AND VBASIC > 0
                    )
                GROUP BY WORKERSERIAL
                HAVING COUNT(*) > 1
            )
     LOOP
        lv_cnt := lv_cnt+1;
--        dbms_output.put_line('cnt : ');
        lv_SqlStr := 'UPDATE WPSWAGESDETAILS_SWT A SET VBASIC = 0 '||chr(10)
                ||'   WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
                ||'     AND FORTNIGHTSTARTDATE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||chr(10)
                ||'     AND FORTNIGHTENDDATE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||chr(10)
                ||'     AND WORKERSERIAL = '''||C1.WORKERSERIAL||'''  '||chr(10)
                ||'     AND SECTIONCODE = ''0805'' '||CHR(10); 
        --EXECUTE IMMEDIATE lv_SqlStr;

        UPDATE WPSWAGESDETAILS_SWT A SET VBASIC = 0 
        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE 
          AND FORTNIGHTSTARTDATE >= TO_DATE(P_FNSTDT,'DD/MM/YYYY')
          AND FORTNIGHTENDDATE <= TO_DATE(P_FNENDT,'DD/MM/YYYY')
          AND WORKERSERIAL = C1.WORKERSERIAL 
          AND SECTIONCODE = '0805' ; 

     END LOOP;
--     dbms_output.put_line ('update successfully');       
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
end;
/


DROP PROCEDURE PROC_WPSECRFORMAT;

CREATE OR REPLACE PROCEDURE "PROC_WPSECRFORMAT" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_YEARCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_MODULE    VARCHAR2 DEFAULT 'WPS'   
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSECRFORMAT;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSECRFORMAT '|| CHR(10)
    ||'  SELECT Q.TOKENNO ,PF_EXITDATE RETIREMENT,Q.PENSIONNO AS MEMBERID, Q.WORKERNAME AS MEMBERNAME, ROUND(Q.GR_FOR_PF,0) AS EPF_WAGES, '|| CHR(10)
    ||'     CASE WHEN Q.GR_FOR_PENSION >= 15000 THEN 15000 ELSE ROUND(Q.GR_FOR_PENSION,0) END EPS_WAGES, '|| CHR(10)
    ||'      Q.PF_CONT AS EPFCONTEESHAREDUE, Q.PF_CONT AS EPFCONTEESHAREREIMBURSEMENT, '|| CHR(10)
    ||'     Q.EPF AS EPFCONTDUE, Q.EPF AS EPFCONTREIMBURSEMENT, '|| CHR(10)
    ||'     (Q.PF_CONT - Q.EPF) AS DIFFEPFEPSCONTDUE, (Q.PF_CONT - Q.EPF) AS DIFFEPFEPSCONTREIMBURSEMENT, '|| CHR(10)
    ||'     Q.NCPDAYS NCPDAYS, 0 AS REFUNDOFADVANCE, 0 AS AREAREPFWAGES, 0 AS AREAREPFEESHARE, 0 AS AREAREPFERSHARE, 0 AS AREAREPS,'|| CHR(10) 
    ||'    CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND  TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
     ||'            CASE WHEN Q.FATHERNAME IS NULL THEN Q.GUARDIANNAME ELSE Q.FATHERNAME END  '|| CHR(10)
     ||'     ELSE  '''' END GUARDIANNAME, '|| CHR(10)
    ||'      CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
     ||'            RELATIONSHIP  '|| CHR(10)
    ||'      ELSE '''' END RELATIONSHIPWITHMEMBER, '|| CHR(10)
      ||'      CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
     ||'            Q.SEX  '|| CHR(10)
     ||'     ELSE '''' END GENDER,'|| CHR(10)
     ||'     CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'           Q.DATEOFBIRTH  '|| CHR(10)
      ||'    ELSE NULL END DATEOFBIRTH,        '|| CHR(10)
      ||'    CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'          Q.PF_JOININGDATE  '|| CHR(10)
      ||'    ELSE NULL END DATEOFJOININGEPF, '|| CHR(10)
      ||'    CASE WHEN Q.DATEOFJOINING BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'           Q.PENSION_JOININGDATE  '|| CHR(10)
      ||'    ELSE NULL END DATEOFJOININGEPS, '|| CHR(10)
      ||'    CASE WHEN Q.PF_EXITDATE BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'        Q.PF_EXITDATE  '|| CHR(10)
      ||'   ELSE NULL END DATEOFEXITEPF, '|| CHR(10)
      ||'    CASE WHEN Q.PENSION_EXITDATE BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'           Q.PENSION_EXITDATE '|| CHR(10)
      ||'    ELSE NULL END DATEOFEXITEPS, '|| CHR(10)
      ||'    CASE WHEN Q.PF_EXITDATE BETWEEN TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') THEN '|| CHR(10)
      ||'         Q.REASONOFTERMINATION '|| CHR(10)
      ||'  ELSE '''' END REASONFORLEAVING ,'|| CHR(10)
      ||'     C.COMPANYCODE,D.DIVISIONCODE,C.COMPANYNAME,C.COMPANYADDRESS,C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME '|| CHR(10)
      ||' FROM '|| CHR(10)
      ||' (    '|| CHR(10)
      ||'    SELECT CHK, A.TOKENNO, A.PFNO, A.PENSIONNO, A.WORKERNAME, A.FATHERNAME, A.GUARDIANNAME, A.RELATIONSHIP, A.SEX, '|| CHR(10)
      ||'        A.DATEOFBIRTH, A.DATEOFJOINING, A.PF_JOININGDATE, A.PENSION_JOININGDATE, A.PF_EXITDATE, A.PENSION_EXITDATE, '|| CHR(10)
      ||'         A.DATEOFTERMINATION, A.REASONOFTERMINATION, SUM(A.GR_FOR_PF) AS GR_FOR_PF, A.COMPANYCODE,A.DIVISIONCODE,'|| CHR(10)
      ||'        SUM(NVL(GR_FOR_PENSION,0)) GR_FOR_PENSION, SUM(PF_CONT) PF_CONT, SUM(A.EPF) AS EPF, '|| CHR(10)
      ||'        SUM(A.REFUND_OF_EE) AS REFUND_OF_EE, SUM(A.WAGE_ARREARS) AS WAGE_ARREARS, '|| CHR(10)
      ||'        SUM(EPF_CONTRIBUTION_EE_ARREARS) AS EPF_CONTRIBUTION_EE_ARREARS,  '|| CHR(10)
      ||'        SUM(EPF_CONTRIBUTION_EE_ARREARS_0) AS EPF_CONTRIBUTION_EE_ARREARS_0, '|| CHR(10)
      ||'       SUM(EPS_CONTRIBUTION_EE_ARREARS) EPS_CONTRIBUTION_EE_ARREARS, '|| CHR(10)
      ||'        MAX(TOTWRKDYSINMONTH) - CASE WHEN MAX(WRKDYS) > MAX(TOTWRKDYSINMONTH) THEN  MAX(TOTWRKDYSINMONTH) ELSE MAX(WRKDYS) END AS NCPDAYS '|| CHR(10)
      ||'  FROM '|| CHR(10)
      ||'  (    '|| CHR(10)
      ||'     SELECT ''WPS'' CHK, NVL(A.TOKENNO,B.TOKENNO) TOKENNO, B.PFNO, B.PENSIONNO, B.WORKERNAME, B.FATHERNAME, B.GUARDIANNAME, '''' AS RELATIONSHIP, '|| CHR(10)
      ||'          B.SEX, B.DATEOFBIRTH, B.DATEOFJOINING, B.PFMEMBERSHIPDATE PF_JOININGDATE, '|| CHR(10)
      ||'          B.PFMEMBERSHIPDATE PENSION_JOININGDATE, B.DATEOFRETIREMENT AS PF_EXITDATE, '|| CHR(10)
      ||'         B.DATEOFRETIREMENT PENSION_EXITDATE, TO_CHAR(A.FORTNIGHTSTARTDATE,''YYYYMM'') AS YEARMONTH,  '|| CHR(10)
      ||'          SUM(NVL(A.PF_GROSS,0)) AS GR_FOR_PF, SUM(NVL(PENSION_GROSS,0)) GR_FOR_PENSION,'|| CHR(10)
      ||'          SUM(NVL(A.PF_CONT,0)) PF_CONT, SUM(NVL(A.FPF,0)) AS EPF, 0 AS REFUND_OF_EE, '|| CHR(10)
      ||'           B.DATEOFTERMINATION, B.REASONOFTERMINATION, 0 AS WAGE_ARREARS, 0 EPF_CONTRIBUTION_EE_ARREARS, '|| CHR(10)
      ||'          0 AS EPF_CONTRIBUTION_EE_ARREARS_0, 0 EPS_CONTRIBUTION_EE_ARREARS,  '|| CHR(10)
      ||'         ROUND((SUM(NVL(ATTENDANCEHOURS,0)) + SUM(NVL(NIGHTALLOWANCEHOURS,0)) + SUM(NVL(PFADJHOURS,0)) + SUM(NVL(STLHOURS,0)))/8,0) WRKDYS,'|| CHR(10)
      ||'          25 AS TOTWRKDYSINMONTH ,B.COMPANYCODE,B.DIVISIONCODE'|| CHR(10)
      ||'   FROM (SELECT * FROM WPSWAGESDETAILS_MV '|| CHR(10)
      ||'        WHERE COMPANYCODE = '''||P_COMPANYCODE||''' '|| CHR(10)
      ||'          AND DIVISIONCODE = '''||P_DIVISIONCODE||''' '|| CHR(10)
      ||'           AND YEARCODE = '''||P_YEARCODE||''' '|| CHR(10)
      ||'           AND FORTNIGHTSTARTDATE >= TO_DATE('''||P_FROMDATE||''' ,''DD/MM/YYYY'') '|| CHR(10)
      ||'           AND FORTNIGHTENDDATE  <= TO_DATE('''||P_TODATE||''' ,''DD/MM/YYYY'')'|| CHR(10)
      ||'        )A,'|| CHR(10)
      ||'       (SELECT * FROM WPSWORKERMAST '|| CHR(10)
      ||'        WHERE COMPANYCODE ='''||P_COMPANYCODE||''' '|| CHR(10)
      ||'         AND DIVISIONCODE ='''||P_DIVISIONCODE||'''  '|| CHR(10)
      ||'         AND NVL(ACTIVE,''N'')=''Y''  AND NVL(PFAPPLICABLE,''N'')=''Y'' '|| CHR(10)
      ||'          AND ((TO_CHAR(DATEOFRETIREMENT,''MON/YYYY'')='|| CHR(10)
      ||'                TO_CHAR(TO_DATE('''||P_TODATE||''' ,''DD/MM/YYYY''),''MON/YYYY'') )'|| CHR(10)
      ||'                OR DATEOFRETIREMENT IS NULL'|| CHR(10)
      ||'                  OR DATEOFRETIREMENT>TO_DATE('''||P_FROMDATE||''' ,''DD/MM/YYYY''))'|| CHR(10)
      ||'         )B'|| CHR(10)
      ||'    WHERE B.WORKERSERIAL = A.WORKERSERIAL(+) '|| CHR(10)
      ||'  GROUP BY A.TOKENNO,B.TOKENNO, B.PFNO, B.PENSIONNO, B.WORKERNAME, B.FATHERNAME, B.GUARDIANNAME, B.SEX, B.DATEOFBIRTH, '|| CHR(10) 
      ||'        B.DATEOFJOINING, B.PFMEMBERSHIPDATE, B.PFMEMBERSHIPDATE, B.DATEOFRETIREMENT, B.DATEOFRETIREMENT, '|| CHR(10)
      ||'        B.REASONOFTERMINATION, TO_CHAR(A.FORTNIGHTSTARTDATE,''YYYYMM''), B.DATEOFTERMINATION, B.REASONOFTERMINATION ,B.COMPANYCODE,B.DIVISIONCODE'|| CHR(10)
      ||'  )A   '|| CHR(10)
      ||'  GROUP BY CHK, A.TOKENNO, A.PFNO, A.PENSIONNO, A.WORKERNAME, A.FATHERNAME, A.GUARDIANNAME, A.RELATIONSHIP, A.SEX, '|| CHR(10)
      ||'      A.DATEOFBIRTH, A.DATEOFJOINING, A.PF_JOININGDATE, A.PENSION_JOININGDATE, A.PF_EXITDATE, A.PENSION_EXITDATE, '|| CHR(10)
      ||'      A.DATEOFTERMINATION, A.REASONOFTERMINATION ,A.COMPANYCODE,A.DIVISIONCODE '|| CHR(10)
      ||'  ) Q ,COMPANYMAST C ,DIVISIONMASTER D '|| CHR(10)
      ||'  WHERE      Q.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
      ||'        AND     Q.COMPANYCODE=D.COMPANYCODE '|| CHR(10)
      ||'          AND     Q.DIVISIONCODE=D.DIVISIONCODE '|| CHR(10);       
      IF P_TOKENNO IS NOT NULL THEN
           LV_SQLSTR := LV_SQLSTR ||' AND Q.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
     LV_SQLSTR := LV_SQLSTR ||' ORDER BY Q.PENSIONNO,Q.TOKENNO '|| CHR(10);   
    
 DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSESISTATEMENT;

CREATE OR REPLACE PROCEDURE "PROC_WPSESISTATEMENT" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTORNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSESISTATEMENT;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSESISTATEMENT '|| CHR(10)
    ||'SELECT   B.ESINO,A.WORKERSERIAL,A.TOKENNO,B.WORKERNAME,CASE WHEN SUM(NVL(ATTENDANCEHOURS/8,0))> 0 THEN NVL((SUM(NVL(FBASIC,0))/SUM(NVL(ATTENDANCEHOURS/8,0))),0) ELSE 0 END RATE,SUM(NVL(A.ESI_CONT,0)) ESI_CONT,SUM(NVL(A.ESI_GROSS,0)) ESI_GROSS, '|| CHR(10)
    ||'    A.COMPANYCODE,C.COMPANYNAME,A.DIVISIONCODE,D.DIVISIONNAME,D.DIVISIONADDRESS,D.DIVISIONADDRESS1,D.DIVISIONADDRESS2,  '|| CHR(10)
    ||''' RUN DATE ''||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE,'' FROM ''|| '''||P_FROMDATE||''' ||'' TO ''||''' || P_TODATE || ''' FROMTODATE ,'|| CHR(10)
    ||'   (CASE WHEN B.CONTRACTORNAME =''CHEVIOT COMPANY LIMITED'' THEN '''' ELSE ''Worker Employed through Agency (''||B.CONTRACTORNAME||'')'' END) CONTRACTORNAME ,'||CHR(10)
    ||'  '''' CONTRACTORACCNO,0 EMPLOYERCONT,0 CHALLANAMT, '||CHR(10)
    ||'  TO_CHAR(MAXDATE,''DD/MM/YYYY'') LASTWORKINGDATE, SUM(NVL(ESI_CONT,0)) MEMBERESI,'|| CHR(10)
    ||' CEIL((SUM(ESI_GROSS)*4.75)/100) COMPESI, (SUM(ESI_CONT) +CEIL((SUM(ESI_GROSS)*4.75)/100)) AS TOTALESI, '|| CHR(10)
    ||' (SUM(NVL(ATTENDANCEHOURS,0)) + SUM(NVL(OVERTIMEHOURS,0)) + SUM(NVL(HOLIDAYHOURS,0)) + SUM(NVL( STLHOURS,0)))/8 TOTALWORKINGDAYS'|| CHR(10)
    ||'    FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B ,COMPANYMAST C,DIVISIONMASTER D,  '|| CHR(10)
    ||'                  (SELECT MAX(DATEOFATTENDANCE) MAXDATE, WORKERSERIAL  FROM WPSATTENDANCEDAYWISE  '|| CHR(10)
    ||'                    WHERE COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'                      AND DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'                      AND DATEOFATTENDANCE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'                      AND DATEOFATTENDANCE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'                      AND (NVL(ATTENDANCEHOURS,0)>0 OR NVL(OVERTIMEHOURS,0)>0 OR NVL(HOLIDAYHOURS,0)>0  OR NVL(STATUTORYHOURS,0)>0 ) '|| CHR(10)
    ||'                      GROUP BY WORKERSERIAL  '|| CHR(10)
    ||'                   ) M '|| CHR(10)
    ||'    WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'      AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'      AND A.COMPANYCODE=B.COMPANYCODE  '|| CHR(10)
    ||'      AND A.DIVISIONCODE=B.DIVISIONCODE '|| CHR(10)
    ||'      AND A.WORKERSERIAL=B.WORKERSERIAL '|| CHR(10)
    ||'      AND A.COMPANYCODE=C.COMPANYCODE '|| CHR(10)
    ||'      AND A.COMPANYCODE=D.COMPANYCODE  '|| CHR(10)
    ||'      AND A.DIVISIONCODE=D.DIVISIONCODE '|| CHR(10)
    ||'      AND A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'      AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'      AND NVL(A.ESI_GROSS,0)  >0 /*AND NVL(A.ATTENDANCEHOURS,0) >0 */'|| CHR(10)
    ||'      AND A.WORKERSERIAL=M.WORKERSERIAL (+)'|| CHR(10);
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
     END IF;
     
     LV_SQLSTR := LV_SQLSTR ||'    GROUP BY B.ESINO,A.WORKERSERIAL,A.TOKENNO,B.WORKERNAME,A.COMPANYCODE,C.COMPANYNAME, '|| CHR(10) 
     ||'        A.DIVISIONCODE,D.DIVISIONNAME,D.DIVISIONADDRESS,D.DIVISIONADDRESS1,D.DIVISIONADDRESS2,  '|| CHR(10)
     ||'       CONTRACTORNAME,M.WORKERSERIAL,MAXDATE   '|| CHR(10)
     ||'    ORDER BY A.TOKENNO,B.WORKERNAME'||CHR(10);
     
     
    
--DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;

END;
/


DROP PROCEDURE PROC_WPSESISUMMARY;

CREATE OR REPLACE PROCEDURE "PROC_WPSESISUMMARY" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_CONTRACTORNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSESISUMMARY;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSESISUMMARY '|| CHR(10)
    ||' SELECT  '''' EMPLOYERACNO,COUNT(A.WORKERSERIAL) ESIHANDS,SUM(ROUND(ESI_GROSS,0)) GROSSWAGESESI,SUM(ESI_CONT) MEMBERESI,'|| CHR(10)
    ||' CEIL((SUM(ESI_GROSS)*4.75)/100) COMPESI, (SUM(ESI_CONT) +CEIL((SUM(ESI_GROSS)*4.75)/100)) AS TOTALESI, '|| CHR(10)
    ||'  M.COMPANYCODE,M.COMPANYNAME,A.DIVISIONCODE,N.DIVISIONNAME,N.DIVISIONADDRESS,N.DIVISIONADDRESS1,N.DIVISIONADDRESS2,  '|| CHR(10)
    ||''' RUN DATE ''||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE, '|| CHR(10)
    ||' '' FOR THE MONTH OF  ''|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''MONTH'')|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''YYYY'')  FROMTODATE '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B ,/*WPSCONTRACTORMAST C,*/ COMPANYMAST M,DIVISIONMASTER N '|| CHR(10)
    ||'    WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'    AND   A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'    AND A.COMPANYCODE=B.COMPANYCODE  '|| CHR(10)
    ||'    AND A.DIVISIONCODE=B.DIVISIONCODE '|| CHR(10)
    ||'    AND A.WORKERSERIAL=B.WORKERSERIAL '|| CHR(10)
    ||'    AND A.COMPANYCODE=M.COMPANYCODE'|| CHR(10)
    --||'    AND A.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    --||'    AND B.CONTRACTORCODE=C.CONTRACTORCODE'|| CHR(10)
    ||'    AND A.COMPANYCODE=N.COMPANYCODE  '|| CHR(10)
    ||'    AND A.DIVISIONCODE=N.DIVISIONCODE '|| CHR(10)
    ||'    AND A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'    AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10) ;    
   
    LV_SQLSTR := LV_SQLSTR ||'  GROUP BY M.COMPANYCODE,M.COMPANYNAME,A.DIVISIONCODE, '|| CHR(10)
    ||' N.DIVISIONNAME,N.DIVISIONADDRESS,N.DIVISIONADDRESS1,N.DIVISIONADDRESS2 '|| CHR(10);
   -- ||' ORDER BY C.EMPLOYERACNO'||CHR(10);          
    
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSESIUPLOAD;

CREATE OR REPLACE PROCEDURE "PROC_WPSESIUPLOAD" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_YEARCODE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTORCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2
 )
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSESIUPLOAD;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSESIUPLOAD '|| CHR(10)
    ||' SELECT  Z.TOKENNO,Z.WORKERNAME,Z.WORKERSERIAL,Z.CONTRACTORCODE,Z.COMPANYCODE,Z.ESINO,NVL(Z.TOTALPAIDDAYS,0) TOTALPAIDDAYS,ROUND(NVL(Z.ESI_GROSS,0),0) ESI_GROSS,'|| CHR(10)            
    ||'         (CASE WHEN Z.LEAVEDAYS>0 THEN ''1'' '||CHR(10)
    ||'  WHEN Z.DATEOFTERMINATION IS NOT NULL AND Z.DATEOFTERMINATION >=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '||CHR(10)
    ||'  AND Z.DATEOFTERMINATION <=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') THEN ''2'' '||CHR(10)
    ||'  WHEN Z.DATEOFRETIREMENT IS NOT NULL AND Z.DATEOFRETIREMENT >=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'')'||CHR(10)
    ||'  AND Z.DATEOFRETIREMENT <=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') THEN ''3'' '||CHR(10)
    ||'  WHEN /*Z.DATEOFTERMINATION IS NULL AND Z.DATEOFRETIREMENT IS NULL '||CHR(10)
    ||'  AND */(Z.LASTWORKINGDAY<=''' || P_FROMDATE || ''' AND Z.ESI_GROSS=0) OR Z.ESI_GROSS=0 THEN ''11'' '||CHR(10)
    ||'  ELSE ''0'' END) REASONCODE,   '||CHR(10)
    ||'  TO_DATE((CASE WHEN Z.DATEOFTERMINATION IS NOT NULL AND (Z.DATEOFTERMINATION >=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'  AND Z.DATEOFTERMINATION <=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY''))  THEN Z.LASTWORKINGDAY'||CHR(10)
    ||'  WHEN Z.DATEOFRETIREMENT IS NOT NULL AND Z.DATEOFRETIREMENT >=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'  AND Z.DATEOFRETIREMENT <=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')  THEN  Z.LASTWORKINGDAY'||CHR(10)
    ||'  ELSE '''' END ),''DD/MM/YYYY'') LASTWORKINGDAY'||CHR(10)
    ||'  FROM'||CHR(10)
    ||' ('||CHR(10)
    ||' SELECT NVL(A.ESINO,'''') ESINO,A.TOKENNO,A.WORKERNAME,A.WORKERSERIAL,A.CONTRACTORCODE,A.COMPANYCODE, '||CHR(10)
    ||' ROUND(NVL(B.TOTALPAIDDAYS,0), 0) TOTALPAIDDAYS,X.LASTWORKINGDAY ,A.DATEOFJOINING,A.DATEOFRETIREMENT,'||CHR(10)
    ||' A.DATEOFTERMINATION,NVL(L.LEAVEDAYS,0) LEAVEDAYS,ROUND(NVL(B.ESI_GROSS,0),0) ESI_GROSS'||CHR(10)
    ||' FROM WPSWORKERMAST A,'||CHR(10)
    ||' ('||CHR(10)
    ||'   SELECT X.WORKERSERIAL, SUM((NVL(X.ATTENDANCEHOURS,0)/8) +(NVL(X.HOLIDAYHOURS,0)/8)+(NVL(X.STLHOURS,0)/8)) TOTALPAIDDAYS,'||CHR(10)
    ||'    ROUND(SUM(NVL(X.ESI_GROSS,0)),0) ESI_GROSS'||CHR(10)
    ||'   FROM WPSWAGESDETAILS_MV X'||CHR(10)
    ||'   WHERE X.COMPANYCODE ='''||P_COMPANYCODE||''' '||CHR(10)
    ||'     AND X.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'     AND X.YEARCODE = '''||P_YEARCODE||''' '||CHR(10)   
    ||'     AND X.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     AND X.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     GROUP BY X.WORKERSERIAL '||CHR(10)
    ||'  ) B,'||CHR(10)
    ||' ('||CHR(10)
    ||'   SELECT X.WORKERSERIAL, COUNT(DISTINCT DATEOFATTENDANCE) DAYS, TO_CHAR(MAX(DATEOFATTENDANCE),''DD/MM/YYYY'') LASTWORKINGDAY '||CHR(10)
    ||'   FROM WPSATTENDANCEDAYWISE X'||CHR(10)
    ||'   WHERE X.COMPANYCODE ='''||P_COMPANYCODE||''' '||CHR(10)
    ||'     AND X.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'     AND X.YEARCODE =  '''||P_YEARCODE||''' '||CHR(10)   
    ||'     AND X.DATEOFATTENDANCE >= TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     AND X.DATEOFATTENDANCE <= TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     GROUP BY WORKERSERIAL '||CHR(10)
    ||'  ) X,'||CHR(10)
    ||'  (SELECT  X.WORKERSERIAL,SUM(NVL(LEAVEDAYS,0)) LEAVEDAYS'||CHR(10)
    ||'   FROM WPSLEAVEAPPLICATION X'||CHR(10)
    ||'   WHERE X.COMPANYCODE ='''||P_COMPANYCODE||''' '||CHR(10)
    ||'   AND X.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'     AND X.YEARCODE =  '''||P_YEARCODE||''' '||CHR(10)   
    ||'     AND X.LEAVEDATE >= TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     AND X.LEAVEDATE <= TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     GROUP BY WORKERSERIAL '||CHR(10)
    ||'  )L'||CHR(10)
    ||'        WHERE  A.WORKERSERIAL=B.WORKERSERIAL(+)'||CHR(10)
    ||'        AND A.WORKERSERIAL=X.WORKERSERIAL(+)'||CHR(10)
    ||'        AND A.WORKERSERIAL=L.WORKERSERIAL(+)'||CHR(10)
    ||'        AND A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'        AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'        -- AND A.ESINO IS NOT NULL '||CHR(10)
    --||'        AND A.ESIJOININGDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'     ORDER BY ESINO,WORKERNAME'||CHR(10)
    ||' )Z '|| CHR(10)
    ||' WHERE COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10);
     IF P_TOKENNO IS NOT NULL THEN
            LV_SQLSTR := LV_SQLSTR ||' AND TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
     END IF;
      IF P_CONTRACTORCODE IS NOT NULL THEN
            LV_SQLSTR := LV_SQLSTR ||' AND CONTRACTORCODE IN ( '||P_CONTRACTORCODE||')  '||CHR(10);
     END IF;
     LV_SQLSTR := LV_SQLSTR ||'ORDER BY ESINO,WORKERNAME'||CHR(10);  

--DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSFN_SUMMARY_1_20DEC2016;

CREATE OR REPLACE PROCEDURE "PROC_WPSFN_SUMMARY_1_20DEC2016" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearcode      varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_FORTNIGHTATTENDANCE;
    /*lv_sqlstr :=    'insert into GTT_FORTNIGHTATTENDANCE '|| chr(10)
            ||' SELECT '''||p_fromdt ||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, B.WORKERNAME, null AS W_K_T_Y, C.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||chr(10) 
            ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(NVL(OVERTIMEHOURS,0)) O_T__HRS, 0 LAY_OFF_HRS, '||chr(10)
            ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||chr(10) 
            ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||chr(10) 
            ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''B'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||chr(10)  
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, COMPANYMAST D '||chr(10)
            ||' WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||chr(10)
            ||' AND A.YEARCODE = '''||p_yearcode||''' '||chr(10)
            ||' AND A.DATEOFATTENDANCE BETWEEN TO_DATE(''' || p_fromdt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||'                         AND TO_DATE(''' || p_todt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||' AND A.COMPANYCODE = D.COMPANYCODE '||chr(10)
            ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||chr(10)
            ||' AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND A.MACHINECODE1 = C.MACHINECODE (+) '||chr(10)
            ||' GROUP BY D.COMPANYNAME, A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||chr(10)
            ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE '||chr(10);
    */
/*lv_sqlstr :=    ' insert into GTT_FORTNIGHTATTENDANCE '||CHR(10)
        ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, A.WORKERNAME, null AS W_K_T_Y, A.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||CHR(10) 
        ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(O_T_HRS) O_T__HRS, 0 LAY_OFF_HRS, '||CHR(10) 
        ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||CHR(10) 
        ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||CHR(10) 
        ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''B'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||CHR(10) 
        ||' FROM  COMPANYMAST D, '||CHR(10)
        ||' ( '||CHR(10)
        ||'   SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, XX.DEPARTMENTCODE,  XX.SHIFTCODE, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, '||CHR(10) 
        ||'   SUM(ATTENDANCEHOURS) ATTENDANCEHOURS,  '||CHR(10)
        ||'   SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(HOLIDAYHOURS) HOLIDAYHOURS, 0 O_T_HRS '||CHR(10)
        ||'   FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, '||CHR(10) 
        ||'      ( '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, MIN(SHIFTCODE) SHIFTCODE '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE A, '||CHR(10) 
        ||'         ( '||CHR(10) 
        ||'            SELECT WORKERSERIAL, DEPARTMENTCODE, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10) 
        ||'            FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
        ||'            WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'              AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'            GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10)   
        ||'        ) B '||CHR(10) 
        ||'        WHERE A.COMPANYCODE = '''||p_companycode||'''  '||CHR(10)   
        ||'          AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'          AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10) 
        ||'          AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'          AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
        ||'          AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'        GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10) 
        ||'      ) XX '||CHR(10) 
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10) 
        ||'  AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
        ||'  AND A.DATEOFATTENDANCE BETWEEN TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                          AND TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'  AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = C.MACHINECODE (+) '||CHR(10)
        ||'  AND A.WORKERSERIAL = XX.WORKERSERIAL AND A.DEPARTMENTCODE = XX.DEPARTMENTCODE '||CHR(10)
        ||'  AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE,A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, XX.DEPARTMENTCODE, XX.SHIFTCODE '||CHR(10)
        ||'  UNION ALL '||CHR(10)
        ||'  SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE,  A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE,'||CHR(10) 
        ||'  0 ATTENDANCEHOURS, 0 NIGHTALLOWANCEHOURS, 0  HOLIDAYHOURS, SUM(OVERTIMEHOURS) O_T_OTHRS '||CHR(10)     
        ||'  FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING W '||CHR(10)  
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'    AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'    AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE >= TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'    AND NVL(A.OVERTIMEHOURS,0)  > 0 '||CHR(10)
        ||'    AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'    AND A.DEPARTMENTCODE = W.DEPARTMENTCODE (+) '||CHR(10) 
        ||'    AND NVL(A.MACHINECODE1,''NA'') = W.MACHINECODE (+) '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE, A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.SHIFTCODE '||CHR(10)
        ||' ) A '||CHR(10)
        ||' WHERE A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
        ||' GROUP BY D.COMPANYNAME, A.TOKENNO, A.WORKERNAME, A.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||CHR(10)
        ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, A.LINENO, A.MACHINECODE1, '||CHR(10) 
        ||' SUBSTR(A.OCCUPATIONCODE, 1, 2) '||CHR(10)   ; */                 
lv_sqlstr :=    ' insert into GTT_FORTNIGHTATTENDANCE '||CHR(10)
        ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, A.WORKERNAME, null AS W_K_T_Y, NULL LINENO, NULL AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||CHR(10) 
        ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(O_T_HRS) O_T__HRS, 0 LAY_OFF_HRS, '||CHR(10) 
        ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||CHR(10) 
        ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||CHR(10) 
        ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''A'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||CHR(10) 
        ||' FROM  COMPANYMAST D, '||CHR(10)
        ||' ( '||CHR(10)
        ||'   SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, XX.DEPARTMENTCODE,  XX.SHIFTCODE, A.OCCUPATIONCODE, '||CHR(10) 
        ||'   SUM(ATTENDANCEHOURS) ATTENDANCEHOURS,  '||CHR(10)
        ||'   SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(HOLIDAYHOURS) HOLIDAYHOURS, 0 O_T_HRS '||CHR(10)
        ||'   FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, /*WPSMACHINELINEMAPPING C,*/ '||CHR(10) 
        ||'      ( '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, MIN(SHIFTCODE) SHIFTCODE '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE A, '||CHR(10) 
        ||'         ( '||CHR(10) 
        ||'            SELECT WORKERSERIAL, DEPARTMENTCODE, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10) 
        ||'            FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
        ||'            WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'              AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'            GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10)   
        ||'        ) B '||CHR(10) 
        ||'        WHERE A.COMPANYCODE = '''||p_companycode||'''  '||CHR(10)   
        ||'          AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'          AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10) 
        ||'          AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'          AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
        ||'          AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'        GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10) 
        ||'      ) XX '||CHR(10) 
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10) 
        ||'  AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
        ||'  AND A.DATEOFATTENDANCE BETWEEN TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                          AND TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'  /*AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = C.MACHINECODE (+) */'||CHR(10)
        ||'  AND A.WORKERSERIAL = XX.WORKERSERIAL AND A.DEPARTMENTCODE = XX.DEPARTMENTCODE '||CHR(10)
        ||'  AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE,A.TOKENNO, B.WORKERNAME, /*C.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, XX.DEPARTMENTCODE, XX.SHIFTCODE '||CHR(10)
        ||'  UNION ALL '||CHR(10)
        ||'  SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE,  A.SHIFTCODE, A.OCCUPATIONCODE,'||CHR(10) 
        ||'  0 ATTENDANCEHOURS, 0 NIGHTALLOWANCEHOURS, 0  HOLIDAYHOURS, SUM(OVERTIMEHOURS) O_T_OTHRS '||CHR(10)     
        ||'  FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B /*, WPSMACHINELINEMAPPING W*/ '||CHR(10)  
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'    AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'    AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE >= TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'    AND NVL(A.OVERTIMEHOURS,0)  > 0 '||CHR(10)
        ||'    AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'    /*AND A.DEPARTMENTCODE = W.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = W.MACHINECODE (+) */'||CHR(10) 
        ||'  GROUP BY A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE, A.SHIFTCODE, /*W.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, A.SHIFTCODE '||CHR(10)
        ||' ) A '||CHR(10)
        ||' WHERE A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
        ||' GROUP BY D.COMPANYNAME, A.TOKENNO, A.WORKERNAME, /*A.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||CHR(10)
        ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO,/* A.LINENO, A.MACHINECODE1,*/ '||CHR(10) 
        ||' SUBSTR(A.OCCUPATIONCODE, 1, 2) '||CHR(10)   ;                 

    dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
   UPDATE GTT_FORTNIGHTATTENDANCE A SET OCC = (SELECT A.OCC||B.WORKERTYPECODE FROM WPSOCCUPATIONMAST B
   WHERE A.DEPT = B.DEPARTMENTCODE AND A.OCC=B.OCCUPATIONCODE);
   COMMIT;
end;
/


DROP PROCEDURE PROC_WPSFORTNIGHT_SUMMARY_1;

CREATE OR REPLACE PROCEDURE "PROC_WPSFORTNIGHT_SUMMARY_1" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearcode      varchar2,
    p_fromdt varchar2,
    p_todt varchar2,
    p_MaxHrs varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_FORTNIGHTATTENDANCE;
lv_sqlstr :=    ' insert into GTT_FORTNIGHTATTENDANCE '||CHR(10)
        ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, A.WORKERNAME, null AS W_K_T_Y, NULL LINENO, NULL AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||CHR(10) 
        ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(O_T_HRS) O_T__HRS, 0 LAY_OFF_HRS, '||CHR(10) 
        ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||CHR(10) 
        ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||CHR(10) 
        ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''A'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT,'''' FBKHOURS  '||CHR(10) 
        ||' FROM  COMPANYMAST D, '||CHR(10)
        ||' ( '||CHR(10)
        ||'   SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, XX.DEPARTMENTCODE,  XX.SHIFTCODE, A.OCCUPATIONCODE, '||CHR(10) 
        ||'   SUM(ATTENDANCEHOURS) ATTENDANCEHOURS,  '||CHR(10)
        ||'   SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(HOLIDAYHOURS) HOLIDAYHOURS, 0 O_T_HRS '||CHR(10)
        ||'   FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, /*WPSMACHINELINEMAPPING C,*/ '||CHR(10) 
        ||'      ( '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, MIN(SHIFTCODE) SHIFTCODE '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE A, '||CHR(10) 
        ||'         ( '||CHR(10) 
        ||'            SELECT WORKERSERIAL, DEPARTMENTCODE, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10) 
        ||'            FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
        ||'            WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'              AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'            GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10)   
        ||'        ) B '||CHR(10) 
        ||'        WHERE A.COMPANYCODE = '''||p_companycode||'''  '||CHR(10)   
        ||'          AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'          AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10) 
        ||'          AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'          AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
        ||'          AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'        GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10) 
        ||'      ) XX '||CHR(10) 
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10) 
        ||'  AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
        ||'  AND A.DATEOFATTENDANCE BETWEEN TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                          AND TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'  /*AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = C.MACHINECODE (+) */'||CHR(10)
        ||'  AND A.WORKERSERIAL = XX.WORKERSERIAL AND A.DEPARTMENTCODE = XX.DEPARTMENTCODE '||CHR(10)
        ||'  AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10);
        
        IF NVL(p_MaxHrs,0)>0 THEN /* ADDED ON 17/12/2016 */
            lv_sqlstr :=lv_sqlstr || 'AND A.WORKERSERIAL IN (SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE '||CHR(10)
                    ||'            WHERE COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
                    ||'              AND DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
                    ||'              AND DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
                    ||'              AND DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'              GROUP BY WORKERSERIAL HAVING  SUM(NVL(ATTENDANCEHOURS,0))>'||TO_NUMBER(p_MaxHrs)||')  '||CHR(10) ;
        END IF;
        
lv_sqlstr :=lv_sqlstr ||'  GROUP BY A.COMPANYCODE,A.TOKENNO, B.WORKERNAME, /*C.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, XX.DEPARTMENTCODE, XX.SHIFTCODE '||CHR(10)
        ||'  UNION ALL '||CHR(10)
        ||'  SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE,  A.SHIFTCODE, A.OCCUPATIONCODE,'||CHR(10) 
        ||'  0 ATTENDANCEHOURS, 0 NIGHTALLOWANCEHOURS, 0  HOLIDAYHOURS, SUM(OVERTIMEHOURS) O_T_OTHRS '||CHR(10)     
        ||'  FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B /*, WPSMACHINELINEMAPPING W*/ '||CHR(10)  
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'    AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'    AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE >= TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'    AND NVL(A.OVERTIMEHOURS,0)  > 0 '||CHR(10)
        ||'    AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'    /*AND A.DEPARTMENTCODE = W.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = W.MACHINECODE (+) */'||CHR(10);
      
         IF NVL(p_MaxHrs,0)>0 THEN
            lv_sqlstr :=lv_sqlstr || 'AND A.WORKERSERIAL IN (SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE '||CHR(10)
                    ||'            WHERE COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
                    ||'              AND DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
                    ||'              AND DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
                    ||'              AND DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10)
                    ||'              GROUP BY WORKERSERIAL HAVING  SUM(NVL(ATTENDANCEHOURS,0))>'||TO_NUMBER(p_MaxHrs)||')  '||CHR(10) ;
        END IF;
         
lv_sqlstr :=lv_sqlstr ||'  GROUP BY A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE, A.SHIFTCODE, /*W.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, A.SHIFTCODE '||CHR(10)
        ||' ) A '||CHR(10)
        ||' WHERE A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
        ||' GROUP BY D.COMPANYNAME, A.TOKENNO, A.WORKERNAME, /*A.LINENO, A.MACHINECODE1,*/ A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||CHR(10)
        ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO,/* A.LINENO, A.MACHINECODE1,*/ '||CHR(10) 
        ||' SUBSTR(A.OCCUPATIONCODE, 1, 2) '||CHR(10);   

 --dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
   UPDATE GTT_FORTNIGHTATTENDANCE A SET OCC = (SELECT A.OCC||B.WORKERTYPECODE FROM WPSOCCUPATIONMAST B
   WHERE A.DEPT = B.DEPARTMENTCODE AND A.OCC=B.OCCUPATIONCODE);
   COMMIT;
   
   
   UPDATE GTT_FORTNIGHTATTENDANCE A
   SET  STL_DAYS = (
                   SELECT SUM(NVL(STLHOURS,0))/8
                     FROM WPSSTLENTRY B
                    WHERE B.FORTNIGHTENDDATE=TO_DATE(p_todt,'DD/MM/YYYY')
                   GROUP BY WORKERSERIAL,TOKENNO
                   HAVING SUM(NVL(STLHOURS,0))/8>0 AND TRIM(A.EBNO)=B.TOKENNO);
    COMMIT;                   
                      
    UPDATE GTT_FORTNIGHTATTENDANCE A
    SET STL_DAYS=0
    WHERE ROWID<(SELECT MAX(ROWID) FROM GTT_FORTNIGHTATTENDANCE B
                   WHERE A.EBNO=B.EBNO AND NVL(STL_DAYS,0)>0);
    COMMIT;
    
     
    UPDATE GTT_FORTNIGHTATTENDANCE A
   SET (FBKHOURS,LAY_OFF_HRS,DEDN_ADJ_AMT_3_2,INC_ADJ_AMT_3_2)=
   (SELECT SUM(NVL(FBKHOURS,0)) FBKHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS,
           SUM(NVL(SHIBCO_DEDN,0)) SHIBCO_DEDN,SUM(NVL(NPF_ADJ,0)) NPF_ADJ
     FROM WPSATTENDANCEDAYWISE B
     WHERE COMPANYCODE = p_companycode   
       AND DIVISIONCODE = p_divisioncode 
       AND DATEOFATTENDANCE >= TO_DATE(p_fromdt,'DD/MM/YYYY')   
       AND DATEOFATTENDANCE <= TO_DATE(p_todt,'DD/MM/YYYY')
       GROUP BY WORKERSERIAL,TOKENNO HAVING (SUM(NVL(FBKHOURS,0))>0 OR SUM(NVL(LAYOFFHOURS,0))>0 
                                          OR SUM(NVL(SHIBCO_DEDN,0))>0 OR SUM(NVL(NPF_ADJ,0))>0)  
                                        AND TRIM(A.EBNO)=B.TOKENNO); 
     COMMIT;
     
    UPDATE GTT_FORTNIGHTATTENDANCE A
    SET FBKHOURS=0
    WHERE ROWID<(SELECT MAX(ROWID) FROM GTT_FORTNIGHTATTENDANCE B
                   WHERE A.EBNO=B.EBNO 
                   AND NVL(A.FBKHOURS,0)>0);
    
    
    UPDATE GTT_FORTNIGHTATTENDANCE A
    SET LAY_OFF_HRS=0
    WHERE ROWID<(SELECT MAX(ROWID) FROM GTT_FORTNIGHTATTENDANCE B
                   WHERE A.EBNO=B.EBNO 
                   AND NVL(A.LAY_OFF_HRS,0)>0);  
                   
                   
                   
    UPDATE GTT_FORTNIGHTATTENDANCE A
    SET DEDN_ADJ_AMT_3_2=0
    WHERE ROWID<(SELECT MAX(ROWID) FROM GTT_FORTNIGHTATTENDANCE B
                   WHERE A.EBNO=B.EBNO 
                   AND NVL(A.DEDN_ADJ_AMT_3_2,0)>0);  


    UPDATE GTT_FORTNIGHTATTENDANCE A
    SET INC_ADJ_AMT_3_2=0
    WHERE ROWID<(SELECT MAX(ROWID) FROM GTT_FORTNIGHTATTENDANCE B
                   WHERE A.EBNO=B.EBNO 
                   AND NVL(A.INC_ADJ_AMT_3_2,0)>0);  
                                                             
                   
    COMMIT;                                                             
             -------------------FOR STL HOURS---------------
    lv_sqlstr := 'Insert into GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||' (FROMDT, TODT, COMPANYNAME, EBNO, WORKERNAME, ' || CHR(10)
               ||'        W_K_T_Y, LINENO, MCH, OCC, HRS_WK_1, ' || CHR(10)
               ||'        HRS_WK_2, NS_HRS, FESTIVAL_HRS, O_T__HRS, LAY_OFF_HRS, ' || CHR(10)
               ||'        STL_DAYS, STL_WG_ADV, DEDN_ADJ_CD, DEDN_ADJ_AMT_3_2, INC_ADJ_CD, ' || CHR(10)
               ||'        INC_ADJ_AMT_3_2, PRD_QL_CD, PRO_QTY, TAG, DEPT, ' || CHR(10)
               ||'        SHIFT, FBKHOURS)        ' || CHR(10)
               ||'     (' || CHR(10)
               ||'       SELECT '''||p_fromdt||''', '''||p_todt||''', C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'             '''' , '''' , '''' , B.OCCUPATIONCODE, 0, ' || CHR(10)
               ||'               0, 0, 0, 0, 0, ' || CHR(10)
               ||'               SUM(STLHOURS)/8 STL_DAYS, 0 STL_WG_ADV, 0, 0, 0, ' || CHR(10)
               ||'               0, '''', 0, '''', B.DEPARTMENTCODE, ' || CHR(10)
               ||'               B.SHIFTCODE, 0' || CHR(10)
               ||'        FROM   WPSSTLENTRY B ,COMPANYMAST C,WPSWORKERMAST E' || CHR(10)
               ||'       WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'         AND NVL(LEAVECODE,''STL'')=''STL''   ' || CHR(10)
               ||'         AND B.COMPANYCODE=C.COMPANYCODE' || CHR(10)
               ||'         AND B.COMPANYCODE=E.COMPANYCODE' || CHR(10)
               ||'         AND B.WORKERSERIAL=E.WORKERSERIAL' || CHR(10)
               ||'         AND B.TOKENNO=E.TOKENNO' || CHR(10)
               ||'          AND B.TOKENNO ' || CHR(10)
               ||'         IN (' || CHR(10)
               ||'               SELECT  TOKENNO  FROM   WPSSTLENTRY B ' || CHR(10)
               ||'               WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'                 AND NVL(LEAVECODE,''STL'')=''STL'' ' || CHR(10)
               ||'               MINUS  ' || CHR(10)
               ||'               SELECT EBNO FROM GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||'            ) ' || CHR(10)
               ||'        GROUP BY C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'        B.OCCUPATIONCODE,B.DEPARTMENTCODE,B.SHIFTCODE' || CHR(10)
               ||'        )' || CHR(10);

--dbms_output.put_line(lv_sqlstr);
   EXECUTE IMMEDIATE lv_sqlstr;
   ----------------------------------------------
     -------------------FOR FBK HOURS---------------
    lv_sqlstr := 'Insert into GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||' (FROMDT, TODT, COMPANYNAME, EBNO, WORKERNAME, ' || CHR(10)
               ||'        W_K_T_Y, LINENO, MCH, OCC, HRS_WK_1, ' || CHR(10)
               ||'        HRS_WK_2, NS_HRS, FESTIVAL_HRS, O_T__HRS, LAY_OFF_HRS, ' || CHR(10)
               ||'        STL_DAYS, STL_WG_ADV, DEDN_ADJ_CD, DEDN_ADJ_AMT_3_2, INC_ADJ_CD, ' || CHR(10)
               ||'        INC_ADJ_AMT_3_2, PRD_QL_CD, PRO_QTY, TAG, DEPT, ' || CHR(10)
               ||'        SHIFT, FBKHOURS)        ' || CHR(10)
               ||'     (' || CHR(10)
               ||'       SELECT '''||p_fromdt||''', '''||p_todt||''', C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'             '''' , '''' , '''' , B.OCCUPATIONCODE, 0, ' || CHR(10)
               ||'               0, 0, 0, 0, 0, ' || CHR(10)
               ||'               0 STL_DAYS, 0 STL_WG_ADV, 0, 0, 0, ' || CHR(10)
               ||'               0, '''', 0, '''', B.DEPARTMENTCODE, ' || CHR(10)
               ||'               B.SHIFTCODE, SUM(NVL(FBKHOURS,0))' || CHR(10)
               ||'        FROM   WPSATTENDANCEDAYWISE B ,COMPANYMAST C,WPSWORKERMAST E' || CHR(10)
               ||'       WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'         AND B.COMPANYCODE=C.COMPANYCODE' || CHR(10)
               ||'         AND B.COMPANYCODE=E.COMPANYCODE' || CHR(10)
               ||'         AND B.WORKERSERIAL=E.WORKERSERIAL' || CHR(10)
               ||'         AND B.TOKENNO=E.TOKENNO' || CHR(10)
               ||'          AND B.TOKENNO ' || CHR(10)
               ||'         IN (' || CHR(10)
               ||'               SELECT  TOKENNO  FROM   WPSATTENDANCEDAYWISE B ' || CHR(10)
               ||'               WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'                 AND NVL(FBKHOURS,0)>0 ' || CHR(10)
               ||'               MINUS  ' || CHR(10)
               ||'               SELECT EBNO FROM GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||'            ) ' || CHR(10)
               ||'        GROUP BY C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'        B.OCCUPATIONCODE,B.DEPARTMENTCODE,B.SHIFTCODE' || CHR(10)
               ||'        )' || CHR(10);

 -- dbms_output.put_line(lv_sqlstr);
  EXECUTE IMMEDIATE lv_sqlstr;
   ----------------------------------------------
   
   -------------------FOR LAY OFF HOURS---------------
    lv_sqlstr := 'Insert into GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||' (FROMDT, TODT, COMPANYNAME, EBNO, WORKERNAME, ' || CHR(10)
               ||'        W_K_T_Y, LINENO, MCH, OCC, HRS_WK_1, ' || CHR(10)
               ||'        HRS_WK_2, NS_HRS, FESTIVAL_HRS, O_T__HRS, LAY_OFF_HRS, ' || CHR(10)
               ||'        STL_DAYS, STL_WG_ADV, DEDN_ADJ_CD, DEDN_ADJ_AMT_3_2, INC_ADJ_CD, ' || CHR(10)
               ||'        INC_ADJ_AMT_3_2, PRD_QL_CD, PRO_QTY, TAG, DEPT, ' || CHR(10)
               ||'        SHIFT, FBKHOURS)        ' || CHR(10)
               ||'     (' || CHR(10)
               ||'       SELECT '''||p_fromdt||''', '''||p_todt||''', C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'              '''' , '''' , '''' , B.OCCUPATIONCODE, 0, ' || CHR(10)
               ||'               0, 0, 0, 0, SUM(LAYOFFHOURS),  ' || CHR(10)
               ||'               0 , 0 , 0, 0,0,' || CHR(10)
               ||'               0, '''', 0, '''', B.DEPARTMENTCODE, ' || CHR(10)
               ||'               B.SHIFTCODE,0' || CHR(10)
               ||'        FROM   WPSATTENDANCEDAYWISE B ,COMPANYMAST C,WPSWORKERMAST E' || CHR(10)
               ||'       WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'         AND B.COMPANYCODE=C.COMPANYCODE' || CHR(10)
               ||'         AND B.COMPANYCODE=E.COMPANYCODE' || CHR(10)
               ||'         AND B.WORKERSERIAL=E.WORKERSERIAL' || CHR(10)
               ||'         AND B.TOKENNO=E.TOKENNO' || CHR(10)
               ||'          AND B.TOKENNO ' || CHR(10)
               ||'         IN (' || CHR(10)
               ||'               SELECT  TOKENNO  FROM   WPSATTENDANCEDAYWISE B ' || CHR(10)
               ||'               WHERE  B.FORTNIGHTENDDATE = TO_DATE ('''||p_todt||''', ''DD/MM/YYYY'') ' || CHR(10)
               ||'                 AND NVL(LAYOFFHOURS,0)>0 ' || CHR(10)
               ||'               MINUS  ' || CHR(10)
               ||'               SELECT EBNO FROM GTT_FORTNIGHTATTENDANCE' || CHR(10)
               ||'            ) ' || CHR(10)
               ||'        GROUP BY C.COMPANYNAME, B.TOKENNO, E.WORKERNAME, ' || CHR(10)
               ||'        B.OCCUPATIONCODE,B.DEPARTMENTCODE,B.SHIFTCODE' || CHR(10)
               ||'        )' || CHR(10);

--dbms_output.put_line(lv_sqlstr);
   EXECUTE IMMEDIATE lv_sqlstr;
   ----------------------------------------------
   commit;
    
                   
end;
/


DROP PROCEDURE PROC_WPSFORTNIGHT_SUMMARY_1_BK;

CREATE OR REPLACE PROCEDURE "PROC_WPSFORTNIGHT_SUMMARY_1_BK" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearcode      varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_FORTNIGHTATTENDANCE;
    /*lv_sqlstr :=    'insert into GTT_FORTNIGHTATTENDANCE '|| chr(10)
            ||' SELECT '''||p_fromdt ||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, B.WORKERNAME, null AS W_K_T_Y, C.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||chr(10) 
            ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(NVL(OVERTIMEHOURS,0)) O_T__HRS, 0 LAY_OFF_HRS, '||chr(10)
            ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||chr(10) 
            ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||chr(10) 
            ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''B'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||chr(10)  
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, COMPANYMAST D '||chr(10)
            ||' WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||chr(10)
            ||' AND A.YEARCODE = '''||p_yearcode||''' '||chr(10)
            ||' AND A.DATEOFATTENDANCE BETWEEN TO_DATE(''' || p_fromdt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||'                         AND TO_DATE(''' || p_todt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||' AND A.COMPANYCODE = D.COMPANYCODE '||chr(10)
            ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||chr(10)
            ||' AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND A.MACHINECODE1 = C.MACHINECODE (+) '||chr(10)
            ||' GROUP BY D.COMPANYNAME, A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||chr(10)
            ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE '||chr(10);
    */
lv_sqlstr :=    ' insert into GTT_FORTNIGHTATTENDANCE '||CHR(10)
        ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, A.WORKERNAME, null AS W_K_T_Y, A.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE||M.WORKERTYPECODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||CHR(10) 
        ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(O_T_HRS) O_T__HRS, 0 LAY_OFF_HRS, '||CHR(10) 
        ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||CHR(10) 
        ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||CHR(10) 
        ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''A'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||CHR(10) 
        ||' FROM  COMPANYMAST D, WPSOCCUPATIONMAST M,'||CHR(10)
        ||' ( '||CHR(10)
        ||'   SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, XX.DEPARTMENTCODE,  XX.SHIFTCODE, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, '||CHR(10) 
        ||'   SUM(ATTENDANCEHOURS) ATTENDANCEHOURS,  '||CHR(10)
        ||'   SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(HOLIDAYHOURS) HOLIDAYHOURS, 0 O_T_HRS '||CHR(10)
        ||'   FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, '||CHR(10) 
        ||'      ( '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, MIN(SHIFTCODE) SHIFTCODE '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE A, '||CHR(10) 
        ||'         ( '||CHR(10) 
        ||'            SELECT WORKERSERIAL, DEPARTMENTCODE, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10) 
        ||'            FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
        ||'            WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'              AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'            GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10)   
        ||'        ) B '||CHR(10) 
        ||'        WHERE A.COMPANYCODE = '''||p_companycode||'''  '||CHR(10)   
        ||'          AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'          AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10) 
        ||'          AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'          AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
        ||'          AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'        GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10) 
        ||'      ) XX '||CHR(10) 
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10) 
        ||'  AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
        ||'  AND A.DATEOFATTENDANCE BETWEEN TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                          AND TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'  AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = C.MACHINECODE (+) '||CHR(10)
        ||'  AND A.WORKERSERIAL = XX.WORKERSERIAL AND A.DEPARTMENTCODE = XX.DEPARTMENTCODE '||CHR(10)
        ||'  AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE,A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, XX.DEPARTMENTCODE, XX.SHIFTCODE '||CHR(10)
        ||'  UNION ALL '||CHR(10)
        ||'  SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE,  A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE,'||CHR(10) 
        ||'  0 ATTENDANCEHOURS, 0 NIGHTALLOWANCEHOURS, 0  HOLIDAYHOURS, SUM(OVERTIMEHOURS) O_T_OTHRS '||CHR(10)     
        ||'  FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING W '||CHR(10)  
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'    AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'    AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE >= TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'    AND NVL(A.OVERTIMEHOURS,0)  > 0 '||CHR(10)
        ||'    AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'    AND A.DEPARTMENTCODE = W.DEPARTMENTCODE (+) '||CHR(10) 
        ||'    AND NVL(A.MACHINECODE1,''NA'') = W.MACHINECODE (+) '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE, A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.SHIFTCODE '||CHR(10)
        ||' ) A '||CHR(10)
        ||' WHERE A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
        ||'   AND M.COMPANYCODE = '''||p_companycode||''' AND M.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'   AND A.DEPARTMENTCODE = M.DEPARTMENTCODE AND A.OCCUPATIONCODE = M.OCCUPATIONCODE '||CHR(10)
        ||' GROUP BY D.COMPANYNAME, A.TOKENNO, A.WORKERNAME, A.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE,M.WORKERTYPECODE, A.DEPARTMENTCODE, A.SHIFTCODE '||CHR(10)
        ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, A.LINENO, A.MACHINECODE1, '||CHR(10) 
        ||' SUBSTR(A.OCCUPATIONCODE, 1, 2) '||CHR(10)   ;                 
   dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
end;
/


DROP PROCEDURE PROC_WPSFORTNIGHT_SUMMARY_2;

CREATE OR REPLACE PROCEDURE "PROC_WPSFORTNIGHT_SUMMARY_2" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearcode      varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_WPSFORTNIGHTATTENDANCE_2;

    lv_sqlstr :=    ' INSERT INTO GTT_WPSFORTNIGHTATTENDANCE_2 '||CHR(10)    
            ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, '||CHR(10)
            ||' A.UNITCODE UNIT, A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''A'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SFT, A.PAGENO, B.WORKERCATEGORYCODE CATG, A.TOKENNO, B.WORKERNAME, '||CHR(10) 
            ||' B.FIXEDBASIC, B.DARATE, B.ADHOCRATE, B.ADDLBASIC_RATE, B.SPL_ALLOW_RATE, B.ESINO, '||CHR(10)
            ||' SUM(NVL(A.ATTENDANCEHOURS,0)) HRS_WORKED, SUM(NVL(A.HOLIDAYHOURS,0)) HOL_HRS, SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS, '||CHR(10) 
            ||' SUM(NVL(A.PF_ADJ,0)) PF_ADJ_EARN, SUM(NVL(A.PF_ADJ_DEDN,0)) PF_ADJ_DEDN, SUM(NVL(A.NPF_ADJ,0)) OTH_EARN, SUM(NVL(A.NPF_ADJ_DEDN,0)) OTH_DEDN '||CHR(10)   
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, COMPANYMAST D '||CHR(10)  
            ||' WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10) 
            ||' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
            ||' AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
            ||' AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)  
            ||' AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
            ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||' AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
            ||' AND A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
            ||' GROUP BY  D.COMPANYNAME, A.UNITCODE, A.DEPARTMENTCODE, A.SHIFTCODE, A.PAGENO, B.WORKERCATEGORYCODE, A.TOKENNO, B.WORKERNAME, '||CHR(10) 
            ||' B.FIXEDBASIC, B.DARATE, B.ADHOCRATE, B.ADDLBASIC_RATE, B.SPL_ALLOW_RATE, B.ESINO '||CHR(10)
            ||' ORDER BY A.TOKENNO, A.UNITCODE, A.DEPARTMENTCODE, A.SHIFTCODE    '||CHR(10);
    dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
end;
/


DROP PROCEDURE PROC_WPSFORTNIGHT_SUM_1_030616;

CREATE OR REPLACE PROCEDURE "PROC_WPSFORTNIGHT_SUM_1_030616" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearcode      varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_FORTNIGHTATTENDANCE;
    /*lv_sqlstr :=    'insert into GTT_FORTNIGHTATTENDANCE '|| chr(10)
            ||' SELECT '''||p_fromdt ||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, B.WORKERNAME, null AS W_K_T_Y, C.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||chr(10) 
            ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(NVL(OVERTIMEHOURS,0)) O_T__HRS, 0 LAY_OFF_HRS, '||chr(10)
            ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||chr(10) 
            ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||chr(10) 
            ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''B'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||chr(10)  
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, COMPANYMAST D '||chr(10)
            ||' WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||chr(10)
            ||' AND A.YEARCODE = '''||p_yearcode||''' '||chr(10)
            ||' AND A.DATEOFATTENDANCE BETWEEN TO_DATE(''' || p_fromdt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||'                         AND TO_DATE(''' || p_todt || ''',''DD/MM/YYYY'') '|| chr(10)
            ||' AND A.COMPANYCODE = D.COMPANYCODE '||chr(10)
            ||' AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||chr(10)
            ||' AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND A.MACHINECODE1 = C.MACHINECODE (+) '||chr(10)
            ||' GROUP BY D.COMPANYNAME, A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||chr(10)
            ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE '||chr(10);
    */
lv_sqlstr :=    ' insert into GTT_FORTNIGHTATTENDANCE '||CHR(10)
        ||' SELECT '''||p_fromdt||''' FROMDT,'''||p_todt||''' TODT, D.COMPANYNAME, A.TOKENNO EBNO, A.WORKERNAME, null AS W_K_T_Y, A.LINENO, A.MACHINECODE1 AS MCH, A.OCCUPATIONCODE OCC, SUM(ATTENDANCEHOURS) HRS_WK_1, 0 HRS_WK_2, '||CHR(10) 
        ||' SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(HOLIDAYHOURS) FESTIVAL_HRS, SUM(O_T_HRS) O_T__HRS, 0 LAY_OFF_HRS, '||CHR(10) 
        ||' null STL_DAYS, null STL_WG_ADV, null DEDN_ADJ_CD, null DEDN_ADJ_AMT_3_2, null INC_ADJ_CD, null INC_ADJ_AMT_3_2, '||CHR(10) 
        ||' null PRD_QL_CD, null PRO_QTY, null TAG, '||CHR(10) 
        ||' A.DEPARTMENTCODE DEPT, DECODE(A.SHIFTCODE,''1'',''B'',DECODE(A.SHIFTCODE,''2'',''B'',''C'')) SHIFT '||CHR(10) 
        ||' FROM  COMPANYMAST D, '||CHR(10)
        ||' ( '||CHR(10)
        ||'   SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, XX.DEPARTMENTCODE,  XX.SHIFTCODE, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, '||CHR(10) 
        ||'   SUM(ATTENDANCEHOURS) ATTENDANCEHOURS,  '||CHR(10)
        ||'   SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(HOLIDAYHOURS) HOLIDAYHOURS, 0 O_T_HRS '||CHR(10)
        ||'   FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING C, '||CHR(10) 
        ||'      ( '||CHR(10)
        ||'         SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, MIN(SHIFTCODE) SHIFTCODE '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE A, '||CHR(10) 
        ||'         ( '||CHR(10) 
        ||'            SELECT WORKERSERIAL, DEPARTMENTCODE, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10) 
        ||'            FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
        ||'            WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'              AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE >= TO_DATE('''|| p_fromdt ||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'              AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'              AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'            GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10)   
        ||'        ) B '||CHR(10) 
        ||'        WHERE A.COMPANYCODE = '''||p_companycode||'''  '||CHR(10)   
        ||'          AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)   
        ||'          AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10) 
        ||'          AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'          AND A.DEPARTMENTCODE = B.DEPARTMENTCODE '||CHR(10)
        ||'          AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'        GROUP BY A.WORKERSERIAL, A.DEPARTMENTCODE '||CHR(10) 
        ||'      ) XX '||CHR(10) 
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10) 
        ||'  AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10) 
        ||'  AND A.DATEOFATTENDANCE BETWEEN TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                          AND TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10) 
        ||'  AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) AND NVL(A.MACHINECODE1,''NA'') = C.MACHINECODE (+) '||CHR(10)
        ||'  AND A.WORKERSERIAL = XX.WORKERSERIAL AND A.DEPARTMENTCODE = XX.DEPARTMENTCODE '||CHR(10)
        ||'  AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) >0 '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE,A.TOKENNO, B.WORKERNAME, C.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, XX.DEPARTMENTCODE, XX.SHIFTCODE '||CHR(10)
        ||'  UNION ALL '||CHR(10)
        ||'  SELECT A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE,  A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE,'||CHR(10) 
        ||'  0 ATTENDANCEHOURS, 0 NIGHTALLOWANCEHOURS, 0  HOLIDAYHOURS, SUM(OVERTIMEHOURS) O_T_OTHRS '||CHR(10)     
        ||'  FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B, WPSMACHINELINEMAPPING W '||CHR(10)  
        ||'  WHERE A.COMPANYCODE = '''||p_companycode||''' '||CHR(10)   
        ||'    AND A.DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
        ||'    AND A.YEARCODE = '''||p_yearcode||''' '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE >= TO_DATE('''||p_fromdt||''',''DD/MM/YYYY'') '||CHR(10)   
        ||'    AND A.DATEOFATTENDANCE <= TO_DATE('''||p_todt||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'    AND NVL(A.OVERTIMEHOURS,0)  > 0 '||CHR(10)
        ||'    AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'    AND A.DEPARTMENTCODE = W.DEPARTMENTCODE (+) '||CHR(10) 
        ||'    AND NVL(A.MACHINECODE1,''NA'') = W.MACHINECODE (+) '||CHR(10)
        ||'  GROUP BY A.COMPANYCODE, A.TOKENNO, B.WORKERNAME, A.DEPARTMENTCODE, A.SHIFTCODE, W.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.SHIFTCODE '||CHR(10)
        ||' ) A '||CHR(10)
        ||' WHERE A.COMPANYCODE = D.COMPANYCODE '||CHR(10)
        ||' GROUP BY D.COMPANYNAME, A.TOKENNO, A.WORKERNAME, A.LINENO, A.MACHINECODE1, A.OCCUPATIONCODE, A.DEPARTMENTCODE, A.SHIFTCODE '||CHR(10)
        ||' ORDER BY A.DEPARTMENTCODE, A.SHIFTCODE, A.TOKENNO, A.LINENO, A.MACHINECODE1, '||CHR(10) 
        ||' SUBSTR(A.OCCUPATIONCODE, 1, 2) '||CHR(10)   ;                 
 --   dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
   UPDATE GTT_FORTNIGHTATTENDANCE A SET OCC = (SELECT A.OCC||B.WORKERTYPECODE FROM WPSOCCUPATIONMAST B
   WHERE A.DEPT = B.DEPARTMENTCODE AND A.OCC=B.OCCUPATIONCODE);
   COMMIT;
end;
/


DROP PROCEDURE PROC_WPSGATEPASSDETAILS;

CREATE OR REPLACE PROCEDURE PROC_WPSGATEPASSDETAILS (P_COMPANYCODE VARCHAR2, P_DIVISIONCODE VARCHAR2, P_FROMDATE VARCHAR2, P_TODATE VARCHAR2, P_TOKENNO VARCHAR2, P_DEPARTMENTCODE VARCHAR2, P_CATEGORYCODE VARCHAR2, P_UNITCODE VARCHAR2)
AS
LV_SQLSTR   VARCHAR2(4000)  :=  '';
BEGIN
    
    DELETE FROM GTT_WPSGATEPASSDETAILS;

    LV_SQLSTR := 'INSERT INTO GTT_WPSGATEPASSDETAILS '||CHR(10)
               ||'SELECT COM.COMPANYNAME,DIV.DIVISIONNAME,A.TOKENNO,A.WORKERNAME,B.DATEOFATTENDANCE,B.SHIFTCODE, '||CHR(10)
               ||'       B.SPELL,B.DEDUCTIONHOURS,B.REMARKS, '||CHR(10)
               ||'       CASE WHEN '''||P_FROMDATE||''' = '''||P_TODATE||''' THEN ''As on ''|| '''||P_FROMDATE||''' '||CHR(10)
               ||'            WHEN '''||P_FROMDATE||''' <> '''||P_TODATE||''' THEN ''Period from ''|| '''||P_FROMDATE||''' ||'' to ''|| '''||P_TODATE||''' '||CHR(10)
               ||'       END PERIOD, '||chr(10)
               ||'       A.SRLNO EX1,A.GROUPCODE EX2,A.WORKERCODE EX3,'''' EX4,'''' EX5 '||CHR(10)
               ||'   FROM WPSWORKERMAST A, WPSACCIDENTGATEPASSDETAILS B, COMPANYMAST COM, DIVISIONMASTER DIV '||CHR(10)
               ||'  WHERE A.COMPANYCODE = '''||P_COMPANYCODE||'''  '||CHR(10)
               ||'    AND A.DIVISIONCODE = '''||P_DIVISIONCODE||'''  '||CHR(10)
               ||'    AND A.COMPANYCODE = B.COMPANYCODE  '||CHR(10)
               ||'    AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
               ||'    AND A.COMPANYCODE = COM.COMPANYCODE '||CHR(10)
               ||'    AND A.COMPANYCODE = DIV.COMPANYCODE   '||CHR(10)
               ||'    AND A.DIVISIONCODE = DIV.DIVISIONCODE  '||CHR(10)
               ||'    AND B.TRANSACTIONTAG = ''GATE PASS'' '||CHR(10)
               ||'    AND A.TOKENNO = B.TOKENNO  '||CHR(10);
       IF NVL(P_TOKENNO,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.TOKENNO IN ('||P_TOKENNO||')  '||CHR(10);
       END IF; 
       IF NVL(P_DEPARTMENTCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.DEPARTMENTCODE IN ('||P_DEPARTMENTCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_CATEGORYCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.WORKERCATEGORYCODE IN ('||P_CATEGORYCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_UNITCODE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND A.UNITCODE IN ('||P_UNITCODE||')  '||CHR(10);
       END IF;
       IF NVL(P_FROMDATE,'NA')<>'NA' AND NVL(P_TODATE,'NA')<>'NA' THEN
           LV_SQLSTR := LV_SQLSTR||'    AND B.DATEOFATTENDANCE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')  '||CHR(10)
                                 ||'    AND B.DATEOFATTENDANCE <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')  '||CHR(10);
       END IF;        
           LV_SQLSTR := LV_SQLSTR||'    AND NVL(A.ACTIVE,''N'') =''Y''  '||CHR(10);
       LV_SQLSTR := LV_SQLSTR ||' ORDER BY B.DATEOFATTENDANCE, A.TOKENNO '||CHR(10);
                                 
       --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
       
       EXECUTE IMMEDIATE LV_SQLSTR;

END;
/


DROP PROCEDURE PROC_WPSMCFORMAT;

CREATE OR REPLACE PROCEDURE "PROC_WPSMCFORMAT" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_YEARCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2   
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSMCFORMAT;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSMCFORMAT '|| CHR(10)
   ||'  SELECT A.WORKERSERIAL,W.TOKENNO, A.WORKERNAME, A.ESINO, '|| CHR(10)
   ||'  CASE WHEN A.BLOCK_DATE IS NOT NULL THEN A.BLOCK_DATE ELSE NULL END BLOCKDATE, '|| 

CHR(10)
   ||'  CASE WHEN A.DATEOFRETIREMENT IS NOT NULL THEN  MAX(A.DATEOFRETIREMENT) ELSE NULL 

END RETIREMENT,'|| CHR(10)
   ||'      NVL(X.DAYS,0) DAYS,  (NVL(B.STLDAYS,0) + NVL(B.LEAVEDAYS,0)) AS STLDAYS, '|| 

CHR(10)
   ||'    CASE WHEN SUM(NVL(ESI_CONT,0))> 0 THEN ROUND(SUM(NVL(PF_GROSS,0) + NVL(HRA,0) + 

NVL(LOWAGES,0) - NVL(STL_AMT,0)),2) ELSE 0 END ESI_GROSS, '|| CHR(10)
   ||'     NVL(LASTWORKINGDAY,NULL) LASTWORKINGDAY, SUM(W.HOLIDAYHOURS)/8 HOLIDAYDAYS,'|| 

CHR(10)
   ||'  C.COMPANYCODE,D.DIVISIONCODE,C.COMPANYNAME,C.COMPANYADDRESS,C.COMPANYADDRESS1, 

C.COMPANYADDRESS2,D.DIVISIONNAME '|| CHR(10)
   ||' FROM WPSWORKERMAST A , WPSWAGESDETAILS_MV W,COMPANYMAST C ,DIVISIONMASTER D ,'|| 

CHR(10)
   ||' (SELECT WORKERSERIAL,SUM(STLDAYS)STLDAYS,SUM(LEAVEDAYS) LEAVEDAYS'|| CHR(10)
   ||' FROM'|| CHR(10)
   ||' ('|| CHR(10)
   ||'  SELECT WORKERSERIAL, SUM(STLDAYS)STLDAYS, 0 AS LEAVEDAYS  '|| CHR(10)
   ||'  FROM WPSSTLENTRY'|| CHR(10)
   ||' WHERE COMPANYCODE ='''||P_COMPANYCODE||''' '|| CHR(10)
   ||'    AND   DIVISIONCODE =  '''||P_DIVISIONCODE||''''|| CHR(10)
   ||'    AND   YEARCODE = '''||P_YEARCODE||''''|| CHR(10)
   ||'    AND   STLFROMDATE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| CHR(10)
   ||'    AND   STLFROMDATE <=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10)
   ||' GROUP BY WORKERSERIAL'|| CHR(10)
   ||' UNION ALL'|| CHR(10)
   ||'  SELECT WORKERSERIAL, 0 AS STLDAYS, SUM(LEAVEDAYS) LEAVEDAYS '|| CHR(10)
   ||'  FROM WPSLEAVEAPPLICATION'|| CHR(10)
   ||' WHERE COMPANYCODE ='''||P_COMPANYCODE||''' '|| CHR(10)
   ||'   AND   DIVISIONCODE = '''||P_DIVISIONCODE||''''|| CHR(10)
   ||'   AND   YEARCODE = '''||P_YEARCODE||''''|| CHR(10)
   ||'    AND   LEAVEFROM >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'')'|| CHR(10)
   ||'  AND   LEAVETO <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10)
   ||'  AND  LEAVEDAYS > 0'|| CHR(10)
   ||'   AND LEAVESANCTIONEDON IS NOT NULL '|| CHR(10)
   ||'  GROUP BY WORKERSERIAL'|| CHR(10)
   ||'  )'|| CHR(10)
   ||'  GROUP BY WORKERSERIAL'|| CHR(10)
   ||'  )B,'|| CHR(10)
   ||'  ('|| CHR(10)
   ||'  SELECT X.WORKERSERIAL, COUNT(DISTINCT DATEOFATTENDANCE) DAYS, 

MAX(DATEOFATTENDANCE) LASTWORKINGDAY '|| CHR(10)
   ||'  FROM WPSATTENDANCEDAYWISE X'|| CHR(10)
   ||'  WHERE RTRIM(X.COMPANYCODE) ='''||P_COMPANYCODE||''' '|| CHR(10)
   ||'   AND RTRIM(X.DIVISIONCODE) = '''||P_DIVISIONCODE||''''|| CHR(10)
   ||'   AND X.YEARCODE = '''||P_YEARCODE||''''|| CHR(10)
   ||'     AND X.DATEOFATTENDANCE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| 

CHR(10)
   ||' AND X.DATEOFATTENDANCE <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10)
   ||'   AND 

(NVL(X.ATTENDANCEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+NVL(HOLIDAYHOURS,0)+NVL(LAYOFFHOURS,

0)+NVL(PFADJHOURS,0))  > 0'|| CHR(10)
   ||' GROUP BY WORKERSERIAL '|| CHR(10)
   ||'  ) X '|| CHR(10)
   ||'  WHERE RTRIM(A.COMPANYCODE) = '''||P_COMPANYCODE||''' '|| CHR(10)
   ||'  AND RTRIM(A.DIVISIONCODE) = '''||P_DIVISIONCODE||''''|| CHR(10)
   ||'    AND W.FORTNIGHTSTARTDATE >= TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| 

CHR(10)
   ||'  AND W.FORTNIGHTENDDATE <= TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'')'|| CHR(10)
   ||'  AND A.WORKERSERIAL = W.WORKERSERIAL(+)'|| CHR(10)
   ||'  AND A.WORKERSERIAL = X.WORKERSERIAL(+)'|| CHR(10)
   ||'  AND A.WORKERSERIAL = B.WORKERSERIAL(+)'|| CHR(10)
   ||'  AND (A.ESINO <> ''0'' OR NVL(A.ESINO,'''') <> '''' OR A.ESINO <> '''') '|| 

CHR(10)
   ||'  AND A.COMPANYCODE=C.COMPANYCODE '|| CHR(10)
   ||'      AND     A.COMPANYCODE=D.COMPANYCODE '|| CHR(10)
   ||'        AND     A.DIVISIONCODE=D.DIVISIONCODE '|| CHR(10);
      IF P_TOKENNO IS NOT NULL THEN
           LV_SQLSTR := LV_SQLSTR ||' AND W.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
    LV_SQLSTR := LV_SQLSTR ||' GROUP BY A.WORKERSERIAL,W.TOKENNO, A.ESINO, 

A.WORKERNAME,A.BLOCK_DATE,A.DATEOFRETIREMENT, '|| CHR(10)
   ||' X.DAYS, X.LASTWORKINGDAY, B.STLDAYS, B.LEAVEDAYS, C.COMPANYCODE,D.DIVISIONCODE,'|| 

CHR(10)
   ||' C.COMPANYNAME,C.COMPANYADDRESS,C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME 

'|| CHR(10)
  ||' ORDER BY TO_NUMBER(A.ESINO) '|| CHR(10);  
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSNSHOURS_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPSNSHOURS_UPDT ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2, P_STARTDATE VARCHAR2, 
                                                   P_ENDDATE VARCHAR2, P_MINIMUM_WORKHOURS NUMBER,P_WORKERSERIAL VARCHAR2 DEFAULT NULL, 
                                                   P_CATEGORYCODE VARCHAR2 DEFAULT NULL)
AS
lv_Start_DT     date := to_date(P_STARTDATE,'DD/MM/YYYY');
lv_End_DT       date := to_date(P_ENDDATE,'DD/MM/YYYY');
lv_ProcName     varchar2(30) := 'PROC_WPSNSHOURS_UPDT';
lv_Remarks      varchar2(100):= 'NIGHT SHIFT HOURS UPDATE';
lv_Sql          varchar2(2000) := '';
Begin

    lv_Sql := 'UPDATE WPSATTENDANCEDAYWISE SET NIGHTALLOWANCEHOURS = 0 '||CHR(10)
        ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||'   AND DATEOFATTENDANCE >= '''||lv_Start_DT||''' AND DATEOFATTENDANCE <= '''||lv_End_DT||''' '||chr(10)
        ||'   AND SHIFTCODE = ''3'' '||CHR(10)
        ||'   /*AND ATTENDANCETAG <> ''HAND WAGES'' */'||CHR(10);
    IF NVL(P_CATEGORYCODE,'SWT') <> 'SWT' THEN
        lv_Sql := lv_Sql || '    AND WORKERCATEGORYCODE = '''||P_CATEGORYCODE||''' '||CHR(10);
    END IF; 
    IF NVL(P_WORKERSERIAL,'SWT') <> 'SWT' THEN
        lv_Sql := lv_Sql || '    AND WORKERSERIAL = '''||P_WORKERSERIAL||''' '||CHR(10);
    END IF;            
    lv_Sql := lv_Sql ||'   AND NVL(NIGHTALLOWANCEHOURS,0) > ''0'' '||CHR(10);
    --dbms_output.put_line(lv_Sql);
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_Sql,'', lv_Start_DT, lv_End_DT, lv_Remarks);
    execute immediate lv_Sql;
        
    lv_Sql := 'UPDATE WPSATTENDANCEDAYWISE SET NIGHTALLOWANCEHOURS = 0.5 '||CHR(10)
        ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||'   AND DATEOFATTENDANCE >= '''||lv_Start_DT||''' AND DATEOFATTENDANCE <= '''||lv_End_DT||''' '||chr(10)
        ||'   AND SHIFTCODE = ''3'' '||CHR(10)
        ||'   /*AND ATTENDANCETAG <> ''HAND WAGES'' */'||CHR(10);
    IF NVL(P_CATEGORYCODE,'SWT') <> 'SWT' THEN
        lv_Sql := lv_Sql || '    AND WORKERCATEGORYCODE = '''||P_CATEGORYCODE||''' '||CHR(10);
    END IF; 
    IF NVL(P_WORKERSERIAL,'SWT') <> 'SWT' THEN
        lv_Sql := lv_Sql || '    AND WORKERSERIAL = '''||P_WORKERSERIAL||''' '||CHR(10);
    END IF;            
    lv_Sql := lv_Sql ||'   AND NVL(ATTENDANCEHOURS,0) >= '||P_MINIMUM_WORKHOURS||' '||CHR(10);
    --dbms_output.put_line(lv_Sql);
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_Sql,'', lv_Start_DT, lv_End_DT, lv_Remarks);
    execute immediate lv_Sql;
    commit;
End;
/


DROP PROCEDURE PROC_WPSOTHRCOMPONENTPAYMENT;

CREATE OR REPLACE PROCEDURE PROC_WPSOTHRCOMPONENTPAYMENT
(
    P_COMPCODE varchar2,
    P_DIVCODE varchar2,
    P_FNSTDT varchar2,
    P_FNENDT varchar2,
    P_TABLENAME varchar2,
    P_COMPONENT varchar2,
    P_WORKERSERIAL varchar2 DEFAULT NULL
   )
AS  
    lv_sql varchar2(10000);
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PROC_WPSOTHRCOMPONENTPAYMENT';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400);
BEGIN
        
        lv_parvalues:=P_COMPCODE||','|| P_DIVCODE||','|| P_FNSTDT||','|| P_FNENDT||','|| P_TABLENAME||','|| P_COMPONENT||','|| P_WORKERSERIAL;
        lv_Remarks := 'DELETE NPF ADJUSTEMNT DATA';
        lv_sql:='DELETE FROM '||P_TABLENAME ||' '|| chr(10)
            ||  'WHERE COMPANYCODE='''|| P_COMPCODE ||''' AND DIVISIONCODE='''|| P_DIVCODE||''' '|| chr(10)
            ||  'AND FORTNIGHTSTARTDATE=to_date('''|| P_FNSTDT ||''',''DD/MM/YYYY'') AND FORTNIGHTENDDATE=to_date('''||P_FNENDT||''',''DD/MM/YYYY'') '|| chr(10);
            
             --dbms_output.put_line(lv_sql);
            insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
            values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_Sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
            EXECUTE IMMEDIATE lv_Sql;  
            COMMIT;
                    
             
        lv_Remarks := 'INSERT NPF ADJUSTEMNT DATA';
        lv_sql:='';
             
        lv_sql:='INSERT INTO WPSOTHERCOMPONENTPAYMENT ' || chr(10)
                ||  'SELECT COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, ' || chr(10)
                ||  'WORKERCATEGORYCODE, SHIFTCODE, COMPONENTCODE, ATTENDANCEHOURS, OVERTIMEHOURS, COMPONENTAMOUNT, TRANSACTIONTYPE, USERNAME, LASTMODIFIED, SYSROWID FROM ' || chr(10)
                ||  '( ' || chr(10)
                ||  'SELECT A.COMPANYCODE,A.DIVISIONCODE,A.FORTNIGHTSTARTDATE,A.FORTNIGHTENDDATE,A.WORKERSERIAL,A.TOKENNO, ' || chr(10) 
                ||  'A.WORKERCATEGORYCODE,'''' SHIFTCODE,'''||P_COMPONENT ||''' COMPONENTCODE, ' || chr(10)
                ||  'SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(OVERTIMEHOURS) OVERTIMEHOURS, ' || chr(10)
                ||  'B.ADJUSTMENTTYPE,' || chr(10)
                ||  'CASE  ' || chr(10)
                ||    'WHEN B.ADJUSTMENTTYPE =''LUMPSUM''  ' || chr(10)
                ||        'THEN B.NPFAMOUNT ' || chr(10) 
                ||     'ELSE ' || chr(10) 
                ||     'CASE WHEN B.HOURTYPE = ''NORMAL'' THEN ROUND((NPFAMOUNT/B.WORKINGHOUR)*(SUM(ATTENDANCEHOURS)),2) ' || chr(10) 
                ||     'ELSE ROUND((NPFAMOUNT/B.WORKINGHOUR)*(SUM(ATTENDANCEHOURS)+SUM(OVERTIMEHOURS)),2) ' || chr(10) 
                ||     'END END COMPONENTAMOUNT,  ' || chr(10)
                ||  ''''' TRANSACTIONTYPE,''SWT'' USERNAME,SYSDATE LASTMODIFIED,SYS_GUID() SYSROWID ' || chr(10)   
                ||  'FROM WPSATTENDANCEDAYWISE A, ' || chr(10)
                ||  '(  ' || chr(10)
                ||  'SELECT X.COMPANYCODE,X.DIVISIONCODE,X.WORKERSERIAL,X.TOKENNO,X.ADJUSTMENTTYPE,X.HOURTYPE,X.WORKINGHOUR,X.NPFAMOUNT FROM WPSNPFADJUSTMENTPARAMETER X, ' || chr(10)
                ||  '( ' || chr(10)
                ||  'SELECT COMPANYCODE,DIVISIONCODE,WORKERSERIAL,MAX(EFFECTIVEDATE) EFFECTIVEDATE ' || chr(10) 
                ||      'FROM WPSNPFADJUSTMENTPARAMETER WHERE EFFECTIVEDATE<TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')    ' || chr(10)
                ||      'GROUP BY COMPANYCODE,DIVISIONCODE,WORKERSERIAL ' || chr(10)
                ||  ') Y ' || chr(10)
                ||  'WHERE X.COMPANYCODE =  Y.COMPANYCODE AND X.DIVISIONCODE = Y.DIVISIONCODE ' || chr(10)
                ||    'AND X.WORKERSERIAL = Y.WORKERSERIAL AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE ' || chr(10)
                ||  ') B ' || chr(10)
                ||  'WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' ' || chr(10)
                ||  'AND A.DATEOFATTENDANCE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') ' || chr(10)
                ||  'AND A.DATEOFATTENDANCE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') ' || chr(10)
                ||  'AND A.WORKERSERIAL = B.WORKERSERIAL ' || chr(10)
                ||  'GROUP BY A.COMPANYCODE,A.DIVISIONCODE,A.FORTNIGHTSTARTDATE,A.FORTNIGHTENDDATE,A.WORKERSERIAL,A.TOKENNO,A.WORKERCATEGORYCODE, ' || chr(10)
                ||  'B.ADJUSTMENTTYPE, B.HOURTYPE, B.NPFAMOUNT, B.WORKINGHOUR )' || chr(10);
               
  --dbms_output.put_line(lv_sql);
  
        insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
        values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_Sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
        EXECUTE IMMEDIATE lv_Sql;  
        COMMIT;
        
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_Sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    commit;
  
END;
/


DROP PROCEDURE PROC_WPSPAYMENTDETAILS;

CREATE OR REPLACE PROCEDURE "PROC_WPSPAYMENTDETAILS" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_RPTOPTION VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(30000);
BEGIN
    DELETE FROM GTT_WPSPAYMENTDETAILS;
    LV_SQLSTR :=    ' INSERT INTO GTT_WPSPAYMENTDETAILS '|| CHR(10)        
                  ||' SELECT B.WORKERCATEGORYCODE,B.UNITCODE,B.DEPARTMENTCODE MASTDEPARTMENT,A.DEPARTMENTCODE ACTUALDEPT,'||CHR(10)
                  ||'        A.TOKENNO,B.WORKERNAME, A.ACTUALPAYBLEAMOUNT,B.BANKACNO,C.BANKCODE,M.COMPANYNAME,     '||CHR(10)     
                  ||'       ''Run Date '' ||TO_CHAR(SYSDATE,''DD/MM/RRRR'') AS RUNDATE,'||CHR(10)
                  ||'       ''For the Period From '' ||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||'''  FROMTODATE'||CHR(10)
                  ||' FROM  WPSWAGESDETAILS_MV A, WPSWORKERMAST B,SALESBANKMASTER C,COMPANYMAST M'||CHR(10)
                  ||' WHERE A.COMPANYCODE='''||P_COMPANYCODE||'''   '||CHR(10) 
                  ||'   AND A.DIVISIONCODE='''||P_DIVISIONCODE||'''   '||CHR(10)   
                  ||'   AND A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)   
                  ||'   AND A.FORTNIGHTENDDATE=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10)   
                  ||'   AND A.COMPANYCODE=B.COMPANYCODE'||CHR(10)   
                  ||'   AND A.DIVISIONCODE=B.DIVISIONCODE'||CHR(10)   
                  ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)   
                  ||'   AND B.COMPANYCODE=C.COMPANYCODE(+)'||CHR(10)   
                  ||'   AND B.DIVISIONCODE=C.DIVISIONCODE(+)'||CHR(10)   
                  ||'   AND B.BANKCODE=C.BANKCODE(+)'||CHR(10)   
                  ||'   AND A.COMPANYCODE=M.COMPANYCODE  '||CHR(10) ;  
                  IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
                  END IF;      
                   IF P_RPTOPTION ='Banking' THEN
                      LV_SQLSTR := LV_SQLSTR ||'  AND B.BANKACNO IS NOT NULL  '||CHR(10);
                   ELSE
                      LV_SQLSTR := LV_SQLSTR ||'  AND B.BANKACNO IS NULL  '||CHR(10);
                  END IF;                           
                  LV_SQLSTR := LV_SQLSTR   ||'ORDER BY B.WORKERCATEGORYCODE , B.UNITCODE,B.DEPARTMENTCODE,B.WORKERNAME  '||CHR(10); 

   
                 
         
  --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSPFSTATEMENT;

CREATE OR REPLACE PROCEDURE "PROC_WPSPFSTATEMENT" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTORNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSPFSTATEMENT;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSPFSTATEMENT '|| CHR(10)
    ||' SELECT  DISTINCT A.TOKENNO,B.WORKERSERIAL,B.WORKERNAME,B.PFNO,  SUM(NVL(A.PF_GROSS,0)) PFGROSSWAGES,SUM(NVL(PENSION_GROSS,0)) PENSIONGROSS,  '|| CHR(10)
    ||'  SUM(NVL(A.PF_CONT,0)) PF,SUM(NVL(VPF,0)) VPF,SUM(NVL(FPF,0)) FPF,SUM(NVL(PF_COM,0)) PF_COM, (SUM(NVL(FPF,0)) + SUM(NVL(PF_COM,0))) TOTALEMPLOYERPF,ROUND(((CASE WHEN SUM(NVL(PF_GROSS,0))> 15000 THEN 15000 ELSE SUM(NVL(PF_GROSS,0)) END)*0.5)/100,0) DLI, '|| CHR(10)
    ||'    A.COMPANYCODE,C.COMPANYNAME,A.DIVISIONCODE,D.DIVISIONNAME,D.DIVISIONADDRESS,D.DIVISIONADDRESS1,D.DIVISIONADDRESS2,  '|| CHR(10)
    ||'   (CASE WHEN B.CONTRACTORNAME =''CHEVIOT COMPANY LIMITED'' THEN '''' ELSE B.CONTRACTORNAME END) CONTRACTORNAME ,'||CHR(10)
    ||'  NULL CONTRACTORACCNO,'||CHR(10)
    ||'''FORM ''|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''DD/MM/YYYY'')||'' To ''|| TO_CHAR(TO_DATE('''||P_TODATE||''',''DD/MM/YYYY''),''DD/MM/YYYY'')||'' RUN DATE ''||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE,'' FOR THE MONTH OF  ''|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''MONTH'')||'' ''|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''YYYY'')  FROMTODATE '|| CHR(10)
    ||'     ,SUM(NVL(LOAN_PFLN,0)) LOAN_PFLN,SUM(NVL(LINT_PFLN,0)) LINT_PFLN,26 - ROUND((SUM(NVL(ATTENDANCEHOURS,0))+SUM(NVL(STLHOURS,0)))/8) NCPDAYS,SUM(NVL(ESI_GROSS  ,0)) ESI_GROSS  '|| CHR(10)
    ||'     ,UANNO,PENSIONNO,SUM(NVL(GROSS_WAGES,0)) GROSS_WAGES, SUM(NVL(ATTENDANCEHOURS,0))/8 WORKINGDAYS  '|| CHR(10)
    ||'    FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B ,COMPANYMAST C,DIVISIONMASTER D  '|| CHR(10)
    ||'    WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'    AND   A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'    AND A.COMPANYCODE=B.COMPANYCODE  '|| CHR(10)
    ||'    AND A.DIVISIONCODE=B.DIVISIONCODE '|| CHR(10)
    ||'    AND A.WORKERSERIAL=B.WORKERSERIAL '|| CHR(10)
    ||'    AND A.COMPANYCODE=C.COMPANYCODE '|| CHR(10)
    ||'    AND A.COMPANYCODE=D.COMPANYCODE  '|| CHR(10)
    ||'    AND A.DIVISIONCODE=D.DIVISIONCODE '|| CHR(10)
    ||'    AND A.WORKERCATEGORYCODE <> ''RTD'' '|| CHR(10)
    ||'    AND A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'    AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10);
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
     END IF;
    LV_SQLSTR := LV_SQLSTR ||'    GROUP BY A.TOKENNO,B.WORKERSERIAL,B.WORKERNAME,B.PFNO, A.COMPANYCODE,C.COMPANYNAME,A.DIVISIONCODE,D.DIVISIONNAME,  '|| CHR(10)
    ||'            D.DIVISIONADDRESS,D.DIVISIONADDRESS1,D.DIVISIONADDRESS2,B.CONTRACTORNAME,UANNO,PENSIONNO   '|| CHR(10)
    ||'         ORDER BY A.TOKENNO,B.WORKERNAME,CONTRACTORNAME'||CHR(10);
               
    
DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSPFSUMMARY;

CREATE OR REPLACE PROCEDURE "PROC_WPSPFSUMMARY" 
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2,
    P_CONTRACTORNO VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSPFSUMMARY;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSPFSUMMARY '|| CHR(10)
    ||' SELECT  Z.CONTRACTORCODE,Z.CONTRACTORNAME, SUM(Z.NOOFMEMBERSOPN) NOOFMEMBERSOPN,SUM(Z.NEWMEMBER) NEWMEMBER,SUM(Z.LEFTSERVICE) LEFTSERVICE,  '|| CHR(10)
    ||' SUM(Z.NOOFMEMBERCLOSING) NOOFMEMBERCLOSING,SUM(Z.NOOFSUBSCRIBER) NOOFSUBSCRIBER,SUM(Z.PFWAGES) PFWAGES,SUM(Z.PENSIONWAGES) PENSIONWAGES, '|| CHR(10)
    ||' SUM(Z.PFVPFCONT) PFVPFCONT,SUM(Z.COMPPF) COMPPF,SUM(Z.AC1) AC1,ROUND(SUM(Z.AC2),2) AC2,SUM(Z.AC10) AC10,SUM(Z.AC21) AC21,SUM(Z.AC22) AC22,'|| CHR(10)
    ||' SUM(Z.AC1)+SUM(Z.AC2)+SUM(Z.AC10)+SUM(Z.AC21)+SUM(Z.AC22) ACTOTAL, '|| CHR(10)
    ||'    Z.COMPANYCODE,C.COMPANYNAME,Z.DIVISIONCODE,D.DIVISIONNAME,D.DIVISIONADDRESS,D.DIVISIONADDRESS1,D.DIVISIONADDRESS2,  '|| CHR(10)
    ||' ''RUN DATE '' ||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE, '|| CHR(10)
    ||' ''FOR THE MONTH OF ''||TO_CHAR(TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY''),''MONTH'')||'' ''|| TO_CHAR(TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY''),''YYYY'') FROMTODATE   '|| CHR(10)
    ||'  FROM  '|| CHR(10)
    ||' ( '|| CHR(10)
    ||' SELECT COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME,COUNT(*) NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING, '|| CHR(10)
    ||'        0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 FROM WPSWORKERMAST  '|| CHR(10)
    ||'        WHERE PFNO IS NOT NULL AND PFMEMBERSHIPDATE<=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'        GROUP BY COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME '|| CHR(10)
    ||' UNION ALL  '|| CHR(10)
    ||' SELECT COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME,0 NOOFMEMBERSOPN,COUNT(*) NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING, '|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 FROM WPSWORKERMAST  '|| CHR(10)
    ||' WHERE PFNO IS NOT NULL  '|| CHR(10)
    ||' AND PFMEMBERSHIPDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND PFMEMBERSHIPDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' GROUP BY COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME '|| CHR(10)
    ||' UNION ALL  '|| CHR(10)
    ||' SELECT COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,COUNT(*) LEFTSERVICE,0 NOOFMEMBERCLOSING, '|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 FROM WPSWORKERMAST  '|| CHR(10)
    ||' WHERE PFNO IS NOT NULL  '|| CHR(10)
    ||' AND (DATEOFRETIREMENT>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') OR DATEOFTERMINATION>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'')) '|| CHR(10)
    ||' AND (DATEOFRETIREMENT<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') OR DATEOFTERMINATION<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')) '|| CHR(10)
    ||' GROUP BY COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,COUNT(*) NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 FROM WPSWORKERMAST '|| CHR(10)
    ||' WHERE PFNO IS NOT NULL '|| CHR(10)
    ||' AND PFMEMBERSHIPDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' GROUP BY COMPANYCODE,DIVISIONCODE,CONTRACTORCODE,CONTRACTORNAME'|| CHR(10)
    ||'  UNION ALL'|| CHR(10)
    ||' SELECT  A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' COUNT(*) NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||' WHERE A.PF_CONT >0'|| CHR(10)
    ||' AND   A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND   A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' AND B.PFNO IS NOT NULL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,SUM(NVL(PF_GROSS,0)) PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||' WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,SUM(NVL(PENSION_GROSS,0)) PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||' WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,(SUM(NVL(PF_CONT,0))+SUM(NVL(VPF,0))) PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||'  WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,SUM(NVL(PF_COM,0)) COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||'  WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,(SUM(NVL(PF_CONT,0))+SUM(NVL(VPF,0))+SUM(NVL(PF_COM,0))) AC1,0 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||'  WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,(SUM(NVL(PF_GROSS,0))*0.85)/100 AC2,0 AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||' WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,SUM(NVL(FPF,0)) AC10,0 AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||' WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||' SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||' 0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,SUM(ROUND(((CASE WHEN NVL(PF_GROSS,0)> 15000 THEN 15000 ELSE NVL(PF_GROSS,0) END) *0.5)/100,0))  AC21,0 AC22 '|| CHR(10)
    ||' FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||'  WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||' AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'')'|| CHR(10)
    ||' AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||' AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||' AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' UNION ALL'|| CHR(10)
    ||'   SELECT A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME CONTRACTORNAME,0 NOOFMEMBERSOPN,0 NEWMEMBER,0 LEFTSERVICE,0 NOOFMEMBERCLOSING,'|| CHR(10)
    ||'   0 NOOFSUBSCRIBER,0 PFWAGES,0 PENSIONWAGES,0 PFVPFCONT,0 COMPPF,0 AC1,0 AC2,0 AC10,0 AC21,SUM(((CASE WHEN NVL(PF_GROSS,0)> 15000 THEN 15000 ELSE NVL(PF_GROSS,0) END)*0.01)/100) AC22 '|| CHR(10)
    ||'   FROM WPSWAGESDETAILS_MV A,WPSWORKERMAST B'|| CHR(10)
    ||'   WHERE A.FORTNIGHTSTARTDATE>=TO_DATE(''' || P_FROMDATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'    AND A.FORTNIGHTENDDATE<=TO_DATE(''' || P_TODATE || ''',''DD/MM/YYYY'') '|| CHR(10)
    ||'   AND A.COMPANYCODE=B.COMPANYCODE'|| CHR(10)
    ||'   AND A.DIVISIONCODE=B.DIVISIONCODE'|| CHR(10)
    ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'|| CHR(10)
    ||' GROUP BY A.COMPANYCODE,A.DIVISIONCODE,B.CONTRACTORCODE,B.CONTRACTORNAME'|| CHR(10)
    ||' ) Z,COMPANYMAST C,DIVISIONMASTER D'|| CHR(10)
    ||' WHERE Z.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    ||' AND Z.COMPANYCODE=D.COMPANYCODE'|| CHR(10)
    ||' AND Z.DIVISIONCODE=D.DIVISIONCODE '|| CHR(10)
    ||'  AND Z.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'  AND   Z.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10);
    IF P_CONTRACTORNO IS NOT NULL THEN  
                LV_SQLSTR := LV_SQLSTR ||' AND Z.CONTRACTORCODE IN ( '||P_CONTRACTORNO||')  '||CHR(10);
        END IF;
     LV_SQLSTR := LV_SQLSTR ||' GROUP BY Z.COMPANYCODE,Z.DIVISIONCODE,Z.CONTRACTORCODE,Z.CONTRACTORNAME,'||CHR(10)
    ||' C.COMPANYNAME, D.DIVISIONNAME,D.DIVISIONADDRESS, D.DIVISIONADDRESS1,D.DIVISIONADDRESS2'||CHR(10)
    ||' ORDER BY Z.CONTRACTORCODE'||CHR(10);
           
    
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSPTAXSUMMARY;

CREATE OR REPLACE PROCEDURE "PROC_WPSPTAXSUMMARY" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_yearmonth varchar2
)
as 
    lv_sqlstr           varchar2(4000);
    lv_yearmonth        varchar2(6);
    lv_FNSdate          varchar2(10);                
    lv_FNEdate          varchar2(10);
begin

    
    SELECT MIN(TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR')) 
      INTO lv_FNSdate
      FROM WPSWAGEDPERIODDECLARATION
     WHERE YEARMONTH=p_yearmonth;  
     
     SELECT MAX(TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/RRRR')) 
      INTO lv_FNEdate
      FROM WPSWAGEDPERIODDECLARATION
     WHERE YEARMONTH=p_yearmonth;

    delete from GTT_WPSPTAXSUMMARY;
    lv_sqlstr :=   'insert into GTT_WPSPTAXSUMMARY '|| chr(10)
    || 'SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX, NOOFHEAD, PTAXAMOUNT, COMPANYNAME, DIVISIONNAME,  '|| chr(10)
    || ' PRINTDATE, ROWNUM EX1, EX2, EX3, EX4, EX5  '|| chr(10)
    || 'FROM(  '|| chr(10)
    || 'SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX, COUNT(WORKERSERIAL) NOOFHEAD, PTAX * COUNT(WORKERSERIAL) PTAXAMOUNT,   '|| chr(10)
    || '       C.COMPANYNAME, D.DIVISIONNAME, TO_CHAR(TO_DATE('''||p_yearmonth||''',''YYYYMM''),''MON-YYYY'') PRINTDATE,  '|| chr(10)
    || '       NULL EX1, SUM(NVL(PTAX_GROSS,0)) EX2, NULL EX3, NULL EX4, NULL EX5 '|| chr(10)
    || 'FROM (  '|| chr(10)
    || 'SELECT A.WORKERSERIAL, NVL(A.PTAX_GROSS,0) PTAX_GROSS, NVL(A.PTAX,0) PTAX,  '|| chr(10)
    || '       B.STATENAME, B.SLABAMOUNTFROM, B.SLABAMOUNTTO  '|| chr(10)
    || 'FROM (  '|| chr(10)
    || '    SELECT WORKERSERIAL, SUM(NVL(A.GROSS_PTAX,0)) PTAX_GROSS,  '|| chr(10)
    || '          SUM(NVL(A.P_TAX,0)) PTAX  '|| chr(10)
    || '    FROM WPSWAGESDETAILS_MV A  '|| chr(10)
    || '    WHERE A.COMPANYCODE ='''||p_companycode||'''  '|| chr(10)
    || '      AND A.DIVISIONCODE ='''||p_divisioncode||''' '|| chr(10)
    || '       AND A.FORTNIGHTSTARTDATE>=TO_DATE(''' || lv_FNSdate || ''',''DD/MM/YYYY'')  '|| chr(10)
    || '       AND A.FORTNIGHTSTARTDATE<=TO_DATE(''' || lv_FNEdate || ''',''DD/MM/YYYY'')  '|| chr(10)
    || '      GROUP BY A.WORKERSERIAL  '|| chr(10)
    || '    ) A,WPSWORKERMAST C,  '|| chr(10)
    || '    (   '|| chr(10)
    || '    SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAXAMOUNT   '|| chr(10)
    || '    FROM PTAXSLAB   '|| chr(10)
    || '    WHERE STATENAME||WITHEFFECTFROM = ( SELECT MAX(STATENAME||WITHEFFECTFROM)   '|| chr(10)
    || '                                        FROM PTAXSLAB    '|| chr(10)
    || '                                        WHERE TO_CHAR(WITHEFFECTFROM,''YYYYMM'') <= '''||p_yearmonth||'''   '|| chr(10)
    || '                                      )  '|| chr(10)
    || '    ) B           '|| chr(10)
    || '     WHERE  NVL(A.PTAX,0) =  B.PTAXAMOUNT (+)     '|| chr(10)
    || '     AND A.WORKERSERIAL = C.WORKERSERIAL  '|| chr(10)
    || ')A, COMPANYMAST C, DIVISIONMASTER D   '|| chr(10)
    || 'WHERE C.COMPANYCODE='''||p_companycode||'''  '|| chr(10)
    || '  AND D.COMPANYCODE ='''||p_companycode||''' '|| chr(10)
    || '  AND D.DIVISIONCODE ='''||p_divisioncode||''' '|| chr(10)
    || 'GROUP BY COMPANYNAME, D.DIVISIONNAME,STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX   '|| chr(10)
    || ')ORDER BY STATENAME, PTAX  '|| chr(10) ;
--                || 'SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX, NOOFHEAD, PTAXAMOUNT, COMPANYNAME, DIVISIONNAME, PRINTDATE, ROWNUM EX1, EX2, EX3, EX4, EX5 '|| chr(10)
--                || 'FROM ( '|| chr(10)
--                || 'SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX, COUNT(TOKENNO) NOOFHEAD, PTAX * COUNT(TOKENNO) PTAXAMOUNT, '|| chr(10)
--                || '       C.COMPANYNAME, D.DIVISIONNAME, TO_CHAR(TO_DATE('''||p_yearmonth||''',''YYYYMM''),''MON-YYYY'') PRINTDATE, NULL EX1, SUM(NVL(PTAX_GROSS,0)) EX2, NULL EX3, NULL EX4, NULL EX5 '|| chr(10)
--                || 'FROM (  '|| chr(10)
--                || '        SELECT A.TOKENNO, C.WORKERNAME EMPLOYEENAME, NVL(A.GROSS_PTAX,0) PTAX_GROSS, NVL(A.P_TAX,0) PTAX, B.STATENAME, B.SLABAMOUNTFROM, B.SLABAMOUNTTO '|| chr(10)
--                || '        FROM WPSWAGESDETAILS_MV A, WPSWORKERMAST C,  '|| chr(10)
--                || '        ( '|| chr(10)
--                || '            SELECT STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAXAMOUNT  '|| chr(10)
--                || '            FROM PTAXSLAB  '|| chr(10)
--                || '            WHERE STATENAME||WITHEFFECTFROM = ( SELECT MAX(STATENAME||WITHEFFECTFROM)  '|| chr(10)
--                || '                                                FROM PTAXSLAB  '|| chr(10)
--                || '                                                WHERE TO_CHAR(WITHEFFECTFROM,''YYYYMM'') <= '''||p_yearmonth||''' '|| chr(10)
--                || '                                              ) '|| chr(10)
--                || '        ) B                                            '|| chr(10)
--                || '        WHERE A.COMPANYCODE = '''||p_companycode||''' '|| chr(10)
--                || '          AND A.DIVISIONCODE = '''||p_divisioncode||''' '|| chr(10)
--                --|| '          AND A.EFFECT_YEARMONTH='''||p_yearmonth||''' '|| chr(10)
--                --|| '          AND TRANSACTIONTYPE IN (''SALARY'',''SALARY ARREAR'',''FINAL SETTLEMENT'') '|| chr(10)
--                ||'           AND A.FORTNIGHTSTARTDATE>=TO_DATE(''' || lv_FNSdate || ''',''DD/MM/YYYY'') '|| CHR(10)
--                ||'           AND A.FORTNIGHTSTARTDATE<=TO_DATE(''' || lv_FNSdate || ''',''DD/MM/YYYY'') '|| CHR(10)
--                || '          AND NVL(A.P_TAX,0) =  B.PTAXAMOUNT (+) '|| chr(10)
--                || '          AND A.WORKERSERIAL = C.WORKERSERIAL '|| chr(10)
--                || '    ) A, COMPANYMAST C, DIVISIONMASTER D '|| chr(10)
--                || 'WHERE C.COMPANYCODE='''||p_companycode||''' '|| chr(10)
--                || '  AND D.COMPANYCODE='''||p_companycode||''' '|| chr(10)
--                || '  AND D.DIVISIONCODE='''||p_divisioncode||''' '|| chr(10)
--                || 'GROUP BY  STATENAME, SLABAMOUNTFROM, SLABAMOUNTTO, PTAX, C.COMPANYNAME, D.DIVISIONNAME '|| chr(10)
--                || 'ORDER BY STATENAME, PTAX) '|| chr(10);
                
   --DBMS_OUTPUT.PUT_LINE(lv_sqlstr);
   execute immediate lv_sqlstr;
end;
/


DROP PROCEDURE PROC_WPSQUALITYRATEONREEDSPACE;

CREATE OR REPLACE PROCEDURE "PROC_WPSQUALITYRATEONREEDSPACE" (P_COMPCODE Varchar2, 
                                                                          P_DIVCODE Varchar2, 
                                                                          P_EFFECTIVEDATE Varchar2, 
                                                                          P_PRODUCTIONTYPE Varchar2,
                                                                          p_UNITQUANTITY Varchar2,
                                                                          p_PERCENTAGEOFRATE Varchar2,
                                                                          P_OPERATIONMODE Varchar2,
                                                                          P_USERNAME Varchar2,
                                                                          P_MODEOFEXECUTION Varchar2
                                                                          )
as
lv_Sql       varchar2(32767) := '';
lv_Pivot varchar2(1000) := '';
lv_ColumnName varchar2(1000) := '';
lv_sqlerrm varchar2(5000) := '';
lv_temp_table varchar2(30) := '';
LV_EFFECTIVEDATE varchar2(30) := '';

begin

    IF P_MODEOFEXECUTION = 'SELECT' THEN 


         IF  P_PRODUCTIONTYPE IN ('P0001','P0002') THEN
            SELECT LISTAGG_SWT1(ROWNUM||';'||REEDSPACE || ' AS RS' || REEDSPACEDESC ||',') INTO lv_Pivot  FROM 
              (
                  SELECT DISTINCT  REEDSPACE, REEDSPACEDESC FROM WPSREEDSPACEMAST 
                  WHERE COMPANYCODE = P_COMPCODE
                  AND DIVISIONCODE = P_DIVCODE
                  AND ACTIVE = 'Y'
                  ORDER BY REEDSPACE
              );
                 
                  
              SELECT LISTAGG_SWT1(ROWNUM||';'||'RS' || REEDSPACEDESC ||',') INTO lv_ColumnName  FROM 
              (
                  SELECT DISTINCT  REEDSPACE, REEDSPACEDESC FROM WPSREEDSPACEMAST 
                  WHERE COMPANYCODE = P_COMPCODE
                  AND DIVISIONCODE = P_DIVCODE
                  AND ACTIVE = 'Y'
                  ORDER BY REEDSPACE
              );
        ELSE
                lv_Pivot := '0 as RATE';
                lv_ColumnName := 'RATE';  
        END IF;
        
        
        -- dbms_output.put_line('lv_Pivot ' || lv_Pivot);
       --  dbms_output.put_line('lv_ColumnName ' || lv_ColumnName);
        
        lv_Sql := 'DROP TABLE TMP_WPSQUALITYRATEONREEDSPACE';
        BEGIN 
            EXECUTE IMMEDIATE lv_sql;
        EXCEPTION WHEN OTHERS THEN NULL;
        END;
        
        

        SELECT TO_CHAR(MAX(EFFECTIVEDATE),'DD/MM/YYYY') INTO LV_EFFECTIVEDATE FROM WPSQUALITYRATE_ON_REEDSPACE
        WHERE COMPANYCODE = P_COMPCODE
        AND DIVISIONCODE = P_DIVCODE
        AND PRODUCTIONTYPE = P_PRODUCTIONTYPE;

        
        
        lv_Sql := 'CREATE  TABLE   TMP_WPSQUALITYRATEONREEDSPACE '|| CHR(10)
                 ||'AS '||CHR(10)
                 ||' SELECT  QUALITYCODE, QUALITYNAME,'|| CHR(10) 
                 || lv_ColumnName || ','  || CHR(10) 
                 ||' COMPANYCODE,DIVISIONCODE, EFFECTIVEDATE, PRODUCTIONTYPE, '  || CHR(10)
                 ||' ''' || P_USERNAME || '''USERNAME,''' || P_OPERATIONMODE || ''' OPERATIONMODE, '|| CHR(10)
                 ||' ''' || p_UNITQUANTITY || '''UNITQUANTITY,''' || p_PERCENTAGEOFRATE || ''' PERCENTAGEOFRATE '|| CHR(10)
                 ||'  FROM   (    '||CHR(10)
                 ||'    SELECT DISTINCT M.QUALITYCODE, M.QUALITYNAME, W.REEDSPACE, W.QUALITYRATE,'|| CHR(10) 
                 ||'      M.COMPANYCODE,M.DIVISIONCODE, ''' || P_EFFECTIVEDATE || ''' EFFECTIVEDATE, M.PRODUCTIONTYPE,W.UNITQUANTITY, W.PERCENTAGEOFRATE '|| CHR(10)
                 ||'          FROM  WPSQUALITYRATE_ON_REEDSPACE W, WPSQUALITYMASTER M   '|| CHR(10)
                 ||'           WHERE W.COMPANYCODE(+) = M.COMPANYCODE  '|| CHR(10)
                 ||'           AND W.DIVISIONCODE(+) = M.DIVISIONCODE '|| CHR(10)
                 ||'           AND W.PRODUCTIONTYPE(+) = M.PRODUCTIONTYPE '|| CHR(10)
                 ||'           AND W.QUALITYCODE(+) = M.QUALITYCODE '|| CHR(10)
                 ||'           AND M.COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
                 ||'           AND M.DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
                 ||'           AND W.EFFECTIVEDATE(+) = TO_DATE('''||LV_EFFECTIVEDATE||''',''DD/MM/YYYY'')  '|| CHR(10)
                 ||'           AND M.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''   '|| CHR(10)     
                 ||'  ) '||CHR(10)
                 ||'    PIVOT '||CHR(10)
                 ||'    ( MAX(QUALITYRATE) FOR '||CHR(10)
                 ||'       REEDSPACE IN ('||lv_Pivot||')   '|| CHR(10)
                 ||'    ) ';
        
         --   dbms_output.put_line(lv_Sql);
         execute immediate lv_Sql;            
         
        lv_temp_table :=   'TMP_WPSQUALITYRATEONREEDSPACE';
        
        lv_Sql := 'create or replace force view vw_auto_dynamicgrid_rs'|| chr(10);
        lv_Sql := lv_Sql || '('|| chr(10);
        lv_Sql := lv_Sql || '   companycode,'|| chr(10);
        lv_Sql := lv_Sql || '   column_name,'|| chr(10);
        lv_Sql := lv_Sql || '   column_header,'|| chr(10);
        lv_Sql := lv_Sql || '   column_length,'|| chr(10);
        lv_Sql := lv_Sql || '   column_data,'|| chr(10);
        lv_Sql := lv_Sql || '   qry_header'|| chr(10);
        lv_Sql := lv_Sql || ')'|| chr(10);
        lv_Sql := lv_Sql || 'as'|| chr(10);
        lv_Sql := lv_Sql || 'select  '''||P_COMPCODE||''' companycode,'|| chr(10);
        lv_Sql := lv_Sql || '    ( '|| chr(10);
        lv_Sql := lv_Sql || '     select rtrim(xmlagg(xmlelement(e, x.column_name || '','')order by x.serialno).extract (''//text()''),'','') column_name '|| chr(10);
        lv_Sql := lv_Sql || '       from (select ''^'' ||cname||''^'' column_name, colno serialno from col '|| chr(10);
        lv_Sql := lv_Sql || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
        lv_Sql := lv_Sql || '              order by colno) x ) column_name, '|| chr(10);
        lv_Sql := lv_Sql || '    ( '|| chr(10);
        lv_Sql := lv_Sql || '     select rtrim(xmlagg(xmlelement(e, x.column_header || '','')order by x.serialno).extract (''//text()''),'','') column_header '|| chr(10);
        lv_Sql := lv_Sql || '       from (select UPPER(cname) column_header, colno serialno from col '|| chr(10);
        lv_Sql := lv_Sql || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
        lv_Sql := lv_Sql || '              order by colno) x) column_header, '|| chr(10);
        lv_Sql := lv_Sql || '    ( '|| chr(10);
        lv_Sql := lv_Sql || '     select rtrim(xmlagg(xmlelement(e, x.column_length || '','')order by x.serialno).extract (''//text()''),'','') column_length '|| chr(10);
        lv_Sql := lv_Sql || '       from ( '|| chr(10);
        lv_Sql := lv_Sql || '       select case when upper(cname) in (''COMPANYCODE'',''DIVISIONCODE'', ''EFFECTIVEDATE'', ''PRODUCTIONTYPE'',''UNITQUANTITY'', ''PERCENTAGEOFRATE'',''FIXEDVALUE'', ''FROMVALUE'',''TOVALUE'',''USERNAME'',''OPERATIONMODE'', ''SYSROWID'', ''UNITQUANTITY'', ''PERCENTAGEOFRATE'' ) then 1 '|| chr(10); 
        lv_Sql := lv_Sql || '                    WHEN UPPER(CNAME) = ''QUALITYCODE'' THEN 95 '|| chr(10);
        lv_Sql := lv_Sql || '                    WHEN UPPER(CNAME) = ''QUALITYNAME'' THEN 200  '|| chr(10);
        lv_Sql := lv_Sql || '                    else '|| chr(10);
        lv_Sql := lv_Sql || '                    80  end column_length, colno serialno from col '|| chr(10); 
        lv_Sql := lv_Sql || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
        lv_Sql := lv_Sql || '              order by colno '|| chr(10);
        lv_Sql := lv_Sql || '              ) x) column_length, '|| chr(10);
        lv_Sql := lv_Sql || '    ''[''||( '|| chr(10);
        lv_Sql := lv_Sql || '     select rtrim(xmlagg(xmlelement(e, x.column_data || '','')order by x.serialno).extract (''//text()''),'','') column_data '|| chr(10);
        lv_Sql := lv_Sql || '       from (select trim(''{ data: ^''||cname|| ''^, type: $''|| '|| chr(10);
        lv_Sql := lv_Sql || '                         decode(coltype,''VARCHAR2'',''text'',''NUMBER'',''numeric$,format:$0.00000'',''text'')|| ''$''|| '|| chr(10);
        lv_Sql := lv_Sql || '                         case when upper(cname) in (''COMPANYCODE'',''DIVISIONCODE'', ''EFFECTIVEDATE'', ''PRODUCTIONTYPE'',''UNITQUANTITY'', ''PERCENTAGEOFRATE'',''FIXEDVALUE'', ''FROMVALUE'',''TOVALUE'',''USERNAME'',''OPERATIONMODE'', ''SYSROWID'', ''QUALITYCODE'', ''QUALITYNAME'') then '', readOnly: true, nedit'' '|| chr(10); 
        lv_Sql := lv_Sql || '                               else '', readOnly: false'' end || '|| chr(10);
        lv_Sql := lv_Sql || '                         '' }'') column_data, colno serialno from col '|| chr(10);
        lv_Sql := lv_Sql || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
        lv_Sql := lv_Sql || '              order by colno) x)||'']'' column_data, '|| chr(10);
        lv_Sql := lv_Sql || '    ( '|| chr(10);
        lv_Sql := lv_Sql || '     select rtrim(xmlagg(xmlelement(e, x.qry_header || '','')order by x.serialno).extract (''//text()''),'','') qry_header '|| chr(10);
        lv_Sql := lv_Sql || '       from (select case when coltype=''DATE'' then ''TO_CHAR(''||cname||'',$DD/MM/YYYY$) ''||cname else cname end qry_header, colno serialno from col '|| chr(10);
        lv_Sql := lv_Sql || '                  where tname = '''||lv_temp_table||''' '|| chr(10);
        lv_Sql := lv_Sql || '              order by colno) x) qry_header '|| chr(10);
        lv_Sql := lv_Sql || '            from dual ';
        
       -- dbms_output.put_line(lv_Sql);
        execute immediate lv_Sql;    

    ELSIF P_MODEOFEXECUTION = 'INSERT' THEN
    
            
        lv_Sql := 'DELETE FROM WPSQUALITYRATE_ON_REEDSPACE '|| CHR(10)
        || 'WHERE COMPANYCODE = '''||P_COMPCODE||'''   '|| CHR(10)
        || 'AND DIVISIONCODE = '''||P_DIVCODE||'''   '|| CHR(10)
        || 'AND EFFECTIVEDATE = TO_DATE('''||P_EFFECTIVEDATE||''',''DD/MM/YYYY'')  '|| CHR(10)
        || 'AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''   ';
        
       --- dbms_output.put_line(lv_Sql);
       execute immediate lv_Sql;
    
         IF  P_PRODUCTIONTYPE IN ('P0001','P0002') THEN
             SELECT LISTAGG_SWT1(ROWNUM||';'|| 'RS' || REEDSPACEDESC || ' AS ' || REEDSPACE ||',') INTO lv_Pivot  FROM 
              (
                  SELECT DISTINCT  REEDSPACE, REEDSPACEDESC FROM WPSREEDSPACEMAST 
                  WHERE COMPANYCODE = P_COMPCODE
                  AND DIVISIONCODE = P_DIVCODE
                  AND ACTIVE = 'Y'
                  ORDER BY REEDSPACE
              );
        
        ELSE
           lv_Pivot := 'RATE AS 0';         
        END IF;
        
--         dbms_output.put_line(lv_Pivot);
    
        lv_Sql := 'INSERT INTO WPSQUALITYRATE_ON_REEDSPACE(  '|| CHR(10)
                || 'COMPANYCODE, DIVISIONCODE, EFFECTIVEDATE, PRODUCTIONTYPE, QUALITYCODE, UNITQUANTITY, PERCENTAGEOFRATE,  '|| CHR(10)
                || 'REEDSPACE, QUALITYRATE, FIXEDVALUE, FROMVALUE, TOVALUE, USERNAME, LASTMODIFIED, SYSROWID) '|| CHR(10)
                || 'SELECT COMPANYCODE, DIVISIONCODE, TO_DATE(EFFECTIVEDATE,''DD/MM/YYYY''), PRODUCTIONTYPE, QUALITYCODE, UNITQUANTITY, PERCENTAGEOFRATE, '|| CHR(10)
                || 'REEDSPACE, QUALITYRATE, '''' FIXEDVALUE, '''' FROMVALUE, '''' TOVALUE,  ''' || P_USERNAME || '''USERNAME, SYSDATE LASTMODIFIED, '|| CHR(10)
                || 'SYS_GUID() SYSROWID '|| CHR(10)
                || 'FROM TMP_WPSQUALITYRATEONREEDSPACE '|| CHR(10)
                || 'UNPIVOT (QUALITYRATE FOR REEDSPACE IN ('||lv_Pivot||'))';
                
         --dbms_output.put_line(lv_Sql);    
         execute immediate lv_Sql;       
         
         UPDATE HN_WPS_PRODENTRYMASTER
         SET MAXQUALITYRATEEFFECTIVEDATE = TO_DATE(P_EFFECTIVEDATE,'DD/MM/YYYY')
         WHERE TAG = P_PRODUCTIONTYPE;
         
                

    END IF;
     
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    raise_application_error(-20101, lv_sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSSTLENTITLEMENT;

CREATE OR REPLACE PROCEDURE PROC_WPSSTLENTITLEMENT
(p_companycode  VARCHAR2, 
p_divisioncode  VARCHAR2,
p_dept          VARCHAR2,
p_token         VARCHAR2,
p_section       VARCHAR2,
p_year          VARCHAR2,
p_option        varchar2,
p_shift         VARCHAR2 default null
)
AS
lv_sqlstr VARCHAR2(4000);
lv_company varchar2(150);
lv_division varchar2(150);

begin
    SELECT COMPANYNAME into lv_company FROM COMPANYMAST WHERE COMPANYCODE=p_companycode;     
    SELECT DIVISIONNAME into lv_division FROM DIVISIONMASTER WHERE COMPANYCODE=p_companycode AND DIVISIONCODE=p_divisioncode;       

 DELETE FROM GTT_WPSSTLENTITLEMENT;   
 LV_SQLSTR:='INSERT INTO GTT_WPSSTLENTITLEMENT  
             (COMPANYCODE, DIVISIONCODE,COMPANYNAME,EX6, TOKENNO, WORKERNAME, DEPARTMENTCODE, EX1,SHIFTCODE, EX14, HOLIDAYHOURS, 
             STANDARDSTLHOURS, ADJUSTEDHOURS, STLDAYS_BF, STLDAYS, STLHRSTAKEN,   IS_RET_LEFT, CLOSING,EX5,EX7, ENTDAYS,EX8, EX13,EX12,EX15,EX9)   
           
            SELECT A.COMPANYCODE, A.DIVISIONCODE,'''||lv_company||''' AS COMPANYNAME,'''||lv_division||''' AS DIVISIONNAME, 
            TOKENNO, WORKERNAME, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE,  ATTNDAYS, HOLIDAYHOURS, STANDARDSTLHOURS, ADJUSTEDHOURS, 
            STLDAYS_BF, STLDAYSTAKEN, STLHRSTAKEN,STLDAYS_BF, STLDAYS_BF+ STLDAYS CLOSING,
            ''STATUTORY LEAVE ENTITLEMENT LIST FOR THE YEAR '','||p_year||' ||'' ('||p_option||')'' EX5,STLDAYS  EX7, 
            STLDAYS ENT,DEPARTMENTNAME,GRACEDAYS,
            CASE WHEN STLDAYS>0 THEN '' * ENT'' ELSE '' * NOT ENT'' END EX15 , '||p_year||' EX9      
             FROM 
            (   
                SELECT A.COMPANYCODE,A.DIVISIONCODE,A.TOKENNO,B.WORKERNAME,A.DEPARTMENTCODE,B.SECTIONCODE, A.YEARCODE,   
                    DECODE(B.SHIFT,''1'',''B'',''2'',''G'',''3'',''R'',''B'',''B'',''G'',''G'',''R'',''R'',''BLUE'',''B'',''GREEN'',''G'',''RED'',''R'') SHIFTCODE,A.ATTNDAYS,A.HOLIDAYHOURS,  
                    A.STANDARDSTLHOURS,A.ADJUSTEDHOURS,NVL(A.STLDAYS_BF,0) STLDAYS_BF,STLDAYSTAKEN,NVL(A.STLDAYS,0) STLDAYS,
                    nvl(TOTALWORKINGDAYS,0)TOTALWORKINGDAYS , A.STLHRSTAKEN,DEPARTMENTNAME , GRACEDAYS               
                    FROM WPSSTLENTITLEMENTCALCDETAILS A,WPSWORKERMAST B,DEPARTMENTMASTER C
                WHERE A.COMPANYCODE=B.COMPANYCODE  
                    AND A.DIVISIONCODE=B.DIVISIONCODE  
                    AND A.WORKERSERIAL=B.WORKERSERIAL
                    AND A.COMPANYCODE=C.COMPANYCODE  
                    AND A.DIVISIONCODE=C.DIVISIONCODE  
                    AND A.DEPARTMENTCODE=C.DEPARTMENTCODE                        
                    --AND A.YEARCODE IN ('||p_year||') 
                    AND A.COMPANYCODE='''||p_companycode||''' 
                    AND A.DIVISIONCODE='''||p_divisioncode||'''  ';
                    
         if p_token is not null then
            lv_sqlstr :=lv_sqlstr || ' AND A.TOKENNO in ('||p_token||')  ';
         end if;
         
         if p_section is not null then
            lv_sqlstr :=lv_sqlstr || ' AND B.SECTIONCODE in ('||p_section||')  ';
         end if;
         
         if p_dept is not null then
            lv_sqlstr :=lv_sqlstr || ' AND A.DEPARTMENTCODE in ('||p_dept||')  ';
         end if;
         
         if p_year is not null then
--            lv_sqlstr :=lv_sqlstr || ' AND A.YEARCODE in ('||p_year||')  ';
                lv_sqlstr :=lv_sqlstr || ' AND A.FROMYEAR in ('||p_year||')  ';
         end if;  
         
         
          if p_shift is not null then
--            lv_sqlstr :=lv_sqlstr || ' AND A.YEARCODE in ('||p_year||')  ';
                lv_sqlstr :=lv_sqlstr || ' AND DECODE(B.SHIFT,''B'',''1'',''G'',''2'',''R'',''3'',''B'',''B'',''G'',''G'',''R'',''R'') in ('||p_shift||') ';
         end if;                                     
                                    
         lv_sqlstr :=lv_sqlstr || '    ) A  WHERE 1=1 '   ;
                        
         if p_option ='Entitled' then
           lv_sqlstr :=lv_sqlstr || ' AND STLDAYS>0  ';
         end if;
         
         if p_option ='Not Entitled' then
           lv_sqlstr :=lv_sqlstr || ' AND STLDAYS=0    ';
         end if;                                     
        
        lv_sqlstr :=lv_sqlstr || ' order by DEPARTMENTCODE,DECODE(SHIFTCODE,''B'',''1'',''G'',''2'',''R'',''3'') ,TOKENNO ';

       --   dbms_output.put_line (lv_sqlstr);
         EXECUTE  IMMEDIATE lv_sqlstr;
                  
end ;
/


DROP PROCEDURE PROC_WPSVBPROCEES_WORKORDER;

CREATE OR REPLACE PROCEDURE "PROC_WPSVBPROCEES_WORKORDER" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2,
                                                  P_USERNAME Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL
                                                  )
AS
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := 'Occupation wise basic rate';
lv_SqlStr           varchar2(4000);
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500) := P_FNENDT||'-'||P_FNENDT;
lv_sqlerrm          varchar2(500) := '';
lv_WorkerSerial     varchar2(10) := '';
lv_TokenNo          varchar2(10) := '';
lv_AttnHrs          number := 0;
lv_OtHrs            number := 0;
lv_DueAttnHrs       number := 0;
lv_DueOTHrs         number := 0;
lv_AttnDate         date := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
BEGIN


    DELETE FROM WPSVBDETAILS WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
      AND FORTNIGHTSTARTDATE = TO_DATE(P_FNSTDT,'DD/MM/YYYY')
      AND FORTNIGHTENDDATE = TO_DATE(P_FNENDT,'DD/MM/YYYY');
    COMMIT;
 
            
            
lv_SqlStr := ' INSERT INTO WPSVBDETAILS (COMPANYCODE, DIVISIONCODE, PRODUCTIONDATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,  '||CHR(10) 
        ||' DEPARTMENTCODE, PRODUCTIONTYPE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKTYPECODE, OCCUPATIONCODE,  '||CHR(10) 
        ||' QUALITYCODE, MAINQUALITYCODE, QUALITYRATE, MACHINECODE, LOOMCODE, PRODUCTIONHOURS, PRODUCTION,  '||CHR(10) 
        ||' VBRATE,VBAMOUNT , LINENO, HELPERNO, SARDERNO, LINETAG, DEPTOCCPCODE,LASTMODIFIED) '||CHR(10) 
        
        ||' SELECT '''||P_COMPCODE||'''  COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, NULL PRODUCTIONDATE, TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  FORTNIGHTSTARTDATE,  '||CHR(10) 
        ||'         TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  FORTNIGHTENDDATE, NULL DEPARTMENTCODE, NULL PRODUCTIONTYPE, NULL SHIFTCODE,  '||CHR(10) 
        ||'         WORKERSERIAL, TOKENNO, NULL WORKTYPECODE, NULL OCCUPATIONCODE, NULL QUALITYCODE, NULL MAINQUALITYCODE,  '||CHR(10) 
        ||'         NULL QUALITYRATE, NULL MACHINECODE,  NULL  LOOMCODE, 0 PRODUCTIONHOURS,  NULL  PRODUCTION,  '||CHR(10) 
        ||'         0 VBRATE, SUM(VBAMOUNT) VBAMOUNT,  NULL  LINENO,  NULL  HELPERNO,  NULL  SARDERNO,  NULL  LINETAG,  NULL  DEPTOCCPCODE, SYSDATE LASTMODIFIED FROM  '||CHR(10) 
        ||' (  '||CHR(10) 
        ||' SELECT  FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, A.WORKERSERIAL,A.TOKENNO, /* A.WORKERTYPECODE,*/   '||CHR(10) 
        ||'         A.DEPARTMENTCODE,A.OCCUPATIONCODE,SUM(NVL(ATTENDANCEHOURS,0)) ATTENDANCEHOURS, '||CHR(10) 
        ||'         RATE VBRATE ,SUM(NVL(ATTENDANCEHOURS,0))* DECODE(NVL(C.FIXEDBASIC,0),0,NVL(RATE,0),NVL(C.FIXEDBASIC,0)) VBAMOUNT '||CHR(10)
        ||'         -- SHIFTCODE,SPELLTYPE,DATEOFATTENDANCE, WORKERCATEGORYCODE,  '||CHR(10) 
        ||' FROM WPSATTENDANCEDAYWISE A,WPSOCCUPATIONMAST B,WPSWORKERMAST C  '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  '||CHR(10)
        ||'   AND A.WORKERCATEGORYCODE IN (''PRM'',''SPL'',''CSL'') '||CHR(10)
        ||'   AND A.COMPANYCODE=B.COMPANYCODE  '||CHR(10) 
        ||'   AND A.DIVISIONCODE=B.DIVISIONCODE  '||CHR(10) 
        ||'   AND A.OCCUPATIONCODE=B.OCCUPATIONCODE  '||CHR(10) 
        ||'   AND A.DEPARTMENTCODE=B.DEPARTMENTCODE  '||CHR(10) 
        ||'   /* AND A.WORKERTYPECODE=B.WORKERTYPECODE */ '||CHR(10)
        
        ||'   AND A.COMPANYCODE=C.COMPANYCODE  '||CHR(10) 
        ||'   AND A.DIVISIONCODE=C.DIVISIONCODE  '||CHR(10)
        ||'   AND A.WORKERSERIAL=C.WORKERSERIAL  '||CHR(10) 
        --||'   --AND B.WORKERTYPECODE='''P''' '||CHR(10) 
        ||'   AND NVL(ATTENDANCEHOURS,0)>0  '||CHR(10) 
        --||'   --AND A.TOKENNO='SP7268'  '||CHR(10) 
        ||' GROUP BY A.WORKERSERIAL,A.TOKENNO,A.DEPARTMENTCODE,A.OCCUPATIONCODE,/*A.WORKERTYPECODE,*/  '||CHR(10) 
        ||'         --SHIFTCODE,SPELLTYPE,DATEOFATTENDANCE,WORKERCATEGORYCODE,  '||CHR(10) 
        ||'         A.FORTNIGHTSTARTDATE, A.FORTNIGHTENDDATE,RATE,NVL(C.FIXEDBASIC,0) '||CHR(10)  
        ||' HAVING SUM(NVL(ATTENDANCEHOURS,0))*NVL(RATE,0) >0  '||CHR(10) 
        ||' ) GROUP BY WORKERSERIAL, TOKENNO  '||CHR(10)  ;  
    --dbms_output.put_line (lv_SqlStr);
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSVBPROCEES_WORKORDER',lv_sqlerrm,SYSDATE,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
                              
    execute immediate lv_SqlStr;
    COMMIT;
    
    lv_SqlStr := ' INSERT INTO WPSVBDETAILS (COMPANYCODE, DIVISIONCODE, PRODUCTIONDATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,  '||CHR(10) 
        ||' DEPARTMENTCODE, PRODUCTIONTYPE, SHIFTCODE, WORKERSERIAL, TOKENNO, WORKTYPECODE, OCCUPATIONCODE,  '||CHR(10) 
        ||' QUALITYCODE, MAINQUALITYCODE, QUALITYRATE, MACHINECODE, LOOMCODE, PRODUCTIONHOURS, PRODUCTION,  '||CHR(10) 
        ||' VBRATE,ADDLBASIC , LINENO, HELPERNO, SARDERNO, LINETAG, DEPTOCCPCODE,LASTMODIFIED) '||CHR(10) 
        
        ||' SELECT '''||P_COMPCODE||'''  COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, NULL PRODUCTIONDATE, TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  FORTNIGHTSTARTDATE,  '||CHR(10) 
        ||'         TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  FORTNIGHTENDDATE, NULL DEPARTMENTCODE, NULL PRODUCTIONTYPE, NULL SHIFTCODE,  '||CHR(10) 
        ||'         WORKERSERIAL, TOKENNO, NULL WORKTYPECODE, NULL OCCUPATIONCODE, NULL QUALITYCODE, NULL MAINQUALITYCODE,  '||CHR(10) 
        ||'         NULL QUALITYRATE, NULL MACHINECODE,  NULL  LOOMCODE, 0 PRODUCTIONHOURS,  NULL  PRODUCTION,  '||CHR(10) 
        ||'         0 VBRATE, SUM(ADDLBASIC) ADDLBASIC,  NULL  LINENO,  NULL  HELPERNO,  NULL  SARDERNO,  NULL  LINETAG,  NULL  DEPTOCCPCODE, SYSDATE LASTMODIFIED FROM  '||CHR(10) 
        ||' (  '||CHR(10) 
        ||' SELECT  FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, A.WORKERSERIAL,A.TOKENNO, /* A.WORKERTYPECODE,*/   '||CHR(10) 
        ||'         A.DEPARTMENTCODE,A.OCCUPATIONCODE,SUM(NVL(ATTENDANCEHOURS,0)) ATTENDANCEHOURS, '||CHR(10) 
        ||'         NVL(ADDLBASIC_RATE,0.3195) ADDLBASIC_RATE ,SUM(NVL(ATTENDANCEHOURS,0))*  NVL(ADDLBASIC_RATE,0.3195) ADDLBASIC '||CHR(10)
        ||'         -- SHIFTCODE,SPELLTYPE,DATEOFATTENDANCE, WORKERCATEGORYCODE,  '||CHR(10) 
        ||' FROM WPSATTENDANCEDAYWISE A,WPSOCCUPATIONMAST B,WPSWORKERMAST C  '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  '||CHR(10)
        ||'   AND A.WORKERCATEGORYCODE IN (''PRM'',''SPL'',''CSL'') '||CHR(10)
        ||'   AND B.WORKERTYPECODE IN (''P'') '||CHR(10)
        ||'   AND A.COMPANYCODE=B.COMPANYCODE  '||CHR(10) 
        ||'   AND A.DIVISIONCODE=B.DIVISIONCODE  '||CHR(10) 
        ||'   AND A.OCCUPATIONCODE=B.OCCUPATIONCODE  '||CHR(10) 
        ||'   AND A.DEPARTMENTCODE=B.DEPARTMENTCODE  '||CHR(10) 
        --||'   AND A.WORKERTYPECODE=B.WORKERTYPECODE  '||CHR(10)
        ||'   AND A.COMPANYCODE=C.COMPANYCODE  '||CHR(10) 
        ||'   AND A.DIVISIONCODE=C.DIVISIONCODE  '||CHR(10)
        ||'   AND A.WORKERSERIAL=C.WORKERSERIAL  '||CHR(10) 
        --||'   --AND B.WORKERTYPECODE='''P''' '||CHR(10) 
        ||'   AND NVL(ATTENDANCEHOURS,0)>0  '||CHR(10) 
        --||'   --AND A.TOKENNO='SP7268'  '||CHR(10) 
        ||' GROUP BY A.WORKERSERIAL,A.TOKENNO,A.DEPARTMENTCODE,A.OCCUPATIONCODE,/*A.WORKERTYPECODE,*/  '||CHR(10) 
        ||'         --SHIFTCODE,SPELLTYPE,DATEOFATTENDANCE,WORKERCATEGORYCODE,  '||CHR(10) 
        ||'         A.FORTNIGHTSTARTDATE, A.FORTNIGHTENDDATE,RATE,NVL(ADDLBASIC_RATE,0.3195) '||CHR(10)  
        ||' HAVING SUM(NVL(ATTENDANCEHOURS,0))*NVL(ADDLBASIC_RATE,0.3195) >0  '||CHR(10) 
        ||' ) GROUP BY WORKERSERIAL, TOKENNO  '||CHR(10)  ; 
        
        --dbms_output.put_line (lv_SqlStr);
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSVBPROCEES_WORKORDER',lv_sqlerrm,SYSDATE,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_SqlStr;
    COMMIT;
    
    lv_SqlStr := ' INSERT INTO WPSVBDETAILS (COMPANYCODE, DIVISIONCODE,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,LASTMODIFIED,WORKERSERIAL,TOKENNO,HRS_RATE)  '||CHR(10)
        ||' SELECT DISTINCT '''||P_COMPCODE||'''  COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  FORTNIGHTSTARTDATE,TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  FORTNIGHTENDDATE, SYSDATE LASTMODIFIED,  '||CHR(10)  
        ||'        A.WORKERSERIAL,A.TOKENNO,NVL(A.INCREMENTAMOUNT,0)/208 + NVL(A.ADDLBASIC_RATE,0) +  '||CHR(10) 
        ||'        DECODE(B.WORKERTYPECODE,''P'',NVL(B.RATE,0),''T'',0)  '||CHR(10) 
        ||'        +NVL(A.DAILYBASICRATE,0)+NVL(A.DARATE,0)/208   HRS_RATE    '||CHR(10)   
        ||'   FROM WPSWORKERMAST A,WPSOCCUPATIONMAST B, ( (SELECT WORKERSERIAL '||CHR(10) 
        ||'                                            FROM WPSSTLENTRY '||CHR(10) 
        ||'                                           WHERE COMPANYCODE='''||P_COMPCODE||''' '||CHR(10) 
        ||'                                             AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10) 
        ||'                                             AND LEAVECODE = ''STL'' '||CHR(10)
        ||'                                             AND FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')    '||CHR(10)  
        ||'                                             AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                                             GROUP BY WORKERSERIAL  '||CHR(10) 
        ||'                                             HAVING SUM(NVL(STLHOURS,0))>0 '||CHR(10) 
        ||'                                          MINUS '||CHR(10) 
        ||'                                          SELECT WORKERSERIAL '||CHR(10) 
        ||'                                            FROM WPSATTENDANCEDAYWISE '||CHR(10) 
        ||'                                           WHERE COMPANYCODE='''||P_COMPCODE||''' '||CHR(10) 
        ||'                                             AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10) 
        ||'                                             AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)    
        ||'                                             AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                                             GROUP BY WORKERSERIAL  '||CHR(10) 
        ||'                                                HAVING SUM(NVL(ATTENDANCEHOURS,0))>0 '||CHR(10) 
        ||'                                          ) UNION ALL SELECT WORKERSERIAL '||CHR(10) 
        ||'                                            FROM WPSATTENDANCEDAYWISE '||CHR(10) 
        ||'                                           WHERE COMPANYCODE='''||P_COMPCODE||''' '||CHR(10) 
        ||'                                             AND DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10) 
        ||'                                             AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)    
        ||'                                             AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10) 
        ||'                                             GROUP BY WORKERSERIAL  '||CHR(10) 
        ||'                                             HAVING (SUM(NVL(ATTENDANCEHOURS,0))=0 AND ( SUM(NVL(FBKHOURS,0))>0 OR SUM(NVL(OVERTIMEHOURS,0))>0 OR SUM(NVL(HOLIDAYHOURS,0))>0 ) )'||CHR(10) 
        ||'                                          )C '||CHR(10) 
        ||'WHERE A.COMPANYCODE='''||P_COMPCODE||''' '||CHR(10) 
        ||'  AND A.DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10) 
        ||'  AND A.COMPANYCODE=B.COMPANYCODE '||CHR(10) 
        ||'  AND A.DIVISIONCODE=B.DIVISIONCODE  '||CHR(10) 
        ||'  AND A.DEPARTMENTCODE=B.DEPARTMENTCODE '||CHR(10) 
        ||'  AND A.OCCUPATIONCODE=B.OCCUPATIONCODE '||CHR(10) 
        ||'  AND A.WORKERSERIAL=C.WORKERSERIAL '||CHR(10) ;
    
    lv_remarks:='HRS_RATE CALULATION' ;   
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSVBPROCEES_WORKORDER',lv_sqlerrm,SYSDATE,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_SqlStr;
                
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSVBPROCEES_WORKORDER',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);


END ;
/


DROP PROCEDURE PROC_WPSWAGESDATASTRUCTURE;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESDATASTRUCTURE" 
(
    P_COMPANYCODE VARCHAR2,
    P_FROMDATE VARCHAR2,
    P_TODATE VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
     DELETE FROM GTT_WPSWAGESDATASTRUCTURE;
     LV_SQLSTR :=    'INSERT INTO GTT_WPSWAGESDATASTRUCTURE '|| CHR(10)  
     ||' SELECT Z.*, '|| CHR(10)
     ||''' FROM ''|| '''||P_FROMDATE||''' ||'' TO ''||''' || P_TODATE || ''' FROMTODATE,'|| CHR(10)
     ||'''RUN DATE '' ||TO_CHAR(TRUNC(SYSDATE),''DD/MM/RRRR'') RUNDATE ,C.COMPANYNAME  '|| CHR(10)
     ||' FROM '|| CHR(10)
     ||' (    '|| CHR(10)
      ||'   SELECT A.DEPARTMENTCODE DEPT_CODE,DECODE(A.SHIFTCODE,''1'',''A'',''2'',''B'',''3'',''C'',A.SHIFTCODE) SHIFT,'''' PAGE_NO,'''' PAGE_IND, '|| CHR(10)
     ||'      '''' STL_IND,A.TOKENNO LBNO,'''' BM_MCNO,'''' LOOM1,'''' LOOM2, '''' PRESS_NO, 0 BASIC_RT,SUM(NVL(A.ATTENDANCEHOURS,0)) ATTN_HRS, '|| CHR(10)
     ||'      SUM(NVL(A.FBKHOURS,0)) FAL_HRS,0 FEST_HRS,SUM(NVL(A.OVERTIMEHOURS,0)) OT_HRS,SUM(NVL(A.PF_ADJ,0)) PF_ADJ,'''' PF_IND,SUM(NVL(A.NPF_ADJ,0)) NPF_ADJ,'''' NPF_IND,  '|| CHR(10)
     ||'       0 OTHER_DED ,0 DA_ADJ,'''' DA_IND,  '|| CHR(10)
     ||'      0 QLT_CODE1,0 PROD1,0 QLT_CODE2,0 PROD2,0 QLT_CODE3,0 PROD3,0 QLT_CODE4,0 PROD4,0 QLT_CODE5,0 PROD5, '|| CHR(10)
     ||'   B.LOT LOT_NO,  '|| CHR(10)
     ||'    A.FORTNIGHTENDDATE   FE_DATE,'''' REC_DEPT,0 ADJHRS ,A.OCCUPATIONCODE  '|| CHR(10)
     ||'   FROM WPSATTENDANCEDAYWISE A,  '|| CHR(10)
     ||'   (SELECT DEPARTMENTCODE,SHIFTCODE,ROWNUM AS LOT FROM (SELECT DISTINCT A.DEPARTMENTCODE,A.SHIFTCODE FROM WPSATTENDANCEDAYWISE A  '|| CHR(10)
     ||'       GROUP BY A.DEPARTMENTCODE,A.SHIFTCODE  '|| CHR(10)
     ||'       ORDER BY A.DEPARTMENTCODE,A.SHIFTCODE)) B  '|| CHR(10)
     ||'   WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '|| CHR(10)
     ||'     AND A.DATEOFATTENDANCE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| CHR(10)
     ||'     AND A.DATEOFATTENDANCE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '|| CHR(10)
     ||' AND A.DEPARTMENTCODE=B.DEPARTMENTCODE  '|| CHR(10)
     ||' AND A.SHIFTCODE=B.SHIFTCODE  '|| CHR(10)
     ||' GROUP BY A.DEPARTMENTCODE,A.SHIFTCODE,A.TOKENNO,A.FORTNIGHTENDDATE,B.LOT,A.OCCUPATIONCODE  '|| CHR(10)
     ||'UNION ALL  '|| CHR(10)
     ||'   SELECT A.DEPARTMENTCODE DEPT_CODE,DECODE(A.SHIFTCODE,''1'',''A'',''2'',''B'',''3'',''C'',A.SHIFTCODE) SHIFT,'''' PAGE_NO,'''' PAGE_IND, '|| CHR(10)
     ||'      (CASE WHEN A.STLHOURS>0 THEN ''S'' ELSE '''' END) STL_IND,A.TOKENNO LBNO,'''' BM_MCNO,'''' LOOM1,'''' LOOM2, '''' PRESS_NO, 0 BASIC_RT,0 ATTN_HRS,  '|| CHR(10)
     ||'      0 FAL_HRS,0 FEST_HRS,0 OT_HRS,0 PF_ADJ,'''' PF_IND,0 NPF_ADJ,'''' NPF_IND,0 OTHER_DED ,0 DA_ADJ,'''' DA_IND,  '|| CHR(10)
     ||'      0 QLT_CODE1,0 PROD1,0 QLT_CODE2,0 PROD2,0 QLT_CODE3,0 PROD3,0 QLT_CODE4,0 PROD4,0 QLT_CODE5,0 PROD5,  '|| CHR(10)
     ||' B.LOT LOT_NO,  '|| CHR(10)
     ||'   A.FORTNIGHTENDDATE  FE_DATE, '''' REC_DEPT,0 ADJHRS ,A.OCCUPATIONCODE  '|| CHR(10)
     ||'  FROM WPSSTLENTRY A,  '|| CHR(10)
     ||'   (SELECT DEPARTMENTCODE,SHIFTCODE,ROWNUM AS LOT FROM (SELECT DISTINCT A.DEPARTMENTCODE,A.SHIFTCODE FROM WPSATTENDANCEDAYWISE A  '|| CHR(10)
     ||'       GROUP BY A.DEPARTMENTCODE,A.SHIFTCODE  '|| CHR(10)
     ||'       ORDER BY A.DEPARTMENTCODE,A.SHIFTCODE)) B    '|| CHR(10)
     ||'   WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '|| CHR(10)
     ||'     AND A.DATEOFATTENDANCE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '|| CHR(10)
     ||'     AND A.DATEOFATTENDANCE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '|| CHR(10)
     ||'  AND A.DEPARTMENTCODE=B.DEPARTMENTCODE  '|| CHR(10)
     ||'  AND A.SHIFTCODE=B.SHIFTCODE  '|| CHR(10)
     ||'  GROUP BY A.DEPARTMENTCODE,A.SHIFTCODE,A.TOKENNO,A.FORTNIGHTENDDATE,A.STLHOURS,B.LOT,A.OCCUPATIONCODE  '|| CHR(10)
     ||'  )Z, COMPANYMAST C  '|| CHR(10)
     ||' WHERE C.COMPANYCODE='''||P_COMPANYCODE||''' '|| CHR(10)
     ||' ORDER BY Z.FE_DATE,Z.DEPT_CODE,Z.SHIFT,Z.LBNO  '|| CHR(10);
       
   
 DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 --EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSWAGESDETAILS_MERGE;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESDETAILS_MERGE" 
( 
p_COMPANYCODE varchar2, 
p_divisioncode varchar2, 
p_fnstdt VARCHAR2, 
p_fnendt varchar, 
p_phase_before int ,
p_prosess_table varchar2 DEFAULT 'WPSWAGESDETAILS_SWT', 
p_prosess_table_merge varchar2 DEFAULT 'WPSWAGESDETAILS_MV_SWT' ,
p_workerserial varchar2 DEFAULT NULL 
)
as
lv_sqlstr varchar2(32767);
lv_colstr varchar2(32767);
lv_select_colstr varchar2(32767) := ' SELECT COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL AS 

SYSROWID, WORKERCATEGORYCODE, WORKERSERIAL, TOKENNO '; 
lv_sum_colstr varchar2(32767) := ' , MAX(DEPARTMENTCODE) DEPARTMENTCODE,SUM(ATTENDANCEHOURS) 

ATTENDANCEHOURS,SUM(OVERTIMEHOURS) OVERTIMEHOURS,SUM(STLHOURS) STLHOURS, SUM(NIGHTALLOWANCEHOURS) NIGHTALOWANCEHOURS, SUM(HOLIDAYHOURS)  HOLIDAYHOURS, SUM(LAYOFFHOURS) LAYOFFHOURS,SUM(FBKHOURS) FBKHOURS, SUM(OT_NSHRS) OT_NSHRS ';
lv_insert_colstr varchar2(32767) := 'INSERT INTO '||p_prosess_table_merge||'(COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, 

FORTNIGHTENDDATE, SYSROWID, WORKERCATEGORYCODE, WORKERSERIAL, TOKENNO ,'||CHR(10) 
                                    ||' DEPARTMENTCODE, ATTENDANCEHOURS,OVERTIMEHOURS,STLHOURS, NIGHTALLOWANCEHOURS, HOLIDAYHOURS, LAYOFFHOURS,FBKHOURS,OT_NSHRS ' ;
lv_group_by_colstr varchar2(32767) := ' COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERCATEGORYCODE, 

WORKERSERIAL, TOKENNO ' ;
lv_fn_stdt date := to_date(p_fnstdt,'dd/mm/yyyy');
lv_fn_endt date := to_date(p_fnendt,'dd/mm/yyyy');
lv_sqlerrm varchar(2000);
lv_parvalues varchar(4000) := ' COMPANYCODE -> '||p_COMPANYCODE||' DIVISIONCODE -> '||p_divisioncode||' FNSTART -> 

'||p_fnstdt||' FNEND -> '||p_fnendt||' PHASE BEFORE ->'||to_char(p_phase_before)||' PROCESS TABLE -> '||p_prosess_table||' 

MERGED TABLE -> '||p_prosess_table_merge||' WORKERSERIAL ->'||nvl(p_workerserial,'ALL') ;
lv_remarks varchar(2000);
--BEGIN
-- PROC_WPSWAGESDETAILS_MERGE( '0001', 'MILL', '01/11/2015', '15/11/2015', 4 ,'WPSWAGESDETAILS_SWT', 'WPSWAGESDETAILS_MV_SWT_T' ,'''''''09224'''',''''15876''''''' );
--END;
begin   
    lv_remarks := ' DELETING MERGED TABLE '; 
    lv_sqlstr := 'DELETE FROM '||p_prosess_table_merge||chr(10)
             ||' WHERE 1=1  '||CHR(10)
             ||' AND COMPANYCODE = '''||p_COMPANYCODE||''' '||CHR(10)
             ||' AND DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
             ||' AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)
             ||' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' ';
             if p_workerserial is not null then
                lv_sqlstr :=  lv_sqlstr||' AND INSTR('||p_workerserial||',WORKERSERIAL) > 0 ' ;
             end if;
  --  dbms_output.put_line(lv_sqlstr);         
    execute immediate lv_sqlstr;  
    for u1 in(
            SELECT COLUMN_NAME COLUMN_NAME FROM COLS WHERE TABLE_NAME = 'WPSWAGESDETAILS_SWT'
            INTERSECT
            SELECT DISTINCT(COMPONENTSHORTNAME) COLUMN_NAME
            FROM WPSCOMPONENTMASTER 
            WHERE 1=1
            AND COMPANYCODE = p_COMPANYCODE
            AND DIVISIONCODE = p_divisioncode
            AND PHASE < p_phase_before
            AND TAKEPARTINWAGES = 'Y'
    )
    loop
     lv_sum_colstr := lv_sum_colstr||' , SUM('||u1.COLUMN_NAME||') '||u1.COLUMN_NAME||' ' ;
     lv_insert_colstr := lv_insert_colstr||' , '||u1.COLUMN_NAME ;
     lv_colstr := lv_colstr||u1.COLUMN_NAME||',' ;
    end loop;
    lv_insert_colstr := lv_insert_colstr||')';
    lv_sqlstr := lv_insert_colstr||CHR(10)||lv_select_colstr||chr(10)||lv_sum_colstr||chr(10)||' FROM 

'||p_prosess_table||chr(10)
                  ||' WHERE 1=1 '||CHR(10)
                  ||' AND COMPANYCODE = '''||p_COMPANYCODE||''' '||CHR(10)
                  ||' AND DIVISIONCODE = '''||p_divisioncode||''' '||CHR(10)
                  ||' AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)
                  ||' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '; 
                  if p_workerserial is not null then
                      lv_sqlstr :=  lv_sqlstr||CHR(10)||' AND INSTR('||p_workerserial||',WORKERSERIAL) > 0 ' ;
                  end if;
                  lv_sqlstr :=  lv_sqlstr||CHR(10)||' GROUP BY '||lv_group_by_colstr ;
    --dbms_output.put_line(lv_sqlstr);   
    lv_remarks := ' INSERTING INTO MERGED TABLE';
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( p_COMPANYCODE, p_divisioncode, 'PROC_WPSWAGESDETAILS_MERGE','',lv_sqlstr,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
--    COMMIT;    
    execute immediate lv_sqlstr ;
-- QUERY FOR NON-COMPONENT-SUM COLS
-- date XX cols 
--YEARCODE, COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, DEPARTMENTCODE, OCCUPATIONCODE, WORKERSERIAL,TOKENNO, LASTMODIFIED, WORKERCATEGORYCODE, SHIFTCODE, SERIALNO, ISDATAVALID, WORKTYPECODE, PAYMODE
/*SELECT COLUMN_NAME COLUMN_NAME FROM COLS WHERE TABLE_NAME = 'WPSWAGESDETAILS_SWT'
MINUS
(
SELECT COLUMN_NAME COLUMN_NAME FROM COLS WHERE TABLE_NAME = 'WPSWAGESDETAILS_SWT'
INTERSECT
SELECT DISTINCT(COMPONENTSHORTNAME) COLUMN_NAME
FROM WPSCOMPONENTMASTER 
)
MINUS
SELECT COLUMN_NAME COLUMN_NAME FROM COLS WHERE TABLE_NAME = 'WPSWAGESDETAILS_SWT' AND DATA_TYPE IN('CHAR','VARCHAR2','DATE')
*/
COMMIT;
exception
 when others then  
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS 

) values( p_COMPANYCODE, p_divisioncode,'PROC_WPSWAGESDETAILS_MERGE',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    commit;
END;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_SECUPDT;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGESPROCESS_SECUPDT(P_COMPANYCODE VARCHAR2,P_DIVISIONCODE VARCHAR2,P_YEARCODE VARCHAR2,P_FNSTARTDATE VARCHAR2,P_FNENDDATE VARCHAR2)
AS
BEGIN
    UPDATE WPSWAGESDETAILS_MV TT1  
  SET (SECTIONCODE, OCCUPATIONCODE, WORKERTYPECODE, SHIFTCODE) =(
                      SELECT NVL(T1.SECTIONCODE,T2.SECTIONCODE) SECTIONCODE, NVL(T1.OCCUPATIONCODE,T2.OCCUPATIONCODE) OCCUPATIONCODE, NVL(T1.WORKERTYPECODE,T2.WORKERTYPECODE) WORKERTYPECODE, NVL(T1.SHIFTCODE,T2.SHIFTCODE) SHIFTCODE  
                      FROM
                      (
                          SELECT T1.WORKERSERIAL, T1.COMPANYCODE, T1.DIVISIONCODE, T1.YEARCODE, T1.FORTNIGHTSTARTDATE, T1.FORTNIGHTENDDATE,  
                          T1.DATEOFATTENDANCE,T1.SECTIONCODE, T1.OCCUPATIONCODE, T1.WORKERTYPECODE, T1.SHIFTCODE   
                          FROM WPSATTENDANCEDAYWISE T1,(  
                                                          SELECT WORKERSERIAL, COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,  
                                                          MAX(DATEOFATTENDANCE) DATEOFATTENDANCE, MAX(SECTIONCODE) SECTIONCODE, MAX(OCCUPATIONCODE) OCCUPATIONCODE,  
                                                          MAX(WORKERTYPECODE) WORKERTYPECODE, MAX(SHIFTCODE) SHIFTCODE   FROM WPSATTENDANCEDAYWISE 
                                                          WHERE COMPANYCODE = P_COMPANYCODE
                                                          AND DIVISIONCODE = P_DIVISIONCODE 
                                                          AND YEARCODE  = P_YEARCODE 
                                                          AND FORTNIGHTSTARTDATE = TO_DATE(P_FNSTARTDATE,'DD/MM/YYYY') 
                                                          AND FORTNIGHTENDDATE  = TO_DATE(P_FNENDDATE,'DD/MM/YYYY')
                                                          AND STATUSCODE='P'
                                                          GROUP BY WORKERSERIAL, COMPANYCODE, DIVISIONCODE, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE 
                                                      ) T2  
                          WHERE T1.WORKERSERIAL = T2.WORKERSERIAL  
                          AND T1.COMPANYCODE = T2.COMPANYCODE 
                          AND T1.DIVISIONCODE = T2.DIVISIONCODE 
                          AND T1.YEARCODE  = T2.YEARCODE 
                          AND T1.FORTNIGHTSTARTDATE = T2.FORTNIGHTSTARTDATE 
                          AND T1.FORTNIGHTENDDATE  = T2.FORTNIGHTENDDATE 
                          AND T1.DATEOFATTENDANCE = T2.DATEOFATTENDANCE 
                          AND T1.SECTIONCODE = T2.SECTIONCODE 
                          AND T1.OCCUPATIONCODE = T2.OCCUPATIONCODE 
                          AND T1.WORKERTYPECODE = T2.WORKERTYPECODE 
                          AND T1.SHIFTCODE = T2.SHIFTCODE 
                         ) T1 FULL OUTER JOIN 
                         (
                           SELECT  A.WORKERSERIAL, A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE,TO_DATE(P_FNSTARTDATE,'DD/MM/YYYY') FORTNIGHTSTARTDATE,TO_DATE(P_FNENDDATE,'DD/MM/YYYY') FORTNIGHTENDDATE,
                          '' DATEOFATTENDANCE,B.SECTIONCODE,B.OCCUPATIONCODE,  
                          C.WORKERTYPECODE, B.SHIFT SHIFTCODE
                          FROM (
                                SELECT WORKERSERIAL,COMPANYCODE,DIVISIONCODE, YEARCODE 
                                FROM WPSSTLENTRYDETAILS 
                                WHERE COMPANYCODE=P_COMPANYCODE
                                    AND DIVISIONCODE=P_DIVISIONCODE
                                    AND YEARCODE=P_YEARCODE
                                    AND LEAVECODE='STL'
                                    AND LEAVEDATE>=  TO_DATE(P_FNSTARTDATE,'DD/MM/YYYY')
                                    AND LEAVEDATE <= TO_DATE(P_FNENDDATE,'DD/MM/YYYY')
                                GROUP BY WORKERSERIAL,COMPANYCODE,DIVISIONCODE, YEARCODE
                                )A, WPSWORKERMAST B,WPSOCCUPATIONMAST C
                          WHERE A.COMPANYCODE=B.COMPANYCODE
                          AND A.DIVISIONCODE=B.DIVISIONCODE
                          AND A.WORKERSERIAL=B.WORKERSERIAL
                          AND B.COMPANYCODE=C.COMPANYCODE
                          AND B.DIVISIONCODE=C.DIVISIONCODE
                          AND B.DEPARTMENTCODE=C.DEPARTMENTCODE
                          AND B.SECTIONCODE=C.SECTIONCODE
                          AND B.OCCUPATIONCODE=C.OCCUPATIONCODE
                         ) T2
                    ON T1.WORKERSERIAL=T2.WORKERSERIAL
                        AND T1.COMPANYCODE=T2.COMPANYCODE
                        AND T1.DIVISIONCODE=T2.DIVISIONCODE
                        AND T1.YEARCODE=T2.YEARCODE
                        AND T1.FORTNIGHTSTARTDATE=T2.FORTNIGHTSTARTDATE
                        AND T1.FORTNIGHTENDDATE=T2.FORTNIGHTENDDATE
                   WHERE  NVL(T1.WORKERSERIAL,T2.WORKERSERIAL)  =  TT1.WORKERSERIAL 
                      AND NVL(T1.FORTNIGHTSTARTDATE,T2.FORTNIGHTSTARTDATE)  =  TT1.FORTNIGHTSTARTDATE 
                      AND NVL(T1.FORTNIGHTENDDATE,T2.FORTNIGHTENDDATE)  =   TT1.FORTNIGHTENDDATE 
                      AND NVL(T1.YEARCODE,T2.YEARCODE) =  TT1.YEARCODE
  )
  WHERE COMPANYCODE = P_COMPANYCODE  
  AND DIVISIONCODE = P_DIVISIONCODE 
  AND YEARCODE  = P_YEARCODE 
  AND FORTNIGHTSTARTDATE = TO_DATE(P_FNSTARTDATE,'DD/MM/YYYY') 
  AND FORTNIGHTENDDATE  = TO_DATE(P_FNENDDATE,'DD/MM/YYYY');
END;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_TRANSFER;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPROCESS_TRANSFER" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_ProcName     varchar2(30) := 'PROC_WPSWAGESPROCESS_TRANSFER';
begin
    lv_parvalues := 'DIV = '||P_DIVCODE||', FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_remarks := 'PHASE - '||P_PHASE||' START';
    
 IF  P_PROCESSTYPE='VOUCHER PROCESS' THEN
     IF NVL(P_WORKERSERIAL,'XX') = 'XX' THEN
        delete from WPSVOUCHERDETAILS WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt;

        delete from WPSVOUCHERDETAILS_MV WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt;
          
    else
        delete from WPSVOUCHERDETAILS WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt
          AND WORKERSERIAL IN (P_WORKERSERIAL);
            
        delete from WPSVOUCHERDETAILS_MV WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt
          AND WORKERSERIAL IN (P_WORKERSERIAL);
    end if;
    
    INSERT INTO WPSVOUCHERDETAILS SELECT * FROM WPSWAGESDETAILS_SWT;
    INSERT INTO WPSVOUCHERDETAILS_MV SELECT * FROM WPSWAGESDETAILS_MV_SWT;      
 ELSE
 ---------------------------------------------------------------------------
    ----- DELETE FROM WPSATTENDANCEDAYSWISE FOR ATTENDANCETAG='HRA' BECAUSE HRA TAG FORCEFULLY INSERT FOR HRA CALCULATION IN 2ND FORTNIGHT
    DELETE FROM WPSATTENDANCEDAYWISE 
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
      AND YEARCODE =P_YEARCODE 
      AND DATEOFATTENDANCE >= lv_fn_stdt
      AND DATEOFATTENDANCE <= lv_fn_endt
      AND ATTENDANCETAG='HRA';
      
    IF NVL(P_WORKERSERIAL,'XX') = 'XX' THEN
        delete from WPSWAGESDETAILS WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt;

        delete from WPSWAGESDETAILS_MV WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt;
          
    else
        delete from WPSWAGESDETAILS WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt
          AND WORKERSERIAL IN (P_WORKERSERIAL);
            
        delete from WPSWAGESDETAILS_MV WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = lv_fn_stdt
          AND FORTNIGHTENDDATE = lv_fn_endt
          AND WORKERSERIAL IN (P_WORKERSERIAL);
    end if; 
    ---------------------------------------------------------------------------
    
    INSERT INTO WPSWAGESDETAILS SELECT * FROM WPSWAGESDETAILS_SWT;
    INSERT INTO WPSWAGESDETAILS_MV SELECT * FROM WPSWAGESDETAILS_MV_SWT;    
 END IF;
    
    
   
    
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
commit;    
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    commit;
    --dbms_output.put_line('PROC - PROC_WPSWAGESPROCESS_UPDATE : ERROR !! WHILE WAGES PROCESS '||P_FNSTDT||' AND PHASE -> '||ltrim(trim(P_PHASE))||' : '||sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSWAGES_DEPTSHIFT_UPDT;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGES_DEPTSHIFT_UPDT" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2, -- 'wpswagesdetails_mv_swt
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_upd1_sql  varchar2(32767) := '';
lv_upd2_sql  varchar2(32767) := '';
lv_colstr    varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_FirtstDt     date; 
lv_ProcName     varchar2(30) := 'PROC_WPSWAGES_DEPTSHIFT_UPDT';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_cnt int;
lv_WAGES_DEPT_SHIFT varchar2(100) := '';
lv_WAGES_SLIPNO     varchar2(100) := '';
begin
    
    lv_parvalues := 'DEPT, SHIFT UPDATE DIV = '||P_DIVCODE||', FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_remarks := 'PHASE - '||P_PHASE||' START';
    
    SELECT NVL(WAGES_DEPT_SHIFT,'MASTER DEPARTMENT AND MASTER SHIFT'), NVL(WAGES_SLIPNO,'NONE') INTO lv_WAGES_DEPT_SHIFT, lv_WAGES_SLIPNO 
    FROM WPSWAGESPARAMETER WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE;
    
    DBMS_OUTPUT.PUT_LINE ('WAGES_DEPT_SHIFT - '||lv_WAGES_DEPT_SHIFT||', SLIP NO - '||lv_WAGES_SLIPNO);
    
    if  substr(P_FNSTDT,1,2) = '01' then
        lv_FirtstDt := to_date(P_FNSTDT,'DD/MM/YYYY');        
    else
        lv_FirtstDt := to_date('01'||substr(P_FNSTDT,3,8),'DD/MM/YYYY');
    end if;
    select SUBSTR( ( 'WPS_'||SYS_CONTEXT('USERENV', 'SESSIONID')) ,1,30) into lv_updtable  from dual ;
    lv_remarks := 'TEMPORARY TABLE CREATION - FOR DEPRTMENT, SHIFT UPDATION';
    
    begin
        lv_sql := 'DROP TABLE '||lv_updtable||' '||CHR(10);
        execute immediate lv_sql;
    exception
        when others then null; 
    end;
    if lv_WAGES_DEPT_SHIFT = 'MASTER DEPARTMENT AND MASTER SHIFT' THEN
        lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
                || ' SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, A.GROUPCODE, DECODE(NVL(A.GROUPCODE,''A''),''A'',''1'',''B'',''2'',''C'',''3'',''A'') SHIFTCODE '||CHR(10)
                ||' FROM WPSWORKERMAST A,'||P_TABLENAME||' B '||CHR(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
                ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
                ||'   AND B.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
                ||'   AND B.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10); 
        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE,PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
        EXECUTE IMMEDIATE lv_sql  ;
        
    ELSIF  lv_WAGES_DEPT_SHIFT = 'MAX DEPARTMENT AND MAX SHIFT' THEN
            lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
                    ||' SELECT WORKERSERIAL, SUBSTR(DEPTSHIFTOCP,1,INSTR(DEPTSHIFTOCP,'','')-1) DEPARTMENTCODE,  '||CHR(10)
                    ||' SUBSTR(DEPTSHIFTOCP,INSTR(DEPTSHIFTOCP,'','')+1,INSTR(DEPTSHIFTOCP,''-'')-INSTR(DEPTSHIFTOCP,'','')-1)SHIFTCODE,  '||CHR(10)  
                    ||' SUBSTR(DEPTSHIFTOCP,INSTR(DEPTSHIFTOCP,''-'')+1,INSTR(DEPTSHIFTOCP,''-'')) OCCUPATIONCODE,   '||CHR(10)
                    ||' DEPTSHIFTOCP  '||CHR(10)
                    ||' FROM ('||CHR(10)
                    ||'     SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||'',''||SHIFTCODE||''-''||OCCUPATIONCODE) DEPTSHIFTOCP  '||CHR(10)
                    ||'     FROM WPSATTENDANCEDAYWISE  '||CHR(10)
                    ||'     WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
                    ||'       AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
                    ||'       AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG <>''HAND WAGES'' '||CHR(10)
                    ||'     GROUP BY WORKERSERIAL   '||CHR(10)
                    ||'     UNION ALL '||CHR(10)  --- NEW ADD BY AMALESH ON 05/05/2017 FOR THOSE WOKRER WHOSE NO ATENDANCE BUT HAND WAGES AVAILABLE
                    ||'     SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||'',''||SHIFTCODE||''-''||OCCUPATIONCODE) DEPTSHIFTOCP   '||CHR(10)
                    ||'     FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                    ||'     WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10) 
                    ||'       AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')    '||CHR(10)     
                    ||'       AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG = ''HAND WAGES''   '||CHR(10)
                    ||'       AND WORKERSERIAL IN (    '||CHR(10)
                    ||'             SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                    ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)
                    ||'               AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||CHR(10)      
                    ||'               AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG = ''HAND WAGES''   '||CHR(10)
                    ||'             MINUS   '||CHR(10)
                    ||'             SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                    ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''    '||CHR(10)
                    ||'               AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||CHR(10)      
                    ||'               AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG <> ''HAND WAGES''   '||CHR(10)
                    ||'           )    '||CHR(10)         
                    ||'       GROUP BY WORKERSERIAL   '||CHR(10)
                    ||'    )          '||CHR(10);
            INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
            VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
            --dbms_output.put_line( lv_sql );
            EXECUTE IMMEDIATE lv_sql  ;   
    ELSIF lv_WAGES_DEPT_SHIFT = 'MAX WORKING DEPARTMENT AND USER DEFINED SHIFT' THEN
        lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
                ||' SELECT WORKERSERIAL, SUBSTR(DEPTSHIFTOCP,1,INSTR(DEPTSHIFTOCP,'','')-1) DEPARTMENTCODE,  '||CHR(10)
                ||' SUBSTR(DEPTSHIFTOCP,INSTR(DEPTSHIFTOCP,'','')+1,INSTR(DEPTSHIFTOCP,''-'')-INSTR(DEPTSHIFTOCP,'','')-1)SHIFTCODE,  '||CHR(10)  
                ||' SUBSTR(DEPTSHIFTOCP,INSTR(DEPTSHIFTOCP,''-'')+1,INSTR(DEPTSHIFTOCP,''-'')) OCCUPATIONCODE,   '||CHR(10)
                ||' DEPTSHIFTOCP  '||CHR(10)
                ||' FROM ('||CHR(10)
                ||'     SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||'',''||SHIFTCODE||''-''||OCCUPATIONCODE) DEPTSHIFTOCP  '||CHR(10)
                ||'     FROM WPSATTENDANCEDAYWISE  '||CHR(10)
                ||'     WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
                ||'       AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
                ||'       AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG <>''HAND WAGES'' '||CHR(10)
                ||'     GROUP BY WORKERSERIAL   '||CHR(10)
                ||'     UNION ALL '||CHR(10)  --- NEW ADD BY AMALESH ON 05/05/2017 FOR THOSE WOKRER WHOSE NO ATENDANCE BUT HAND WAGES AVAILABLE
                ||'     SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||'',''||SHIFTCODE||''-''||OCCUPATIONCODE) DEPTSHIFTOCP   '||CHR(10)
                ||'     FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                ||'     WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10) 
                ||'       AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')    '||CHR(10)     
                ||'       AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG = ''HAND WAGES''   '||CHR(10)
                ||'       AND WORKERSERIAL IN (    '||CHR(10)
                ||'             SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)
                ||'               AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||CHR(10)      
                ||'               AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG = ''HAND WAGES''   '||CHR(10)
                ||'             MINUS   '||CHR(10)
                ||'             SELECT DISTINCT WORKERSERIAL FROM WPSATTENDANCEDAYWISE   '||CHR(10)
                ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''    '||CHR(10)
                ||'               AND DATEOFATTENDANCE>=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||CHR(10)      
                ||'               AND DATEOFATTENDANCE<=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AND ATTENDANCETAG <> ''HAND WAGES''   '||CHR(10)
                ||'           )    '||CHR(10)         
                ||'       GROUP BY WORKERSERIAL   '||CHR(10)
                ||'    )          '||CHR(10);
          --      dbms_output.put_line( lv_sql );
--                RETURN;
    ELSIF lv_WAGES_DEPT_SHIFT = 'LAST WORKING SECTION AND SHIFT' THEN
            
    /************************ ADDED BY PRASUN ON 10102019 ****************/
       lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
       --modified by prasun 22.11.2019
--               ||'   SELECT A.WORKERSERIAL, MAX(A.DEPARTMENTCODE) DEPARTMENTCODE, MAX(DECODE(NVL(A.GROUPCODE,''R''),''B'',''1'',''R'',''2'',''G'',''3'',''A'')) SHIFTCODE, '||CHR(10) 
               ||'   SELECT A.WORKERSERIAL, MAX(A.DEPARTMENTCODE) DEPARTMENTCODE, MAX(SHIFTCODE) SHIFTCODE, '||CHR(10)
               ||'   MAX(A.OCCUPATIONCODE) OCCUPATIONCODE, MAX(SECTIONCODE) SECTIONCODE      '||CHR(10)
               ||'   FROM WPSATTENDANCEDAYWISE A,  '||CHR(10)
               ||'   (  '||CHR(10)
               ||'       SELECT WORKERSERIAL, MAX(DATEOFATTENDANCE) DATEOFATTENDANCE '||CHR(10)
               ||'       FROM WPSATTENDANCEDAYWISE  '||CHR(10)
               ||'       WHERE COMPANYCODE = '''||P_COMPCODE||'''    '||CHR(10)
               ||'       AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
               ||'       AND YEARCODE  = '''||P_YEARCODE||''' '||CHR(10)
               ||'       AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||'       AND FORTNIGHTENDDATE  = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||'       AND (NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) > 0 '||CHR(10) 
               ||'       GROUP BY WORKERSERIAL '||CHR(10)
               ||'   ) B '||CHR(10)
               ||'   WHERE 1= 1 '||CHR(10)
               ||'   AND A.COMPANYCODE = '''||P_COMPCODE||'''    '||CHR(10)   
               ||'   AND A.DIVISIONCODE = '''||P_DIVCODE||'''    '||CHR(10)
               ||'   AND A.YEARCODE  = '''||P_YEARCODE||''' '||CHR(10)
               ||'   AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||'   AND A.FORTNIGHTENDDATE  = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0 '||CHR(10) 
               ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
               ||'   AND A.DATEOFATTENDANCE = B.DATEOFATTENDANCE '||CHR(10)
               ||'   GROUP BY A.WORKERSERIAL '||CHR(10);
        
        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE,PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
        EXECUTE IMMEDIATE lv_sql  ;
        
         lv_sql := ' INSERT INTO  '||lv_updtable ||CHR(10)
                 ||'SELECT T1.WORKERSERIAL,  T1.DEPARTMENTCODE, DECODE(NVL(T1.GROUPCODE,''R''),''B'',''1'',''R'',''2'',''G'',''3'',''A'') SHIFTCODE , T1.OCCUPATIONCODE, T1.SECTIONCODE FROM WPSWORKERMAST T1 , '||lv_updtable||' T2 '||CHR(10)
                 ||'WHERE T1.ACTIVE = ''Y'' '||CHR(10)
                 ||'AND T1.WORKERSERIAL = T2.WORKERSERIAL(+) '||CHR(10)
                 ||'AND T2.WORKERSERIAL IS NULL '||CHR(10);
        
        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
        EXECUTE IMMEDIATE lv_sql  ;
        /************************ ADDED BY PRASUN ON 10102019 ****************/
    ELSIF lv_WAGES_DEPT_SHIFT = 'MAX WORKING DEPT,SECTION,OCP,DEPTSERIAL,SHIFT' THEN
        lv_sql := ' CREATE TABLE '||lv_updtable||' AS '||chr(10)
                ||' SELECT A.WORKERSERIAL, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL '||CHR(10)
                ||' FROM '||P_PHASE_TABLENAME||' A,  '||CHR(10)
                ||' (  '||CHR(10)
                ||'    SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE||DEPTSERIAL||SHIFTCODE) MAXDEPTSFTSECOCPDEPTSRL  '||CHR(10)
                ||'    FROM (  '||CHR(10)
                ||'            SELECT A.WORKERSERIAL, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE,A.DEPTSERIAL  '||CHR(10)
                ||'            FROM '||P_PHASE_TABLENAME||' A,  '||CHR(10)
                ||'            (  '||CHR(10)
                ||'                SELECT WORKERSERIAL, MAX(NVL(ATTENDANCEHOURS,0)) MAX_ATTN_HRS, MAX(NVL(OVERTIMEHOURS,0)) MAX_OT_HRS  '||CHR(10)
                ||'                FROM '||P_PHASE_TABLENAME||'  '||CHR(10)
                ||'                WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
                ||'                  AND YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
                ||'                  AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||'''  '||CHR(10)
                ||'                  AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
                ||'                GROUP BY WORKERSERIAL  '||CHR(10)
                ||'            ) B  '||CHR(10)
                ||'            WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
                ||'              AND A.YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
                ||'              AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||'''  '||CHR(10)
                ||'              AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
                ||'              AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
                ||'              AND A.ATTENDANCEHOURS= B.MAX_ATTN_HRS  '||CHR(10)
                ||'              AND B.MAX_ATTN_HRS > 0  '||CHR(10)
                ||'         )  '||CHR(10)
                ||'    GROUP BY WORKERSERIAL  '||CHR(10)       
                ||'    UNION ALL  '||CHR(10) --- below part for those who only worked in O.T.
                ||'    SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE||DEPTSERIAL||SHIFTCODE) MAXDEPTSFTSECOCPDEPTSRL  '||CHR(10)
                ||'    FROM (  '||CHR(10)
                ||'            SELECT A.WORKERSERIAL, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE,A.DEPTSERIAL  '||CHR(10)
                ||'            FROM '||P_PHASE_TABLENAME||' A,  '||CHR(10)
                ||'            (  '||CHR(10)
                ||'                SELECT WORKERSERIAL, MAX(ATTENDANCEHOURS) MAX_ATTN_HRS, MAX(OVERTIMEHOURS) MAX_OT_HRS  '||CHR(10)
                ||'                FROM '||P_PHASE_TABLENAME||'  '||CHR(10)
                ||'                WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
                ||'                  AND YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
                ||'                  AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||'''  '||CHR(10)
                ||'                  AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
                ||'                GROUP BY WORKERSERIAL  '||CHR(10)
                ||'            ) B  '||CHR(10)
                ||'            WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
                ||'              AND A.YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
                ||'              AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||'''  '||CHR(10)
                ||'              AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||CHR(10)
                ||'              AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
                ||'              AND B.MAX_ATTN_HRS <= 0  '||CHR(10)
                ||'              AND A.OVERTIMEHOURS = B.MAX_OT_HRS  '||CHR(10)
                ||'       )  '||CHR(10)
                ||'     GROUP BY WORKERSERIAL  '||CHR(10)        
                ||' ) B  '||CHR(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
                ||'   AND A.YEARCODE = '''||P_YEARCODE||'''  '||CHR(10)
                ||'   AND A.FORTNIGHTSTARTDATE ='''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE ='''||lv_fn_endt||'''  '||CHR(10)
                ||'   AND A.DEPARTMENTCODE||A.SECTIONCODE||A.OCCUPATIONCODE||A.DEPTSERIAL||A.SHIFTCODE = B.MAXDEPTSFTSECOCPDEPTSRL  '||CHR(10)
                ||' AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10);

        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE,PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
        EXECUTE IMMEDIATE lv_sql  ;
    
          
    ELSE
        lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
                || ' SELECT A.WORKERSERIAL, A.DEPARTMENTCODE, A.GROUPCODE, DECODE(NVL(A.GROUPCODE,''A''),''A'',''1'',''B'',''2'',''C'',''3'',''A'') SHIFTCODE '||CHR(10)
                ||' FROM WPSWORKERMAST A,'||P_TABLENAME||' B '||CHR(10)
                ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
                ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10);
        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
        EXECUTE IMMEDIATE lv_sql  ;
    
    end if;                  
    lv_remarks := 'UPDATE DEPT, SHIFT AGIANST TEMPORARY TABLE';
    if  lv_WAGES_DEPT_SHIFT = 'MASTER DEPARTMENT AND MASTER SHIFT' THEN
        lv_sql := 'UPDATE '||P_TABLENAME||' A SET (DEPARTMENTCODE, SHIFTCODE) = ( SELECT DEPARTMENTCODE, SHIFTCODE  FROM '||lv_updtable||' B '||CHR(10) 
               ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
               ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
               ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
               ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10);
    else
        lv_sql := 'UPDATE '||P_TABLENAME||' A SET (DEPARTMENTCODE, SHIFTCODE,OCCUPATIONCODE,SECTIONCODE, DEPTSERIAL) = ( SELECT DEPARTMENTCODE, SHIFTCODE, OCCUPATIONCODE, SECTIONCODE, DEPTSERIAL  FROM '||lv_updtable||' B '||CHR(10) 
               ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
               ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
               ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
               ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
               ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10);
    end if; 
    --- END ADD ON 29.09.2016 -----------
    --dbms_output.put_line( lv_sql );
    lv_remarks := NVL(lv_remarks,'XX ') ||' UPDATE DEPARTMENT,SHIFT';
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    commit;    
    EXECUTE IMMEDIATE lv_sql;
    commit;
   BEGIN
    execute immediate 'DROP TABLE '||lv_updtable ;
   EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm;
      raise_application_error(-20101, lv_sqlerrm||'ERROR WHILE UPDATING '||P_TABLENAME||' FROM TABLE '||lv_updtable);
   END ;
   ----- update slip no. generation for thed 
   ----- unitwise, department, shift and tokenno wise
   DELETE FROM GBL_WPSSLIPNO_GENERATE;
   IF NVL(P_WORKERSERIAL,'NONE') = 'NONE' then
        --- GENERATE FROM 1 TO NO OF SLIP, ORDER BY UNIT, DEPARTMENT, SHIFT
        lv_Sql := 'INSERT INTO GBL_WPSSLIPNO_GENERATE ( '||chr(10) 
                ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, UNITCODE, WORKERCATEGORYCODE, DEPARTMENTCODE, SHIFTCODE, OCCUPATIONCODE, '||chr(10) 
                ||' WORKERSERIAL, TOKENNO, PAYSLIPNO)  '||chr(10)
                ||' SELECT COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, UNITCODE, WORKERCATEGORYCODE, DEPARTMENTCODE, SHIFTCODE, OCCUPATIONCODE,  '||chr(10)
                ||' WORKERSERIAL, TOKENNO, RANK() OVER (PARTITION BY DIVISIONCODE,DEPARTMENTCODE, SHIFTCODE ORDER BY UNITCODE,DEPARTMENTCODE, SHIFTCODE,TOKENNO) PAYSLIPNO  '||chr(10)
                ||' FROM '||P_TABLENAME||'  '||chr(10)
                ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
                ||' AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||chr(10)
                ||' AND FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')   '||chr(10);
        lv_remarks := ' GLOBAL TEMP TABLE CREATE FOR SLIPNO - LOGIC NONE - ORDER BY UNIT,DEPARTMENT, SHIFT';
        INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
        commit;    
        EXECUTE IMMEDIATE lv_sql;
        commit;        
   end if;
   
    lv_remarks := 'UPDATE PAY SLIP NO AGIANST GLOBAL TEMPORARY TABLE';
    lv_sql := 'UPDATE '||P_TABLENAME||' A SET (SERIALNO) = ( SELECT PAYSLIPNO  FROM GBL_WPSSLIPNO_GENERATE B '||CHR(10) 
           ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
           ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
           ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
           ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
           ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
           ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
           ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10); 
    lv_remarks := 'UPDATE SLIP FROM TEMPRARY GLOBALE TABLE ';
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE, P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    commit;    
    EXECUTE IMMEDIATE lv_sql;
    commit;   
                            
/*EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm;
      raise_application_error(-20101, lv_sqlerrm||'ERROR WHILE UPDATING '||P_TABLENAME||' FROM TABLE '||lv_updtable);
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,lv_sqlerrm,sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    */          
end;
/


DROP PROCEDURE PROC_WPSWAGES_FIXOENPF;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGES_FIXOENPF(
    P_COMPCODE varchar2, P_DIVCODE varchar2, P_YEARCODE Varchar2,
    P_FNSTDT varchar2,P_FNENDT varchar2,P_PHASE NUMBER,
    P_PHASE_TABLENAME VARCHAR2,
    P_TABLENAME varchar2 DEFAULT 'WPSWAGESDETAILS',
    P_WORKERSERIAL varchar2 DEFAULT NULL
)

AS  
    lv_sql varchar2(10000):='';
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PROC_WPSWAGES_FIXOENPF';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400):='';
    lv_cnt number:=0;
BEGIN

    PROC_WPSOTHRCOMPONENTPAYMENT(P_COMPCODE,P_DIVCODE,P_FNSTDT,P_FNENDT,'WPSOTHERCOMPONENTPAYMENT','FIX_OENPF');
    
    lv_sql := 'SELECT COUNT(1) FROM COL WHERE TNAME='''||P_PHASE_TABLENAME||'''';
    EXECUTE IMMEDIATE lv_sql INTO lv_cnt;
    
    IF lv_cnt>0 THEN
        lv_sql :='DROP TABLE '||P_PHASE_TABLENAME;
        EXECUTE IMMEDIATE lv_sql;
    END IF;
    lv_Remarks:='TEMP TABLE CREATE';
    lv_sql:='CREATE TABLE '||P_PHASE_TABLENAME||CHR(10)
          ||'AS'||CHR(10)
          ||'('||CHR(10)
          ||'   SELECT A.COMPANYCODE,DIVISIONCODE,A.WORKERSERIAL,A.FORTNIGHTSTARTDATE,A.FORTNIGHTENDDATE, B.SECTIONCODE,A.COMPONENTAMOUNT'||CHR(10)
          ||'   FROM WPSOTHERCOMPONENTPAYMENT A,('||CHR(10)
          ||'                                       SELECT A.WORKERSERIAL, MAX(SECTIONCODE) SECTIONCODE FROM '||P_TABLENAME||' A,'||CHR(10)
          ||'                                       ('||CHR(10)
          ||'                                           SELECT WORKERSERIAL, MAX(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) HRS'||CHR(10)
          ||'                                           FROM '||P_TABLENAME||CHR(10)
          ||'                                           WHERE FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                                               AND  FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                                           GROUP BY WORKERSERIAL'||CHR(10)
          ||'                                        )  B '||CHR(10)
          ||'                                   WHERE A.WORKERSERIAL=B.WORKERSERIAL AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) = B.HRS'||CHR(10)
          ||'                                   AND A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                                   AND A.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                                   GROUP BY A.WORKERSERIAL'||CHR(10)
          ||'                                 ) B'||CHR(10)
          ||'   WHERE A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
          ||'     AND A.COMPONENTCODE=''FIX_OENPF'''||CHR(10)
          ||'     AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'     AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||')'||CHR(10);
          
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql; 
    
    
    lv_Remarks:='UPDATE FIX_OENPF';
    lv_sql:='UPDATE '||P_TABLENAME||' A SET FIX_OENPF=('||CHR(10)
         ||'                                            SELECT COMPONENTAMOUNT FROM '||P_PHASE_TABLENAME||' B'||CHR(10)
         ||'                                            WHERE B.COMPANYCODE=A.COMPANYCODE'||CHR(10)
         ||'                                                AND B.DIVISIONCODE=A.DIVISIONCODE'||CHR(10)
         ||'                                                AND B.WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                AND B.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND B.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND A.SECTIONCODE = B.SECTIONCODE'||CHR(10)
         ||'                                        )'||CHR(10)
         ||'WHERE A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.WORKERSERIAL IN (  SELECT WORKERSERIAL FROM '||P_PHASE_TABLENAME||' '||CHR(10)
         ||'                           WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
         ||'                             AND FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                             AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                        )'||CHR(10);           
    --DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm ;
      insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
      values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
              
END;
/


DROP PROCEDURE PROC_WPSWAGES_HRAGROSS_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGES_HRAGROSS_UPDT(
    P_COMPCODE varchar2, P_DIVCODE varchar2, P_YEARCODE Varchar2,
    P_FNSTDT varchar2,P_FNENDT varchar2,P_PHASE NUMBER,
    P_PHASE_TABLENAME VARCHAR2,
    P_TABLENAME varchar2 DEFAULT 'WPSWAGESDETAILS_SWT',
    P_WORKERSERIAL varchar2 DEFAULT NULL,
    P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS'
)

AS  
    lv_sql varchar2(10000):='';
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PROC_WPSWAGES_HRAGROSS_UPDT';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400):='';
    lv_cnt number:=0;
   
    lv_prv_fn_endt  date;
    lv_mn_stdt      date := to_date('01/'||substr(P_FNSTDT,4),'DD/MM/YYYY');
    lv_prev_fn_stdt  date := to_date('01/'||substr(P_FNSTDT,4),'DD/MM/YYYY');
BEGIN


    IF SUBSTR(P_FNSTDT,1,2) = '01' THEN
        RETURN;
    END IF;   
    

    SELECT TO_DATE(FN_GETFORTNIGHTSTARTENDDATE(TO_CHAR(lv_mn_stdt,'DD/MM/YYYY'),'END'),'DD/MM/YYYY') INTO lv_prv_fn_endt FROM DUAL;
    
    lv_sql := 'SELECT COUNT(1) FROM COL WHERE TNAME='''||P_PHASE_TABLENAME||'''';
    EXECUTE IMMEDIATE lv_sql INTO lv_cnt;
    
    IF lv_cnt>0 THEN
        lv_sql :='DROP TABLE '||P_PHASE_TABLENAME;
        EXECUTE IMMEDIATE lv_sql;
    END IF;
    lv_Remarks:='1 TEMP TABLE CREATE';
    lv_sql:='CREATE TABLE '||P_PHASE_TABLENAME||CHR(10)
          ||'AS'||CHR(10)
          ||' SELECT A.WORKERSERIAL, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL ,X.GROSS_FOR_HRA'||CHR(10)
          ||' FROM WPSWAGESDETAILS_SWT A,'||CHR(10)
          ||' ('||CHR(10)
          ||'    SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE||DEPTSERIAL||SHIFTCODE) MAXDEPTSFTSECOCPDEPTSRL'||CHR(10)
          ||'    FROM ('||CHR(10)
          ||'            SELECT A.WORKERSERIAL, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE,A.DEPTSERIAL'||CHR(10)
          ||'            FROM WPSWAGESDETAILS_SWT A,'||CHR(10)
          ||'            ('||CHR(10)
          ||'                SELECT WORKERSERIAL, MAX(NVL(ATTENDANCEHOURS,0)) MAX_ATTN_HRS, MAX(NVL(OVERTIMEHOURS,0)) MAX_OT_HRS '||CHR(10)
          ||'                FROM WPSWAGESDETAILS_SWT'||CHR(10)
          ||'                WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||''''||CHR(10)
          ||'                  AND YEARCODE ='''||P_YEARCODE||''''||CHR(10)
          ||'                  AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                  AND FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                GROUP BY WORKERSERIAL'||CHR(10)
          ||'            ) B'||CHR(10)
          ||'            WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||''' '||CHR(10)
          ||'              AND A.YEARCODE ='''||P_YEARCODE||''''||CHR(10)
          ||'              AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'              AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'              AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
          ||'              AND NVL(A.ATTENDANCEHOURS,0)= NVL(B.MAX_ATTN_HRS ,0)'||CHR(10)
          ||'              AND NVL(B.MAX_ATTN_HRS,0) > 0'||CHR(10)
          ||'         )'||CHR(10)
          ||'    GROUP BY WORKERSERIAL'||CHR(10)
          ||'    UNION ALL'||CHR(10)
          ||'    SELECT WORKERSERIAL, MAX(DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE||DEPTSERIAL||SHIFTCODE) MAXDEPTSFTSECOCPDEPTSRL'||CHR(10)
          ||'    FROM ('||CHR(10)
          ||'            SELECT A.WORKERSERIAL, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE,A.DEPTSERIAL'||CHR(10)
          ||'            FROM WPSWAGESDETAILS_SWT A, '||CHR(10)
          ||'            ('||CHR(10)
          ||'                SELECT WORKERSERIAL, MAX(ATTENDANCEHOURS) MAX_ATTN_HRS, MAX(OVERTIMEHOURS) MAX_OT_HRS'||CHR(10)
          ||'                FROM WPSWAGESDETAILS_SWT'||CHR(10)
          ||'                WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||''''||CHR(10)
          ||'                  AND YEARCODE ='''||P_YEARCODE||''''||CHR(10)
          ||'                  AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                  AND FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'                GROUP BY WORKERSERIAL'||CHR(10)
          ||'            ) B'||CHR(10)
          ||'            WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||''''||CHR(10)
          ||'              AND A.YEARCODE ='''||P_YEARCODE||''' '||CHR(10)
          ||'              AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'              AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'              AND A.WORKERSERIAL = B.WORKERSERIAL'||CHR(10)
          ||'              AND NVL(B.MAX_ATTN_HRS,0) <= 0'||CHR(10)
          ||'              AND NVL(A.OVERTIMEHOURS,0) = NVL(B.MAX_OT_HRS,0)'||CHR(10)
          ||'       ) '||CHR(10)
          ||'     GROUP BY WORKERSERIAL '||CHR(10)
          ||' ) B'||CHR(10)
          ||',(  '||CHR(10)
          ||'   SELECT WORKERSERIAL, SUM(GROSS_FOR_HRA) GROSS_FOR_HRA  '||CHR(10)
          ||'   FROM (  '||CHR(10)
          ||'           SELECT WORKERSERIAL, NVL(GROSS_FOR_HRA,0) GROSS_FOR_HRA  '||CHR(10)
          ||'           FROM WPSWAGESDETAILS_MV  '||CHR(10)
          ||'           WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
          ||'             AND YEARCODE ='''||P_YEARCODE||'''   '||CHR(10)
          ||'             AND FORTNIGHTSTARTDATE = '''||lv_prev_fn_stdt||'''  '||CHR(10)
          ||'             AND FORTNIGHTENDDATE = '''||lv_prv_fn_endt||'''  '||CHR(10)
          ||'           UNION ALL  '||CHR(10)
          ||'           SELECT WORKERSERIAL, STLAMOUNT GROSS_FOR_HRA  '||CHR(10)
          ||'           FROM WPSSTLWAGESDETAILS  '||CHR(10)
          ||'           WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||CHR(10)
          ||'             AND YEARCODE ='''||P_YEARCODE||'''   '||CHR(10)
          ||'             AND PAYMENTDATE >= '''||lv_prev_fn_stdt||'''  '||CHR(10)
          ||'             AND PAYMENTDATE <= '''||lv_fn_endt||'''  '||CHR(10)
          ||'        )    '||CHR(10)      
          ||'    GROUP BY WORKERSERIAL  '||CHR(10)    
          ||' ) X  '||CHR(10)
          ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
          ||'   AND A.YEARCODE = '''||P_YEARCODE||''''||CHR(10)
          ||'   AND A.FORTNIGHTSTARTDATE =TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') AND A.FORTNIGHTENDDATE =TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
          ||'   AND A.DEPARTMENTCODE||A.SECTIONCODE||A.OCCUPATIONCODE||A.DEPTSERIAL||A.SHIFTCODE = B.MAXDEPTSFTSECOCPDEPTSRL'||CHR(10)
          ||'   AND A.WORKERSERIAL = B.WORKERSERIAL'||CHR(10)
          ||'   AND A.WORKERSERIAL = X.WORKERSERIAL'||CHR(10);
  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql; 
    
    
--    lv_Remarks:='2 UPDATE GROSS_FOR_HRA IN '||P_PHASE_TABLENAME||' TABLES';
--    lv_sql:='UPDATE '||P_PHASE_TABLENAME||' A SET A.GROSS_FOR_HRA=('||CHR(10)
--    ||' SELECT GROSS_FOR_HRA FROM('||CHR(10)
--    ||' SELECT WORKERSERIAL,SUM(GROSS_FOR_HRA) GROSS_FOR_HRA'||CHR(10)
--    ||'    FROM ('||CHR(10)
--    ||'        SELECT WORKERSERIAL,  GROSS_FOR_HRA'||CHR(10)
--    ||'        FROM WPSWAGESDETAILS_MV'||CHR(10)
--    ||'        WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||''''||CHR(10)
--    ||'          AND YEARCODE ='''||P_YEARCODE||''''||CHR(10)
--    ||'          AND FORTNIGHTSTARTDATE ='''||lv_prev_fn_stdt||''' AND FORTNIGHTENDDATE ='''||lv_prv_fn_endt||''''||CHR(10)
--    ||'        UNION ALL'||CHR(10)
--    ||'        SELECT WORKERSERIAL, PF_GROSS GROSS_FOR_HRA'||CHR(10)
--    ||'        FROM WPSSTLWAGESDETAILS'||CHR(10)
--    ||'        WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||''''||CHR(10)
--    ||'          AND YEARCODE ='''||P_YEARCODE||''''||CHR(10)
--    ||'          AND PAYMENTDATE >='''||lv_prev_fn_stdt||''' AND PAYMENTDATE <=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
--    ||'    )'||CHR(10)
--    ||'GROUP BY WORKERSERIAL'||CHR(10)
--    ||')X WHERE X.WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
--    ||')'||CHR(10)
--    ||'WHERE 1=1'||CHR(10)
--    ||'AND WORKERSERIAL'||CHR(10)
--    ||'IN'||CHR(10)
--    ||'('||CHR(10)
--    ||'SELECT DISTINCT WORKERSERIAL FROM WPS_MAX_DEPT_HRA'||CHR(10)
--    ||')'||CHR(10);
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
--    EXECUTE IMMEDIATE lv_sql;  
--    COMMIT;
    
    lv_Remarks:='3 DELETE GROSS_FOR_HRA IN '||P_PHASE_TABLENAME||' TABLES';
    lv_sql:='DELETE FROM '||P_PHASE_TABLENAME||' WHERE NVL(GROSS_FOR_HRA,0)=0'||CHR(10);  
    --DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;

    lv_Remarks:='4 UPDATE GROSS_FOR_HRA IN '||P_TABLENAME||' TABLES';
    lv_sql:='UPDATE '||P_TABLENAME||' A SET (GROSS_FOR_HRA)=NVL(GROSS_FOR_HRA,0)+('||CHR(10)
         ||'                                            SELECT NVL(GROSS_FOR_HRA,0) FROM '||P_PHASE_TABLENAME||' B'||CHR(10)
         ||'                                            WHERE 1=1'||CHR(10)
         ||'                                                AND B.WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                AND A.SHIFTCODE = B.SHIFTCODE'||CHR(10)       
         ||'                                                AND A.DEPARTMENTCODE = B.DEPARTMENTCODE'||CHR(10)        
         ||'                                                AND A.SECTIONCODE = B.SECTIONCODE'||CHR(10)
         ||'                                                AND A.OCCUPATIONCODE = B.OCCUPATIONCODE'||CHR(10)
         ||'                                                AND A.DEPTSERIAL = B.DEPTSERIAL'||CHR(10)
         ||'                                        )'||CHR(10)
         ||'WHERE A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
         ||'  AND A.WORKERSERIAL||A.SHIFTCODE||A.DEPARTMENTCODE||A.SECTIONCODE||A.OCCUPATIONCODE||A.DEPTSERIAL IN (  SELECT WORKERSERIAL||SHIFTCODE||DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE||DEPTSERIAL FROM '||P_PHASE_TABLENAME||' '||CHR(10)
         ||'                        )'||CHR(10);           
    --DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm ;
      insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
      values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
              
END;
/


DROP PROCEDURE PROC_WPSWAGES_OTHER_COMP_UPDT;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGES_OTHER_COMP_UPDT" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2, -- 'wpswagesdetails_mv_swt
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_upd1_sql  varchar2(32767) := '';
lv_upd2_sql  varchar2(32767) := '';
lv_colstr    varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_FirtstDt     date; 
lv_ProcName     varchar2(30) := 'PROC_WPSWAGES_OTHER_COMP_UPDT';
lv_Formula1     varchar2(1000) := '';
lv_Formula1_Col varchar2(30) := '';
lv_Formula2     varchar2(1000) := '';
lv_Formula2_Col varchar2(30) := '';
lv_Formula3     varchar2(1000) :='';
lv_Formula3_Col varchar2(30) := '';
lv_Formula4     varchar2(1000) :='';
lv_Formula4_Col varchar2(30) := '';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_pf_cont_col varchar2(30) ;
lv_MaxPensionGrossAmt   number(12,2) := 0;
lv_MaxPensionAmt        number(12,2) := 0;
lv_PensionPercentage    number(7,2) := 0;
lv_ESI_C_Percentage     number(7,2) := 0;
lv_cnt int;
begin
    lv_parvalues := 'DIV = '||P_DIVCODE||', FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_remarks := 'PHASE - '||P_PHASE||' START';
    if  substr(P_FNSTDT,1,2) = '01' then
        lv_FirtstDt := to_date(P_FNSTDT,'DD/MM/YYYY');        
    else
        lv_FirtstDt := to_date('01'||substr(P_FNSTDT,3,8),'DD/MM/YYYY');
    end if;
   
    ---- GRADE CODE UPDATE 
    lv_Remarks := 'GRADE CODE UPDATE IN WPSWAGESDETAILS_MV';
    lv_sql := 'UPDATE '||P_TABLENAME||' A SET A.GRADECODE = ( SELECT B.GRADECODE FROM WPSTEMPMAST B  '||CHR(10) 
        ||'                                                   WHERE A.COMPANYCODE=B.COMPANYCODE  AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
        ||'                                                     AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
        ||'                                                 ) '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10)
        ||'   AND A.WORKERSERIAL IN (SELECT WORKERSERIAL FROM WPSTEMPMAST WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''') '||CHR(10);        
    
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
    EXECUTE IMMEDIATE lv_sql  ;
    COMMIT;
    
    --------- for pension part ---------
    
    
    
    --- START ADD ON 29.09.2016 ------
    select MAXIMUMPENSIONGROSS, MAXIMUMPENSION, PENSION_PERCENTAGE, ESICOMPANYPERCENT 
    into lv_MaxPensionGrossAmt, lv_MaxPensionAmt, lv_PensionPercentage, lv_ESI_C_Percentage
    from WPSWAGESPARAMETER 
    WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE;
    
    select SUBSTR( ( 'WPS_'||SYS_CONTEXT('USERENV', 'SESSIONID')) ,1,30) into lv_updtable  from dual ;
    
    lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
            ||' SELECT WORKERSERIAL, PF_GROSS, PENSION_GROSS, PF_CONT, FPF, PF_COM '||chr(10)
            ||' FROM ( '||chr(10)
            ||'         SELECT WORKERSERIAL, EPFAPPLICABLE, PF_GROSS_CUR, PF_CONT_CUR, PF_GROSS, PENSION_GROSS,PF_CONT, '||chr(10)
            ---- changes on 15/07/2020 by amalesh    
--            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN CASE WHEN ROUND(PENSION_GROSS * '||lv_PensionPercentage||'/100)+FPF > '||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||' - FPF ELSE ROUND(PENSION_GROSS * '||lv_PensionPercentage||'/100) END ELSE 0 END FPF, '||chr(10)
--            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN PF_CONT_CUR - CASE WHEN ROUND(PENSION_GROSS * '||lv_PensionPercentage||'/100)+FPF > '||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||' - FPF ELSE ROUND(PENSION_GROSS * '||lv_PensionPercentage||'/100) END ELSE PF_CONT_CUR END PF_COM  '||chr(10)
            ---- changes on 24/07/2020 by amalesh DUE TO 
--            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN CASE WHEN ROUND(PF_GROSS*'||lv_PensionPercentage||'/100)>'||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||'-FPF ELSE ROUND(PF_GROSS*'||lv_PensionPercentage||'/100)-FPF END ELSE 0 END FPF, '||chr(10)
--            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN PF_CONT_CUR - CASE WHEN ROUND(PF_GROSS*'||lv_PensionPercentage||'/100)>'||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||'-FPF ELSE ROUND(PF_GROSS*'||lv_PensionPercentage||'/100)-FPF END ELSE PF_CONT_CUR END PF_COM '||chr(10)                       
            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN CASE WHEN ROUND(ROUND(PF_GROSS,0)*'||lv_PensionPercentage||'/100)>'||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||'-FPF ELSE ROUND(ROUND(PF_GROSS,0)*'||lv_PensionPercentage||'/100)-FPF END ELSE 0 END FPF, '||chr(10)
            ||'         CASE WHEN EPFAPPLICABLE = ''Y'' THEN PF_CONT_CUR - CASE WHEN ROUND(ROUND(PF_GROSS,0)*'||lv_PensionPercentage||'/100)>'||lv_MaxPensionAmt||' THEN '||lv_MaxPensionAmt||'-FPF ELSE ROUND(ROUND(PF_GROSS,0)*'||lv_PensionPercentage||'/100)-FPF END ELSE PF_CONT_CUR END PF_COM '||chr(10)                       
            ||'     FROM (  '||chr(10)
            ||'             SELECT A.WORKERSERIAL, NVL(B.EPFAPPLICABLE,''N'') EPFAPPLICABLE, SUM(PF_GROSS_CUR) PF_GROSS_CUR, SUM(PF_CONT_CUR) PF_CONT_CUR, SUM(PF_GROSS_PREV) PF_GROSS_PREV,  '||chr(10) 
            ||'             SUM(NVL(PF_GROSS,0)) PF_GROSS, SUM(NVL(PF_CONT,0)) PF_CONT, SUM(FPF) FPF, SUM(PF_COM) PF_COM,  '||chr(10)
            ||'             CASE WHEN SUM(NVL(PF_GROSS,0)) > '||lv_MaxPensionGrossAmt||' THEN '||lv_MaxPensionGrossAmt||' - SUM(PENSION_GROSS) ELSE SUM(PF_GROSS) - SUM(PF_GROSS_PREV) END PENSION_GROSS  '||chr(10)
            ||'             FROM (  '||chr(10)
            ||'                     SELECT WORKERSERIAL, NVL(PF_GROSS,0) PF_GROSS_CUR, NVL(PF_CONT,0) PF_CONT_CUR, 0 PF_GROSS_PREV, NVL(PF_GROSS,0) PF_GROSS, 0 PENSION_GROSS, NVL(PF_CONT,0) PF_CONT, 0 FPF, 0 PF_COM  '||chr(10)
            ||'                     FROM '||P_PHASE_TABLENAME||'   '||chr(10)
            ||'                     WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
            ||'                       AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||chr(10)
            ||'                       AND FORTNIGHTENDDATE =  TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  '||chr(10)
            ||'                       AND NVL(PF_CONT,0) > 0  '||chr(10)
            ||'                     UNION ALL '||chr(10)
            ||'                     SELECT WORKERSERIAL, 0 PF_GROSS_CUR, 0 PF_CONT_CUR, NVL(PF_GROSS,0) PF_GROSS_PREV,NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_CONT,0) PF_CONT, NVL(FPF,0) FPF, NVL(PF_COM,0) PF_COM '||chr(10)
            ||'                     FROM WPSWAGESDETAILS_MV '||chr(10)
            ||'                     WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
            ||'                       AND YEARCODE = '''||P_YEARCODE||'''  '||chr(10)
            ||'                       AND FORTNIGHTSTARTDATE <> TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||chr(10)
            ||'                       AND FORTNIGHTENDDATE <> TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  '||chr(10)
            ||'                       AND TO_CHAR(FORTNIGHTSTARTDATE,''YYYYMM'') = '''||lv_YYYYMM||'''  '||chr(10)
            ||'                       AND NVL(PF_CONT,0) > 0  '||chr(10)
                -------- STATE stl PAYMENT ADD DUE TO STL PAID SEPARATELY ---------
            ||'                     UNION ALL '||chr(10)
            ||'                     SELECT WORKERSERIAL, 0 PF_GROSS_CUR, 0 PF_CONT_CUR, NVL(PF_GROSS,0) PF_GROSS_PREV,NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_E,0) PF_CONT, NVL(FPF,0) FPF, NVL(PF_C,0) PF_COM '||chr(10)
            ||'                     FROM WPSSTLWAGESDETAILS '||chr(10)
            ||'                     WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
            ||'                       AND YEARCODE = '''||P_YEARCODE||'''  '||chr(10)
            ||'                       AND PAYMENTDATE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')  '||chr(10)
            ||'                       AND TO_CHAR(PAYMENTDATE,''YYYYMM'') = '''||lv_YYYYMM||'''  '||chr(10)
                -------- END stl PAYMENT ADD DUE TO STL PAID SEPARATELY ---------
            ||'                  ) A, WPSWORKERMAST B  '||chr(10)
            ||'             WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10) 
            ||'               AND A.WORKERSERIAL = B.WORKERSERIAL      '||chr(10)
            ||'             GROUP BY A.WORKERSERIAL, B.EPFAPPLICABLE '||chr(10)
            ||'         ) '||chr(10)
            ||'    )   '||chr(10); 
    --dbms_output.put_line( lv_sql );
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
    EXECUTE IMMEDIATE lv_sql  ;
    
   
    lv_sql := 'UPDATE '||P_TABLENAME||' A SET (PENSION_GROSS, FPF, PF_COM  ) = ( SELECT PENSION_GROSS, FPF, PF_COM  FROM '||lv_updtable||' B '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10); 
    --- END ADD ON 29.09.2016 -----------
    --dbms_output.put_line( lv_sql );
    lv_remarks := NVL(lv_remarks,'XX ') ||' UPDATE PENSION GROSS, FPF, PF_COM';
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);    
    EXECUTE IMMEDIATE lv_sql;
       BEGIN
        execute immediate 'DROP TABLE '||lv_updtable ;
       EXCEPTION
        WHEN OTHERS THEN
          lv_sqlerrm := sqlerrm;
          raise_application_error(-20101, lv_sqlerrm||'ERROR WHILE UPDATING '||P_TABLENAME||' FROM TABLE '||lv_updtable);
       END ;                          
   ---------------- ESI COMPANY CONTRIBUTION UPDATE ---------    
   lv_remarks := 'PHASE - '||P_PHASE||' START UPDATE ESI_C';
   lv_Sql := ' UPDATE '||P_TABLENAME||' SET ESI_COMP_CONT = CEIL(ROUND(ESI_GROSS * '||lv_ESI_C_Percentage||'/100,2)) '||CHR(10)
        ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||'   AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||'   AND FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||'   AND NVL(ESI_CONT,0) > 0 '||CHR(10);
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);    
    EXECUTE IMMEDIATE lv_sql;
    
    ------- UPDATE GROUP CODE IN P_TABLENAME
    lv_remarks := 'PHASE - '||P_PHASE||' START UPDATE GROUPCODE';
    
    lv_Sql :='UPDATE '||P_TABLENAME||' A SET A.GROUPCODE=(SELECT GROUPCODE FROM WPSWORKERMAST B WHERE B.WORKERSERIAL= A.WORKERSERIAL AND A.COMPANYCODE=B.COMPANYCODE AND A.DIVISIONCODE=B.DIVISIONCODE  )'||CHR(10)
        ||'WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||'   AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||'   AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||'   AND A.GROUPCODE IS NULL'||CHR(10);
        
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);    
    DBMS_OUTPUT.PUT_LINE(lv_Sql);
    EXECUTE IMMEDIATE lv_sql;
    
    ---------UPDATE STL BALANCE 
    lv_remarks := 'PHASE - '||P_PHASE||' START UPDATE STLBAL';
    PRC_STLBAL_INCLUDE_ENCASH(P_COMPCODE, P_DIVCODE,P_FNENDT);
    
    lv_Sql :='UPDATE '||P_TABLENAME||' A SET A.STL_BAL=(SELECT STLBAL_DAYS FROM GBL_STLBAL B WHERE B.WORKERSERIAL= A.WORKERSERIAL AND A.COMPANYCODE=B.COMPANYCODE AND A.DIVISIONCODE=B.DIVISIONCODE )'||CHR(10)
        ||'WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||'   AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||'   AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10);
        
    INSERT INTO WPS_ERROR_LOG ( PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) VALUES (lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);    
    EXECUTE IMMEDIATE lv_sql;
    
    ------- DEPARTMENT AND SHIFT UPDATE FOR GENERATE THE PAYSLIP 
    ---- NOW IT'S CALLING FROM WPSWAGESPROCESSTYPE_PHASE TABLE -----------
    ----- PROC_WPSWAGES_DEPTSHIFT_UPDT(P_COMPCODE, P_DIVCODE,P_YEARCODE, P_FNSTDT, P_FNENDT,101,P_TABLENAME,P_TABLENAME,'');
    
     ---- CUMULITVE COMPONENT UPDATE PROCEDURE ------
--    PROC_WPSOTHER_CUMMULATIVE_UPDT(P_COMPCODE,P_DIVCODE,P_YEARCODE,P_FNSTDT,P_FNENDT,99,P_PHASE_TABLENAME, P_TABLENAME,NULL);       
end;
/


DROP PROCEDURE PROC_WPSWAGES_VBUPDATE;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGES_VBUPDATE(
    P_COMPCODE varchar2, P_DIVCODE varchar2, P_YEARCODE Varchar2,
    P_FNSTDT varchar2,P_FNENDT varchar2,P_PHASE NUMBER,
    P_PHASE_TABLENAME VARCHAR2,
    P_TABLENAME varchar2 DEFAULT 'WPSWAGESDETAILS',
    P_WORKERSERIAL varchar2 DEFAULT NULL,
    P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS'
)

AS  
    lv_sql varchar2(10000):='';
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PROC_WPSWAGES_VBUPDATE';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400):='';
    lv_cnt number:=0;
BEGIN


    
    lv_sql := 'SELECT COUNT(1) FROM COL WHERE TNAME='''||P_PHASE_TABLENAME||'''';
    EXECUTE IMMEDIATE lv_sql INTO lv_cnt;
    
    IF lv_cnt>0 THEN
        lv_sql :='DROP TABLE '||P_PHASE_TABLENAME;
        EXECUTE IMMEDIATE lv_sql;
    END IF;
    lv_Remarks:='TEMP TABLE CREATE';
    lv_sql:='CREATE TABLE '||P_PHASE_TABLENAME||CHR(10)
          ||'AS'||CHR(10)
          ||'('||CHR(10)
          ||'SELECT A.COMPANYCODE,DIVISIONCODE,A.WORKERSERIAL,A.FORTNIGHTSTARTDATE,A.FORTNIGHTENDDATE,A.DEPARTMENTCODE, A.SECTIONCODE,A.OCCUPATIONCODE,A.SHIFTCODE,A.DEPTSERIAL ,'||CHR(10)
           ||'SUM(NVL(VBAMOUNT,0))VBAMOUNT,SUM(NVL(ATTENDANCEHOURS,0))ATTENDANCEHOURS,'||CHR(10)
            ||'SUM(NVL(OVERTIMEHOURS,0))OVERTIMEHOURS,SUM(NVL(VBAMOUNT_OT,0))VBAMOUNT_OT,'||CHR(10)
             ||'SUM(NVL(NS_HOURS,0))NS_HOURS,SUM(NVL(VBAMOUNT_NS,0))VBAMOUNT_NS,'||CHR(10)
              ||'SUM(NVL(OTNS_HOURS,0))OTNS_HOURS,SUM(NVL(VBAMOUNT_OTNS,0))VBAMOUNT_OTNS,'||CHR(10)
               ||'SUM(NVL(FBKHOURS,0))FBKHOURS,SUM(NVL(VBAMOUNT_FBK,0))VBAMOUNT_FBK,'||CHR(10)
                ||'SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS,SUM(NVL(VBAMOUNT_HOLIDAY,0))VBAMOUNT_HOLIDAY,'||CHR(10)
                 ||'SUM(NVL(TOTAL_VBAMOUNT,0))TOTAL_VBAMOUNT,'||CHR(10)
                  ||'SUM(NVL(PF_ADJ,0))PF_ADJ,SUM(NVL(NPF_ADJ,0))NPF_ADJ'||CHR(10)
                  ||'FROM WPSVBDETAILS  A'||CHR(10)
                   ||'WHERE A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
                   ||'AND A.FORTNIGHTENDDATE =TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
                   ||'AND A.COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
                   ||'AND A.DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
                   ||'GROUP BY A.COMPANYCODE,DIVISIONCODE,A.WORKERSERIAL,A.FORTNIGHTSTARTDATE,A.FORTNIGHTENDDATE,A.DEPARTMENTCODE, A.SECTIONCODE,A.OCCUPATIONCODE,A.SHIFTCODE,A.DEPTSERIAL'||CHR(10)
                   ||')'||CHR(10);
          
          
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql; 
    
    
    lv_Remarks:='UPDATE VBASIC,OT_AMOUNT,NS_ALLOW,NS_ALLOW_OT,FBK_WAGES,H_WAGES,PF_ADJ,NPF_ADJ';
    lv_sql:='UPDATE '||P_TABLENAME||' A SET (VBASIC,OT_AMOUNT,NS_ALLOW,NS_ALLOW_OT,FBK_WAGES,H_WAGES,PF_ADJ,NPF_ADJ)=('||CHR(10)
         ||'                                            SELECT VBAMOUNT,VBAMOUNT_OT,VBAMOUNT_NS,VBAMOUNT_OTNS,VBAMOUNT_FBK,VBAMOUNT_HOLIDAY,PF_ADJ,NPF_ADJ FROM '||P_PHASE_TABLENAME||' B'||CHR(10)
         ||'                                            WHERE B.COMPANYCODE=A.COMPANYCODE'||CHR(10)
         ||'                                                AND B.DIVISIONCODE=A.DIVISIONCODE'||CHR(10)
         ||'                                                AND B.WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                AND B.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND B.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND A.SECTIONCODE = B.SECTIONCODE'||CHR(10)
         ||'                                                AND A.DEPARTMENTCODE = B.DEPARTMENTCODE'||CHR(10)
         ||'                                                AND A.SHIFTCODE = B.SHIFTCODE'||CHR(10)
         ||'                                                AND A.DEPTSERIAL = B.DEPTSERIAL'||CHR(10)
         ||'                                                AND A.OCCUPATIONCODE = B.OCCUPATIONCODE'||CHR(10)
         ||'                                        )'||CHR(10)
         ||'WHERE A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'  AND A.WORKERSERIAL IN (  SELECT WORKERSERIAL FROM '||P_PHASE_TABLENAME||' '||CHR(10)
         ||'                           WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
         ||'                             AND FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                             AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                        )'||CHR(10);           
    --DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;  
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm ;
      insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
      values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
              
END;
/


DROP PROCEDURE PROC_WPSWEEKLYSHIFTALLOCATION;

CREATE OR REPLACE PROCEDURE "PROC_WPSWEEKLYSHIFTALLOCATION" 
(
    p_companycode varchar2,
    p_divisioncode varchar2,
    p_fromdt varchar2,
    p_todt varchar2
)
as 
    lv_sqlstr           varchar2(20000);
begin
    delete from GTT_WPSWEEKLYSHIFTALLOCATION;
    lv_sqlstr :=    'insert into GTT_WPSWEEKLYSHIFTALLOCATION '|| chr(10)
          || ' SELECT  B.DEPARTMENTCODE,C.DEPARTMENTNAME,A.TOKENNNO,B.WORKERNAME,A.DATEOFATTENDANCE DATEOFATTENDANCE,    '|| chr(10)
          || '       A.SHIFTCODE,D.SHIFTNAME,E.COMPANYNAME, ''' || p_fromdt || '''||'' to ''||''' || p_todt || ''' EX1, NULL EX2,NULL EX3,NULL EX4,NULL EX5 '|| chr(10)
          || ' FROM WPSDAILYATTENDANCEALLOCATION A, WPSWORKERMAST B, WPSDEPARTMENTMASTER C, WPSSHIFTMAST D, COMPANYMAST E '|| chr(10)
          || 'WHERE A.COMPANYCODE='''|| p_companycode ||''' '|| chr(10)
          || '  AND A.DIVISIONCODE='''|| p_divisioncode ||''' '|| chr(10)
          || '  AND A.DATEOFATTENDANCE BETWEEN TO_DATE(''' || p_fromdt || ''',''DD/MM/YYYY'') '|| chr(10)
          || '                         AND TO_DATE(''' || p_todt || ''',''DD/MM/YYYY'') '|| chr(10)
          || '  AND A.COMPANYCODE=B.COMPANYCODE '|| chr(10)
          || '  AND A.DIVISIONCODE=B.DIVISIONCODE '|| chr(10)
          || '  AND A.TOKENNNO=B.TOKENNO '|| chr(10)
          || '  AND A.WORKERSERIAL=B.WORKERSERIAL '|| chr(10)
          || '  AND A.COMPANYCODE=C.COMPANYCODE '|| chr(10)
          || '  AND A.DIVISIONCODE=C.DIVISIONCODE '|| chr(10)
          || '  AND A.DEPARTMENTCODE=C.DEPARTMENTCODE '|| chr(10)
          || '  AND A.COMPANYCODE=D.COMPANYCODE '|| chr(10)
          || '  AND A.DIVISIONCODE=D.DIVISIONCODE '|| chr(10)
          || '  AND A.SHIFTCODE=D.SHIFTCODE '|| chr(10)
          || '  AND A.COMPANYCODE=E.COMPANYCODE '|| chr(10)
          || '  ORDER BY DEPARTMENTCODE,A.TOKENNNO,TO_CHAR(A.DATEOFATTENDANCE,''DD/MM/YYYY''),A.SHIFTCODE '|| chr(10);
 
                 
    --dbms_output.put_line(lv_sqlstr);
   execute immediate lv_sqlstr;
end;
/


DROP PROCEDURE PROC_WPSWORKERCATEGORYMASTVIEW;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERCATEGORYMASTVIEW
(
P_COMPANYCODE    VARCHAR2,  --NJ0001
P_DIVISIONCODE   VARCHAR2,  --0002
P_REF_TABLE_NAME VARCHAR2, --WPSOCCUPATIONMAST
P_REF_KEY_COL1   VARCHAR2,  -- DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE
P_REF_KEY_COL2   VARCHAR2 DEFAULT NULL      
)
as
-- exec proc_WPSWORKERCATEGORYMASTview('BJ0056','0001','WPSWORKERCATEGORYMAST') ;
--                COMPANYCODE=P_COMPANYCODE
--            AND DIVISIONCODE=P_DIVISIONCODE
--            AND MODULE = 'GPS'
--            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
LV_COMPANYCODE         VARCHAR2(10 BYTE) := LTRIM(TRIM(P_COMPANYCODE)) ;   
LV_DIVISIONCODE        VARCHAR2(10 BYTE) := LTRIM(TRIM(P_DIVISIONCODE)) ;
LV_REF_TABLE_NAME      VARCHAR2(30)      := LTRIM(TRIM(P_REF_TABLE_NAME)) ;
--LV_YEARCODE            VARCHAR2(10 BYTE) := LTRIM(TRIM(P_YEARCODE)) ;
lv_CATMASTCOLS varchar2(10000) := 'SELECT ';
lv_end_sql varchar2(10000) ;
lv_table varchar2(30) := LV_REF_TABLE_NAME ;
--lv_catparams_cols varchar2(4000);
lv_catparams_cols_with_null CLOB := '';
lv_catparams_cols CLOB := '';
lv_catparams_cols_list CLOB := '';
--lv_cat_param_id varchar2(10):='P';
lv_VIEW_COL_VAL varchar2(300);
lv_totcat int;
lv_catrow int;
lv_tot_param_COL int;
lv_param_row int;
lv_endstr varchar2(2);
lv_view_name varchar2(30) := 'VW_'||lv_table ;
lv_sql CLOB  := 'CREATE OR REPLACE FORCE VIEW '||lv_view_name||chr(10)||' AS '||chr(10) ;
lv_sqlerrm  VARCHAR2(250) := '';
lv_sql_create varchar2(4000) ;
lv_comp_div_cnt int := 0;
lv_tot_comp_div_cnt int;
----------  START SUB ROUTINE ------
--------------------------------------
procedure p_create_blank_view_table( p_view_tab varchar2 DEFAULT 'VIEWTAB_WPSWORKERCATEGORYMAST', p_ref_tablename varchar2 DEFAULT 'WPSWORKERCATEGORYMAST' )
         as
           lv_sql_create varchar2(4000) := 'create table '||p_view_tab||' ('||chr(10); 
           lv_rows int;
           lv_loop int;
         begin             
           select count(*) into lv_rows from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID') ;
           lv_loop := 0;   
           for c1 in (
             select column_name , DATA_TYPE , DATA_LENGTH, DATA_PRECISION, DATA_SCALE  from cols a where table_name = p_ref_tablename 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id      ) loop
             lv_loop := lv_loop+1;
            -- if lv_loop < lv_rows then
              if c1.DATA_TYPE = 'VARCHAR2' then
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_LENGTH||') ,'||chr(10) ;
              elsif c1.DATA_TYPE = 'NUMBER' then
                if c1.DATA_PRECISION is not null then
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||'('||c1.DATA_PRECISION||','||c1.DATA_SCALE ||' ) ,'||chr(10) ;
                else
                 lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
                end if;
              else
                lv_sql_create := lv_sql_create ||c1.column_name||' '||c1.data_type||' ,'||chr(10) ;
              end if;                               
            end loop;
           ----       
           select count(*) into lv_rows 
           from(
              SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE 
           );
            lv_loop:=0;
            for c1 in (
             SELECT REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = p_ref_tablename
             GROUP BY  REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE  
             order by   VIEW_COL   ) loop
             lv_loop := lv_loop+1;
             if lv_loop < lv_rows then
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') ,'||chr(10) ;
             else
              lv_sql_create := lv_sql_create ||c1.view_col||' '||c1.data_type||'('||c1.width||') '||chr(10)||')' ;
             end if;                        
            end loop;
            execute immediate lv_sql_create ;
end;
----------- END SUB ROUTINE ----------
--------------------------------------
BEGIN
for c2 in( select column_name from cols where table_name = LV_REF_TABLE_NAME 
           and column_name not in (/*'COMPANYCODE','DIVISIONCODE',*/'USERNAME','LASTMODIFIED','SYSROWID')
           order by column_id
         ) loop
       lv_CATMASTCOLS := lv_CATMASTCOLS||c2.column_name||' ,' ;       
end loop;
lv_end_sql := lv_end_sql||' from '||lv_table ;
----DBMS_OUTPUT.PUT_LINE(lv_CATMASTCOLS);
if lv_table = 'WPSWORKERCATEGORYMAST' then
               
     select count(distinct WORKERCATEGORYCODE)  into lv_totcat FROM WPSWORKERCATEGORYMAST
                WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                AND DIVISIONCODE=P_DIVISIONCODE*/                
                AND WORKERCATEGORYCODE IS NOT NULL;    
                lv_catrow := 0;
      select count(*) into lv_tot_comp_div_cnt from (
                           select distinct companycode,divisioncode from WPSWORKERCATEGORYMAST
                           );           
     FOR CD IN( SELECT DISTINCT COMPANYCODE, DIVISIONCODE FROM WPSWORKERCATEGORYMAST ) LOOP   
            lv_catrow := 0;  
            lv_comp_div_cnt := lv_comp_div_cnt+1;
            for c2 in ( select distinct WORKERCATEGORYCODE FROM WPSWORKERCATEGORYMAST
                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                        AND DIVISIONCODE=P_DIVISIONCODE */                
                        AND WORKERCATEGORYCODE IS NOT NULL    ) loop  
                        lv_catparams_cols := '';    
                        lv_catrow := lv_catrow + 1;
                       -- select count(distinct PARAM_NAME) into lv_tot_param_COL 
                        select count(*) into lv_tot_param_COL 
                        FROM ( 
                               SELECT PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                                      GROUP BY PARAM_NAME, REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE    
                                    ) ;          
                        lv_param_row := 0;
                        for c1 in( SELECT PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,OBJECT_TYPE DATA_TYPE,MAX(DATA_TYPE)  WIDTH /*,MAX(MAXLENGTH) MAXLENGTH */  FROM SYS_SWT_TABLE_PARAMMAST
                                        WHERE 1=1 /*COMPANYCODE=P_COMPANYCODE
                                        AND DIVISIONCODE=P_DIVISIONCODE*/
                                        AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                                    GROUP BY  PARAM_NAME ,REPLACE(PARAM_NAME,CHR(32)) , OBJECT_TYPE  
                                    order by   VIEW_COL 
                                   ) loop
                                   lv_param_row := lv_param_row+1;  
                                   BEGIN  
                                    select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE= CD.COMPANYCODE and  DIVISIONCODE = CD.DIVISIONCODE and param_id = c2.WORKERCATEGORYCODE and PARAM_NAME = c1.param_name 
                                    AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                                    AND NVL(EFFECTIVEDATE,to_date('01/01/1900','DD/MM/YYYY')  ) = ( SELECT NVL(MAX(EFFECTIVEDATE),to_date('01/01/1900','DD/MM/YYYY') ) FROM 
                                                         SYS_SWT_PARAMDETAILS WHERE REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                          AND COMPANYCODE= CD.COMPANYCODE and  DIVISIONCODE = CD.DIVISIONCODE and PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0 */AND PARAM_ID = c2.WORKERCATEGORYCODE);
                                    --and PARAM_VALUE > 0 ;     
                                   EXCEPTION 
                                    WHEN OTHERS THEN
                                      lv_VIEW_COL_VAL := 'NULL';
                                   END;  
                                   lv_VIEW_COL_VAL := LTRIM(TRIM(lv_VIEW_COL_VAL));
                                  --  dbms_output.put_line(c1.VIEW_COL||chr(10)|| lv_param_row|| ' TOT'|| lv_tot_param_COL || ' UNION ALL ');                          
                                   
                                   select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                                   if lv_VIEW_COL_VAL = 'NULL' then
                                    lv_catparams_cols := lv_catparams_cols||' NULL  AS '||c1.VIEW_COL||lv_endstr ;                                      
                                   else  
                                     if c1.DATA_TYPE = 'VARCHAR2' or c1.DATA_TYPE = 'DATE'  then       
                                      lv_catparams_cols := lv_catparams_cols||' '''||lv_VIEW_COL_VAL||'''  AS '||c1.VIEW_COL||lv_endstr ;
                                     else
                                      lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                                     -- dbms_output.put_line(c1.VIEW_COL||chr(10)||' UNION ALL ');
                                     end if; 
                                   end if  ;                       
                          end loop;                       
                          lv_end_sql := ' FROM '||lv_table||' WHERE 1=1  AND '||P_REF_KEY_COL1||' = '''||c2.WORKERCATEGORYCODE||'''  AND COMPANYCODE= '''||CD.COMPANYCODE||''' and  DIVISIONCODE = '''||CD.DIVISIONCODE||''' ' ;
                      
                     if lv_tot_param_COL > 0 then    -- ab                            
                         if lv_catrow =1 and lv_comp_div_cnt = 1 then           
                           lv_sql_create := 'drop table VIEWTAB_WPSWORKERCATEGORYMAST ';
                           BEGIN
                            execute immediate lv_sql_create ;
                           EXCEPTION
                            WHEN OTHERS THEN
                             NULL;
                           END;  
                          p_create_blank_view_table ;  
                          lv_sql_create := 'insert into VIEWTAB_WPSWORKERCATEGORYMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;                           
                           execute immediate lv_sql_create ;
                          --return;       
                          -- exit; -- create table xxxx as lv_sql
                         else
                           lv_sql_create := 'insert into VIEWTAB_WPSWORKERCATEGORYMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;                           
                           execute immediate lv_sql_create ;
                           
                         end if;   
                     end if;    -- ab  
                     
            end loop;
     END LOOP; --> COMPANY DIVISION       
     lv_sql := lv_sql||' SELECT * FROM VIEWTAB_WPSWORKERCATEGORYMAST ';  
ELSIF lv_table = 'WPSOCCUPATIONMAST' then    
    ---- insert new style of occupationmast view creation query --
 --  select 'COMPANYCODE,DIVISIONCODE,'||replace(KEY_COLUMN,'~',',') REF_KEY_COL1 from SYS_SWT_TABLE_PARAMMAST where  REF_TABLE_NAME = 'WPSOCCUPATIONMAST'    
 -- to fetch key columns
 -- select distinct 'COMPANYCODE,DIVISIONCODE,'||replace(KEY_COLUMN,'~',',') REF_KEY_COL1 from SYS_SWT_TABLE_PARAMMAST where  REF_TABLE_NAME = 'WPSOCCUPATIONMAST'  
   
   select count(distinct COMPANYCODE||DIVISIONCODE||DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE )  into lv_totcat FROM WPSOCCUPATIONMAST -- ab
                WHERE 1=1
               -- AND COMPANYCODE=P_COMPANYCODE
               -- AND DIVISIONCODE=P_DIVISIONCODE    
                AND DEPARTMENTCODE IS NOT NULL  -- ab 
                AND SECTIONCODE IS NOT NULL        -- ab    
                AND OCCUPATIONCODE IS NOT NULL
                  
                ;    
                lv_catrow := 0;
    for c2 in ( select distinct companycode,divisioncode ,DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE OCCUPATIONCODE FROM WPSOCCUPATIONMAST --ab
                WHERE 1=1 
                --AND COMPANYCODE=P_COMPANYCODE
                --AND DIVISIONCODE=P_DIVISIONCODE
                AND DEPARTMENTCODE IS NOT NULL  -- ab 
                AND SECTIONCODE IS NOT NULL        -- ab                                    
                AND OCCUPATIONCODE IS NOT NULL    ) loop   
               -- lv_catparams_cols := ''; 
                lv_catparams_cols_with_null := '';   
                lv_catparams_cols_list := '';
                lv_catrow := lv_catrow + 1;
                select count(distinct PARAM_NAME) into lv_tot_param_COL 
                FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1
                          --  AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                          --  AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME;             
                lv_param_row := 0;
                for c1 in(
                            SELECT DISTINCT PARAM_NAME,  REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,LENGTH(REPLACE(PARAM_NAME,CHR(32)))  LEN,OBJECT_TYPE DATA_TYPE,DATA_TYPE WIDTH FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1 
                           -- AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                           -- AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                             ) loop
                           lv_param_row := lv_param_row+1;  
                           BEGIN  
                           -- select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name ;
                            select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name 
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                            AND NVL(EFFECTIVEDATE,to_date('01/01/1900','DD/MM/YYYY')  ) = ( SELECT NVL(MAX(EFFECTIVEDATE),to_date('01/01/1900','DD/MM/YYYY') ) FROM 
                                                  SYS_SWT_PARAMDETAILS WHERE  COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                  AND PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0*/  AND PARAM_ID = c2.OCCUPATIONCODE) ;
                            /*and PARAM_VALUE > 0 */
                           EXCEPTION 
                            WHEN OTHERS THEN
                              lv_VIEW_COL_VAL := 'NULL';
                           END;  
                           select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                           if lv_VIEW_COL_VAL = 'NULL' then
                            if c1.DATA_TYPE = 'VARCHAR2' then
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                            -- lv_catparams_cols := lv_catparams_cols||''''||RPAD(CHR(32),c1.WIDTH,CHR(32)) ||'''  AS '||c1.VIEW_COL||lv_endstr ;                             
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||'  CAST( RPAD(CHR(32),'||c1.WIDTH||',CHR(32)) AS VARCHAR2('||c1.WIDTH||') )   AS '||c1.VIEW_COL||lv_endstr ;
                            else
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr; 
                          --   lv_catparams_cols := lv_catparams_cols||' 0  AS '||c1.VIEW_COL||lv_endstr ;
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||' TO_NUMBER(NULL)  AS '||c1.VIEW_COL||lv_endstr ;
                            end if;        
                           else  
                             if c1.DATA_TYPE = 'VARCHAR2' then   
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;    
                           --   lv_catparams_cols := lv_catparams_cols||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                             else
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                           --   lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                             end if; 
                           end if  ;                       
                  end loop;
    --              lv_end_sql := ' from '||lv_table||' where companycode = '''||P_COMPANYCODE||''' and divisioncode = '''||P_DIVISIONCODE||''' and categorycode = '''||c2.categorycode||'''' ;
                  lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||c2.COMPANYCODE||''' AND DIVISIONCODE = '''||c2.DIVISIONCODE||''' AND '||P_REF_KEY_COL1||' = '''||c2.OCCUPATIONCODE||'''' ;            
      if lv_tot_param_COL > 0 then    -- ab   
         if lv_catrow =1 then           
           lv_sql_create := 'drop table VIEWTAB_WPSOCCUPATIONMAST ';
           BEGIN
            execute immediate lv_sql_create ;
           EXCEPTION
            WHEN OTHERS THEN
             NULL;
           END;
         p_create_blank_view_table( 'VIEWTAB_WPSOCCUPATIONMAST', 'WPSOCCUPATIONMAST' );
         lv_sql_create := 'insert into VIEWTAB_WPSOCCUPATIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ; 
         execute immediate lv_sql_create ;
         --  p_create_blank_view_table( 'VIEWTAB_GPSOCCUPATIONMAST', 'GPSOCCUPATIONMAST' ); -- currently commented due to  mismatch in insert colist and select collist
          -- dbms_output.put_line('CREATE '||lv_sql_create);       
          -- exit; -- create table xxxx as lv_sql
         else           
           --lv_sql_create := 'insert into VIEWTAB_GPSOCCUPATIONMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
           lv_sql_create := 'insert into VIEWTAB_WPSOCCUPATIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ;
           --dbms_output.put_line('INSERT '||lv_sql_create);
            execute immediate lv_sql_create ;
         end if;   
      end if;    -- ab            
    end loop;
    lv_sql := lv_sql||' SELECT * FROM VIEWTAB_WPSOCCUPATIONMAST ';   
   -- end insert occupationmast view creation query --
ELSIF lv_table = 'WPSSECTIONMAST' then    
    ---- insert new style of occupationmast view creation query --
 --  select 'COMPANYCODE,DIVISIONCODE,'||replace(KEY_COLUMN,'~',',') REF_KEY_COL1 from SYS_SWT_TABLE_PARAMMAST where  REF_TABLE_NAME = 'WPSSECTIONMAST'    
 -- to fetch key columns
 -- select distinct 'COMPANYCODE,DIVISIONCODE,'||replace(KEY_COLUMN,'~',',') REF_KEY_COL1 from SYS_SWT_TABLE_PARAMMAST where  REF_TABLE_NAME = 'WPSSECTIONMAST'  
   
   select count(distinct COMPANYCODE||DIVISIONCODE||DEPARTMENTCODE||SECTIONCODE  )  into lv_totcat FROM WPSSECTIONMAST -- ab
                WHERE 1=1
               -- AND COMPANYCODE=P_COMPANYCODE
               -- AND DIVISIONCODE=P_DIVISIONCODE    
                AND DEPARTMENTCODE IS NOT NULL  -- ab 
                AND SECTIONCODE IS NOT NULL  ;      -- ab   ;    
                lv_catrow := 0;
    for c2 in ( select distinct companycode,divisioncode ,DEPARTMENTCODE||SECTIONCODE  OCCUPATIONCODE FROM WPSSECTIONMAST --ab
                WHERE 1=1 
                --AND COMPANYCODE=P_COMPANYCODE
                --AND DIVISIONCODE=P_DIVISIONCODE
                AND DEPARTMENTCODE IS NOT NULL  -- ab 
                AND SECTIONCODE IS NOT NULL        -- ab                                    
                    ) loop   
               -- lv_catparams_cols := ''; 
                lv_catparams_cols_with_null := '';   
                lv_catparams_cols_list := '';
                lv_catrow := lv_catrow + 1;
                select count(distinct PARAM_NAME) into lv_tot_param_COL 
                FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1
                          --  AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                          --  AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME;             
                lv_param_row := 0;
                for c1 in(
                            SELECT DISTINCT PARAM_NAME,  REPLACE(PARAM_NAME,CHR(32)) AS VIEW_COL,LENGTH(REPLACE(PARAM_NAME,CHR(32)))  LEN,OBJECT_TYPE DATA_TYPE,DATA_TYPE WIDTH FROM SYS_SWT_TABLE_PARAMMAST
                            WHERE 1=1 
                           -- AND COMPANYCODE=c2.COMPANYCODE --P_COMPANYCODE
                           -- AND DIVISIONCODE=c2.DIVISIONCODE --P_DIVISIONCODE
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                             ) loop
                           lv_param_row := lv_param_row+1;  
                           BEGIN  
                           -- select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name ;
                            select NVL(param_value,'NULL') into lv_VIEW_COL_VAL from SYS_SWT_PARAMDETAILS where COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and param_id = c2.OCCUPATIONCODE and PARAM_NAME = c1.param_name 
                            AND REF_TABLE_NAME = LV_REF_TABLE_NAME
                            AND NVL(EFFECTIVEDATE,to_date('01/01/1900','DD/MM/YYYY')  ) = ( SELECT NVL(MAX(EFFECTIVEDATE),to_date('01/01/1900','DD/MM/YYYY') ) FROM 
                                                  SYS_SWT_PARAMDETAILS WHERE  COMPANYCODE=c2.COMPANYCODE and DIVISIONCODE=c2.DIVISIONCODE and REF_TABLE_NAME = LV_REF_TABLE_NAME
                                                  AND PARAM_NAME = c1.param_name /*AND PARAM_VALUE > 0*/  AND PARAM_ID = c2.OCCUPATIONCODE) ;
                            /*and PARAM_VALUE > 0 */
                           EXCEPTION 
                            WHEN OTHERS THEN
                              lv_VIEW_COL_VAL := 'NULL';
                           END;  
                           select decode(lv_param_row, lv_tot_param_COL,' ',',' )  into lv_endstr from dual;
                           if lv_VIEW_COL_VAL = 'NULL' then
                            if c1.DATA_TYPE = 'VARCHAR2' then
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                            -- lv_catparams_cols := lv_catparams_cols||''''||RPAD(CHR(32),c1.WIDTH,CHR(32)) ||'''  AS '||c1.VIEW_COL||lv_endstr ;                             
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||'  CAST( RPAD(CHR(32),'||c1.WIDTH||',CHR(32)) AS VARCHAR2('||c1.WIDTH||') )   AS '||c1.VIEW_COL||lv_endstr ;
                            else
                             lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr; 
                          --   lv_catparams_cols := lv_catparams_cols||' 0  AS '||c1.VIEW_COL||lv_endstr ;
                             lv_catparams_cols_with_null := lv_catparams_cols_with_null||' TO_NUMBER(NULL)  AS '||c1.VIEW_COL||lv_endstr ;
                            end if;        
                           else  
                             if c1.DATA_TYPE = 'VARCHAR2' then   
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;    
                           --   lv_catparams_cols := lv_catparams_cols||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '''||TRIM(lv_VIEW_COL_VAL)||'''  AS '||c1.VIEW_COL||lv_endstr ;
                             else
                              lv_catparams_cols_list := lv_catparams_cols_list||c1.VIEW_COL||lv_endstr;
                           --   lv_catparams_cols := lv_catparams_cols||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                              lv_catparams_cols_with_null := lv_catparams_cols_with_null||' '||lv_VIEW_COL_VAL||'  AS '||c1.VIEW_COL||lv_endstr ;
                             end if; 
                           end if  ;                       
                  end loop;
    --              lv_end_sql := ' from '||lv_table||' where companycode = '''||P_COMPANYCODE||''' and divisioncode = '''||P_DIVISIONCODE||''' and categorycode = '''||c2.categorycode||'''' ;
                  lv_end_sql := ' FROM '||lv_table||' WHERE COMPANYCODE = '''||c2.COMPANYCODE||''' AND DIVISIONCODE = '''||c2.DIVISIONCODE||''' AND '||P_REF_KEY_COL1||' = '''||c2.OCCUPATIONCODE||'''' ;            
      if lv_tot_param_COL > 0 then    -- ab   
         if lv_catrow =1 then           
           lv_sql_create := 'drop table VIEWTAB_WPSSECTIONMAST ';
           BEGIN
            execute immediate lv_sql_create ;
           EXCEPTION
            WHEN OTHERS THEN
             NULL;
           END;
         p_create_blank_view_table( 'VIEWTAB_WPSSECTIONMAST', 'WPSSECTIONMAST' );
         lv_sql_create := 'insert into VIEWTAB_WPSSECTIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ; 
         execute immediate lv_sql_create ;
         --  p_create_blank_view_table( 'VIEWTAB_WPSSECTIONMAST', 'WPSSECTIONMAST' ); -- currently commented due to  mismatch in insert colist and select collist
          -- dbms_output.put_line('CREATE '||lv_sql_create);       
          -- exit; -- create table xxxx as lv_sql
         else           
           --lv_sql_create := 'insert into VIEWTAB_WPSSECTIONMAST '||lv_CATMASTCOLS||' '||lv_catparams_cols||lv_end_sql ;
           lv_sql_create := 'insert into VIEWTAB_WPSSECTIONMAST('||substr( lv_CATMASTCOLS,7)||' '||lv_catparams_cols_list||') '||lv_CATMASTCOLS||' '||lv_catparams_cols_with_null||lv_end_sql ;
           --dbms_output.put_line('INSERT '||lv_sql_create);
            execute immediate lv_sql_create ;
         end if;   
      end if;    -- ab            
    end loop;
    lv_sql := lv_sql||' SELECT * FROM VIEWTAB_WPSSECTIONMAST ';   
   -- end insert WPSSECTIONMAST view creation query --   
end if;
insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_WPSWORKERCATEGORYMASTVIEW',NULL,lv_Sql);
COMMIT;
--dbms_output.put_line(' XXX '||lv_sql);
execute immediate lv_sql ;
exception
when others then
 lv_sqlerrm := sqlerrm ;
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY) values( P_COMPANYCODE, P_DIVISIONCODE, 'PROC_WPSWORKERCATEGORYMASTVIEW',lv_sqlerrm,lv_Sql);
 --dbms_output.put_line(sqlerrm ||lv_sql);
end;
/


DROP PROCEDURE PROC_WPSWORKERCATEGORY_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERCATEGORY_UPDT ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';
lv_cnt              number(5):=0;   

begin
--     dbms_output.put_line('start : ');
    FOR C1 IN (
                SELECT WORKERSERIAL, COUNT(*) CNT
                FROM (
                        SELECT DISTINCT WORKERSERIAL, WORKERCATEGORYCODE 
                        FROM WPSATTENDANCEDAYWISE
                        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                          AND YEARCODE = P_YEARCODE
                          AND DATEOFATTENDANCE >= TO_DATE(P_FNSTDT,'DD/MM/YYYY')
                          AND DATEOFATTENDANCE <= TO_DATE(P_FNENDT,'DD/MM/YYYY')
                    )
                GROUP BY WORKERSERIAL
                HAVING COUNT(*) > 1
            )
     LOOP
        lv_cnt := lv_cnt+1;
--        dbms_output.put_line('cnt : ');
        lv_SqlStr := 'UPDATE WPSATTENDANCEDAYWISE A SET A.WORKERCATEGORYCODE = ( SELECT WORKERCATEGORYCODE FROM WPSWORKERMAST B '||chr(10)
                ||'                                                              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
                ||'                                                                AND WORKERSERIAL = '''||C1.WORKERSERIAL||'''  '||chr(10) 
                ||'                                                            ) '||chr(10)
                ||'WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10) 
                ||'  AND YEARCODE = '''||P_YEARCODE||''' '||chr(10)
                ||'  AND DATEOFATTENDANCE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||chr(10)
                ||'  AND DATEOFATTENDANCE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||chr(10)
                ||'  AND WORKERSERIAL = '''||C1.WORKERSERIAL||''' '||chr(10);
--          AND A.WORKERCATEGORYCODE <> ( SELECT WORKERCATEGORYCODE FROM WPSWORKERMAST B
--                                                                   WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
--                                                                  AND WORKERSERIAL = B.WORKERSERIAL
--                                       );                                                                                           
     
--     dbms_output.put_line('cnt11 :'||lv_SqlStr);
     EXECUTE IMMEDIATE lv_SqlStr;
     END LOOP;
--     dbms_output.put_line ('update successfully');       
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
end;
/


DROP PROCEDURE PROC_WPSWORKERMAST;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERMAST
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTOR VARCHAR2,
    P_CATEGORYCODE VARCHAR2,
    P_UNITCODE VARCHAR2,
    P_DEPARTMENTCODE VARCHAR2,
    P_GROUPCODE     VARCHAR2
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSWORKERMAST;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSWORKERMAST '|| CHR(10)
    ||' SELECT DISTINCT A.COMPANYCODE,A.DIVISIONCODE,A.UNITCODE,A.DEPARTMENTCODE, A.GROUPCODE,'|| CHR(10)
    ||' A.TOKENNO, A.WORKERCATEGORYCODE,A.WORKERNAME,A.SEX,A.FATHERNAME, A.FIXEDBASIC,A.ESINO,'|| CHR(10)
    ||' A.PFAPPLICABLE, A.EPFAPPLICABLE, A.ESIAPPLICABLE, A.HRAAPPLICABLE, A.QUARTERALLOTED, '|| CHR(10)
    ||' A.PTAXAPPLICABLE,A.BANKACNO,'''' IFSCCODE,'''' BANKNAME ,C.COMPANYNAME, C.COMPANYADDRESS,'|| CHR(10)
    ||' C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME,A.CONTRACTORCODE,A.CONTRACTORNAME '|| CHR(10)
    ||' FROM WPSWORKERMAST A ,COMPANYMAST C,DIVISIONMASTER D '|| CHR(10)
    ||'  WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'   AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'   AND  A.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=D.COMPANYCODE'|| CHR(10)
    ||'   AND  A.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);    
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
     IF P_CATEGORYCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.WORKERCATEGORYCODE IN ( '||P_CATEGORYCODE||')  '||CHR(10);
      END IF;
     IF P_UNITCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.UNITCODE IN ( '||P_UNITCODE||')  '||CHR(10);
     END IF;
     IF P_DEPARTMENTCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.DEPARTMENTCODE IN ( '||P_DEPARTMENTCODE||')  '||CHR(10);
      END IF;  
     IF P_CONTRACTOR IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.CONTRACTORCODE IN ( '||P_CONTRACTOR||')  '||CHR(10);
      END IF;  
       LV_SQLSTR := LV_SQLSTR ||' ORDER BY A.TOKENNO,A.WORKERNAME'||CHR(10);        
    
 --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
 EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSWORKERMAST_ALL_1611;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERMAST_ALL_1611
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTOR VARCHAR2,
    P_CATEGORYCODE VARCHAR2,
    P_UNITCODE VARCHAR2,
    P_DEPARTMENTCODE VARCHAR2,
    P_REPORTOPTION VARCHAR2 DEFAULT 'Y'
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
BEGIN
    DELETE FROM GTT_WPSWORKERMAST_ALL;
    LV_SQLSTR :=    'INSERT INTO GTT_WPSWORKERMAST_ALL '|| CHR(10)
    ||' SELECT DISTINCT A.*,C.COMPANYNAME, C.COMPANYADDRESS , C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME '|| CHR(10)
    ||' FROM WPSWORKERMAST A ,COMPANYMAST C,DIVISIONMASTER D '|| CHR(10)
    ||'  WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'   AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'   AND  A.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=D.COMPANYCODE'|| CHR(10)
    ||'   AND  A.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);    
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
     IF P_CATEGORYCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.WORKERCATEGORYCODE IN ( '||P_CATEGORYCODE||')  '||CHR(10);
     END IF;
     IF P_UNITCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.UNITCODE IN ( '||P_UNITCODE||')  '||CHR(10);
     END IF;
     IF P_DEPARTMENTCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.DEPARTMENTCODE IN ( '||P_DEPARTMENTCODE||')  '||CHR(10);
      END IF;  
     IF P_CONTRACTOR IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.CONTRACTORCODE IN ( '||P_CONTRACTOR||')  '||CHR(10);
      END IF;  
       LV_SQLSTR := LV_SQLSTR ||' ORDER BY A.TOKENNO,A.WORKERNAME'||CHR(10);        
    
 DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PROC_WPSWORKERRATE;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERRATE (P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_ASONDATE VARCHAR2,P_TABLE VARCHAR2,P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as 
lv_AsOnDT  DATE := TO_DATE(P_ASONDATE,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_ProcName         varchar2(30) := 'PROC_WPSWORKERRATE';
lv_SqlStr           varchar2(4000);
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';   
lv_MastComponent    varchar2(500) := '';
begin

    lv_Remarks := 'WORKERWISE RATE CREATION FROM RATEUPDATE TABLE';
    --DBMS_OUTPUT.PUT_LINE(LENGTH(lv_MastComponent));
    
   FOR C2 IN (
        SELECT A.COMPONENTCODE, A.COMPONENTSHORTNAME, A.COMPONENTNAME, A.COMPONENTTYPE, A.COMPONENTGROUP, A.PHASE, A.COMPONENTTAG, 
        A.FORMULA, A.CALCULATIONINDEX, nvl(MASTERCOMPONENT,'N') MASTERCOMPONENT 
        FROM WPSCOMPONENTMASTER A 
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
          AND TAKEPARTINWAGES = 'Y' AND NVL(MASTERCOMPONENT,'N') = 'Y'
        ORDER BY CALCULATIONINDEX        
        ) 
   LOOP
       IF C2.MASTERCOMPONENT = 'Y' THEN
           if nvl(LENGTH(lv_MastComponent),0) = 0 then
               lv_MastComponent := 'NVL('||C2.COMPONENTSHORTNAME||',0) AS '||C2.COMPONENTSHORTNAME||' ';
           ELSE
               lv_MastComponent := lv_MastComponent ||', NVL('||C2.COMPONENTSHORTNAME||',0) AS '||C2.COMPONENTSHORTNAME||' ';
           END IF;
       end if;        
--        DBMS_OUTPUT.PUT_LINE (lv_MastComponent);
   END LOOP;
--    DBMS_OUTPUT.PUT_LINE('XX');
    lv_SqlStr := 'DROP TABLE WPSRATEUPDT_MAXDT';
   BEGIN 
        execute immediate lv_SqlStr;
   EXCEPTION WHEN OTHERS THEN NULL;
   END;
   lv_SqlStr := ' CREATE TABLE WPSRATEUPDT_MAXDT AS '||CHR(10)
               ||' SELECT COMPANYCODE, DIVISIONCODE, WORKERSERIAL, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||CHR(10) ;
                if P_PROCESSTYPE='VOUCHER PROCESS' then
                    lv_SqlStr := lv_SqlStr ||' FROM WPSVOUCHERWORKERWISERATEUPDATE '||CHR(10);
                ELSE
                    lv_SqlStr := lv_SqlStr ||' FROM WPSWORKERWISERATEUPDATE '||CHR(10);
                END IF;
               lv_SqlStr := lv_SqlStr ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||'   AND EFFECTIVEDATE <= TO_DATE('''||P_ASONDATE||''',''DD/MM/YYYY'') '||CHR(10)
               ||' GROUP BY COMPANYCODE, DIVISIONCODE, WORKERSERIAL '||CHR(10);
    
   EXECUTE IMMEDIATE lv_SqlStr;
   insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
   values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_AsOnDT,lv_AsOnDT, 'TABLE - WORKER WISE MAX EFFECTIVE DATE FROM WPSWORKERWISEEFFECTIVEDATE');
   COMMIT;    
 
   lv_SqlStr := 'DROP TABLE '||P_TABLE||' ';
   BEGIN 
       execute immediate lv_SqlStr;
   EXCEPTION WHEN OTHERS THEN NULL;
   END;
   --DBMS_OUTPUT.PUT_LINE ('MASTER COMPONENT 1 - '||LENGTH(RTRIM(LTRIM(lv_MastComponent))));
   IF LENGTH(RTRIM(LTRIM(NVL(lv_MastComponent,'X')))) <=1 THEN
        lv_MastComponent := 'FBASIC,DA,ADHOC'; 
   END IF; 
   --DBMS_OUTPUT.PUT_LINE ('MASTER COMPONENT 2 - '||LENGTH(RTRIM(LTRIM(lv_MastComponent))));
   lv_SqlStr := '';
   lv_SqlStr := ' CREATE TABLE '||P_TABLE||' AS '||CHR(10)
               ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.EFFECTIVEDATE, '||CHR(10)
               ||' '||lv_MastComponent||' '||CHR(10) ;
                if P_PROCESSTYPE='VOUCHER PROCESS' then
                  lv_SqlStr := lv_SqlStr ||' FROM WPSVOUCHERWORKERWISERATEUPDATE A, WPSRATEUPDT_MAXDT B '||CHR(10);
                ELSE
                lv_SqlStr := lv_SqlStr ||' FROM WPSWORKERWISERATEUPDATE A, WPSRATEUPDT_MAXDT B '||CHR(10);
                END IF;
               lv_SqlStr := lv_SqlStr ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
               ||'   AND A.COMPANYCODE =  B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
               ||'   AND A.WORKERSERIAL = B.WORKERSERIAL AND A.EFFECTIVEDATE = B.EFFECTIVEDATE '||CHR(10);
   EXECUTE IMMEDIATE lv_SqlStr;
   insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
   values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_AsOnDT,lv_AsOnDT, 'TABLE - WORKER WISE MAX EFFECTIVE DATE FROM WPSWORKERWISEEFFECTIVEDATE');
   COMMIT;
exception
when others then
 lv_sqlerrm := sqlerrm ;
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
 values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_AsOnDT,lv_AsOnDT, lv_Remarks);
END;
/


DROP PROCEDURE PROC_WPSWORKER_DAYOFFDAY_TRAN;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKER_DAYOFFDAY_TRAN(P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2, P_ATTNDATE VARCHAR2, P_USER VARCHAR2 DEFAULT 'SWT')
AS
lv_ProcName varchar2(30) := 'PROC_WPSWORKER_DAYOFFDAY_TRAN';
lv_SqlErrm  varchar2(500) := '';
lv_Sql      varchar2(10000) := '';    
lv_WeekDays varchar2(20) := TRIM(TO_CHAR(TO_DATE(P_ATTNDATE,'DD/MM/YYYY'),'DAY'));
lv_attn_dt  date := to_date(P_ATTNDATE,'DD/MM/YYYY');
lv_PrevAttn_DT  date := to_date(P_ATTNDATE,'DD/MM/YYYY')-1;
lv_FNST_DT   DATE := TO_DATE(FN_GETFORTNIGHTSTARTENDDATE(P_ATTNDATE,'START'),'DD/MM/YYYY');
lv_FNEN_DT    DATE := TO_DATE(FN_GETFORTNIGHTSTARTENDDATE(P_ATTNDATE,'END'),'DD/MM/YYYY');
lv_YearCode varchar2(10) := '';
lv_Remarks  VARCHAR2(100) := '';
lv_ParValues VARCHAR2(100) := 'DIV - '||P_DIVCODE||', DATE - '||P_ATTNDATE;
BEGIN
    
     DELETE FROM WPSWORKERDAILYSTATUS WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE = P_DIVCODE
        AND DATEOFATTENDANCE = TO_DATE(P_ATTNDATE,'DD/MM/YYYY') AND WORKERSTATUS = 'W';
        
     select YEARCODE INTO lv_YearCode FROM FINANCIALYEAR WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
     AND lv_attn_dt >= STARTDATE AND lv_attn_dt <= ENDDATE;
     

    if lv_WeekDays = 'MONDAY' THEN
        --- FACTORY SIDE DEPARTMENT ------
        lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, WEEKDAY, WORKERSTATUS, '||chr(10) 
            ||' REMARKS, USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
                
            ||'SELECT B.COMPANYCODE, B.DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' FORTNIGHTSTARTDATE, '''||lv_FNEN_DT||''' FORTNIGHTENDDATE, '''||lv_ATTN_DT||'''  DATEOFATTENDANCE,'||CHR(10)
            ||'    B.WORKERSERIAL, B.TOKENNO, B. WORKERCATEGORYCODE, '''||lv_WeekDays||'''  WEEKDAY, ''W'' WORKERSTATUS,'||CHR(10)
            ||'    ''DAY OFF'' REMARKS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID'||CHR(10)
            ||'FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B'||CHR(10)
            ||'WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'  AND A.DATEOFATTENDANCE ='''||lv_PrevAttn_DT||''' '||CHR(10)
            ||'    AND A.DEPARTMENTCODE IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER  WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE =''F'')'||CHR(10)
            ||'  AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10);

                        
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
        --- FOR not 3500 DEPERTMENT                  
        lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE, '||CHR(10)
            ||' WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE,WEEKDAY, WORKERSTATUS, '||chr(10) 
            ||' REMARKS, USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
                
            ||' SELECT B.COMPANYCODE, B.DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' FORTNIGHTSTARTDATE, '''||lv_FNEN_DT||''' FORTNIGHTENDDATE, '''||lv_ATTN_DT||'''  DATEOFATTENDANCE,'||CHR(10)
            ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE,'''||lv_WeekDays||'''  WEEKDAY, ''W'' WORKERSTATUS,'||CHR(10)
            ||' ''DAY OFF'' REMARKS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID'||CHR(10)
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B'||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'   AND A.DATEOFATTENDANCE ='''||lv_PrevAttn_DT||''' '||CHR(10)   
            ||'   AND A.DEPARTMENTCODE <>''3500'' '||CHR(10)
            ||'   AND A.SHIFTCODE =''3'' '||CHR(10)
            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
            ||'   AND B.DEPARTMENTCODE NOT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER  WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE =''F'')'||CHR(10);
                        
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
        --- FOR 3300 DEPARTMENT
         lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE,'||CHR(10)
            ||' WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, WEEKDAY, WORKERSTATUS, '||chr(10) 
            ||' REMARKS, USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
                
            ||' SELECT B.COMPANYCODE, B.DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' FORTNIGHTSTARTDATE, '''||lv_FNEN_DT||''' FORTNIGHTENDDATE, '''||lv_ATTN_DT||'''  DATEOFATTENDANCE,'||CHR(10)
            ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, '''||lv_WeekDays||''' WEEKDAY, ''W'' WORKERSTATUS,'||CHR(10)
            ||' ''DAY OFF'' REMARKS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID'||CHR(10)
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B'||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'   AND A.DATEOFATTENDANCE ='''||lv_PrevAttn_DT||''' '||CHR(10)   
            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
            ||'   AND A.DEPARTMENTCODE =''3300'' '||CHR(10)
            ||'   AND A.SHIFTCODE =''3'' '||CHR(10);
                        
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
            
        --300 400 600
        lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE, '||CHR(10)
            ||' WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, WEEKDAY, WORKERSTATUS, '||chr(10) 
            ||' REMARKS, USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
                
            ||' SELECT B.COMPANYCODE, B.DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' FORTNIGHTSTARTDATE, '''||lv_FNEN_DT||''' FORTNIGHTENDDATE, '''||lv_ATTN_DT||'''  DATEOFATTENDANCE,'||CHR(10)
            ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, '''||lv_WeekDays||''' WEEKDAY, ''W'' WORKERSTATUS,'||CHR(10)
            ||' ''DAY OFF'' REMARKS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID'||CHR(10)
            ||'FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B'||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'   AND A.DATEOFATTENDANCE ='''||lv_PrevAttn_DT||''' '||CHR(10)   
            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)

            ||'  AND A.DEPARTMENTCODE IN (''300'',''400'',''600'')'||CHR(10);
                        
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
            
        --MONDAY DAY OFF
        lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE, '||CHR(10)
            ||' WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, WEEKDAY, WORKERSTATUS, '||chr(10) 
            ||' REMARKS, USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
                
            ||' SELECT COMPANYCODE, DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' FORTNIGHTSTARTDATE, '''||lv_FNEN_DT||''' FORTNIGHTENDDATE, '''||lv_ATTN_DT||'''  DATEOFATTENDANCE,'||CHR(10)
            ||' B.WORKERSERIAL, B.TOKENNO, B.WORKERCATEGORYCODE, '''||lv_WeekDays||''' WEEKDAY, ''W'' WORKERSTATUS,'||CHR(10)
            ||' ''DAY OFF'' REMARKS, '''||P_USER||''' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID'||CHR(10)
            ||' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B '||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'   AND A.DATEOFATTENDANCE ='''||lv_PrevAttn_DT||''' '||CHR(10)   
            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'   AND A.WORKERSERIAL=B.WORKERSERIAL'||CHR(10)
            ||'    AND A.DEPARTMENTCODE NOT IN (SELECT DEPARTMENTCODE FROM WPSDEPARTMENTMASTER  WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND DEPARTMENTTYPE =''F'')'||CHR(10)
            ||'    AND A.DEPARTMENTCODE NOT IN (''300'',''400'',''600'',3300)'||CHR(10) 
            ||'    AND A.SHIFTCODE NOT IN (''3'')'||CHR(10)
            ||'    AND TRIM(B.DAYOFFDAY)=''MONDAY'''||CHR(10);                      
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
            
        commit;
    
    
    ELSE
    --- OTHER THAN MODNDAY AND TUESDAY -------
        lv_Sql := ' INSERT INTO WPSWORKERDAILYSTATUS ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE, '||chr(10)  
            ||' WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE, WEEKDAY, WORKERSTATUS, REMARKS, '||chr(10) 
            ||' USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)

            ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, '''||lv_FNST_DT||''' PERIODFROM, '''||lv_FNEN_DT||''' PERIODTO, '''||lv_attn_dt||''' DATEOFATTENDANCE, '||chr(10) 
            ||' A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, TRIM(A.DAYOFFDAY) WEEKDAY, ''W'' WORKERSTATUS, ''DAY OFF'' WORKERSTATUS, '||chr(10) 
            ||' '''||P_USER||''' USERNAME, SYSDATE, SYS_GUID() '||chr(10) 
            ||' FROM WPSWORKERMAST A, WPSATTENDANCEDAYWISE B '||chr(10)
            || 'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'   AND B.DATEOFATTENDANCE = '''||lv_PrevAttn_DT||''' '||chr(10)
            ||'   AND A.COMPANYCODE = B.COMPANYCODE '||chr(10)
            ||'   AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||chr(10)
            ||'   AND B.SHIFTCODE<>''3'' '||chr(10)
            ||'   AND TRIM(A.DAYOFFDAY)= TRIM(TO_CHAR(TO_DATE('''||P_ATTNDATE||''',''DD/MM/YYYY''),''DAY'')) '||chr(10);
     
        insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                           values(P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_ParValues,lv_FNST_DT,lv_FNEN_DT, lv_Remarks);
        commit;                  
        execute immediate lv_Sql;
        
     END IF;   
     
     
--     
--     
--     INSERT INTO WPSWORKERDAILYSTATUS (
--        COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE,  
--        WORKERSERIAL, TOKENNO,WEEKDAY, WORKERSTATUS, REMARKS, USERNAME, LASTMODIFIED, SYSROWID)
--     SELECT A.COMPANYCODE, A.DIVISIONCODE, P_YEARCODE YEARCODE, lv_FNST_DT PERIODFROM, lv_FNEN_DT PERIODTO, TO_DATE(P_ATTNDATE,'DD/MM/YYYY')DATEOFATTENDANCE, 
--    A.WORKERSERIAL, A.TOKENNO, TRIM(TO_CHAR(TO_DATE(P_ATTNDATE,'DD/MM/YYYY'),'DAY')) WEEKDAY, 
--    CASE WHEN L.LEAVECODE IS NOT NULL THEN L.LEAVECODE ELSE CASE WHEN NVL(B.SHIFTCODE,1)<>3 THEN 'W' WHEN NVL(B.SHIFTCODE,1)=3 AND TRIM(TO_CHAR(TO_DATE(P_ATTNDATE,'DD/MM/YYYY'),'DAY'))='MONDAY' THEN 'W' ELSE NULL END END WORKERSTATUS, 
--    'DAY OFF' REMARKS, P_USER USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID 
--    FROM WPSWORKERMAST A,
--    (
--        SELECT COMPANYCODE,DIVISIONCODE,WORKERSERIAL,DATEOFATTENDANCE,SHIFTCODE
--        FROM WPSATTENDANCEDAYWISE
--        WHERE DATEOFATTENDANCE=(TO_DATE(P_ATTNDATE,'DD/MM/YYYY')-1)
--            AND NVL(ATTENDANCEHOURS,0)>0
--        GROUP BY COMPANYCODE,DIVISIONCODE,WORKERSERIAL,DATEOFATTENDANCE,SHIFTCODE
--    ) B,
--    (   
--        SELECT COMPANYCODE,DIVISIONCODE,WORKERSERIAL,LEAVEDATE,LEAVECODE FROM WPSSTLENTRYDETAILS
--        WHERE LEAVEDATE=TO_DATE(P_ATTNDATE,'DD/MM/YYYY')
--    ) L
--    WHERE   A.COMPANYCODE=P_COMPCODE
--        AND A.DIVISIONCODE=P_DIVCODE
--        AND A.ACTIVE = 'Y'
--        AND TRIM(A.DAYOFFDAY)=TRIM(TO_CHAR(TO_DATE(P_ATTNDATE,'DD/MM/YYYY'),'DAY'))
--        AND A.COMPANYCODE=B.COMPANYCODE(+)
--        AND A.DIVISIONCODE=B.DIVISIONCODE(+)
--        AND A.WORKERSERIAL=B.WORKERSERIAL(+)
--        AND A.COMPANYCODE=L.COMPANYCODE(+)
--        AND A.DIVISIONCODE=L.DIVISIONCODE(+)
--        AND A.WORKERSERIAL=L.WORKERSERIAL(+);
--    
--    DELETE FROM WPSWORKERDAILYSTATUS WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE = P_DIVCODE
--        AND DATEOFATTENDANCE = TO_DATE(P_ATTNDATE,'DD/MM/YYYY') AND WORKERSTATUS IS NULL ;
--        
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    lv_sqlerrm := sqlerrm ;
     insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
     values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,'','',lv_attn_dt,lv_attn_dt, 'ERROR GENERATE IN DAYOFF DATA TRANSFER' );
     COMMIT;
    
END;
/


DROP PROCEDURE PROC_WPSWORKER_OFFDAY_TRANSFER;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKER_OFFDAY_TRANSFER (P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2, P_ATTNDATE VARCHAR2, P_USER VARCHAR2 DEFAULT 'SWT')
AS
lv_ProcName varchar2(30) := 'PROC_WPSWORKER_OFFDAY_TRANSFER';
lv_SqlErrm  varchar2(500) := '';
lv_WeekDays varchar2(20);
lv_attn_dt  date := to_date(P_ATTNDATE,'DD/MM/YYYY');
begin
    
    --SELECT LTRIM(RTRIM(TO_CHAR(TO_DATE('11/08/2019','DD/MM/YYYY'),'DAY'))) FROM DUAL;
    
    ---- THIS PROCEDURE USER FOR WORKER DAILY DAY OFF TRANSFER IN ANOTHER TABLE  written by by amalesh on 17.08.2019 -------
    
    SELECT LTRIM(RTRIM(TO_CHAR(TO_DATE(P_ATTNDATE,'DD/MM/YYYY'),'DAY'))) INTO lv_WeekDays FROM DUAL;
    
    DELETE FROM WPSWORKERDAILYSTATUS WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE = P_DIVCODE
    AND DATEOFATTENDANCE = TO_DATE(P_ATTNDATE,'DD/MM/YYYY') AND WORKERSTATUS = 'W';
    
    INSERT INTO WPSWORKERDAILYSTATUS (
    COMPANYCODE, DIVISIONCODE, YEARCODE, PERIODFROM, PERIODTO, DATEOFATTENDANCE,  
    WORKERSERIAL, TOKENNO,WEEKDAY, WORKERSTATUS, REMARKS, USERNAME, LASTMODIFIED, SYSROWID) 
    SELECT A.COMPANYCODE, A.DIVISIONCODE, P_YEARCODE YEARCODE, NULL PERIODFROM, NULL PERIODTO, TO_DATE(P_ATTNDATE,'DD/MM/YYYY')DATEOFATTENDANCE, 
    A.WORKERSERIAL, A.TOKENNO, 'SUNDAY' WEEKDAY, 'W' WORKERSTATUS, 'DAY OFF' REMARKS, 'SWT' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID
    FROM WPSWORKERMAST A,
    (    
        SELECT WORKERSERIAL FROM WPSWORKERMAST 
        WHERE COMPANYCODE =P_COMPCODE AND DIVISIONCODE=P_DIVCODE 
          AND ACTIVE='Y' AND TAKEPARTINWAGES='Y' 
          AND DAYOFFDAY = lv_WeekDays
        MINUS
        SELECT WORKERSERIAL FROM WPSATTENDANCEDAYWISE
        WHERE COMPANYCODE =P_COMPCODE AND DIVISIONCODE = P_DIVCODE
          AND YEARCODE = P_YEARCODE
          AND DATEOFATTENDANCE = TO_DATE(P_ATTNDATE,'DD/MM/YYYY')
          AND ATTENDANCEHOURS > 0
    ) B
    WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE =P_DIVCODE
      AND ACTIVE='Y' AND TAKEPARTINWAGES='Y'
      AND A.WORKERSERIAL = B.WORKERSERIAL;
             
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    lv_sqlerrm := sqlerrm ;
     insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
     values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,'','',lv_attn_dt,lv_attn_dt, 'ERROR GENERATE IN DAYOFF DATA TRANSFER' );
     COMMIT;
            
end;
/


DROP PROCEDURE PROC_WPS_CUMMULATIVE_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPS_CUMMULATIVE_UPDT(P_COMPCODE Varchar2,
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2, -- 'wpswagesdetails_mv_swt
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_upd1_sql  varchar2(32767) := '';
lv_upd2_sql  varchar2(32767) := '';
lv_colstr    varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_FirtstDt     date; 
lv_ProcName     varchar2(30) := 'PROC_WPS_CUMMULATIVE_UPDT';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_pf_cont_col varchar2(30) ;
lv_cnt int;
lv_FNYearStartdate varchar2(10) :='';
lv_CalenderYearStartdate varchar2(10) :='';
begin
    
    
--    dbms_output.put_line('1_1');
    SELECT '01/04/'||SUBSTR(YEARCODE,1,4)
      INTO lv_FNYearStartdate
      FROM WPSWAGEDPERIODDECLARATION
     WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
       AND FORTNIGHTSTARTDATE=TO_DATE(P_FNSTDT,'DD/MM/YYYY')
       AND FORTNIGHTENDDATE=TO_DATE(P_FNENDT,'DD/MM/YYYY');
--    dbms_output.put_line('1_2');   
    lv_CalenderYearStartdate :='01/01/'||substr(P_FNSTDT,7,4)  ; 
    
    select SUBSTR( ( 'WPS1_'||SYS_CONTEXT('USERENV', 'SESSIONID')) ,1,30) into lv_updtable  from dual ;
    
    
    lv_cnt :=0;
    SELECT COUNT(*)
    INTO 
    lv_cnt
    FROM USER_TABLES
    WHERE TABLE_NAME =lv_updtable;
    
    IF lv_cnt>0 THEN
        EXECUTE IMMEDIATE 'DROP TABLE '|| lv_updtable;
    END IF;
    
--    dbms_output.put_line('2_1');
    lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
            ||' SELECT WORKERSERIAL, SUM(PF_E) PF_E, SUM(PF_C) PF_C, SUM(VPF) VPF, SUM(CUM_WORKINGDAYS) CUM_WORKINGDAYS, SUM(CUM_WORKINGHRS) CUM_WORKINGHRS,SUM(CUM_PFGROSS) CUM_PFGROSS '||CHR(10)
            ||' FROM ( '||CHR(10)
            ||'         SELECT WORKERSERIAL, SUM(PF_E) PF_E, SUM(PF_C) PF_C, SUM(VPF) VPF, 0 CUM_WORKINGDAYS, 0 CUM_WORKINGHRS , 0 CUM_PFGROSS '||CHR(10)
            ||'         FROM ( '||CHR(10)
            ||'                 SELECT WORKERSERIAL, PFNO, DECODE(COMPONENTCODE,''PF_E'',COMPONENTAMOUNT,0) PF_E, '||CHR(10)
            ||'                 DECODE(COMPONENTCODE,''PF_C'',COMPONENTAMOUNT,0) PF_C, '||CHR(10)
            ||'                 DECODE(COMPONENTCODE,''VPF'',COMPONENTAMOUNT,0) VPF '||CHR(10)
            ||'                 FROM PFTRANSACTIONDETAILS '||CHR(10)
            ||'                 WHERE EMPLOYEECOMPANYCODE = '''||P_COMPCODE||''' AND EMPLOYEEDIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'                   AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
            ||'                   AND STARTDATE <= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||CHR(10)
            ||'                   AND TRANSACTIONTYPE <> ''SALARY'' '||CHR(10) 
            ||'                 UNION ALL '||CHR(10)
            ||'                 SELECT WORKERSERIAL, PFNO, DECODE(COMPONENTCODE,''PF_E'',COMPONENTAMOUNT,0) PF_E, '||CHR(10)
            ||'                 DECODE(COMPONENTCODE,''PF_C'',COMPONENTAMOUNT,0) PF_C, '||CHR(10)
            ||'                 DECODE(COMPONENTCODE,''VPF'',COMPONENTAMOUNT,0) VPF '||CHR(10)
            ||'                 FROM PFTRANSACTIONDETAILS '||CHR(10)
            ||'                 WHERE EMPLOYEECOMPANYCODE = '''||P_COMPCODE||''' AND EMPLOYEEDIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'                   AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
            ||'                   AND STARTDATE < TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||CHR(10)
            ||'                   AND TRANSACTIONTYPE = ''SALARY'' '||CHR(10)
            ||'                 UNION ALL '||CHR(10)
            ||'                 SELECT A.WORKERSERIAL, B.PFNO, NVL(PF_CONT,0) PF_E, NVL(PF_COM,0) PF_C, NVL(VPF,0) VPF '||CHR(10)
            ||'                 FROM '||P_TABLENAME||' A, WPSWORKERMAST B '||CHR(10)
            ||'                 WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'                   AND YEARCODE = '''||P_YEARCODE||'''  '||CHR(10)
            ||'                   AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||CHR(10)
            ||'                   AND FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10)
            ||'                   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'                   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'             )  '||CHR(10)
            ||'             GROUP BY WORKERSERIAL, PFNO  '||CHR(10)     
            ||'             UNION ALL  '||CHR(10)
            ||'             SELECT WORKERSERIAL, 0 PF_E, 0 PF_C, 0 VPF, SUM(CUM_WORKINGDAYS) CUM_WORKINGDAYS,  SUM(CUM_WORKINGHRS) CUM_WORKINGHRS, SUM(CUM_PFGROSS) CUM_PFGROSS  '||CHR(10)
            ||'             FROM (  '||CHR(10)
            ||'                     SELECT WORKERSERIAL, FORTNIGHTENDDATE, SUM(NVL(ATN_DAYS,0)) CUM_WORKINGDAYS  , SUM(NVL(ATTENDANCEHOURS,0)) CUM_WORKINGHRS, 0 CUM_PFGROSS '||CHR(10)
            ||'                     FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B '||CHR(10)
            ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''      '||CHR(10)
            ||'                       AND A.FORTNIGHTSTARTDATE >= TO_DATE('''||lv_CalenderYearStartdate||''',''DD/MM/YYYY'') '||CHR(10)
            ||'                       AND A.FORTNIGHTSTARTDATE < TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)
            ||'                       AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'                       AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE '||CHR(10)
            ||'                       AND (B.STLAPPLICABLE = ''Y'' OR B.CALC_CUMULATIVEWORKDAYS = ''Y'') '||CHR(10)   
            ||'                     GROUP BY A.WORKERSERIAL, A.FORTNIGHTENDDATE  '||CHR(10)
            ||'                     UNION ALL  '||CHR(10)
            ||'                     SELECT WORKERSERIAL, FORTNIGHTENDDATE, ROUND(NVL(ATTENDANCEHOURS,0)/8,2) CUM_WORKINGDAYS , NVL(ATTENDANCEHOURS,0) CUM_WORKINGHRS, 0 CUM_PFGROSS '||CHR(10)
            ||'                     FROM '||P_TABLENAME||' A, WPSWORKERCATEGORYMAST B '||CHR(10)
            ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)
            ||'                       AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')   '||CHR(10)
            ||'                       AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')    '||CHR(10)
            ||'                       AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'                       AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE '||CHR(10)
            ||'                       AND (B.STLAPPLICABLE = ''Y'' OR B.CALC_CUMULATIVEWORKDAYS = ''Y'') '||CHR(10)
            ||'                     UNION ALL '||chr(10)
            ||'                     SELECT WORKERSERIAL, FORTNIGHTENDDATE, 0 CUM_WORKINGDAYS , 0 CUM_WORKINGHRS, SUM(NVL(PF_GROSS,0)) CUM_PFGROSS  '||CHR(10) 
            ||'                     FROM WPSWAGESDETAILS_MV A, WPSWORKERCATEGORYMAST B   '||CHR(10)
            ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''    '||CHR(10)
            ||'                       AND A.YEARCODE = '''||P_YEARCODE||'''    '||CHR(10)
            ||'                       AND A.FORTNIGHTSTARTDATE < TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)    
            ||'                       AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE   '||CHR(10)
            ||'                       AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE  '||CHR(10)
            ||'                       AND NVL(B.BONUSAPPLICABLE,''N'') = ''Y''   '||CHR(10)
            ||'                     GROUP BY A.WORKERSERIAL, A.FORTNIGHTENDDATE  '||CHR(10)
            ||'                     UNION ALL  '||CHR(10)
            ||'                     SELECT WORKERSERIAL, FORTNIGHTENDDATE, 0 CUM_WORKINGDAYS , 0 CUM_WORKINGHRS, NVL(PF_GROSS,0) CUM_PFGROSS  '||CHR(10) 
            ||'                     FROM '||P_TABLENAME||' A, WPSWORKERCATEGORYMAST B   '||CHR(10)
            ||'                     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''    '||CHR(10)
            ||'                       AND A.YEARCODE = '''||P_YEARCODE||'''    '||CHR(10)
            ||'                       AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  '||CHR(10)   
            ||'                       AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')     '||CHR(10)
            ||'                       AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
            ||'                       AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE  '||CHR(10)
            ||'                       AND NVL(B.BONUSAPPLICABLE,''N'') = ''Y''   '||CHR(10)                  
            ||'                 )  '||CHR(10)  
            ||'             GROUP BY WORKERSERIAL  '||CHR(10)

            ||'        )  '||CHR(10)
            ||'         GROUP BY WORKERSERIAL  '||CHR(10);

--      dbms_output.put_line('2_2');
      
    --dbms_output.put_line(lv_sql );       
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE,PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE,P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
    EXECUTE IMMEDIATE lv_sql  ;
    COMMIT;
    --RETURN;
--    
lv_sql := 'UPDATE '||P_TABLENAME||' A SET (CUM_PF_E, CUM_PF_C,CUM_VPF, CALENDARWORKINGDAYS, CALENDARWORKINGHRS,CUM_PFGROSS )  '||CHR(10)  
        ||' = ( SELECT PF_E, PF_C, VPF, CUM_WORKINGDAYS , CUM_WORKINGHRS,CUM_PFGROSS  FROM '||lv_updtable||' B '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10); 
   lv_remarks := NVL(lv_remarks,'XX ') ||' UPDATE CUMPF_CONT, CUMPF_COM,CALENDARWORKINGDAYS';
  --dbms_output.put_line(lv_sql );   
   INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
   VALUES (P_COMPCODE,P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
   COMMIT;    
    EXECUTE IMMEDIATE lv_sql;
       BEGIN
        execute immediate 'DROP TABLE '||lv_updtable ;
       EXCEPTION
        WHEN OTHERS THEN
          lv_sqlerrm := sqlerrm;
          raise_application_error(-20101, lv_sqlerrm||'ERROR WHILE UPDATING '||P_TABLENAME||' FROM TABLE '||lv_updtable);
       END ;
EXCEPTION
    WHEN OTHERS THEN
    lv_sqlerrm := sqlerrm;
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE,P_DIVCODE, lv_ProcName,lv_sqlerrm,sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
                                  
end;
/


DROP PROCEDURE PROC_WPS_ELECBAL_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPS_ELECBAL_UPDT (P_COMPCODE Varchar2,
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2, -- 'wpswagesdetails_mv_swt
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as

lv_Sql       varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_ProcName     varchar2(30) := 'PROC_WPS_YTDMNTHGRS_UPDT';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_pf_cont_col varchar2(30) ;
lv_cnt int;
begin
    
    ------- THIS PROCEDURE USE FOR ELECTRIC BALANCE UPDATE -------------
    
    PROC_ELECBLNC_WITH_BILL_EMI(P_COMPCODE,P_DIVCODE,P_FNSTDT,P_FNENDT,NULL,'WPS');               
     
    lv_sql := 'UPDATE '||P_TABLENAME||' A SET A.ELEC_BAL = (SELECT  NVL(ELEC_BAL_AMT,0) FROM GBL_ELECBLNC B '||CHR(10)  
        ||'             WHERE A.WORKERSERIAL = B.WORKERSERIAL ) '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||'   AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10)
        ||'   AND A.WORKERSERIAL IN (SELECT WORKERSERIAL FROM GBL_ELECBLNC) '||CHR(10);
   lv_remarks := NVL(lv_remarks,'XX ') ||' UPDATE ELECTRIC BALANCE ';
  --dbms_output.put_line(lv_sql );   
   INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
   VALUES (P_COMPCODE, P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    EXECUTE IMMEDIATE lv_sql;
    COMMIT;
   
EXCEPTION
WHEN OTHERS THEN
lv_sqlerrm := sqlerrm;
INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
 COMMIT;                             
                          
end;
/


DROP PROCEDURE PROC_WPS_NONENTILE_VB_DELETE;

CREATE OR REPLACE PROCEDURE PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY Amalesh Das ON 05.05.2020 ----
----- THIS PROCEDURE USE FOR DELETE THE WORKER'S WHO NOT ENTITLE FRO PRODUCTION BASIC(VBASIC)  
----- Naihati not provide the any logic for entitle vbasic, they only provide tokenno who are not entitle for production basic -----
----- So we maintain separate table <<WPSNOTENTITLEVBASIC>> for token and department wise not etitle list ---- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_NONENTILE_VB_DELETE';
lv_ParValue varchar2(200) := 'PERIOD - '||P_FN_STDT||'-'||P_FN_ENDT||', PROD - '||P_PRODUCTIONTYPE;
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_DeptCode varchar2(10) := '';
lv_DeptSecOcp_Exception varchar2(100) :='';


Begin
     if P_DEPARTMENT is null then
        SELECT DEPARTMENTCODE INTO lv_DeptCode
        FROM WPSPRODUCTIONTYPEMAST
        WHERE COMPANYCODE = P_COMPCODE
          AND DIVISIONCODE = P_DIVCODE
          AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
     ELSE
        lv_DeptCode :=  P_DEPARTMENT;    
     end if;
     
     select departmentcode||sectioncode||OCCUPATIONCODE INTO lv_DeptSecOcp_Exception
     FROM WPSPRODUCTIONTYPEMAST
     WHERE COMPANYCODE = P_COMPCODE
       AND DIVISIONCODE = P_DIVCODE
       AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;     
        
    lv_Remarks := 'NON ENTITLE WORKER DATA DELETE FROM WPSVBDETAILS FROM DEPT ' ||P_PRODUCTIONTYPE;
     
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)  
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' '||chr(10)  
            ||'  AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'  AND FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' '||chr(10)  
            ||'  AND FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)  
            ||'  AND DEPARTMENTCODE LIKE '''||'%'||lv_DeptCode||'%'||''' '||CHR(10)
            ||'  AND WORKERSERIAL IN ( '||CHR(10)
            ||'                        SELECT WORKERSERIAL  '||CHR(10) 
            ||'                        FROM WPSNOTENTITLEVBASIC  '||CHR(10)
            ||'                        WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'                          AND DEPARTMENTCODE LIKE '''||'%'||lv_DeptCode||'%'||''' '||CHR(10);
     if lv_DeptCode ='16' then
        lv_Sql := lv_Sql ||'                          AND (DEPTSECOCP_EXCEPTION LIKE '''||'%'||lv_DeptSecOcp_Exception||'%'||''' or DEPTSECOCP_EXCEPTION is null)'||CHR(10);
     end if;       

     lv_Sql := lv_Sql ||'                          AND EFFECTIVEDATE = (   '||CHR(10)
            ||'                                                 SELECT MAX(EFFECTIVEDATE) FROM WPSNOTENTITLEVBASIC  '||CHR(10)
            ||'                                                 WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'                                                   AND TO_DATE(EFFECTIVEDATE,''DD/MM/YYYY'') <= TO_DATE('''||lv_FN_STDT||''',''DD/MM/YYYY'')  '||CHR(10)
            ||'                                              )   '||CHR(10)
            ||'                      )'||CHR(10);
    
    --DBMS_OUTPUT.PUT_LINE (lv_Sql);        
    
    --return;
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_PHASE_DEDN_ROWISE;

CREATE OR REPLACE PROCEDURE "PROC_WPS_PHASE_DEDN_ROWISE" 
(
P_COMPCODE   varchar2,
P_DIVCODE       varchar2,
P_FNSTDT        varchar2,
P_FNENDT        varchar2
)
as
lv_sql varchar2(32767);
lv_val number;
lv_SqlErr   varchar2(2000) := '';
lv_fnstdt   Date := to_date(P_FNSTDT,'dd/mm/yyyy');
lv_fnendt   Date := to_date(P_FNENDT,'dd/mm/yyyy');
lv_parvalues varchar2(100);
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT;
    delete  GTT_SWT_PHASE_DEDN ;
    commit;
    for c1 in( select * from  SWT_PHASE_DEDN  ) 
    loop
        for c2 in( select column_name cn from cols where table_name = 'SWT_PHASE_DEDN'
        intersect
        select COMPONENTSHORTNAME cn from WPSCOMPONENTMASTER where COMPANYCODE = P_COMPCODE and DIVISIONCODE = P_DIVCODE and COMPONENTSHORTNAME <> 'GROSS_WAGES'
        ) 
        loop
            lv_sql := 'select '||c2.cn||' from  SWT_PHASE_DEDN where WORKERSERIAL = '''||c1.WORKERSERIAL||''' and WORKERCATEGORYCODE = '''||c1.WORKERCATEGORYCODE||''' ' ;
            execute immediate lv_sql into lv_val ;
            insert into GTT_SWT_PHASE_DEDN(WORKERSERIAL,WORKERCATEGORYCODE,GROSS_WAGES,COMPONENTSHORTNAME, COMPONENTAMOUNT)  values(''||c1.WORKERSERIAL||'',''||c1.WORKERCATEGORYCODE||'',c1.GROSS_WAGES,''||c2.cn||'',lv_val) ;
        end loop ;
        commit;
    end loop;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE','','',lv_parvalues, lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE SUCCESSFULLY DONE');
    commit;
exception
    when others then
        lv_SqlErr := SqlErrm;
       insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE',lv_SqlErr,'','', lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE ERROR');
    commit;          
end;
/


DROP PROCEDURE PROC_WPS_PHASE_DEDN_ROWISE_BKP;

CREATE OR REPLACE PROCEDURE "PROC_WPS_PHASE_DEDN_ROWISE_BKP" 
(
P_COMPCODE   varchar2,
P_DIVCODE       varchar2,
P_FNSTDT        varchar2,
P_FNENDT        varchar2
)
as
lv_sql varchar2(32767);
lv_val number;
lv_SqlErr   varchar2(2000) := '';
lv_fnstdt   Date := to_date(P_FNSTDT,'dd/mm/yyyy');
lv_fnendt   Date := to_date(P_FNENDT,'dd/mm/yyyy');
lv_parvalues varchar2(100);
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT;
    delete  GTT_SWT_PHASE_DEDN ;
    commit;
    for c1 in( select * from  SWT_PHASE_DEDN  ) 
    loop
        for c2 in( select column_name cn from cols where table_name = 'SWT_PHASE_DEDN'
        intersect
        select COMPONENTSHORTNAME cn from WPSCOMPONENTMASTER where COMPANYCODE = P_COMPCODE and DIVISIONCODE = P_DIVCODE and COMPONENTSHORTNAME <> 'GROSS_WAGES'
        ) 
        loop
            lv_sql := 'select '||c2.cn||' from  SWT_PHASE_DEDN where WORKERSERIAL = '''||c1.WORKERSERIAL||''' and WORKERCATEGORYCODE = '''||c1.WORKERCATEGORYCODE||''' ' ;
            execute immediate lv_sql into lv_val ;
            insert into GTT_SWT_PHASE_DEDN(WORKERSERIAL,WORKERCATEGORYCODE,GROSS_WAGES,COMPONENTSHORTNAME, COMPONENTAMOUNT)  values(''||c1.WORKERSERIAL||'',''||c1.WORKERCATEGORYCODE||'',c1.GROSS_WAGES,''||c2.cn||'',lv_val) ;
        end loop ;
        commit;
    end loop;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE','','',lv_parvalues, lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE SUCCESSFULLY DONE');
    commit;
exception
    when others then
        lv_SqlErr := SqlErrm;
       insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE',lv_SqlErr,'','', lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE ERROR');
    commit;          
end;
/


DROP PROCEDURE "PROC_WPS_PHASE_DEDN_ROWISE_bkp";

CREATE OR REPLACE PROCEDURE "PROC_WPS_PHASE_DEDN_ROWISE_bkp" 
(
P_COMPCODE   varchar2,
P_DIVCODE       varchar2,
P_FNSTDT        varchar2,
P_FNENDT        varchar2
)
as
lv_sql varchar2(32767);
lv_val number;
lv_SqlErr   varchar2(2000) := '';
lv_fnstdt   Date := to_date(P_FNSTDT,'dd/mm/yyyy');
lv_fnendt   Date := to_date(P_FNENDT,'dd/mm/yyyy');
lv_parvalues varchar2(100);
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT;
    delete  GTT_SWT_PHASE_DEDN ;
    commit;
    for c1 in( select * from  SWT_PHASE_DEDN  ) 
    loop
        for c2 in( select column_name cn from cols where table_name = 'SWT_PHASE_DEDN'
        intersect
        select COMPONENTSHORTNAME cn from WPSCOMPONENTMASTER where COMPANYCODE = P_COMPCODE and DIVISIONCODE = P_DIVCODE and COMPONENTSHORTNAME <> 'GROSS_WAGES'
        ) 
        loop
            lv_sql := 'select '||c2.cn||' from  SWT_PHASE_DEDN where WORKERSERIAL = '''||c1.WORKERSERIAL||''' and WORKERCATEGORYCODE = '''||c1.WORKERCATEGORYCODE||''' ' ;
            execute immediate lv_sql into lv_val ;
            insert into GTT_SWT_PHASE_DEDN(WORKERSERIAL,WORKERCATEGORYCODE,GROSS_WAGES,COMPONENTSHORTNAME, COMPONENTAMOUNT)  values(''||c1.WORKERSERIAL||'',''||c1.WORKERCATEGORYCODE||'',c1.GROSS_WAGES,''||c2.cn||'',lv_val) ;
        end loop ;
        commit;
    end loop;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE','','',lv_parvalues, lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE SUCCESSFULLY DONE');
    commit;
exception
    when others then
        lv_SqlErr := SqlErrm;
       insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPS_PHASE_DEDN_ROWISE',lv_SqlErr,'','', lv_fnstdt, lv_fnendt, 'ROW WISE COMPONENT MERGE ERROR');
    commit;          
end;
/


DROP PROCEDURE PROC_WPS_STL_IMPORT;

CREATE OR REPLACE PROCEDURE PROC_WPS_STL_IMPORT (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_YEARCODE VARCHAR2,
                                                       P_PAYMENTDATE VARCHAR2,
                                                       P_OVERWRITE_DATA_EXIST VARCHAR2 DEFAULT 'N')


AS 

   lv_cnt                  number;
   lv_row_cnt              number;
   lv_result               varchar2(10);
   lv_error_remark         varchar2(4000) := '' ;
    
   LV_WORKERSERIAL varchar2(15);
   LV_WORKERNAME varchar2(100);
   LV_WORKERCATEGORYCODE varchar2(10);
   LV_DEPARTMENTCODE varchar2(10);
   LV_SECTIONCODE varchar2(10);
   LV_DEPARTMENTNAME varchar2(50);
   LV_OCCUPATIONCODE varchar2(10);
   lv_MinOcpCode     varchar2(10);   
   LV_SHIFTCODE varchar2(1);
   lv_DATE DATE;
   lv_IsSanction   varchar2(1) := '';
   lv_LeaveDays    number(5) := 0;
   
   lv_NoofHoursInday  number(5) := 0;
   lv_DY    number(5) := 0;
    
   lv_DocumentNo           varchar2(100) := '';
   lv_FortnightStartDate   VARCHAR2(10) := '';
   lv_FortnightEndDate     VARCHAR2(10) := '';
   lv_OFFDAY               varchar2(10) :='';
   LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
   lv_LASTMAX_DATE DATE;
BEGIN

lv_result:='#SUCCESS#';

    if P_PAYMENTDATE is null then
        lv_error_remark := 'Validation Failure : [Payment Date Cannot be blank.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select count(*)
    into lv_cnt
    from WPSSTLRAWDATA
    WHERE 1=1--COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE 
    AND PAYMENTDATE=P_PAYMENTDATE;
    
    DELETE FROM WPSSTLRAWDATA WHERE TOKENNO IS NULL;
       
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found.Upload Again]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/YYYY'),  TO_CHAR(FORTNIGHTENDDATE,'DD/MM/YYYY') 
    INTO lv_FortnightStartDate, lv_FortnightEndDate FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE
    AND YEARCODE = P_YEARCODE;
    
     if lv_FortnightStartDate IS NULL then
        lv_error_remark := 'Validation Failure : [Fortnight StartDate cannot be blank]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     if lv_FortnightEndDate IS NULL then
        lv_error_remark := 'Validation Failure : [Fortnight EndDate cannot be blank]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
       SELECT COUNT(*) into lv_cnt FROM 
       WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE =P_DIVCODE AND FORTNIGHTSTARTDATE=TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY') AND FINALISEDANDLOCK='Y';
 
--COMMENT ON 22-08-2020      
        if lv_cnt>0 then
        lv_error_remark := 'Validation Failure : [Wages already finalized so STL data can not be modified/Uploaded]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
--END COMMENT ON 22-08-2020 
       
       lv_row_cnt :=1;
    
     IF NVL(P_OVERWRITE_DATA_EXIST,'N')='Y' THEN
               
               SELECT COUNT(*) into lv_cnt 
               FROM WPSSTLENTRY WHERE 
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
               --TOKENNO=C122.TOKENNO
               --AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               --AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               --OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               --AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               --AND LEAVECODE = 'STL'
               --AND YEARCODE=C122.STLTAKENFROMYEAR;
               
              if lv_cnt>0 then
                --IF DATA EXIST WHILE UPLOADING THEN DELETE THE PREVIOUS DATA IF P_OVERWRITE_DATA_EXIST='Y'
                DELETE FROM WPSSTLENTRYDETAILS WHERE DOCUMENTNO IN
                (
                SELECT DISTINCT DOCUMENTNO FROM WPSSTLENTRY WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
                );
                
                DELETE FROM WPSSTLENTRY WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR;
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
                
                DELETE FROM WPSLEAVEAPPLICATION WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (LEAVEFROM BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR LEAVETO BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR;
               LEAVEAPPLIEDON=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
            end if;
     END IF;
   
   FOR C122 IN 
     (
        select *
        from WPSSTLRAWDATA
        WHERE 1=1--COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE 
        AND PAYMENTDATE=P_PAYMENTDATE
     )
       LOOP  
       
       DELETE FROM GBL_WPSSTLENTRY;
       
       DELETE FROM GBL_WPSSTLENTRYDETAILS;
       
       
       SELECT count(*)
            into lv_cnt
            FROM WPSWORKERMAST A,WPSDEPARTMENTMASTER B
            WHERE A.COMPANYCODE = P_COMPCODE
            AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO =C122.TOKENNO 
            AND A.COMPANYCODE=B.COMPANYCODE
            AND A.DEPARTMENTCODE=B.DEPARTMENTCODE;
       
        if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [Invalid Tokenno at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
            
       SELECT A.WORKERSERIAL, A.WORKERNAME, A.WORKERCATEGORYCODE ,/*A.DEPARTMENTCODE*/C122.DEPARTMENTCODE,C122.SECTIONCODE,B.DEPARTMENTNAME DEPARTMENTDESC,A.OCCUPATIONCODE,nvl(c122.SHIFTCODE,'1')
             INTO LV_WORKERSERIAL,LV_WORKERNAME,LV_WORKERCATEGORYCODE,LV_DEPARTMENTCODE,LV_SECTIONCODE,LV_DEPARTMENTNAME,LV_OCCUPATIONCODE,LV_SHIFTCODE
            FROM WPSWORKERMAST A,WPSDEPARTMENTMASTER B
            WHERE A.COMPANYCODE = P_COMPCODE
            AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO =C122.TOKENNO 
            AND A.COMPANYCODE=B.COMPANYCODE
            AND A.DEPARTMENTCODE=B.DEPARTMENTCODE;
            
       
       if NVL(C122.STLHOURS,0)<=0 then
        lv_error_remark := 'Validation Failure : [Hours Cannot be less than Zero at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       if NVL(C122.STLDAYS,0)<=0 then
        lv_error_remark := 'Validation Failure : [Days Cannot be less than Zero at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       if (NVL(C122.STLDAYS,0)*8)<>NVL(C122.STLHOURS,0) then
        lv_error_remark := 'Validation Failure : [Applicable days and Applicable Hours must be matched at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       
       SELECT COUNT(*) into lv_cnt FROM 
       WPSSTLENTRY WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE AND TOKENNO=C122.TOKENNO AND YEAR=substr(lv_FortnightStartDate, -4) AND LEAVEENCASHMENT='Y';
        if lv_cnt>0 then
        lv_error_remark := 'Validation Failure : [Encashment already has been done at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       SELECT COUNT(*) into lv_cnt FROM 
       WPSATTENDANCEDAYWISE WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE AND TOKENNO=C122.TOKENNO AND STATUSCODE='P' AND DATEOFATTENDANCE BETWEEN  TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY');
       
        if lv_cnt>0 then
        lv_error_remark := 'Validation Failure : [Data present in normal attendance. at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       SELECT COUNT(*) into lv_cnt 
       FROM WPSSTLENTRY WHERE 
       TOKENNO=C122.TOKENNO
       AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
       AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
       OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
       AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
       AND LEAVECODE = 'STL'
       AND YEARCODE=C122.STLTAKENFROMYEAR;
               
        if lv_cnt>0 then
            lv_error_remark := 'Validation Failure : [STL Data Already Exist at line no '||lv_row_cnt||']';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
                
       SELECT TO_CHAR(TO_DATE(''||lv_FortnightStartDate||'','DD/MM/RRRR') ,'DD/MM/YYYY')
       INTO LV_FORTNIGHTAPPLICABLEDATE
       FROM DUAL;
          
       select fn_autogen_params(P_COMPCODE,P_DIVCODE,P_YEARCODE,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
       into lv_DocumentNo
       from dual;
                
       if lv_DocumentNo IS NULL then
        lv_error_remark := 'Validation Failure : [Unable to generated Autogenerated Number at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       END IF;
       
        INSERT INTO GBL_WPSSTLENTRY
        (
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT
        )
        SELECT P_COMPCODE,P_DIVCODE,P_YEARCODE,/*TO_CHAR(TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'),'YYYY')*/C122.STLTAKENFROMYEAR,/*C122.DOCUMENTNO*/lv_DocumentNo,TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY'),
        TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY'),TO_DATE(lv_FortnightEndDate,'DD/MM/YYYY'),LV_WORKERSERIAL,NULL,'STL',
        C122.TOKENNO,LV_WORKERCATEGORYCODE,LV_DEPARTMENTCODE,LV_OCCUPATIONCODE,LV_SHIFTCODE,
        TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'),TO_DATE(C122.STLTODATE,'DD/MM/YYYY'),C122.STLHOURS,C122.STLDAYS,C122.RATE,'SWT',FN_GENERATE_SYSROWID,
        LV_SECTIONCODE,'AVAILED','LESS','N' FROM DUAL;
       
       --------- start add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       for c11 in (
--                   select distinct departmentcode, sectioncode, occupationcode GBL_WPSSTLENTRY
--                   minus
--                   select departmentcode, sectioncode, occupationcode from WPSOCCUPATIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE= P_DIVCODE
                   SELECT DISTINCT DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE
                   FROM GBL_WPSSTLENTRY
                   WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                     AND DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE NOT IN ( SELECT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST
                                                                               WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                                                                             )                       
                  )
       loop
            select min(OCCUPATIONCODE) INTO lv_MinOcpCode FROM WPSOCCUPATIONMAST
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c11.DEPARTMENTCODE AND SECTIONCODE = c11.SECTIONCODE;
              
            UPDATE  GBL_WPSSTLENTRY SET OCCUPATIONCODE = lv_MinOcpCode 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c11.DEPARTMENTCODE AND SECTIONCODE = c11.SECTIONCODE;  
       end loop;            
       
       --------- end add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       
        INSERT INTO WPSSTLENTRY
        (
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT,STLSERIALNO,PAYMENTDATE
        )
        SELECT 
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT,C122.SERIALNO, DOCUMENTDATE AS PAYMENTDATE
        FROM GBL_WPSSTLENTRY;
       

      
        ---
        SELECT MAX(LEAVEDATE)  INTO lv_LASTMAX_DATE 
        FROM WPSSTLENTRYDETAILS
        WHERE COMPANYCODE=P_COMPCODE
           AND DIVISIONCODE=P_DIVCODE
           AND YEARCODE=P_YEARCODE
           AND TOKENNO=C122.TOKENNO
           AND PAYMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
           AND LEAVEDAYS>0;
        
        --
         IF lv_LASTMAX_DATE IS NULL THEN
          lv_DATE := TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY');
         ELSE
         lv_DATE := lv_LASTMAX_DATE+1;
         END IF;
        --lv_DATE := TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY');
        lv_IsSanction := 'Y';
        lv_LeaveDays := 1;
        lv_NoofHoursInday := 8;
        lv_DY    := 1;
        WHILE (lv_DATE <= TO_DATE(C122.STLTODATE,'DD/MM/YYYY'))
            loop    
                IF lv_LeaveDays > C122.STLDAYS THEN
                    lv_IsSanction := 'N';
                    lv_NoofHoursInday := 0;
                    lv_DY    := 0;
                END IF;
                 
                   
                insert into GBL_WPSSTLENTRYDETAILS (COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, LEAVECODE, DOCUMENTNO, DOCUMENTDATE, 
                FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, 
                OCCUPATIONCODE, SHIFTCODE, LEAVEFROMDATE, LEAVETODATE, LEAVEDATE, LEAVEHOURS, LEAVEDAYS, STLRATE, 
                ISSANCTIONED, TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIEDDATE, SYSROWID,STLSERIALNO)
                
                values (P_COMPCODE, P_DIVCODE, P_YEARCODE, C122.STLTAKENFROMYEAR, 'STL' , lv_DocumentNo, TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY'), 
                TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY'), TO_DATE(lv_FortnightEndDate,'DD/MM/YYYY'), LV_WORKERSERIAL, C122.TOKENNO, LV_WORKERCATEGORYCODE, LV_DEPARTMENTCODE, 
                LV_OCCUPATIONCODE, LV_SHIFTCODE, TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'), TO_DATE(C122.STLTODATE,'DD/MM/YYYY'), lv_DATE , lv_NoofHoursInday , lv_DY , C122.RATE, 
                lv_IsSanction , 'AVAILED', 'LESS','SWT', SYSDATE, FN_GENERATE_SYSROWID,C122.SERIALNO);
                
                lv_LeaveDays := lv_LeaveDays +1;    
                lv_DATE := lv_DATE+1;               
            end loop;
            
       --------- start add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       for c51 in (
--                   select distinct departmentcode, sectioncode, occupationcode GBL_WPSSTLENTRYDETAILS
--                   minus
--                   select departmentcode, sectioncode, occupationcode from WPSOCCUPATIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE= P_DIVCODE
                   SELECT DISTINCT DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE
                   FROM GBL_WPSSTLENTRYDETAILS
                   WHERE COMPANYCODE =P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                     AND DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE NOT IN ( SELECT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST
                                                                               WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                                                                             )                       

                  )
       loop
            select min(OCCUPATIONCODE) INTO lv_MinOcpCode FROM WPSOCCUPATIONMAST
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c51.DEPARTMENTCODE AND SECTIONCODE = c51.SECTIONCODE;
              
            UPDATE  GBL_WPSSTLENTRY SET OCCUPATIONCODE = lv_MinOcpCode 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c51.DEPARTMENTCODE AND SECTIONCODE = c51.SECTIONCODE;  
       end loop;            
       
       --------- end add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
              
       
                INSERT INTO WPSSTLENTRYDETAILS
                (
                SECTIONCODE, LASTMODIFIEDDATE, ISSANCTIONED, LEAVEHOURS, WORKERCATEGORYCODE, 
                OCCUPATIONCODE, LEAVETODATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, STLRATE, ADDLESS, 
                USERNAME, DOCUMENTDATE, TRANSACTIONTYPE, LEAVEFROMDATE, LEAVEDAYS, SYSROWID, SHIFTCODE, 
                COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, DOCUMENTNO, 
                DEPARTMENTCODE, LEAVEDATE, YEARCODE, YEAR,LEAVECODE, PAYMENTDATE,STLSERIALNO
                )
                SELECT 
                SECTIONCODE, LASTMODIFIEDDATE, ISSANCTIONED, LEAVEHOURS, WORKERCATEGORYCODE, 
                OCCUPATIONCODE, LEAVETODATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, STLRATE, ADDLESS, 
                USERNAME, DOCUMENTDATE, TRANSACTIONTYPE, LEAVEFROMDATE, LEAVEDAYS, FN_GENERATE_SYSROWID, SHIFTCODE, 
                COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, DOCUMENTNO, 
                DEPARTMENTCODE, LEAVEDATE, YEARCODE, YEAR,LEAVECODE, DOCUMENTDATE AS PAYMENTDATE,STLSERIALNO
                FROM GBL_WPSSTLENTRYDETAILS;
                
                INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
                SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,LEAVEFROMDATE,LEAVETODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    LEAVEDATE,LEAVEDAYS,LEAVEHOURS,0,YEAR
                FROM GBL_WPSSTLENTRYDETAILS;
--               
                
               
              
       UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=P_COMPCODE
       AND DIVISIONCODE=P_DIVCODE
       AND LEAVEAPPLIEDON = TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
       AND WORKERSERIAL=LV_WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=P_COMPCODE
              AND DIVISIONCODE=P_DIVCODE 
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=P_COMPCODE
         AND DIVISIONCODE=P_DIVCODE
         AND WORKERSERIAL=LV_WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=P_COMPCODE
          AND DIVISIONCODE=P_DIVCODE
          AND LEAVEAPPLIEDON =  TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
          AND WORKERSERIAL=LV_WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( C122.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(C122.STLTODATE,'DD/MM/YYYY') - TO_DATE( C122.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
       
       lv_row_cnt :=lv_row_cnt+1;
       END LOOP;

END;
/


DROP PROCEDURE PROC_WPS_STL_IMPORT_1109;

CREATE OR REPLACE PROCEDURE PROC_WPS_STL_IMPORT_1109 (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_YEARCODE VARCHAR2,
                                                       P_PAYMENTDATE VARCHAR2,
                                                       P_OVERWRITE_DATA_EXIST VARCHAR2 DEFAULT 'N')


AS 

   lv_cnt                  number;
   lv_row_cnt              number;
   lv_result               varchar2(10);
   lv_error_remark         varchar2(4000) := '' ;
    
   LV_WORKERSERIAL varchar2(15);
   LV_WORKERNAME varchar2(100);
   LV_WORKERCATEGORYCODE varchar2(10);
   LV_DEPARTMENTCODE varchar2(10);
   LV_SECTIONCODE varchar2(10);
   LV_DEPARTMENTNAME varchar2(50);
   LV_OCCUPATIONCODE varchar2(10);
   lv_MinOcpCode     varchar2(10);   
   LV_SHIFTCODE varchar2(1);
   lv_DATE DATE;
   lv_IsSanction   varchar2(1) := '';
   lv_LeaveDays    number(5) := 0;
   
   lv_NoofHoursInday  number(5) := 0;
   lv_DY    number(5) := 0;
    
   lv_DocumentNo           varchar2(100) := '';
   lv_FortnightStartDate   VARCHAR2(10) := '';
   lv_FortnightEndDate     VARCHAR2(10) := '';
   lv_OFFDAY               varchar2(10) :='';
   LV_FORTNIGHTAPPLICABLEDATE  VARCHAR2(10) := '';
   lv_LASTMAX_DATE DATE;
BEGIN

lv_result:='#SUCCESS#';

    if P_PAYMENTDATE is null then
        lv_error_remark := 'Validation Failure : [Payment Date Cannot be blank.]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
    select count(*)
    into lv_cnt
    from WPSSTLRAWDATA_ENCASH_110920
    WHERE 1=1--COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE 
    AND PAYMENTDATE=P_PAYMENTDATE;
    
    DELETE FROM WPSSTLRAWDATA_ENCASH_110920 WHERE TOKENNO IS NULL;
       
    if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [No row found.Upload Again]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     SELECT TO_CHAR(FORTNIGHTSTARTDATE,'DD/MM/YYYY'),  TO_CHAR(FORTNIGHTENDDATE,'DD/MM/YYYY') 
    INTO lv_FortnightStartDate, lv_FortnightEndDate FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE
    AND YEARCODE = P_YEARCODE;
    
     if lv_FortnightStartDate IS NULL then
        lv_error_remark := 'Validation Failure : [Fortnight StartDate cannot be blank]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
     if lv_FortnightEndDate IS NULL then
        lv_error_remark := 'Validation Failure : [Fortnight EndDate cannot be blank]';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
    end if;
    
       SELECT COUNT(*) into lv_cnt FROM 
       WPSWAGEDPERIODDECLARATION WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE =P_DIVCODE AND FORTNIGHTSTARTDATE=TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY') AND FINALISEDANDLOCK='Y';
 
--COMMENT ON 22-08-2020      
--        if lv_cnt>0 then
--        lv_error_remark := 'Validation Failure : [Wages already finalized so STL data can not be modified/Uploaded]';
--        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
--       end if;
--END COMMENT ON 22-08-2020 
       
       lv_row_cnt :=1;
    
     IF NVL(P_OVERWRITE_DATA_EXIST,'N')='Y' THEN
               
               SELECT COUNT(*) into lv_cnt 
               FROM WPSSTLENTRY WHERE 
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
               --TOKENNO=C122.TOKENNO
               --AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               --AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               --OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               --AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               --AND LEAVECODE = 'STL'
               --AND YEARCODE=C122.STLTAKENFROMYEAR;
               
              if lv_cnt>0 then
                --IF DATA EXIST WHILE UPLOADING THEN DELETE THE PREVIOUS DATA IF P_OVERWRITE_DATA_EXIST='Y'
                DELETE FROM WPSSTLENTRYDETAILS WHERE DOCUMENTNO IN
                (
                SELECT DISTINCT DOCUMENTNO FROM WPSSTLENTRY WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
                );
                
                DELETE FROM WPSSTLENTRY WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR;
               DOCUMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
                
                DELETE FROM WPSLEAVEAPPLICATION WHERE 
               -- TOKENNO=C122.TOKENNO
               -- AND (LEAVEFROM BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
               -- OR LEAVETO BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
               -- AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
               -- AND LEAVECODE = 'STL'
               -- AND YEARCODE=C122.STLTAKENFROMYEAR;
               LEAVEAPPLIEDON=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY');
            end if;
     END IF;
   
   FOR C122 IN 
     (
        select *
        from WPSSTLRAWDATA_ENCASH_110920
        WHERE 1=1--COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE 
        AND PAYMENTDATE=P_PAYMENTDATE
     )
       LOOP  
       
       DELETE FROM GBL_WPSSTLENTRY;
       
       DELETE FROM GBL_WPSSTLENTRYDETAILS;
       
       
       SELECT count(*)
            into lv_cnt
            FROM WPSWORKERMAST A,WPSDEPARTMENTMASTER B
            WHERE A.COMPANYCODE = P_COMPCODE
            AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO =C122.TOKENNO 
            AND A.COMPANYCODE=B.COMPANYCODE
            AND A.DEPARTMENTCODE=B.DEPARTMENTCODE;
       
        if lv_cnt = 0 then
        lv_error_remark := 'Validation Failure : [Invalid Tokenno at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        end if;
            
       SELECT A.WORKERSERIAL, A.WORKERNAME, A.WORKERCATEGORYCODE ,/*A.DEPARTMENTCODE*/C122.DEPARTMENTCODE,C122.SECTIONCODE,B.DEPARTMENTNAME DEPARTMENTDESC,A.OCCUPATIONCODE,nvl(c122.SHIFTCODE,'1')
             INTO LV_WORKERSERIAL,LV_WORKERNAME,LV_WORKERCATEGORYCODE,LV_DEPARTMENTCODE,LV_SECTIONCODE,LV_DEPARTMENTNAME,LV_OCCUPATIONCODE,LV_SHIFTCODE
            FROM WPSWORKERMAST A,WPSDEPARTMENTMASTER B
            WHERE A.COMPANYCODE = P_COMPCODE
            AND A.DIVISIONCODE = P_DIVCODE
            AND A.TOKENNO =C122.TOKENNO 
            AND A.COMPANYCODE=B.COMPANYCODE
            AND A.DEPARTMENTCODE=B.DEPARTMENTCODE;
            
       
       if NVL(C122.STLHOURS,0)<=0 then
        lv_error_remark := 'Validation Failure : [Hours Cannot be less than Zero at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       if NVL(C122.STLDAYS,0)<=0 then
        lv_error_remark := 'Validation Failure : [Days Cannot be less than Zero at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       if (NVL(C122.STLDAYS,0)*8)<>NVL(C122.STLHOURS,0) then
        lv_error_remark := 'Validation Failure : [Applicable days and Applicable Hours must be matched at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       
       SELECT COUNT(*) into lv_cnt FROM 
       WPSSTLENTRY WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE AND TOKENNO=C122.TOKENNO AND YEAR=substr(lv_FortnightStartDate, -4) AND LEAVEENCASHMENT='Y';
        if lv_cnt>0 then
        lv_error_remark := 'Validation Failure : [Encashment already has been done at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       SELECT COUNT(*) into lv_cnt FROM 
       WPSATTENDANCEDAYWISE WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE=P_DIVCODE AND TOKENNO=C122.TOKENNO AND STATUSCODE='P' AND DATEOFATTENDANCE BETWEEN  TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY');
       
        if lv_cnt>0 then
        lv_error_remark := 'Validation Failure : [Data present in normal attendance. at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       end if;
       
       SELECT COUNT(*) into lv_cnt 
       FROM WPSSTLENTRY WHERE 
       TOKENNO=C122.TOKENNO
       AND (STLFROMDATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
       AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY') 
       OR STLTODATE BETWEEN TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY') 
       AND TO_DATE(C122.STLTODATE,'DD/MM/YYYY')) 
       AND LEAVECODE = 'STL'
       AND YEARCODE=C122.STLTAKENFROMYEAR;
               
        if lv_cnt>0 then
            lv_error_remark := 'Validation Failure : [STL Data Already Exist at line no '||lv_row_cnt||']';
            raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
        END IF;
                
       SELECT TO_CHAR(TO_DATE(''||lv_FortnightStartDate||'','DD/MM/RRRR') ,'DD/MM/YYYY')
       INTO LV_FORTNIGHTAPPLICABLEDATE
       FROM DUAL;
          
       select fn_autogen_params(P_COMPCODE,P_DIVCODE,P_YEARCODE,'WPS STL ENTRY',LV_FORTNIGHTAPPLICABLEDATE)
       into lv_DocumentNo
       from dual;
                
       if lv_DocumentNo IS NULL then
        lv_error_remark := 'Validation Failure : [Unable to generated Autogenerated Number at line no '||lv_row_cnt||']';
        raise_application_error(to_number(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,lv_error_remark));
       END IF;
       
        INSERT INTO GBL_WPSSTLENTRY
        (
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT
        )
        SELECT P_COMPCODE,P_DIVCODE,P_YEARCODE,/*TO_CHAR(TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'),'YYYY')*/C122.STLTAKENFROMYEAR,/*C122.DOCUMENTNO*/lv_DocumentNo,TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY'),
        TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY'),TO_DATE(lv_FortnightEndDate,'DD/MM/YYYY'),LV_WORKERSERIAL,NULL,'STL',
        C122.TOKENNO,LV_WORKERCATEGORYCODE,LV_DEPARTMENTCODE,LV_OCCUPATIONCODE,LV_SHIFTCODE,
        TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'),TO_DATE(C122.STLTODATE,'DD/MM/YYYY'),C122.STLHOURS,C122.STLDAYS,C122.RATE,'SWT',FN_GENERATE_SYSROWID,
        LV_SECTIONCODE,'AVAILED','LESS','N' FROM DUAL;
       
       --------- start add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       for c11 in (
--                   select distinct departmentcode, sectioncode, occupationcode GBL_WPSSTLENTRY
--                   minus
--                   select departmentcode, sectioncode, occupationcode from WPSOCCUPATIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE= P_DIVCODE
                   SELECT DISTINCT DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE
                   FROM GBL_WPSSTLENTRY
                   WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                     AND DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE NOT IN ( SELECT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST
                                                                               WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                                                                             )                       
                  )
       loop
            select min(OCCUPATIONCODE) INTO lv_MinOcpCode FROM WPSOCCUPATIONMAST
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c11.DEPARTMENTCODE AND SECTIONCODE = c11.SECTIONCODE;
              
            UPDATE  GBL_WPSSTLENTRY SET OCCUPATIONCODE = lv_MinOcpCode 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c11.DEPARTMENTCODE AND SECTIONCODE = c11.SECTIONCODE;  
       end loop;            
       
       --------- end add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       
        INSERT INTO WPSSTLENTRY
        (
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT,STLSERIALNO,PAYMENTDATE
        )
        SELECT 
        COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, DOCUMENTNO, DOCUMENTDATE, 
        FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, REMARKS, LEAVECODE, 
        TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, OCCUPATIONCODE, SHIFTCODE, 
        STLFROMDATE, STLTODATE, STLHOURS, STLDAYS, STLRATE, USERNAME, SYSROWID, 
        SECTIONCODE, TRANSACTIONTYPE, ADDLESS, LEAVEENCASHMENT,C122.SERIALNO, DOCUMENTDATE AS PAYMENTDATE
        FROM GBL_WPSSTLENTRY;
       

      
        ---
        SELECT MAX(LEAVEDATE)  INTO lv_LASTMAX_DATE 
        FROM WPSSTLENTRYDETAILS
        WHERE COMPANYCODE=P_COMPCODE
           AND DIVISIONCODE=P_DIVCODE
           AND YEARCODE=P_YEARCODE
           AND TOKENNO=C122.TOKENNO
           AND PAYMENTDATE=TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
           AND LEAVEDAYS>0;
        
        --
         IF lv_LASTMAX_DATE IS NULL THEN
          lv_DATE := TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY');
         ELSE
         lv_DATE := lv_LASTMAX_DATE+1;
         END IF;
        --lv_DATE := TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY');
        lv_IsSanction := 'Y';
        lv_LeaveDays := 1;
        lv_NoofHoursInday := 8;
        lv_DY    := 1;
        WHILE (lv_DATE <= TO_DATE(C122.STLTODATE,'DD/MM/YYYY'))
            loop    
                IF lv_LeaveDays > C122.STLDAYS THEN
                    lv_IsSanction := 'N';
                    lv_NoofHoursInday := 0;
                    lv_DY    := 0;
                END IF;
                 
                   
                insert into GBL_WPSSTLENTRYDETAILS (COMPANYCODE, DIVISIONCODE, YEARCODE, YEAR, LEAVECODE, DOCUMENTNO, DOCUMENTDATE, 
                FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, 
                OCCUPATIONCODE, SHIFTCODE, LEAVEFROMDATE, LEAVETODATE, LEAVEDATE, LEAVEHOURS, LEAVEDAYS, STLRATE, 
                ISSANCTIONED, TRANSACTIONTYPE, ADDLESS, USERNAME, LASTMODIFIEDDATE, SYSROWID,STLSERIALNO)
                
                values (P_COMPCODE, P_DIVCODE, P_YEARCODE, C122.STLTAKENFROMYEAR, 'STL' , lv_DocumentNo, TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY'), 
                TO_DATE(lv_FortnightStartDate,'DD/MM/YYYY'), TO_DATE(lv_FortnightEndDate,'DD/MM/YYYY'), LV_WORKERSERIAL, C122.TOKENNO, LV_WORKERCATEGORYCODE, LV_DEPARTMENTCODE, 
                LV_OCCUPATIONCODE, LV_SHIFTCODE, TO_DATE(C122.STLFROMDATE,'DD/MM/YYYY'), TO_DATE(C122.STLTODATE,'DD/MM/YYYY'), lv_DATE , lv_NoofHoursInday , lv_DY , C122.RATE, 
                lv_IsSanction , 'AVAILED', 'LESS','SWT', SYSDATE, FN_GENERATE_SYSROWID,C122.SERIALNO);
                
                lv_LeaveDays := lv_LeaveDays +1;    
                lv_DATE := lv_DATE+1;               
            end loop;
            
       --------- start add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
       for c51 in (
--                   select distinct departmentcode, sectioncode, occupationcode GBL_WPSSTLENTRYDETAILS
--                   minus
--                   select departmentcode, sectioncode, occupationcode from WPSOCCUPATIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE= P_DIVCODE
                   SELECT DISTINCT DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE
                   FROM GBL_WPSSTLENTRYDETAILS
                   WHERE COMPANYCODE =P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                     AND DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE NOT IN ( SELECT DEPARTMENTCODE||SECTIONCODE||OCCUPATIONCODE FROM WPSOCCUPATIONMAST
                                                                               WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                                                                             )                       

                  )
       loop
            select min(OCCUPATIONCODE) INTO lv_MinOcpCode FROM WPSOCCUPATIONMAST
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c51.DEPARTMENTCODE AND SECTIONCODE = c51.SECTIONCODE;
              
            UPDATE  GBL_WPSSTLENTRY SET OCCUPATIONCODE = lv_MinOcpCode 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE = c51.DEPARTMENTCODE AND SECTIONCODE = c51.SECTIONCODE;  
       end loop;            
       
       --------- end add on 11.08.2020 due to based on master data occupation not match with  department and section which upload through excel
              
       
                INSERT INTO WPSSTLENTRYDETAILS
                (
                SECTIONCODE, LASTMODIFIEDDATE, ISSANCTIONED, LEAVEHOURS, WORKERCATEGORYCODE, 
                OCCUPATIONCODE, LEAVETODATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, STLRATE, ADDLESS, 
                USERNAME, DOCUMENTDATE, TRANSACTIONTYPE, LEAVEFROMDATE, LEAVEDAYS, SYSROWID, SHIFTCODE, 
                COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, DOCUMENTNO, 
                DEPARTMENTCODE, LEAVEDATE, YEARCODE, YEAR,LEAVECODE, PAYMENTDATE,STLSERIALNO
                )
                SELECT 
                SECTIONCODE, LASTMODIFIEDDATE, ISSANCTIONED, LEAVEHOURS, WORKERCATEGORYCODE, 
                OCCUPATIONCODE, LEAVETODATE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, STLRATE, ADDLESS, 
                USERNAME, DOCUMENTDATE, TRANSACTIONTYPE, LEAVEFROMDATE, LEAVEDAYS, FN_GENERATE_SYSROWID, SHIFTCODE, 
                COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO, DOCUMENTNO, 
                DEPARTMENTCODE, LEAVEDATE, YEARCODE, YEAR,LEAVECODE, DOCUMENTDATE AS PAYMENTDATE,STLSERIALNO
                FROM GBL_WPSSTLENTRYDETAILS;
                
                INSERT INTO WPSLEAVEAPPLICATION
                    (COMPANYCODE, DIVISIONCODE, YEARCODE, WORKERSERIAL, TOKENNO, WOKERCATEGORYCODE, 
                    LEAVECODE, LEAVEAPPLIEDON, LEAVEFROM, LEAVETO, LEAVESANCTIONEDON, 
                    LEAVEDATE,LEAVEDAYS, LEAVEHOURS, LEAVEENCASHED, CALENDARYEAR)
                SELECT COMPANYCODE, DIVISIONCODE, YEARCODE,WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE,
                    LEAVECODE,DOCUMENTDATE,LEAVEFROMDATE,LEAVETODATE,/*DOCUMENTDATE*/ FORTNIGHTENDDATE,
                    LEAVEDATE,LEAVEDAYS,LEAVEHOURS,0,YEAR
                FROM GBL_WPSSTLENTRYDETAILS;
--               
                
               
              
       UPDATE WPSLEAVEAPPLICATION 
       SET LEAVEDAYS=0,LEAVEHOURS=0
     WHERE COMPANYCODE=P_COMPCODE
       AND DIVISIONCODE=P_DIVCODE
       AND LEAVEAPPLIEDON = TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
       AND WORKERSERIAL=LV_WORKERSERIAL
       AND EXISTS --LEAVEDATE IN
       (   SELECT HOLIDAYDATE
             FROM WPSHOLIDAYMASTER 
            WHERE COMPANYCODE=P_COMPCODE
              AND DIVISIONCODE=P_DIVCODE 
              AND ISPAID='Y'
              AND WPSLEAVEAPPLICATION.LEAVEDATE=WPSHOLIDAYMASTER.HOLIDAYDATE
       );
       
      SELECT TRIM(DAYOFFDAY)
        INTO lv_OFFDAY
        FROM WPSWORKERMAST 
       WHERE COMPANYCODE=P_COMPCODE
         AND DIVISIONCODE=P_DIVCODE
         AND WORKERSERIAL=LV_WORKERSERIAL;
       
       UPDATE WPSLEAVEAPPLICATION 
          SET LEAVEDAYS=0,LEAVEHOURS=0
        WHERE COMPANYCODE=P_COMPCODE
          AND DIVISIONCODE=P_DIVCODE
          AND LEAVEAPPLIEDON =  TO_DATE(P_PAYMENTDATE,'DD/MM/YYYY')
          AND WORKERSERIAL=LV_WORKERSERIAL
          AND EXISTS 
            (
            SELECT TO_DATE(DATES,'DD/MM/YYYY') DATES  FROM --count(TO_CHAR(DATES,'DAY'))
            (
            WITH d AS
            (
            SELECT TRUNC ( TO_DATE( C122.STLFROMDATE,'DD/MM/YYYY')) -1  AS dt
            FROM dual
            )
            SELECT dt + LEVEL  DATES
            FROM d
            CONNECT BY LEVEL <=  ( TO_DATE(C122.STLTODATE,'DD/MM/YYYY') - TO_DATE( C122.STLFROMDATE,'DD/MM/YYYY') + 1 )
            )
            where TO_DATE(WPSLEAVEAPPLICATION.LEAVEDATE,'DD/MM/YYYY')=TO_DATE(DATES,'DD/MM/YYYY')
              --  AND trim(trim(TO_CHAR(DATES,'DAY'))) = UPPER(TRIM(lv_OFFDAY))
              AND ltrim(trim(TO_CHAR(WPSLEAVEAPPLICATION.LEAVEDATE,'DAY'))) = UPPER(LTRIM(TRIM(lv_OFFDAY)))
       );
       
       lv_row_cnt :=lv_row_cnt+1;
       END LOOP;

END;
/


DROP PROCEDURE PROC_WPS_UPDATE_NA_COMP;

CREATE OR REPLACE PROCEDURE "PROC_WPS_UPDATE_NA_COMP" ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2,p_fnstdt VARCHAR2, p_fnendt varchar, p_phase_table varchar2 , p_process_table varchar2, p_UpdateDummytable varchar2)
as
lv_updsql varchar2(32767);
lv_tab varchar2(30) := ltrim(trim(upper(p_phase_table)));
-- declare  -- for view creration from outside 
lv_colstr varchar2(32767);
lv_sqlstr varchar2(32767) :=  'CREATE OR REPLACE FORCE VIEW vw_category_comp_NA as  '||chr(10) ;
lv_fn_stdt date := to_date(p_fnstdt,'dd/mm/yyyy');
lv_fn_endt date := to_date(p_fnendt,'dd/mm/yyyy');
lv_sqlerrm varchar(2000);
lv_ProcName     varchar2(30) := 'PROC_WPS_UPDATE_NA_COMP';
begin
--------------------- view creation -------------
/*for v1 in(
select column_name cn from cols where table_name = 'WPSWORKERCATEGORYVSCOMPONENT' 
and column_name not in( 'COMPANYCODE','DIVISIONCODE'  , 'EFFECTIVEDATE', 'WORKERCATEGORYCODE' , 'LASTMODIFIED' ) ) loop
lv_sqlstr := lv_sqlstr||' select  workercategorycode , '''||v1.cn||''' COMPONENTSHORTNAME from WPSWORKERCATEGORYVSCOMPONENT  '||chr(10)
             ||' where   '||v1.cn||' = ''N'' '||chr(10) 
             ||' UNION ALL '||chr(10) ;
end loop;
lv_sqlstr := lv_sqlstr||' select  ''XX'' ,''XX'' from dual where 1=2  '||chr(10) ;
*/
--CREATE OR REPLACE VIEW vw_category_comp_NA as  
    lv_sqlstr := lv_sqlstr||' SELECT A.WORKERCATEGORYCODE, B.COMPONENTSHORTNAME '||CHR(10) 
                          ||' FROM WPSWORKERCATEGORYVSCOMPONENT A, WPSCOMPONENTMASTER B '||CHR(10)
                          ||' WHERE A.COMPONENTCODE = B.COMPONENTCODE '||CHR(10)
                          ||'   AND A.EFFECTIVEDATE = ( '||CHR(10)
                          ||'                            SELECT MAX(EFFECTIVEDATE)  '||CHR(10)
                          ||'                            FROM WPSWORKERCATEGORYVSCOMPONENT  '||CHR(10)
                          ||'                          ) '||CHR(10)
                          ||'  AND NVL(APPLICABLE,''N'') LIKE ''N%''   '||CHR(10);
execute immediate lv_sqlstr;
-- end ; -- end for view creration from outside
----------------------------------------- end view creation -----------
for c1 in( select distinct WORKERCATEGORYCODE cat from vw_category_comp_NA   ) loop
lv_updsql := 'UPDATE '||lv_tab||' SET ' ;
for c2 in(select column_name cn from cols where table_name = lv_tab
intersect
select COMPONENTSHORTNAME cn from vw_category_comp_NA where WORKERCATEGORYCODE = c1.cat
) loop
lv_updsql := lv_updsql||c2.cn||' = 0 , ' ;
end loop ; -- c2
lv_updsql := lv_updsql||' WORKERCATEGORYCODE=WORKERCATEGORYCODE where WORKERCATEGORYCODE = '''||c1.cat||'''';
--dbms_output.put_line(lv_updsql);
--insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'proc_wps_update_NA_comp',lv_updsql,lv_updsql,'','');
--COMMIT;
execute immediate lv_updsql ;
end loop ; -- c1
--RETURN;
---------------------  update dummy
if p_UpdateDummytable = 'YES' THEN 
    for u1 in(
    (
    select column_name cn from cols where table_name = p_phase_table and column_name not in(  'WORKTYPECODE' ,'TOKENNO', 'WORKERCATEGORYCODE', 'WORKERSERIAL','DEPARTMENTCODE')
    intersect 
    /*
    select column_name cn from cols where table_name = 'WPSWORKERCATEGORYVSCOMPONENT' 
    and column_name not in( 'COMPANYCODE','DIVISIONCODE'  , 'EFFECTIVEDATE', 'WORKERCATEGORYCODE' , 'LASTMODIFIED' )
    */
    SELECT B.COMPONENTSHORTNAME AS CN 
      FROM WPSWORKERCATEGORYVSCOMPONENT A, WPSCOMPONENTMASTER B 
      WHERE A.COMPONENTCODE = B.COMPONENTCODE 
        AND A.EFFECTIVEDATE = ( 
                                SELECT MAX(EFFECTIVEDATE) 
                                FROM WPSWORKERCATEGORYVSCOMPONENT  
                              ) 
    )
    intersect
    select column_name cn from cols where table_name = 'WPSWAGESDETAILS_SWT' and column_name not in(  'WORKTYPECODE' ,'TOKENNO', 'WORKERCATEGORYCODE','WORKERSERIAL','DEPARTMENTCODE'  )
    )
    loop
    lv_colstr := lv_colstr||u1.cn||',' ;
    end loop;
    lv_colstr := lv_colstr||' WORKERCATEGORYCODE' ;
    lv_updsql := 'update '||p_process_table||' a set ('||lv_colstr||' ) = ( select '||lv_colstr||' from '||p_phase_table||' b '||chr(10) 
                  ||' where a.WORKERSERIAL = b.WORKERSERIAL '||CHR(10);
    IF instr(p_process_table,'SWT') > 0 THEN        -- FOR NAIHATI EARNING DISTRIBUTE IN SHIFT, DEPARTMENT,SECTION, OCCUPATION,DEPTSERIAL WISE 
        lv_updsql := lv_updsql ||'  AND NVL(A.SHIFTCODE,''N'') = NVL(B.SHIFTCODE,''N'') '||CHR(10);
        lv_updsql := lv_updsql ||'  AND NVL(A.DEPARTMENTCODE,''N'') = NVL(B.DEPARTMENTCODE,''N'') '||CHR(10);
        lv_updsql := lv_updsql ||'  AND NVL(A.SECTIONCODE,''N'') = NVL(B.SECTIONCODE,''N'') '||CHR(10);                 
        lv_updsql := lv_updsql ||'  AND NVL(A.OCCUPATIONCODE,''N'') = NVL(B.OCCUPATIONCODE,''N'') '||CHR(10);
        lv_updsql := lv_updsql ||'  AND NVL(A.DEPTSERIAL,''N'') = NVL(B.DEPTSERIAL,''N'') '||CHR(10);
    END IF;                  
    lv_updsql := lv_updsql ||'  AND A.WORKERCATEGORYCODE = B.WORKERCATEGORYCODE )';
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_updsql,'',lv_fn_stdt, lv_fn_endt, p_phase_table);
--    dbms_output.put_line(lv_updsql);
    execute immediate lv_updsql ;
   COMMIT;
end if;        
--------------------- end update dummy 
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
 values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,lv_updsql,'',lv_fn_stdt,lv_fn_endt, p_phase_table);
end;
/


DROP PROCEDURE PROC_WPS_VB_BEAMING;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_BEAMING( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY AMALESH ON 10.08.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE OCCUPATION TYPE WISE RATE AND STORE IN WPSLINEHOURLYRATE TABLE -- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_BEAMING';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(30) := '';  
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';      

Begin


    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode  
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              --lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode;
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;   
    END IF;
    
    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            SELECT PRODUCTIONTYPECODE,DEPARTMENTCODE INTO lv_ProductionType, lv_DeptCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND SECTIONCODE = P_SECTION;
        EXCEPTION
            WHEN OTHERS THEN 
                lv_ProductionType := 'SWT' ;
                SELECT MAX(DEPARTMENTCODE) into lv_DeptCode FROM WPSSECTIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE AND SECTIONCODE = P_SECTION;    
        END;        
    END IF;


--    SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
--    WHERE COMPANYCODE = P_COMPCODE
--    AND DIVISIONCODE = P_DIVCODE
--    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'   AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'   AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| ''' '||chr(10)  
             ||'   AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'   AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'   AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
    lv_TempTableAttn := 'WPS_TEMP_VB_ATTN'; --_'||lv_ProductionType;
    lv_TempTableProd := 'WPS_TEMP_VB_PROD_'||lv_ProductionType;

    BEGIN
        --EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableAttn;
        EXECUTE IMMEDIATE 'CREATE TABLE '||lv_TempTableAttn||'(MACHINECODE VARCHAR2(10), SHIFTCODE VARCHAR2(10), ATTN_HRS NUMBER(11,2), TOT_HRS NUMBER(11,2) '||CHR(10);
    EXCEPTION
        WHEN OTHERS THEN NULL;
        EXECUTE IMMEDIATE 'DELETE FROM '||lv_TempTableAttn;      
    END; 
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableProd;
    EXCEPTION
        WHEN OTHERS THEN NULL;     
    END;
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shift,Occupation type wise attendance hours'; 
    lv_Sql:= ' INSERT INTO '||lv_TempTableAttn||' '||chr(10)
        ||' SELECT A.MACHINECODE1 MACHINECODE, A.SHIFTCODE,C.OCCUPATIONTYPE, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) ATTN_HRS,0 TOT_HRS '||CHR(10)
        ||' FROM WPSATTENDANCEDAYWISE A, WPSSECTIONMAST B, WPSOCCUPATIONMAST C '||CHR(10)
        ||' WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||chr(10)
        ||'   AND A.DEPARTMENTCODE = '''||lv_DeptCode||''' AND A.MACHINECODE1 IS NOT NULL '||chr(10)
        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE '||chr(10)
        ||'   AND B.WORKTYPECODE = ''P'' '||chr(10)
        ||'   AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE '||chr(10) 
        ||'   AND A.DEPARTMENTCODE = C.DEPARTMENTCODE AND A.SECTIONCODE = C.SECTIONCODE AND A.OCCUPATIONCODE = C.OCCUPATIONCODE '||chr(10)
        ||'   AND C.WORKERTYPECODE = ''P'' '||chr(10)
        ||'   GROUP BY A.MACHINECODE1, A.SHIFTCODE ,C.OCCUPATIONTYPE '||chr(10)
        ||' ORDER BY A.MACHINECODE1,A.SHIFTCODE, C.OCCUPATIONTYPE '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    -- UPDATING TOT_HRS FROM BASED ON MACHINE,SHIFT
    FOR C1 IN (
                SELECT MACHINECODE, SHIFTCODE, SUM(ATTN_HRS) TOT_HRS
                FROM WPS_TEMP_VB_ATTN --_P0006
                GROUP BY MACHINECODE, SHIFTCODE
            )
    LOOP
        UPDATE WPS_TEMP_VB_ATTN SET TOT_HRS = C1.TOT_HRS WHERE MACHINECODE = C1.MACHINECODE AND SHIFTCODE = C1.SHIFTCODE;
    END LOOP;        
    
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shiftwise production and vbamount calculate';

    lv_Sql := ' CREATE TABLE '||lv_TempTableProd||' AS '||chr(10)
        ||' SELECT DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE, SUM(PRODUCTION) PRODUCTION, SUM(VBAMOUNT) VBAMOUNT '||chr(10)
        ||' FROM ( '||chr(10)
        ||'         SELECT A.DEPARTMENTCODE,'''||lv_SectionCode||''' AS SECTIONCODE, A.PRODUCTIONTYPE,A.MACHINECODE,A.SHIFTCODE, '||chr(10) 
        ||'         A.QUALITYCODE, B.QUALITYRATE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION, '||chr(10)  
        ||'         ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2) *B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||chr(10)  
        ||'         FROM WPSPRODUCTIONSUMMARY A, '||chr(10)  
        ||'         ( '||chr(10)  
        ||'          SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY, '||chr(10)  
        ||'          CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE '||chr(10)  
        ||'          FROM  WPSQUALITYRATE_ON_REEDSPACE X, '||chr(10)  
        ||'          ( '||chr(10)  
        ||'              SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)  
        ||'              FROM WPSQUALITYRATE_ON_REEDSPACE '||chr(10)  
        ||'              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||chr(10)
        ||'                AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''   '||chr(10)
        ||'              GROUP BY PRODUCTIONTYPE, QUALITYCODE   '||chr(10)
        ||'          ) Y   '||chr(10)
        ||'          WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'            AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE    '||chr(10)
        ||'            AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||chr(10)  
        ||'      ) B  '||chr(10)
        ||'      WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'        AND A.YEARCODE = '''||P_YEARCODE||'''   '||chr(10) 
        ||'        AND A.STARTDATE >= '''||lv_fn_stdt||''' AND A.STARTDATE <= '''||lv_fn_endt||'''  '||chr(10)  
        ||'        AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE  AND A.QUALITYCODE = B.QUALITYCODE  '||chr(10)
        ||'      GROUP BY A.DEPARTMENTCODE,  A.PRODUCTIONTYPE, A.MACHINECODE,A.SHIFTCODE,  '||chr(10)
        ||'         A.QUALITYCODE, B.UNITQUANTITY, B.QUALITYRATE, B.PERCENTAGEOFRATE  '||chr(10)
        ||'     )  '||chr(10)
        ||' GROUP BY DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE  '||chr(10);    

    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  lv_ProductionType;
    
    lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,'||chr(10) 
        ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE, MACHINECODE1, SHIFTCODE,   '||chr(10)  
        ||' TOTALPRODUCTION, TOTALHOURS, TOTALBASIC, VBHOURLYRATE,TRANTYPE, OCCUPATIONTYPE, '||CHR(10)
        ||' LASTMODIFIED,USERNAME, SYSROWID)  '||chr(10) 
        ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, '||CHR(10)
        ||'  A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.MACHINECODE, A.SHIFTCODE, '||chr(10)
        ||'  A.PRODUCTION, B.ATTN_HRS, A.VBAMOUNT, '||CHR(10)
        ||'  CASE WHEN OCCUPATIONTYPE = ''BEAMER'' THEN '||CHR(10) 
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(A.VBAMOUNT*0.974/B.TOT_HRS,5) ELSE 0 END '||CHR(10)  --- as SRS 2.6% VB amount Deduct for Beamer so we consider 97.4% vb amount for beamer 
        ||'  ELSE '||CHR(10)
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(A.VBAMOUNT*0.974/B.TOT_HRS,5)+ROUND(A.VBAMOUNT*0.026/B.ATTN_HRS,5) ELSE 0 END '||CHR(10)
        ||'  END VBHOURLYRATE,''VB'' TRANTYPE, B.OCCUPATIONTYPE, '||CHR(10)
        ||'  SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID() '||CHR(10)
        ||'  FROM '||lv_TempTableProd||' A, '||lv_TempTableAttn||' B '||chr(10)
        ||'  WHERE A.MACHINECODE=B.MACHINECODE AND A.SHIFTCODE = B.SHIFTCODE '||chr(10)
        ||'  ORDER BY A.MACHINECODE, A.SHIFTCODE '||chr(10);        
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    PROC_VBDETAILS_OCPTYPE_INSERT ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',lv_ProductionType,lv_DeptCode, lv_SectionCode,NULL,NULL);

    ----- worker wisee occupationtype wise VB AMOUNT CALCULATION WHICH TRANSFER INTO VBDETAILS TABLE  -----
--   lv_Remarks := 'DATA INSERT INTO WPSVBDETAILS TABLE'; 
--
--   lv_Sql := 'INSERT INTO WPSVBDETAILS ('||chr(10) 
--        ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10)  
--        ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)  
--        ||' MACHINECODE,PRODUCTIONHOURS,VBRATE, VBAMOUNT,'||chr(10)
--        ||' USERNAME, LASTMODIFIED, SYSROWID )   '||chr(10)
--        ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, '||chr(10)
--        ||' ''' ||lv_ProductionType|| ''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE,R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,'||chr(10)  
--        ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)) PRODUCTIONHOURS,  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT,'||chr(10) 
--        ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID '||chr(10) 
--        ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R, WPSOCCUPATIONMAST O  '||chr(10) 
--        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
--        ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_fn_stdt||''' '||chr(10)
--        ||'   AND R.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||chr(10)
--        ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||chr(10)
--        ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE '||chr(10)
--        ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE  '||chr(10)
--        ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE1   '||chr(10)
--        ||'   AND R.COMPANYCODE = O.COMPANYCODE AND R.DIVISIONCODE = O.DIVISIONCODE AND R.SECTIONCODE = O.SECTIONCODE AND R.OCCUPATIONTYPE = O.OCCUPATIONTYPE'||chr(10)
--        ||'   AND A.COMPANYCODE = O.COMPANYCODE AND A.DIVISIONCODE = O.DIVISIONCODE AND A.SECTIONCODE = O.SECTIONCODE AND A.OCCUPATIONCODE= O.OCCUPATIONCODE  '||chr(10)
--        ||'   AND R.PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''  '||chr(10)
--        ||'   AND NVL(A.ATTENDANCEHOURS,0) > 0 '||chr(10)  
--        ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE, A.SHIFTCODE, R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||chr(10)   
--        ||'    A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1 '||chr(10);
--    
--    EXECUTE IMMEDIATE lv_Sql;
--    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
--    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
--    COMMIT; 
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_BEAMING_OLD;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_BEAMING_OLD( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY AMALESH ON 10.08.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE OCCUPATION TYPE WISE RATE AND STORE IN WPSLINEHOURLYRATE TABLE -- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_BEAMING';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(30) := '';  
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';      

Begin


    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode  
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              --lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode;
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;   
    END IF;
    
    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            SELECT PRODUCTIONTYPECODE,DEPARTMENTCODE INTO lv_ProductionType, lv_DeptCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND SECTIONCODE = P_SECTION;
        EXCEPTION
            WHEN OTHERS THEN 
                lv_ProductionType := 'SWT' ;
                SELECT MAX(DEPARTMENTCODE) into lv_DeptCode FROM WPSSECTIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE AND SECTIONCODE = P_SECTION;    
        END;        
    END IF;


--    SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
--    WHERE COMPANYCODE = P_COMPCODE
--    AND DIVISIONCODE = P_DIVCODE
--    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'   AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'   AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| ''' '||chr(10)  
             ||'   AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'   AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'   AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
    lv_TempTableAttn := 'WPS_TEMP_VB_ATTN'; --_'||lv_ProductionType;
    lv_TempTableProd := 'WPS_TEMP_VB_PROD_'||lv_ProductionType;

    BEGIN
        --EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableAttn;
        EXECUTE IMMEDIATE 'CREATE TABLE '||lv_TempTableAttn||'(MACHINECODE VARCHAR2(10), SHIFTCODE VARCHAR2(10), ATTN_HRS NUMBER(11,2), TOT_HRS NUMBER(11,2) '||CHR(10);
    EXCEPTION
        WHEN OTHERS THEN NULL;
        EXECUTE IMMEDIATE 'DELETE FROM '||lv_TempTableAttn;      
    END; 
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableProd;
    EXCEPTION
        WHEN OTHERS THEN NULL;     
    END;
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shift,Occupation type wise attendance hours'; 
    lv_Sql:= ' INSERT INTO '||lv_TempTableAttn||' '||chr(10)
        ||' SELECT A.MACHINECODE1 MACHINECODE, A.SHIFTCODE,C.OCCUPATIONTYPE, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) ATTN_HRS,0 TOT_HRS '||CHR(10)
        ||' FROM WPSATTENDANCEDAYWISE A, WPSSECTIONMAST B, WPSOCCUPATIONMAST C '||CHR(10)
        ||' WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||chr(10)
        ||'   AND A.DEPARTMENTCODE = '''||lv_DeptCode||''' AND A.MACHINECODE1 IS NOT NULL '||chr(10)
        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE '||chr(10)
        ||'   AND B.WORKTYPECODE = ''P'' '||chr(10)
        ||'   AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE '||chr(10) 
        ||'   AND A.DEPARTMENTCODE = C.DEPARTMENTCODE AND A.SECTIONCODE = C.SECTIONCODE AND A.OCCUPATIONCODE = C.OCCUPATIONCODE '||chr(10)
        ||'   AND C.WORKERTYPECODE = ''P'' '||chr(10)
        ||'   GROUP BY A.MACHINECODE1, A.SHIFTCODE ,C.OCCUPATIONTYPE '||chr(10)
        ||' ORDER BY A.MACHINECODE1,A.SHIFTCODE, C.OCCUPATIONTYPE '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    -- UPDATING TOT_HRS FROM BASED ON MACHINE,SHIFT
    FOR C1 IN (
                SELECT MACHINECODE, SHIFTCODE, SUM(ATTN_HRS) TOT_HRS
                FROM WPS_TEMP_VB_ATTN --_P0006
                GROUP BY MACHINECODE, SHIFTCODE
            )
    LOOP
        UPDATE WPS_TEMP_VB_ATTN SET TOT_HRS = C1.TOT_HRS WHERE MACHINECODE = C1.MACHINECODE AND SHIFTCODE = C1.SHIFTCODE;
    END LOOP;        
    
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shiftwise production and vbamount calculate';

    lv_Sql := ' CREATE TABLE '||lv_TempTableProd||' AS '||chr(10)
        ||' SELECT DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE, SUM(PRODUCTION) PRODUCTION, SUM(VBAMOUNT) VBAMOUNT '||chr(10)
        ||' FROM ( '||chr(10)
        ||'         SELECT A.DEPARTMENTCODE,'''||lv_SectionCode||''' AS SECTIONCODE, A.PRODUCTIONTYPE,A.MACHINECODE,A.SHIFTCODE, '||chr(10) 
        ||'         A.QUALITYCODE, B.QUALITYRATE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION, '||chr(10)  
        ||'         ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2) *B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||chr(10)  
        ||'         FROM WPSPRODUCTIONSUMMARY A, '||chr(10)  
        ||'         ( '||chr(10)  
        ||'          SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY, '||chr(10)  
        ||'          CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE '||chr(10)  
        ||'          FROM  WPSQUALITYRATE_ON_REEDSPACE X, '||chr(10)  
        ||'          ( '||chr(10)  
        ||'              SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)  
        ||'              FROM WPSQUALITYRATE_ON_REEDSPACE '||chr(10)  
        ||'              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||chr(10)
        ||'                AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''   '||chr(10)
        ||'              GROUP BY PRODUCTIONTYPE, QUALITYCODE   '||chr(10)
        ||'          ) Y   '||chr(10)
        ||'          WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'            AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE    '||chr(10)
        ||'            AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||chr(10)  
        ||'      ) B  '||chr(10)
        ||'      WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'        AND A.YEARCODE = '''||P_YEARCODE||'''   '||chr(10) 
        ||'        AND A.STARTDATE >= '''||lv_fn_stdt||''' AND A.STARTDATE <= '''||lv_fn_endt||'''  '||chr(10)  
        ||'        AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE  AND A.QUALITYCODE = B.QUALITYCODE  '||chr(10)
        ||'      GROUP BY A.DEPARTMENTCODE,  A.PRODUCTIONTYPE, A.MACHINECODE,A.SHIFTCODE,  '||chr(10)
        ||'         A.QUALITYCODE, B.UNITQUANTITY, B.QUALITYRATE, B.PERCENTAGEOFRATE  '||chr(10)
        ||'     )  '||chr(10)
        ||' GROUP BY DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE  '||chr(10);    

    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  lv_ProductionType;
    
    lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,'||chr(10) 
        ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE, MACHINECODE1, SHIFTCODE,   '||chr(10)  
        ||' TOTALPRODUCTION, TOTALHOURS, TOTALBASIC, VBHOURLYRATE,TRANTYPE, OCCUPATIONTYPE, '||CHR(10)
        ||' LASTMODIFIED,USERNAME, SYSROWID)  '||chr(10) 
        ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, '||CHR(10)
        ||'  A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.MACHINECODE, A.SHIFTCODE, '||chr(10)
        ||'  A.PRODUCTION, B.ATTN_HRS, A.VBAMOUNT, '||CHR(10)
        ||'  CASE WHEN OCCUPATIONTYPE = ''BEAMER'' THEN '||CHR(10) 
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(A.VBAMOUNT*0.974/B.TOT_HRS,5) ELSE 0 END '||CHR(10)  --- as SRS 2.6% VB amount Deduct for Beamer so we consider 97.4% vb amount for beamer 
        ||'  ELSE '||CHR(10)
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(A.VBAMOUNT*0.974/B.TOT_HRS,5)+ROUND(A.VBAMOUNT*0.026/B.ATTN_HRS,5) ELSE 0 END '||CHR(10)
        ||'  END VBHOURLYRATE,''VB'' TRANTYPE, B.OCCUPATIONTYPE, '||CHR(10)
        ||'  SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID() '||CHR(10)
        ||'  FROM '||lv_TempTableProd||' A, '||lv_TempTableAttn||' B '||chr(10)
        ||'  WHERE A.MACHINECODE=B.MACHINECODE AND A.SHIFTCODE = B.SHIFTCODE '||chr(10)
        ||'  ORDER BY A.MACHINECODE, A.SHIFTCODE '||chr(10);        
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    PROC_VBDETAILS_OCPTYPE_INSERT ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',lv_ProductionType,lv_DeptCode, lv_SectionCode,NULL,NULL);

    ----- worker wisee occupationtype wise VB AMOUNT CALCULATION WHICH TRANSFER INTO VBDETAILS TABLE  -----
--   lv_Remarks := 'DATA INSERT INTO WPSVBDETAILS TABLE'; 
--
--   lv_Sql := 'INSERT INTO WPSVBDETAILS ('||chr(10) 
--        ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10)  
--        ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)  
--        ||' MACHINECODE,PRODUCTIONHOURS,VBRATE, VBAMOUNT,'||chr(10)
--        ||' USERNAME, LASTMODIFIED, SYSROWID )   '||chr(10)
--        ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, '||chr(10)
--        ||' ''' ||lv_ProductionType|| ''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE,R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,'||chr(10)  
--        ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)) PRODUCTIONHOURS,  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT,'||chr(10) 
--        ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID '||chr(10) 
--        ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R, WPSOCCUPATIONMAST O  '||chr(10) 
--        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
--        ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_fn_stdt||''' '||chr(10)
--        ||'   AND R.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||chr(10)
--        ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||chr(10)
--        ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE '||chr(10)
--        ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE  '||chr(10)
--        ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE1   '||chr(10)
--        ||'   AND R.COMPANYCODE = O.COMPANYCODE AND R.DIVISIONCODE = O.DIVISIONCODE AND R.SECTIONCODE = O.SECTIONCODE AND R.OCCUPATIONTYPE = O.OCCUPATIONTYPE'||chr(10)
--        ||'   AND A.COMPANYCODE = O.COMPANYCODE AND A.DIVISIONCODE = O.DIVISIONCODE AND A.SECTIONCODE = O.SECTIONCODE AND A.OCCUPATIONCODE= O.OCCUPATIONCODE  '||chr(10)
--        ||'   AND R.PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''  '||chr(10)
--        ||'   AND NVL(A.ATTENDANCEHOURS,0) > 0 '||chr(10)  
--        ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE, A.SHIFTCODE, R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||chr(10)   
--        ||'    A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1 '||chr(10);
--    
--    EXECUTE IMMEDIATE lv_Sql;
--    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
--    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
--    COMMIT; 
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_BEAM_PRESS;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_BEAM_PRESS( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY DEBASIS PAHARI ON 16.04.2020 ----
--P= shift wise and quality wise Production of the m/c.
--R = Quality Rate 
--A = Production amount of the m/c = P * R.


lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_BEAM_PRESS';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(50) := '';  
lv_TempTable_Hours    varchar2(50) := ''; 
lv_TempTable_Hours_Beam varchar2(50) := ''; 
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';   
lv_OccupationType    varchar2(50) := '';
lv_Addl_RT  number(11,5) :=0; 

lv_OcpCode_2nd    varchar2(50) := '';
lv_OccupationType_2nd   varchar2(50) := '';

Begin


       
    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            select SECTIONCODE,OCCUPATIONCODE into lv_SectionCode,lv_OcpCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              --AND SECTIONCODE=P_SECTION
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              
            SELECT OCCUPATIONTYPE,nvl(ADDL_RATE,0),VB_DEPENDENT_DEPTOCCPCODE INTO lv_OccupationType,lv_Addl_RT,lv_OcpCode_2nd FROM VW_WPSOCCUPATIONMAST 
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              AND SECTIONCODE=lv_SectionCode
              AND OCCUPATIONCODE=lv_OcpCode;
              
              
              SELECT OCCUPATIONTYPE INTO lv_OccupationType_2nd FROM VW_WPSOCCUPATIONMAST 
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              AND SECTIONCODE=lv_SectionCode
              AND OCCUPATIONCODE=lv_OcpCode_2nd;
            
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := ''; 
            lv_Addl_RT :=1;     
        END;   
    END IF;
    
    

    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            lv_ProductionType :=P_PRODUCTIONTYPE;
        EXCEPTION
            WHEN OTHERS THEN lv_ProductionType := 'SWT';    
        END;        
    END IF;
    

    
    
    lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours :='WPS_PREPROCESS_TMP_HS_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours_Beam :='WPS_PROCESS_TMP_B_HS_'||lv_SectionCode||lv_ProductionType;

    
    BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
     BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
      BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours_Beam;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable||' AS '||CHR(10)
        ||' SELECT DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, PRODUCTIONTYPE,SHIFTCODE,MACHINECODE,SUM(NVL(PRODUCTION,0))PRODUCTION,'||CHR(10)
        ||' SUM(NVL(VBAMOUNT,0)+ FBK_AMT)VBAMOUNT ,0 AS ADDITIONAL_AMT,0 AS ADDITIONAL_RATE,0 AS REMAINING_AMT,0 AS TOTALHOURS,0 AS DISTRIBUTION_FACTOR,0 ATTENDANCEHOURS '||chr(10)
        ||' FROM('||CHR(10)
        ||'     SELECT A.DEPARTMENTCODE,A.SECTIONCODE AS SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, '||CHR(10)
        ||'     A.QUALITYCODE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION,'||CHR(10)
        ||'     ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2)*B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||CHR(10)
        ||'     ,NVL(FBK.FBK_AMT,0) FBK_AMT '||CHR(10)
        ||'     FROM WPSPRODUCTIONSUMMARY A,'||CHR(10)
        -------- fbk block newly add on 03.07.2020 for considet fbk amount in vbamount calculation -----------
        ||'     ( '||chr(10)
        ||'         SELECT DISTINCT X.DEPARTMENTCODE, X.SECTIONCODE, X.SHIFTCODE, X.MACHINECODE1 MACHINECODE, X.FBKHOURS, Y.FBK_RATE, ROUND(X.FBKHOURS*Y.FBK_RATE,2) FBK_AMT '||CHR(10) 
        ||'         FROM WPSATTENDANCEDAYWISE X, VW_WPSSECTIONMAST Y '||CHR(10)
        ||'         WHERE X.COMPANYCODE= '''||P_COMPCODE||''' AND X.DIVISIONCODE='''||P_DIVCODE||''' '||CHR(10)
        ||'           AND X.DATEOFATTENDANCE >= '''||lv_FN_STDT||''' AND X.DATEOFATTENDANCE <= '''||lv_FN_ENDT||''' '||CHR(10)
        ||'           AND X.DEPARTMENTCODE= '''||P_DEPARTMENT||'''  AND X.SECTIONCODE= '''||lv_SectionCode||''' '||CHR(10)
        ||'           AND NVL(X.FBKHOURS,0) > 0'||CHR(10)
        ||'           AND X.MACHINECODE1 IS NOT NULL'||CHR(10)
        ||'           AND X.COMPANYCODE=Y.COMPANYCODE AND X.DIVISIONCODE=Y.DIVISIONCODE AND X.DEPARTMENTCODE= Y.DEPARTMENTCODE AND X.SECTIONCODE = Y.SECTIONCODE'||CHR(10)
        ||'     ) FBK, '||CHR(10)   
        ||'     (  '||CHR(10)
        ||'         SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY,  '||CHR(10)
        ||'         CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE  '||CHR(10)
        ||'         FROM  WPSQUALITYRATE_ON_REEDSPACE X,  '||CHR(10)
        ||'         (  '||CHR(10)
        ||'             SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||CHR(10)
        ||'             FROM WPSQUALITYRATE_ON_REEDSPACE  '||CHR(10)
        ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'               AND PRODUCTIONTYPE = '''||lv_ProductionType||'''  '||CHR(10)
        ||'             GROUP BY PRODUCTIONTYPE, QUALITYCODE  '||CHR(10)
        ||'         ) Y  '||CHR(10)
        ||'         WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'           AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE   '||CHR(10)
        ||'           AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||CHR(10)
        ||'     ) B  '||CHR(10)
        ||'     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'       AND A.YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||'       AND A.STARTDATE >= '''||lv_FN_STDT||''' AND A.STARTDATE <= '''||lv_FN_ENDT||'''   '||CHR(10)
        ||'       AND A.TRANSACTIONTYPE = ''GENERAL'''||CHR(10)
        ||'       AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||chr(10);
        if lv_SectionCode ='0801xxx' or lv_SectionCode = '0805xxx' then
        lv_Sql := lv_Sql ||'       AND A.SECTIONCODE IN (''0801xxx'',''0805xxx'') '||CHR(10);
        ELSE
        lv_Sql := lv_Sql ||'       AND A.SECTIONCODE = '''||lv_Sectioncode||''' '||chr(10);
        end if; 
        lv_Sql := lv_Sql ||'       AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE   '||CHR(10)
        ||'       AND A.QUALITYCODE = B.QUALITYCODE    '||CHR(10)
        ------- fbk block newly add on 03.07.2020 for considet fbk amount in vbamount calculation -----------
        ||'       AND A.SHIFTCODE = FBK.SHIFTCODE (+) AND A.DEPARTMENTCODE = FBK.DEPARTMENTCODE (+) '||chr(10)
        ||'       AND A.SECTIONCODE=FBK.SECTIONCODE (+) AND A.MACHINECODE=FBK.MACHINECODE (+) '||chr(10)
        ||'     GROUP BY A.DEPARTMENTCODE,A.SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, '||chr(10)
        ||'              A.QUALITYCODE,B.QUALITYRATE, B.UNITQUANTITY, B.PERCENTAGEOFRATE, FBK.FBK_AMT '||CHR(10)
        ||'    )  '||chr(10)
        ||' GROUP BY DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,PRODUCTIONTYPE,SHIFTCODE,MACHINECODE'||CHR(10);
--    DBMS_OUTPUT.PUT_LINE(lv_Sql);
    
    lv_Remarks := '1 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) TOTALHOURS'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      --||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE, B.SHIFTCODE, B.MACHINECODE1--,B.OCCUPATIONCODE'||CHR(10);

    
    lv_Remarks := '2 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
        lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours_Beam||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) TOTALHOURS,NVL(O.ADDL_RATE,0)ADDL_RATE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) * NVL(O.ADDL_RATE,0) ADDL_AMOUNT,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)) ATTENDANCEHOURS'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , VW_WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1,O.ADDL_RATE'||CHR(10);
    
    lv_Remarks := '3 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);

--DBMS_OUTPUT.PUT_LINE(lv_Sql);    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET (ADDITIONAL_AMT,ATTENDANCEHOURS,ADDITIONAL_RATE)='||CHR(10)
             ||'    (SELECT ADDL_AMOUNT,ATTENDANCEHOURS,ADDL_RATE FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT,ATTENDANCEHOURS,ADDL_RATE  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '4 UPDATE PRODUCTION ACT_REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    --COMMIT;
    
    lv_Sql := 'UPDATE '||lv_TempTable||' A SET REMAINING_AMT=A.VBAMOUNT -'||CHR(10)
             ||'    (SELECT ADDL_AMOUNT FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '5 UPDATE PRODUCTION REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET TOTALHOURS='||CHR(10)
             ||'    (SELECT TOTALHOURS FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,/*OCCUPATIONCODE,*/SHIFTCODE,MACHINECODE,TOTALHOURS  FROM '||lv_TempTable_Hours||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             --||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '6 UPDATE PRODUCTION TOTALHOURS TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' SET DISTRIBUTION_FACTOR= '||CHR(10)
             ||'CASE WHEN NVL(TOTALHOURS,0)>0 AND NVL(REMAINING_AMT,0)>0  THEN  ROUND(REMAINING_AMT/TOTALHOURS,6) ELSE 0 END'||CHR(10);
             
    lv_Remarks := '7 UPDATE PRODUCTION DISTRIBUTION_FACTOR TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    COMMIT;
    
    lv_Remarks := '8 DELETE FROM WPSLINEHOURLYRATE FOR 1ST BEEMER & PRESSMEN  MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND OCCUPATIONTYPE = '''||lv_OccupationType||''' '||chr(10)
             ||'AND DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
             ||'AND SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
             ||'AND OCCUPATIONCODE = '''||lv_OcpCode||''' '||CHR(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    EXECUTE IMMEDIATE lv_Sql;
             
    COMMIT; 
    
        lv_Remarks := '9 DELETE FROM WPSLINEHOURLYRATE FOR 2ND BEEMER & PRESSMEN  MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND OCCUPATIONTYPE = '''||lv_OccupationType_2nd||''' '||chr(10)
             ||'AND DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
             ||'AND SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
             ||'AND OCCUPATIONCODE = '''||lv_OcpCode_2nd||''' '||CHR(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    EXECUTE IMMEDIATE lv_Sql;      
    COMMIT; 
    
     lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE, '||CHR(10) 
            ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG, LINENO, HELPERNO, SARDARNO, RELIVERNO, MACHINECODE, LOOMCODE, '||CHR(10) 
            ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,  '||CHR(10)
            ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,  '||CHR(10) 
            ||' LASTMODIFIED, USERNAME, SYSROWID,ADDITIONAL_AMT)  '||CHR(10)

            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' '''||lv_ProductionType||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode||''' OCCUPATIONCODE, '''' LINETAG, NULL LINENO, NULL HELPERNO, NULL SARDARNO, NULL RELIVERNO, A.MACHINECODE, NULL LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, A.TOTALHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC,SUM(A.DISTRIBUTION_FACTOR)+'||lv_Addl_RT||' VBHOURLYRATE,  '||CHR(10)
            ||' A.TOTALHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID,A.ADDITIONAL_AMT '||CHR(10)
            ||' FROM '||lv_TempTable||'  A '||CHR(10)
            ||' GROUP BY A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE,A.MACHINECODE,A.TOTALHOURS,A.ADDITIONAL_AMT'||CHR(10)
            ||' UNION ALL'||CHR(10)
            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' '''||lv_ProductionType||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode_2nd||''' OCCUPATIONCODE, '''' LINETAG, NULL LINENO, NULL HELPERNO, NULL SARDARNO, NULL RELIVERNO, A.MACHINECODE, NULL LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, A.TOTALHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC,SUM(A.DISTRIBUTION_FACTOR) VBHOURLYRATE,  '||CHR(10)
            ||' A.TOTALHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType_2nd||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID,A.ADDITIONAL_AMT '||CHR(10)
            ||' FROM '||lv_TempTable||'  A '||CHR(10)
            ||' GROUP BY A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE,A.MACHINECODE,A.TOTALHOURS,A.ADDITIONAL_AMT'||CHR(10);

    lv_Remarks := '10 INSERT WPSLINEHOURLYRATE  TABLE  SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;   
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    lv_Remarks := '11 DELETE PRODUCTIONTYPE='||P_PRODUCTIONTYPE||', FNEDT = '||P_FN_ENDT;
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' '||chr(10)
            ||'   AND FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
            ||'   AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
     lv_Remarks := '12 INESET IN VBDETIAL FOR 1STBEAMER & 1STPRESSMAN  BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';


      lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)
         ||' MACHINECODE, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL, '''||lv_OcpCode||''' OCCUPATIONCODE, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,  '||CHR(10)
         ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) +ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) '||CHR(10)
         ||'   + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE AND  A.OCCUPATIONCODE = R.OCCUPATIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.OCCUPATIONTYPE = '''||lv_OccupationType||'''   '||CHR(10)
         ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1  '||CHR(10);
            
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    
         lv_Remarks := '13 INESET IN VBDETIAL FOR 2ND BEAMER & 2ND PRESSMAN  BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';


      lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)
         ||' MACHINECODE, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL, '''||lv_OcpCode_2nd||''' OCCUPATIONCODE, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,  '||CHR(10)
         ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) +ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) '||CHR(10)
         ||'   + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE AND  A.OCCUPATIONCODE = R.OCCUPATIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.OCCUPATIONTYPE = '''||lv_OccupationType_2nd||'''   '||CHR(10)
         ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1  '||CHR(10);
            
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    ------ DELETE NON ENTITLE (PRODUCTUION BASIC) TOKENNO
   PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE, P_DIVCODE,P_YEARCODE, P_FN_STDT, P_FN_ENDT, 'WPSVBDETAILS', P_PRODUCTIONTYPE,P_DEPARTMENT,NULL);
     -- PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL, 'WPSVBDETAILS', P_PRODUCTIONTYPE,P_DEPARTMENT,NULL);


exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_LINE_OCP;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_LINE_OCP ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_OCCUPATIONTYPE VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY Amalesh Das ON 14.04.2020 ----
----- THIS PROCEDURE USE FOR CALCULATE VARIABLE BASIC BASED ON FORTNIGHTLY OCCUPATIONTYPE WISE ( for SARDAR/HELPER/RELIVER ) 
----- OCCUPATIONTYPE WISE RATE TAKEN FROM WPSLINEHOURLYRATE TABLE ----- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_LINE_OCP';
lv_ParValue varchar2(200) := 'PERIOD - '||P_FN_STDT||'-'||P_FN_ENDT||', PROD - '||P_PRODUCTIONTYPE||', OCP TYPE - '||P_OCCUPATIONTYPE;
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_DependentOcpType  varchar2(50) := '';
lv_productiontypecode varchar2(10) := '';
lv_dependantsectioncode varchar2(10) := '';
lv_DependentColumn     varchar2(30) := '';
lv_OccupationCode   varchar2(10) := '';
lv_Addl_RT  number(11,5) :=0;
lv_PFLink_Addl_RT   number(11,5) := 0;
lv_LineColumn       varchar2(30) :='';       -- this variable use for which column data insert (like HELPER/SARDA/RELIVER)
lv_Extra_RT     NUMBER(11,5) := 0;
Begin
    
--     SELECT DEPENDANTSECTIONCODE INTO lv_dependantsectioncode FROM WPSSECTIONMAST
--     WHERE COMPANYCODE = P_COMPCODE
--     AND DIVISIONCODE = P_DIVCODE
--     AND SECTIONCODE = P_SECTION;

--     SELECT PRODUCTIONTYPECODE INTO lv_productiontypecode FROM WPSPRODUCTIONTYPEMAST
--     WHERE COMPANYCODE = P_COMPCODE
--     AND DIVISIONCODE = P_DIVCODE
--     AND SECTIONCODE = lv_dependantsectioncode;
     lv_DependentOcpType :=P_OCCUPATIONTYPE;
     IF P_OCCUPATIONTYPE = 'SARDAR' THEN
        lv_LineColumn := 'SARDARNO';
        lv_DependentOcpType :='SARDAR';
     ELSIF P_OCCUPATIONTYPE = 'HELPER' THEN
        lv_LineColumn := 'HELPERNO';
        lv_DependentOcpType :='HELPER';
     ELSIF P_OCCUPATIONTYPE = 'HELPER RELIVER' OR P_OCCUPATIONTYPE = 'SARDAR RELIVER' THEN
        lv_LineColumn := 'RELIVERNO';
        lv_DependentOcpType := TRIM(SUBSTR(P_OCCUPATIONTYPE,1, INSTR(P_OCCUPATIONTYPE,'RELIVER',1)-1));
        lv_DependentColumn := TRIM(SUBSTR(P_OCCUPATIONTYPE,1, INSTR(P_OCCUPATIONTYPE,'RELIVER',1)-1))||'NO';
     ELSE
        lv_LineColumn := 'LINENO'; 
     END IF;

     SELECT MIN(OCCUPATIONCODE) INTO lv_OccupationCode
     FROM WPSOCCUPATIONMAST
     WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
       AND DEPARTMENTCODE = P_DEPARTMENT  AND SECTIONCODE = P_SECTION
       AND OCCUPATIONTYPE = P_OCCUPATIONTYPE; -- P_OCCUPATIONTYPE;
   
    lv_Addl_RT :=1; lv_PFLink_Addl_RT := 0; lv_Extra_RT := 0;
    
    --dbms_output.put_line ('Occupation Code '||lv_OccupationCode);
    
    BEGIN
        SELECT nvl(ADDL_RATE,0) , nvl(PFLINK_RATE,0),  nvl(EXTRA_RATE,0) into lv_Addl_RT, lv_PFLink_Addl_RT, lv_Extra_RT
        FROM VW_WPSOCCUPATIONMAST 
        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
          AND DEPARTMENTCODE = P_DEPARTMENT AND SECTIONCODE = P_SECTION AND OCCUPATIONCODE = lv_OccupationCode;
    EXCEPTION
        WHEN OTHERS THEN    
            lv_Addl_RT :=1; lv_PFLink_Addl_RT := 0; lv_Extra_RT := 0;
    END;
    
    -- THIS BLOCK IS FOR DELETE AND INSERT DATA INTO WPSLINEHOURLYRATE LINE WISE
    
    lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE LINE WISE PRODUCTION TYPE ' ||lv_productiontypecode;
     
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'  AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'  AND SECTIONCODE = ''' ||P_SECTION|| ''' '||chr(10)
             ||'  AND OCCUPATIONCODE = '''||lv_OccupationCode||''' '||CHR(10)
             ||'  AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'  AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'  AND LINETAG = '''||P_OCCUPATIONTYPE||''' '||chr(10)
             ||'  AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    /* 
        SELECT COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE,  FORTNIGHTSTARTDATE,FORTNIGHTENDDATE, SHIFTCODE,
        MAX(NVL(TOTALHOURS,0)) TOTALHOURS, LINENO, SUM(TOTALBASIC) TOTALBASIC, SUM(NVL(TOTALPRODUCTION,0)) TOTALPRODUCTION  
        FROM WPSLINEHOURLYRATE 
        WHERE LINETAG = 'MACHINE'
        AND PRODUCTIONTYPE = 'P0002'
        AND LINENO = '21'
        GROUP BY COMPANYCODE,DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE,  FORTNIGHTSTARTDATE,FORTNIGHTENDDATE, SHIFTCODE,LINENO
    */
    
    lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE LINE WISE SECTION TYPE ' ||  P_SECTION;

    IF P_OCCUPATIONTYPE = 'SARDAR' OR P_OCCUPATIONTYPE = 'HELPER' THEN
        lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE (  '||chr(10)
             ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE,  '||chr(10) 
             ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG,  '||lv_LineColumn||',  '||chr(10) 
             ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,   '||chr(10)
             ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,   '||chr(10)
             ||' LASTMODIFIED, USERNAME, SYSROWID)   '||chr(10)
             ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE, '||chr(10)  
             ||' A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OccupationCode||''' OCCUPATIONCODE, '''||P_OCCUPATIONTYPE||''' LINETAG,  A.'||lv_LineColumn||' AS '||lv_LineColumn||', '||chr(10)   
             ||' 0 QUALTITY, SUM(NVL(A.TOTALHOURS,0)) PIECERATEHOURS, SUM(NVL(A.TOTALBASIC,0)) PIECERATEBASIC, ROUND(SUM(NVL(A.TOTALBASIC,0))*'||lv_Addl_RT||' / SUM(NVL(A.TOTALHOURS,0)),5) VBHOURLYRATE, '||chr(10)  
             ||' SUM(NVL(A.TOTALHOURS,0)) TOTALHOURS, SUM(NVL(A.TOTALBASIC,0))*'||lv_Addl_RT||' TOTALBASIC, '''||P_OCCUPATIONTYPE||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,   '||chr(10)
             ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID  '||chr(10)
             ||' FROM WPSLINEHOURLYRATE A   '||chr(10)
             ||' WHERE A.COMPANYCODE = ''' ||P_COMPCODE|| ''' AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
             ||'   AND A.FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' AND A.FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
             ||'   AND A.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''   '||chr(10)     
             ||'   AND LINETAG=''MACHINE'' '||chr(10)
             ||'   and TRANTYPE = ''VB'' '||CHR(10)
             ||' GROUP  BY A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.'||lv_LineColumn||' '||chr(10);   


        lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE (  '||chr(10)
             ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE,  '||chr(10) 
             ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG,  '||lv_LineColumn||',  '||chr(10) 
             ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,   '||chr(10)
             ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,   '||chr(10)
             ||' LASTMODIFIED, USERNAME, SYSROWID)   '||chr(10)
             ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE, '||chr(10) 
             ||' A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OccupationCode||''' OCCUPATIONCODE, '''||P_OCCUPATIONTYPE||''' LINETAG,  A.'||lv_LineColumn||' AS '||lv_LineColumn||', '||chr(10) 
             ||' 0 QUALTITY, SUM(NVL(A.ATTENDANCEHOURS,0)+ NVL(A.OVERTIMEHOURS,0)) PIECERATEHOURS, SUM((NVL(VBAMOUNT,0)+ NVL(VBAMOUNT_OT,0) +NVL(VBAMOUNT_OTNS,0))) PIECERATEBASIC, '||CHR(10) 
             ||' ROUND(SUM(NVL(VBAMOUNT,0)+ NVL(VBAMOUNT_OT,0)+NVL(VBAMOUNT_OTNS,0))*'||lv_Addl_RT||' / (SUM(NVL(A.ATTENDANCEHOURS,0)+ NVL(A.OVERTIMEHOURS,0))),5) VBHOURLYRATE, '||CHR(10) 
             ||' SUM(NVL(A.ATTENDANCEHOURS,0)+ NVL(A.OVERTIMEHOURS,0)) TOTALHOURS, SUM((NVL(VBAMOUNT,0)+ NVL(VBAMOUNT_OT,0) +NVL(VBAMOUNT_OTNS,0)))*'||lv_Addl_RT||' TOTALBASIC, '||CHR(10)
             ||' '''||P_OCCUPATIONTYPE||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE, '||CHR(10)   
             ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID '||CHR(10) 
             ||' FROM WPSVBDETAILS A '||CHR(10)   
             ||' WHERE A.COMPANYCODE = ''' ||P_COMPCODE|| ''' AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
             ||'   AND A.FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' AND A.FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
             ||'   AND A.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''   '||chr(10)     
             ||'   AND LINETAG=''MACHINE'' '||chr(10)
--             ||'   and TRANTYPE = ''VB'' '||CHR(10)
             ||' GROUP  BY A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.'||lv_LineColumn||' '||chr(10);   
             
        EXECUTE IMMEDIATE lv_Sql;
                 
        INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
        COMMIT; 
    ELSE
        -- FOR HELPER NO/ SARDAR NO WISE DEFINE LINK IN WPSLINESARDERMAST TABLE 
        -- ONE RELIVER MAINTIAN MORE THAN ONE HELPER/SARDAR LINE NO.WHICH MAPPED IN LINKNO FIELD    
        lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE (  '||chr(10)
             ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE,  '||chr(10) 
             ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG,  '||lv_LineColumn||',  '||chr(10) 
             ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,   '||chr(10)
             ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,   '||chr(10)
             ||' LASTMODIFIED, USERNAME, SYSROWID)   '||chr(10)
             ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE, '||chr(10)  
             ||' A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OccupationCode||''' OCCUPATIONCODE, '''||P_OCCUPATIONTYPE||''' LINETAG,  B.LINKNO AS RELIVERNO, '||chr(10)   
             ||' 0 QUALTITY, SUM(NVL(A.TOTALHOURS,0)) PIECERATEHOURS, SUM(NVL(A.TOTALBASIC,0)) PIECERATEBASIC, ROUND(SUM(NVL(A.TOTALBASIC,0)) / SUM(NVL(A.TOTALHOURS,0)),5) VBHOURLYRATE, '||chr(10)  
             ||' SUM(NVL(A.TOTALHOURS,0)) TOTALHOURS, SUM(NVL(A.TOTALBASIC,0))*'||lv_Addl_RT||' TOTALBASIC, '''||P_OCCUPATIONTYPE||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,   '||chr(10)
             ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID  '||chr(10)
             ||' FROM WPSLINEHOURLYRATE A, WPSLINESARDERMAST B   '||chr(10)
             ||' WHERE A.COMPANYCODE = ''' ||P_COMPCODE|| ''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
             ||'   AND A.FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' AND A.FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
             ||'   AND A.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''   '||chr(10)
             ||'   AND LINETAG='''||lv_DependentOcpType||''' '||chr(10)             -- MACHINE
             ||'   AND TRANTYPE = ''VB'' '||CHR(10)
             ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
             ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE '||CHR(10)
             ||'   AND A.'||lv_DependentColumn||' = B.SARDERNO '||CHR(10)        -- HELPERNO
             ||'   AND B.LINKNO IS NOT NULL AND B.GROUPTYPE='''||lv_DependentOcpType||''' '||CHR(10)      -- HELPER
             ||' GROUP  BY A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, B.LINKNO '||chr(10);   


        EXECUTE IMMEDIATE lv_Sql;
                 
        INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
        values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
        COMMIT; 
    
    END IF;
    ---- END BLOCK ------

    lv_Remarks := 'DELETE FROM WPSVBDETAILS, PRODUCTION TYPE ' ||P_PRODUCTIONTYPE;
     
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)  
            ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
            ||'  AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
            ||'  AND DEPARTMENTCODE = '''||P_DEPARTMENT||''' '||CHR(10)  
            ||'  AND SECTIONCODE = ''' ||P_SECTION|| ''' '||chr(10)  
            ||'  AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
            ||'  AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
            ||'  AND LINETAG = '''||P_OCCUPATIONTYPE||''' ';
     
    EXECUTE IMMEDIATE lv_Sql;
            
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    --- THIS BLOCK USE DATA INERT INTO VB DETAILS BASED ON LINE OCCUPATION LIKE HELPER/SARDAR/RELIVER 
    lv_Remarks := 'INSERT '||P_OCCUPATIONTYPE||' DATA INSERT IN VB DETAILS'; 
    lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, OCCUPATIONCODE, DEPTSERIAL, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, LINETAG,  '||chr(10)
         ||' MACHINECODE, '||lv_LineColumn||', PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, VBRATE, '||chr(10)
         ||' VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, ADDLBASIC,'||chr(10)
         ||' PF_ADJ,NPF_ADJ,USERNAME, LASTMODIFIED, SYSROWID) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.OCCUPATIONCODE, A.DEPTSERIAL, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO, '''||P_OCCUPATIONTYPE||''' LINETAG,  '||CHR(10)
         ||'  A.MACHINECODE1, R.'||lv_LineColumn||', SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||' SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS, NVL(R.VBHOURLYRATE,0)VBRATE,  '||CHR(10);
        IF lv_Extra_RT > 0 THEN         
         lv_Sql := lv_Sql||' ROUND((SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.ATTENDANCEHOURS,0))) ,2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.OVERTIMEHOURS,0))),2) VBAMOUNT_OT,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.NIGHTALLOWANCEHOURS,0))),2) VBAMOUNT_NS,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.OT_NSHRS,0))),2) VBAMOUNT_OTNS,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.HOLIDAYHOURS,0))),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
             ||' (ROUND((SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.ATTENDANCEHOURS,0))) ,2) + ROUND((SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.OVERTIMEHOURS,0))),2)'||chr(10)
             ||' +ROUND((SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.NIGHTALLOWANCEHOURS,0))),2) + ROUND((SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.OT_NSHRS,0))),2) '||CHR(10)
             ||' +ROUND((SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0))+('||lv_Extra_RT||'*SUM(NVL(A.HOLIDAYHOURS,0))),2)) TOTAL_VBAMOUNT,  '||CHR(10);
        ELSE
         lv_Sql := lv_Sql||' ROUND((SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0)),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0)),2) VBAMOUNT_OT,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0)),2) VBAMOUNT_NS,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0)),2) VBAMOUNT_OTNS,  '||CHR(10)
             ||' ROUND((SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0)),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
             ||' (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) + ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)'||CHR(10)
             ||'  +ROUND((SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0)),2)) TOTAL_VBAMOUNT,  '||CHR(10);
        END IF; 
    lv_Sql := lv_Sql ||' ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)+NVL(A.HOLIDAYHOURS,0)) * '||lv_PFLink_Addl_RT||',2)  ADDLBASIC, '||CHR(10) 
      ||'  CASE WHEN SUM(NVL(A.ATTENDANCEHOURS,0))>0 THEN ROUND(SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)+NVL(A.OT_NSHRS,0))*('||lv_PFLink_Addl_RT||'/96)),2) ELSE 0 END PF_ADJ, '||CHR(10)
      ||'  CASE WHEN SUM(NVL(A.ATTENDANCEHOURS,0))=0 THEN ROUND(SUM((NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0)+NVL(A.OT_NSHRS,0))*('||lv_PFLink_Addl_RT||'/96)),2) ELSE 0 END NPF_ADJ,'||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND A.YEARCODE ='''||P_YEARCODE||''' '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE >= '''||lv_FN_STDT||''' AND A.DATEOFATTENDANCE <= '''||lv_FN_ENDT||''' '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''' AND A.SECTIONCODE = '''||P_SECTION||''' AND A.OCCUPATIONCODE = '''||lv_OccupationCode||''' '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.'||lv_LineColumn||' = R.'||lv_LineColumn||'    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.LINETAG = '''||P_OCCUPATIONTYPE||'''   '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE, A.SHIFTCODE, A.OCCUPATIONCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1, R.'||lv_LineColumn||' '||CHR(10);   

    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;


     
    ----END BLOCK    
    --PROC_VBDETAILS_SARDAR_INSERT ( P_COMPCODE, P_DIVCODE, NULL, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',NULL,NULL, P_SECTION,NULL,NULL);
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_MCH_HRSRATE;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_MCH_HRSRATE ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY PRASUN CHAKRABORTY ON 17.07.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE VARIABLE BASIC BASED ON FORTNIGHTLY INDIVIDUAL MACHINEWISE, QUALITY WISE PRODUCTION 
----- QUALITYRATE TAKE FROM  - WPSQUALITYRATE_ON_REEDSPACE TABLE ----- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_MCH_HRSRATE';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   


Begin


    SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
    WHERE COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE
    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
     lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := '   INSERT INTO WPSLINEHOURLYRATE  '||chr(10) 
             ||'   (   '||chr(10) 
             ||'       COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE,  SHIFTCODE, MACHINECODE1, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SECTIONCODE,  '||chr(10)  
             ||'        VBHOURLYRATE,TOTALHOURS, TOTALBASIC, LASTMODIFIED,TRANTYPE, USERNAME, SYSROWID  '||chr(10) 
             ||'   )   '||chr(10) 
             ||'   SELECT  COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE, SHIFTCODE, MACHINECODE, ''' || lv_FN_STDT || ''' FORTNIGHTSTARTDATE, '||chr(10) 
             ||'   ''' || lv_FN_ENDT || ''' FORTNIGHTENDDATE, ''' || lv_SectionCode || ''' SECTIONCODE,  '||chr(10) 
             ||'   ROUND(SUM(VBAMOUNT)/SUM(WORKINGHOURS),5) VBHOURLYRATE,SUM(WORKINGHOURS) TOTALHOURS, SUM(VBAMOUNT) TOTALBASIC,  '||chr(10) 
             ||'   SYSDATE LASTMODIFIED,''VB'' TRANTYPE, ''SWT'' USERNAME, SYS_GUID() SYSROWID  '||chr(10) 
             ||'    FROM  '||chr(10) 
             ||'    (    '||chr(10) 
             ||'       SELECT A.COMPANYCODE, A.DIVISIONCODE, A.DEPARTMENTCODE, A.PRODUCTIONTYPE,  A.SHIFTCODE, A.MACHINECODE, A.QUALITYCODE,   '||chr(10) 
             ||'       SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION, SUM(NVL(WORKINGHOURS,0)) WORKINGHOURS,  '||chr(10) 
             ||'       ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2) *B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT  '||chr(10) 
             ||'       FROM (/*WPSPRODUCTIONSUMMARY A, */  '||chr(10)

             ||'       SELECT COMPANYCODE, DIVISIONCODE, STARTDATE, ENDDATE, YEARCODE,PRODUCTIONTYPE, DEPARTMENTCODE, SHIFTCODE, WORKERSERIAL, '||CHR(10) 
             ||'       MACHINECODE, QUALITYCODE, TOTALPRODUCTION*YARDSQTY TOTALPRODUCTION, WORKINGHOURS  '||CHR(10)
             ||'       FROM WPSPRODUCTIONSUMMARY  '||CHR(10)
             ||'       WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
             ||'         AND YEARCODE = '''||P_YEARCODE||'''  '||chr(10)    
             ||'         AND STARTDATE >= '''||lv_FN_STDT||'''   '||CHR(10)
             ||'         AND STARTDATE <= '''||lv_FN_ENDT||'''  '||CHR(10)
             ||'         AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
             ||'       ) A,    '||CHR(10)
             ||'       (    '||chr(10) 
             ||'        SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY,  '||chr(10)   
             ||'        CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE    '||chr(10) 
             ||'        FROM  WPSQUALITYRATE_ON_REEDSPACE X,    '||chr(10) 
             ||'        (    '||chr(10) 
             ||'            SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||chr(10)   
             ||'            FROM WPSQUALITYRATE_ON_REEDSPACE    '||chr(10) 
             ||'            WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)   
             ||'              AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''  '||chr(10)
             ||'            GROUP BY PRODUCTIONTYPE, QUALITYCODE    '||chr(10) 
             ||'        ) Y    '||chr(10) 
             ||'        WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)   
             ||'          AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE     '||chr(10) 
             ||'          AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||chr(10)   
             ||'       ) B    '||chr(10) 
             ||'       WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)  
             ||'       AND A.YEARCODE = '''||P_YEARCODE||'''  '||chr(10)
             ||'       AND A.STARTDATE >= '''||lv_FN_STDT||''' '|| CHR(10) 
             ||'       AND A.STARTDATE <= '''||lv_FN_ENDT||'''  '|| CHR(10) 
             ||'       AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE     '||chr(10)
             ||'       AND A.QUALITYCODE = B.QUALITYCODE     '||chr(10)  
             ||'       AND A.TOTALPRODUCTION > 0  '||chr(10) 
             ||'       GROUP BY A.COMPANYCODE, A.DIVISIONCODE , A.DEPARTMENTCODE, A.PRODUCTIONTYPE,  A.MACHINECODE, A.SHIFTCODE,  '||chr(10) 
             ||'       A.WORKERSERIAL,A.QUALITYCODE, B.UNITQUANTITY, B.QUALITYRATE, B.PERCENTAGEOFRATE  '||chr(10) 
             ||'   )  '||chr(10) 
             ||'   GROUP BY COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE, SHIFTCODE, MACHINECODE '||chr(10); 
             
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    
    PROC_VB_WORKER_MACHINEWISE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,NULL, NULL,NULL,NULL);

    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_MCH_HRSRATE_PICK;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_MCH_HRSRATE_PICK ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY PRASUN CHAKRABORTY ON 17.07.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE VARIABLE BASIC BASED ON FORTNIGHTLY INDIVIDUAL MACHINEWISE, QUALITY WISE PRODUCTION 
----- QUALITYRATE TAKE FROM  - WPSQUALITYRATE_ON_REEDSPACE TABLE ----- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_MCH_HRSRATE_PICK';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';

Begin


    SELECT SECTIONCODE into lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
    WHERE COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE
    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND TRANSACTIONTYPE = ''PICKS'' '||chr(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    --EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
     lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
      lv_Sql := '   INSERT INTO WPSLINEHOURLYRATE    '||chr(10)
            ||'     (    '||chr(10)
            ||'        COMPANYCODE, DIVISIONCODE, PRODUCTIONTYPE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE, MACHINECODE1, VBHOURLYRATE, '||chr(10) 
            ||'        TOTALBASIC, LASTMODIFIED, TRANTYPE, USERNAME, SYSROWID, TRANSACTIONTYPE '||chr(10)
            ||'     ) '||chr(10)
            ||'    SELECT P.COMPANYCODE, P.DIVISIONCODE, '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE,'''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||'''  FORTNIGHTENDDATE,  '||chr(10)
            ||'        P.SHIFTCODE, P.MACHINECODE, ROUND((SUM(NVL(R.TOTALBASIC,0))/(SUM(NVL(A.ATTENDANCEHOURS,0))+SUM(NVL(A.OVERTIMEHOURS,0)))),5) PERHOURRATE  '||chr(10)
            ||'        SUM(NVL(R.TOTALBASIC,0)) VBAMOUNT,  SYSDATE LASTMODIFIED, ''VB'' TRANTYPE, ''SWT'' USERNAME, SYS_GUID() SYSROWID, ''PICKS'' '||chr(10)
            ||'        FROM '||chr(10)
            ||'    FROM WPSPRODUCTIONSUMMARY P, WPSATTENDANCEDAYWISE A, WPSLINEHOURLYRATE R '||chr(10)
            ||'     WHERE P.COMPANYCODE = A.COMPANYCODE '||chr(10)
            ||'        AND P.DIVISIONCODE = A.DIVISIONCODE '||chr(10)
            ||'        AND P.YEARCODE = A.YEARCODE '||chr(10)
            ||'        AND P.LOOMCODE = A.LOOMCODE '||chr(10)
            ||'        AND P.SHIFTCODE = A.SHIFTCODE '||chr(10)
            ||'        AND P.MACHINECODE = R.MACHINECODE1 '||chr(10)
            ||'        AND P.COMPANYCODE = R.COMPANYCODE '||chr(10)
            ||'        AND P.DIVISIONCODE = R.DIVISIONCODE '||chr(10)
            ||'        AND P.PRODUCTIONTYPE = R.PRODUCTIONTYPE '||chr(10)
            ||'        AND P.SHIFTCODE = R.SHIFTCODE '||chr(10)
            ||'        AND P.MACHINECODE = R.MACHINECODE1 '||chr(10)
            ||'        AND A.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||''' '|| CHR(10)
            ||'        AND A.FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '|| CHR(10)
            ||'        AND A.DATEOFATTENDANCE BETWEEN '''||lv_FN_STDT||'''  AND '''||lv_FN_ENDT||'''  '||chr(10) 
            ||'        AND P.STARTDATE >= '''||lv_FN_STDT||'''  '||chr(10)
            ||'        AND P.STARTDATE <= '''||lv_FN_STDT||''' '||chr(10)
            ||'        AND P.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''  '||chr(10)
            ||'        AND P.TRANSACTIONTYPE = ''PICKS'' '||chr(10)
            ||'        AND NVL(P.TOTALPIC,0) > 0 '||chr(10)
            ||'    GROUP BY P.COMPANYCODE, P.DIVISIONCODE, P.YEARCODE, P.SHIFTCODE, P.MACHINECODE  '||chr(10)
            ||'    ORDER BY P.COMPANYCODE, P.DIVISIONCODE, P.YEARCODE, P.MACHINECODE, P.SHIFTCODE  ';
           
    --EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_MCH_LAPPING;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_MCH_LAPPING ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY AMALESH DAS ON 22.08.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE VARIABLE BASIC BASED ON FORTNIGHTLY INDIVIDUAL MACHINEWISE, QUALITY WISE PRODUCTION 
----- QUALITYRATE TAKE FROM  - WPSQUALITYRATE_ON_REEDSPACE TABLE ----- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_MCH_LAPPING';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   


Begin


    SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
    WHERE COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE
    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
     lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := '   INSERT INTO WPSLINEHOURLYRATE  '||chr(10) 
             ||'   (   '||chr(10) 
             ||'       COMPANYCODE, DIVISIONCODE, DEPARTMENTCODE, PRODUCTIONTYPE,  SHIFTCODE, MACHINECODE1, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SECTIONCODE,  '||chr(10)  
             ||'        VBHOURLYRATE,TOTALHOURS, TOTALBASIC, LASTMODIFIED,TRANTYPE, USERNAME, SYSROWID  '||chr(10) 
             ||'   )   '||chr(10) 
             ||'   SELECT  X.COMPANYCODE, X.DIVISIONCODE, X.DEPARTMENTCODE, X.PRODUCTIONTYPE, X.SHIFTCODE, X.MACHINECODE, ''' || lv_FN_STDT || ''' FORTNIGHTSTARTDATE, '||chr(10) 
             ||'   ''' || lv_FN_ENDT || ''' FORTNIGHTENDDATE, ''' || lv_SectionCode || ''' SECTIONCODE,  '||chr(10) 
             ||'   ROUND(SUM(VBAMOUNT)/NVL(ATTN.TOT_HRS,1),5) VBHOURLYRATE,NVL(ATTN.TOT_HRS,1) TOTALHOURS, SUM(VBAMOUNT) TOTALBASIC,  '||chr(10) 
             ||'   SYSDATE LASTMODIFIED,''VB'' TRANTYPE, ''SWT'' USERNAME, SYS_GUID() SYSROWID  '||chr(10) 
             ||'    FROM  '||chr(10) 
             ||'    (    '||chr(10) 
             ||'       SELECT A.COMPANYCODE, A.DIVISIONCODE, A.DEPARTMENTCODE, A.PRODUCTIONTYPE,  A.SHIFTCODE, A.MACHINECODE, A.QUALITYCODE,   '||chr(10) 
             ||'       SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION, SUM(NVL(WORKINGHOURS,0)) WORKINGHOURS,  '||chr(10) 
             ||'       ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2) *B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT  '||chr(10) 
             ||'       FROM (/*WPSPRODUCTIONSUMMARY A, */  '||chr(10)

             ||'       SELECT COMPANYCODE, DIVISIONCODE, STARTDATE, ENDDATE, YEARCODE,PRODUCTIONTYPE, DEPARTMENTCODE, SHIFTCODE, WORKERSERIAL, '||CHR(10) 
             ||'       MACHINECODE, QUALITYCODE, TOTALPRODUCTION*YARDSQTY TOTALPRODUCTION, WORKINGHOURS  '||CHR(10)
             ||'       FROM WPSPRODUCTIONSUMMARY  '||CHR(10)
             ||'       WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
             ||'         AND YEARCODE = '''||P_YEARCODE||'''  '||chr(10)    
             ||'         AND STARTDATE >= '''||lv_FN_STDT||'''   '||CHR(10)
             ||'         AND STARTDATE <= '''||lv_FN_ENDT||'''  '||CHR(10)
             ||'         AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
             ||'       ) A,    '||CHR(10)
             ||'       (    '||chr(10) 
             ||'        SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY,  '||chr(10)   
             ||'        CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE    '||chr(10) 
             ||'        FROM  WPSQUALITYRATE_ON_REEDSPACE X,    '||chr(10) 
             ||'        (    '||chr(10) 
             ||'            SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||chr(10)   
             ||'            FROM WPSQUALITYRATE_ON_REEDSPACE    '||chr(10) 
             ||'            WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)   
             ||'              AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||'''  '||chr(10)
             ||'            GROUP BY PRODUCTIONTYPE, QUALITYCODE    '||chr(10) 
             ||'        ) Y    '||chr(10) 
             ||'        WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)   
             ||'          AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE     '||chr(10) 
             ||'          AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||chr(10)   
             ||'       ) B    '||chr(10) 
             ||'       WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)  
             ||'       AND A.YEARCODE = '''||P_YEARCODE||'''  '||chr(10)
             ||'       AND A.STARTDATE >= '''||lv_FN_STDT||''' '|| CHR(10) 
             ||'       AND A.STARTDATE <= '''||lv_FN_ENDT||'''  '|| CHR(10) 
             ||'       AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE     '||chr(10)
             ||'       AND A.QUALITYCODE = B.QUALITYCODE     '||chr(10)  
             ||'       AND A.TOTALPRODUCTION > 0  '||chr(10) 
             ||'       GROUP BY A.COMPANYCODE, A.DIVISIONCODE , A.DEPARTMENTCODE, A.PRODUCTIONTYPE,  A.MACHINECODE, A.SHIFTCODE,  '||chr(10) 
             ||'       A.WORKERSERIAL,A.QUALITYCODE, B.UNITQUANTITY, B.QUALITYRATE, B.PERCENTAGEOFRATE  '||chr(10) 
             ||'   )X,  '||chr(10)
             ||'  (  '||chr(10)
             ||'       SELECT SHIFTCODE, MACHINECODE1, SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) TOT_HRS  '||chr(10)
             ||'       FROM WPSATTENDANCEDAYWISE A, WPSOCCUPATIONMAST B   '||chr(10)
             ||'       WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||'''  '||chr(10)
             ||'         AND A.YEARCODE = '''||P_YEARCODE||'''  '||chr(10)
             ||'         AND A.DATEOFATTENDANCE >= '''||lv_FN_STDT||''' AND A.DATEOFATTENDANCE <= '''||lv_FN_ENDT||'''  '||chr(10)
             ||'         AND A.SECTIONCODE ='''||lv_SectionCode||'''  '||chr(10)
             ||'         AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||chr(10)
             ||'         AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE   '||chr(10)
             ||'         AND B.WORKERTYPECODE = ''P''  '||chr(10)
             ||'       GROUP BY SHIFTCODE, MACHINECODE1  '||chr(10)
             ||'  ) ATTN   '||chr(10)
             ||' WHERE X.SHIFTCODE = ATTN.SHIFTCODE AND X.MACHINECODE = ATTN.MACHINECODE1   '||CHR(10)         
             ||' GROUP BY X.COMPANYCODE, X.DIVISIONCODE, X.DEPARTMENTCODE, X.PRODUCTIONTYPE, X.SHIFTCODE, X.MACHINECODE,NVL(ATTN.TOT_HRS,1) '||chr(10); 
             
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    
    PROC_VB_WORKER_MACHINEWISE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,NULL, NULL,NULL,NULL);

    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_MCH_WEAV;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_MCH_WEAV ( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY Amalesh Das ON 15.04.2020 ----
----- THIS PROCEDURE USE FOR CALCULATE VARIABLE BASIC BASED ON FORTNIGHTLY INDIVIDUAL MACHINEWISE, QUALITY WISE PRODUCTION 
----- QUALITYRATE TAKE FROM  - WPSQUALITYRATE_ON_REEDSPACE TABLE -----
----- AND BELOW OTHER PROCEDURE CALLS HELPER, SARDAR, HELPER RELIVER, SARDAR RELIVER PRODUCTION BASIC CALCULATION ---------- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_MCH_WEAV';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode varchar2(10) :='';
lv_OcpCode  varchar2(10) := '';       
lv_dependantsectioncode varchar2(10) := '';
lv_OccupationType   varchar2(50) := '';
lv_ProductionType   varchar2(10) := '';
Begin

--    SELECT SECTIONCODE into lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
--    WHERE COMPANYCODE = P_COMPCODE
--    AND DIVISIONCODE = P_DIVCODE
--    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;
    

    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            select DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE into lv_DeptCode,lv_SectionCode, lv_OcpCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              --lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode;
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;
    ELSE
        IF P_DEPARTMENT IS NOT NULL AND P_SECTION IS NOT NULL THEN
            BEGIN
                lv_SectionCode := P_SECTION;
                lv_DeptCode := P_DEPARTMENT;
                lv_OcpCode  := P_OCCUPATION;
               
                SELECT PRODUCTIONTYPECODE INTO lv_ProductionType 
                FROM WPSPRODUCTIONTYPEMAST 
                WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                  AND DEPARTMENTCODE= P_DEPARTMENT
                  AND SECTIONCODE = P_SECTION;
            EXCEPTION
                WHEN OTHERS THEN lv_ProductionType := 'SWT';    
            END;        
        END IF;    
    END IF;
    
    SELECT OCCUPATIONTYPE into lv_OccupationType
    FROM WPSOCCUPATIONMAST
    WHERE COMPANYCODE=P_COMPCODE AND DIVISIONCODE = P_DIVCODE
      AND DEPARTMENTCODE = lv_DeptCode AND SECTIONCODE = lv_SectionCode AND OCCUPATIONCODE = lv_OcpCode;    
    -- THIS BLOCK IS FOR CALCULATIING MACHINE WISE TOTAL HOUR AND VB AMOUNT
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE WPSTMP_MCHWISEVBAMT';
    EXCEPTION
        WHEN OTHERS THEN NULL;     
    END;     
    
    lv_Remarks := 'CREATE TABLE WPSTMP_MCHWISEVBAMT ' ||  P_PRODUCTIONTYPE; 
    
    lv_Sql :=  ' CREATE TABLE WPSTMP_MCHWISEVBAMT AS '||chr(10)
             ||' SELECT A.DEPARTMENTCODE,''' ||lv_SectionCode|| ''' AS SECTIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.LOOMCODE, A.MACHINECODE, '||chr(10)  
             ||' A.QUALITYCODE, B.QUALITYRATE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION,    '||chr(10)
             ||' ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2)*B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||chr(10)   
             ||' FROM WPSPRODUCTIONSUMMARY A,    '||chr(10)
             ||' (    '||chr(10)
             ||'    SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, X.REEDSPACE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY, '||chr(10)   
             ||'    CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE    '||chr(10)
             ||'    FROM  WPSQUALITYRATE_ON_REEDSPACE X,    '||chr(10)
             ||'    (    '||chr(10)
             ||'       SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)   
             ||'       FROM WPSQUALITYRATE_ON_REEDSPACE    '||chr(10)
             ||'       WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
             ||'       AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''  '||chr(10)
             ||'       GROUP BY PRODUCTIONTYPE, QUALITYCODE    '||chr(10)
             ||'    ) Y    '||chr(10)
             ||'    WHERE X.COMPANYCODE = ''' ||P_COMPCODE|| ''' AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)    
             ||'      AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE    '||chr(10)
             ||'      AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE '||chr(10)    
             ||' ) B   '||chr(10)
             ||' WHERE A.COMPANYCODE = ''' ||P_COMPCODE|| ''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)
             ||'   AND A.YEARCODE = ''' ||P_YEARCODE|| ''' '||chr(10)
             ||'   AND A.STARTDATE >= ''' ||lv_FN_STDT|| ''' AND A.STARTDATE <= ''' ||lv_FN_ENDT|| ''' '||chr(10) 
             ||'   AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE   '||chr(10)
             ||'   AND A.QUALITYCODE = B.QUALITYCODE   '||chr(10)
             ||'   /*AND A.REEDSPACE = B.REEDSPACE */'||chr(10)
             ||'   AND A.TRANSACTIONTYPE = ''GENERAL'' '||chr(10)
             ||'   GROUP BY A.DEPARTMENTCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.LOOMCODE, A.MACHINECODE, A.QUALITYCODE, B.QUALITYRATE, B.UNITQUANTITY, B.PERCENTAGEOFRATE ';
--                 ||'   ) '||chr(10) 
--                 ||'   GROUP BY LOOMCODE, MACHINECODE ';
                 
      EXECUTE IMMEDIATE lv_Sql;
      
      INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
      values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
      COMMIT; 
      
     -- END BLOCK
      
     --RETURN;
      

    -- THIS BLOCK IS TO FIND OUT WHICH MACHINES PER HOURLY RATE WILL NOT CALCULATE ON TOTAL PICK OR MACHINES ARE NOT APPLICABLE 
    -- FOR CALCULATION BASED ON TOTAL PICK
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE WPSTMP_SHIFTWISEMACHINEWISEHR';
    EXCEPTION
        WHEN OTHERS THEN NULL;    
    END;
    
    
   lv_Sql := ' CREATE TABLE WPSTMP_SHIFTWISEMACHINEWISEHR AS '||chr(10)
   --- Changes as per version version V05 and calculation logic mailed on 02.05.2020 ommit NS_HRS and OT_NS_HRS  --------
--      ||' SELECT /*DECODE(GROUPCODE,''B'', ''2'',''C'',''3'',''1'') */ GROUPCODE SHIFTCODE, LOOMCODE, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)+NVL(NIGHTALLOWANCEHOURS,0)+ NVL(OT_NSHRS,0)) TOTHOURS, '||chr(10)
      ||' SELECT /*DECODE(GROUPCODE,''B'', ''2'',''C'',''3'',''1'') */ GROUPCODE SHIFTCODE, LOOMCODE, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) TOTHOURS, '||chr(10)      
      ||' SUM(NVL(ATTENDANCEHOURS,0)) ATTN_HRS, SUM(NVL(OVERTIMEHOURS,0)) OT_HRS, SUM(NVL(NIGHTALLOWANCEHOURS,0)) NS_HRS, SUM(NVL(OT_NSHRS,0)) OTNS_HRS '||CHR(10)
      ||' FROM WPSATTENDANCEDAYWISE '||chr(10)
      ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)
      ||'   AND DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||chr(10)
      ||'   AND YEARCODE = ''' ||P_YEARCODE|| '''   '||chr(10)
      ||'   AND FORTNIGHTSTARTDATE >=  ''' ||lv_FN_STDT|| ''' '||chr(10)
      ||'   AND FORTNIGHTENDDATE <=  ''' ||lv_FN_ENDT|| ''' '||chr(10)
      ||'   AND DEPARTMENTCODE = '''||lv_DeptCode||''' '||chr(10)
      ||'   AND SECTIONCODE = ''' ||lv_SectionCode|| ''' '||chr(10)
      ||'   AND OCCUPATIONCODE = '''||lv_OcpCode||''' '||chr(10) 
      ||'   AND NVL(LOOMCODE,''NONE'') <> ''NONE'' '||chr(10)
      ||' GROUP BY GROUPCODE/*SHIFTCODE*/, LOOMCODE '||chr(10);
        
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT;

    EXECUTE IMMEDIATE lv_Sql;        
    COMMIT;
     
    -- END BLOCK
    
    --- THEN BLOCK USE MACHINE AND LOOMCODE WISE HELPER, SARDAR, RELIVERNO FOUND
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE WPSMACHINELINEMAPING_TEMP';
    EXCEPTION
        WHEN OTHERS THEN NULL;    
    END;
    
    lv_Sql := ' CREATE TABLE WPSMACHINELINEMAPING_TEMP AS '||CHR(10) 
       ||' SELECT A.MACHINECODE, A.LOOMCODE, H.HELPERNO, S.SARDARNO, R.RELIVERNO '||chr(10)
       ||' FROM  '||chr(10)
       ||'  (   '||chr(10)
       ||'       SELECT MACHINECODE, LOOMCODE FROM WPSMACHINELOOMMAPPING  '||chr(10)
       ||'       WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||chr(10)
       ||'         AND DEPARTMENTCODE ='''||lv_DeptCode||''' AND SECTIONCODE='''||lv_SectionCode||'''  '||chr(10)
       ||'         AND EFFECTIVEDATE = (  SELECT MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||chr(10)
       ||'                                FROM WPSMACHINELOOMMAPPING  '||chr(10)
       ||'                                WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||chr(10)
       ||'                                  AND DEPARTMENTCODE ='''||lv_DeptCode||''' AND SECTIONCODE='''||lv_SectionCode||'''  '||chr(10)
       ||'                             )  '||chr(10)
       ||'   ) A,  '||chr(10)
       ||'   ( '||chr(10)
       ||'       SELECT MACHINECODE, LINENO HELPERNO FROM WPSMACHINELINEMAPPING  '||chr(10)
       ||'       WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||''' '||chr(10)
       ||'         AND DEPARTMENTCODE ='''||lv_DeptCode||'''  '||chr(10)
       ||'         AND MAPPINGTAG=''HELPER'' '||chr(10)
       ||'         AND EFFECTIVEDATE = (  SELECT MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||chr(10)
       ||'                                FROM WPSMACHINELINEMAPPING '||chr(10)
       ||'                                WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||chr(10)
       ||'                                  AND DEPARTMENTCODE ='''||lv_DeptCode||''' '||chr(10)
       ||'                                  AND MAPPINGTAG=''HELPER'' '||chr(10)
       ||'                             )  '||chr(10)
       ||'   ) H, '||chr(10)
       ||'   ( '||chr(10)
       ||'       SELECT MACHINECODE, LINENO SARDARNO FROM WPSMACHINELINEMAPPING '||chr(10)
       ||'       WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||''' '||chr(10)
       ||'         AND DEPARTMENTCODE ='''||lv_DeptCode||'''  '||chr(10)
       ||'         AND MAPPINGTAG=''SARDAR'' '||chr(10)
       ||'         AND EFFECTIVEDATE = (  SELECT MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)
       ||'                                FROM WPSMACHINELINEMAPPING '||chr(10)
       ||'                                WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||''' '||chr(10)
       ||'                                  AND DEPARTMENTCODE ='''||lv_DeptCode||'''  '||chr(10)
       ||'                                  AND MAPPINGTAG=''SARDAR'' '||chr(10)
       ||'                             )   '||chr(10)
       ||'   ) S, '||chr(10)
       ||'   ( '||chr(10)
       ||'       SELECT MACHINECODE, LINENO RELIVERNO FROM WPSMACHINELINEMAPPING '||chr(10)
       ||'       WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||''' '||chr(10)
       ||'         AND DEPARTMENTCODE ='''||lv_DeptCode||'''  '||chr(10)
       ||'         AND MAPPINGTAG=''RELIVER'' '||chr(10)
       ||'         AND EFFECTIVEDATE = (  SELECT MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)
       ||'                                FROM WPSMACHINELINEMAPPING '||chr(10)
       ||'                                WHERE COMPANYCODE=''' ||P_COMPCODE|| ''' AND DIVISIONCODE ='''||P_DIVCODE||''' '||chr(10)
       ||'                                  AND DEPARTMENTCODE ='''||lv_DeptCode||''' '||chr(10)
       ||'                                  AND MAPPINGTAG=''RELIVER'' '||chr(10)
       ||'                             )   '||chr(10)
       ||'   ) R '||chr(10)
       ||'   WHERE A.MACHINECODE = H.MACHINECODE (+) '||chr(10)
       ||'     AND A.MACHINECODE = S.MACHINECODE (+) '||chr(10)
       ||'     AND A.MACHINECODE = R.MACHINECODE (+) '||chr(10);
    
    --END BLOCK    
      -- THIS BLOCK IS FOR DELETE AND INSERT DATA INTO WPSLINEHOURLYRATE MACHINE WISE
      
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    EXECUTE IMMEDIATE lv_Sql;      
      
    lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND LINETAG = ''MACHINE'' '||chr(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    EXECUTE IMMEDIATE lv_Sql;
             
    COMMIT; 
    --DBMS_OUTPUT.PUT_LINE('1_1');    
     lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
        
    lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE, '||CHR(10) 
            ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG, LINENO, HELPERNO, SARDARNO, RELIVERNO, MACHINECODE, LOOMCODE, '||CHR(10) 
            ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,  '||CHR(10)
            ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,  '||CHR(10) 
            ||' LASTMODIFIED, USERNAME, SYSROWID)  '||CHR(10)

            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode||''' OCCUPATIONCODE, ''MACHINE'' LINETAG, NULL LINENO, C.HELPERNO, C.SARDARNO, C.RELIVERNO, D.MACHINECODE,  A.LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, B.TOTHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC, ROUND(SUM(A.VBAMOUNT) / B.TOTHOURS,5) VBHOURLYRATE,  '||CHR(10)
            ||' B.TOTHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID '||CHR(10)
            ||' FROM WPSTMP_MCHWISEVBAMT A, WPSTMP_SHIFTWISEMACHINEWISEHR B, '||CHR(10)
            ||' (SELECT DISTINCT LOOMCODE, HELPERNO, SARDARNO, RELIVERNO FROM WPSMACHINELINEMAPING_TEMP) C,  '||CHR(10)
            ||' ( '||CHR(10)
            ||'     SELECT LOOMCODE, MAX(MACHINECODE) MACHINECODE FROM WPSTMP_MCHWISEVBAMT GROUP BY LOOMCODE '||CHR(10)  
            ||' ) D '||CHR(10)
            ||' WHERE A.SHIFTCODE = B.SHIFTCODE AND A.LOOMCODE = B.LOOMCODE  '||CHR(10)
            ||'   AND A.LOOMCODE = C.LOOMCODE '||CHR(10)
            ||'   AND A.MACHINECODE = D.MACHINECODE '||CHR(10)
            ||' GROUP  BY A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, D.MACHINECODE, A.LOOMCODE, C.HELPERNO, C.SARDARNO, C.RELIVERNO,B.TOTHOURS  '||CHR(10);

    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
--    RETURN; 
    
--    DBMS_OUTPUT.PUT_LINE('2_0');
    -- END BLOCK
   
    ---- THE BLOSCK USE FOR SHIFT,DEPT,SECTION, OCUUPATION, DEPT SERIAL WISE WEAVE VB CALCUATION -----------

    lv_Remarks := 'DELETE FROM VBDETAILS ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)  
            ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
            ||'   AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
            ||'   AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
            ||'   AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
            ||'   AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)
            ||'   AND OCCUPATIONCODE = '''||lv_OcpCode||''' '||chr(10);
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
   
     lv_Remarks := 'INESERT IN VBDETIAL FOR WEAVER BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';

     lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, LINETAG, '||chr(10)
         ||' MACHINECODE, HELPERNO, SARDARNO, RELIVERNO, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL, '''||lv_OcpCode||''' OCCUPATIONCODE, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO, ''MACHINE'' LINETAG,  '||CHR(10)
         ||'  A.MACHINECODE1, R.HELPERNO, R.SARDARNO, R.RELIVERNO, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) + ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) '||CHR(10)
         ||'   + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.LOOMCODE = R.LOOMCODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.LINETAG = ''MACHINE''   '||CHR(10)
         ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)+NVL(A.HOLIDAYHOURS,0)) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1, R.HELPERNO, R.SARDARNO, R.RELIVERNO  '||CHR(10);   

    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
--    RETURN;
    --PROC_VBDETAILS_WEAV_INSERT ( P_COMPCODE, P_DIVCODE, NULL, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,NULL, NULL,NULL,NULL);
    
--    SELECT DEPENDANTSECTIONCODE INTO lv_dependantsectioncode FROM WPSSECTIONMAST
--    WHERE COMPANYCODE = P_COMPCODE
--    AND DIVISIONCODE =  P_DIVCODE
--    AND SECTIONCODE = lv_SectionCode;
   ----- CALLING LINE OCCUPATION HELPER,SARDAR, HELPER RELIVER, SARDAR RELIVER ---
   --- WEAVING RELIAVER STILL PENDING DUE TO NO DATA AVAILABLE FOR PENDING ------ 
   PROC_WPS_VB_LINE_OCP( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,P_DEPARTMENT, P_SECTION,NULL,'HELPER');
   PROC_WPS_VB_LINE_OCP( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,P_DEPARTMENT, P_SECTION,NULL,'SARDAR');
   PROC_WPS_VB_LINE_OCP( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,P_DEPARTMENT, P_SECTION,NULL,'HELPER RELIVER');
   PROC_WPS_VB_LINE_OCP( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,P_DEPARTMENT, P_SECTION,NULL,'SARDAR RELIVER');
    --PROC_WPS_VB_LINE_SARDAR ( P_COMPCODE, P_DIVCODE, NULL, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',NULL,NULL,lv_dependantsectioncode,NULL,NULL);
   
   ------ DELETE NON ENTITLE (PRODUCTUION BASIC) TOKENNO
   PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, 'WPSVBDETAILS', P_PRODUCTIONTYPE,P_DEPARTMENT,NULL);
    
--exception    
--    when others then
--        lv_SqlErr := sqlerrm;
--    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
--    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
--    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_NA_CATEGORY_DEL;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_NA_CATEGORY_DEL( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY AMALESH ON 10.08.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE OCCUPATION TYPE WISE RATE AND STORE IN WPSLINEHOURLYRATE TABLE -- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_NA_CATEGORY_DEL';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(30) := '';  
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';      

Begin


    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode  
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              --lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode;
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;   
    END IF;
    
    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            SELECT PRODUCTIONTYPECODE,DEPARTMENTCODE INTO lv_ProductionType, lv_DeptCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND SECTIONCODE = P_SECTION;
        EXCEPTION
            WHEN OTHERS THEN 
                lv_ProductionType := 'SWT' ;
                SELECT MAX(DEPARTMENTCODE) into lv_DeptCode FROM WPSSECTIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE AND SECTIONCODE = P_SECTION;    
        END;        
    END IF;
    lv_Remarks := 'DELETE VBDETAILS TABLE CATEGORY NOT APPLICABLE TO VB';
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||CHR(10) 
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' '||CHR(10)
            ||'   AND FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||CHR(10)
            ||'   /*AND SECTIONCODE = '''||P_SECTION||''' */'||CHR(10)
            ||'   AND WORKERCATEGORYCODE IN ( '||CHR(10)
            ||'                                SELECT DISTINCT WORKERCATEGORYCODE FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
            ||'                                WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'                                  AND EFFECTIVEDATE = ( '||CHR(10)
            ||'                                                          SELECT MAX(EFFECTIVEDATE) FROM WPSWORKERCATEGORYVSCOMPONENT '||CHR(10)
            ||'                                                          WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'                                                        )   '||CHR(10)
            ||'                                 AND COMPONENTSHORTNAME=''VBASIC''  '||CHR(10)
            ||'                                 AND APPLICABLE LIKE ''N%'' '||CHR(10)
            ||'                             ) '||CHR(10); 
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_VB_PRESS;

CREATE OR REPLACE PROCEDURE PROC_WPS_VB_PRESS( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY AMALESH ON 10.08.2019 ----
----- THIS PROCEDURE USE FOR CALCULATE OCCUPATION TYPE WISE RATE AND STORE IN WPSLINEHOURLYRATE TABLE -- 

lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'PROC_WPS_VB_PRESS';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(30) := '';  
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';      

Begin


    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode  
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              --lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode;
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := '';      
        END;   
    END IF;
    
    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            SELECT PRODUCTIONTYPECODE,DEPARTMENTCODE INTO lv_ProductionType, lv_DeptCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND SECTIONCODE = P_SECTION;
        EXCEPTION
            WHEN OTHERS THEN 
                lv_ProductionType := 'SWT' ;
                SELECT MAX(DEPARTMENTCODE) into lv_DeptCode FROM WPSSECTIONMAST WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE AND SECTIONCODE = P_SECTION;    
        END;        
    END IF;


--    SELECT DEPARTMENTCODE,SECTIONCODE into lv_DeptCode, lv_SectionCode FROM WPSPRODUCTIONTYPEMAST 
--    WHERE COMPANYCODE = P_COMPCODE
--    AND DIVISIONCODE = P_DIVCODE
--    AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE ;

     lv_Remarks := 'DELETE FROM WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
     
     lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||' WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'   AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'   AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| ''' '||chr(10)  
             ||'   AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'   AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'   AND TRANTYPE = ''VB'' ';  
    
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
     
    lv_TempTableAttn := 'WPS_TEMP_VB_ATTN'; --_'||lv_ProductionType;
    lv_TempTableProd := 'WPS_TEMP_VB_PROD_'||lv_ProductionType;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableAttn;
    EXCEPTION
        WHEN OTHERS THEN NULL;     
    END; 
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTableProd;
    EXCEPTION
        WHEN OTHERS THEN NULL;     
        EXECUTE IMMEDIATE 'DELETE FROM '||lv_TempTableAttn;
    END;
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shift,Occupation type wise attendance hours'; 
    lv_Sql:= ' CREATE TABLE '||lv_TempTableAttn||' AS '||chr(10)
        ||' SELECT A.MACHINECODE1 MACHINECODE, A.SHIFTCODE,C.OCCUPATIONTYPE, SUM(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) ATTN_HRS,0 TOT_HRS '||CHR(10)
        ||' FROM WPSATTENDANCEDAYWISE A, WPSSECTIONMAST B, WPSOCCUPATIONMAST C '||CHR(10)
        ||' WHERE A.COMPANYCODE ='''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE ='''||P_YEARCODE||'''  '||CHR(10)
        ||'   AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||chr(10)
        ||'   AND A.DEPARTMENTCODE = '''||lv_DeptCode||''' AND A.SECTIONCODE = '''||lv_SectionCode||''' AND A.MACHINECODE1 IS NOT NULL '||chr(10)
        ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||chr(10)
        ||'   AND A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE '||chr(10)
        ||'   AND B.WORKTYPECODE = ''P'' '||chr(10)
        ||'   AND A.COMPANYCODE = C.COMPANYCODE AND A.DIVISIONCODE = C.DIVISIONCODE '||chr(10) 
        ||'   AND A.DEPARTMENTCODE = C.DEPARTMENTCODE AND A.SECTIONCODE = C.SECTIONCODE AND A.OCCUPATIONCODE = C.OCCUPATIONCODE '||chr(10)
        ||'   AND C.WORKERTYPECODE = ''P'' '||chr(10)
        ||'   GROUP BY A.MACHINECODE1, A.SHIFTCODE ,C.OCCUPATIONTYPE '||chr(10)
        ||' ORDER BY A.MACHINECODE1,A.SHIFTCODE, C.OCCUPATIONTYPE '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
             
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    -- UPDATING TOT_HRS FROM BASED ON MACHINE,SHIFT
    FOR C1 IN (
                SELECT MACHINECODE, SHIFTCODE, SUM(ATTN_HRS) TOT_HRS
                FROM WPS_TEMP_VB_ATTN --_P0006
                --where OCCUPATIONTYPE = '1ST PACKER'
                GROUP BY MACHINECODE, SHIFTCODE
            )
    LOOP
        UPDATE WPS_TEMP_VB_ATTN SET TOT_HRS = C1.TOT_HRS WHERE MACHINECODE = C1.MACHINECODE AND SHIFTCODE=C1.SHIFTCODE;
    END LOOP;        
    
    lv_Remarks := lv_ProductionType||' - Temp table Creation for m/c, shiftwise production and vbamount calculate';

    lv_Sql := ' CREATE TABLE '||lv_TempTableProd||' AS '||chr(10)
        ||' SELECT DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE, SUM(PRODUCTION) PRODUCTION, ROUND(SUM(VBAMOUNT),2) VBAMOUNT '||chr(10)
        ||' FROM ( '||chr(10)
        ||'         SELECT A.DEPARTMENTCODE,'''||lv_SectionCode||''' AS SECTIONCODE, A.PRODUCTIONTYPE,A.MACHINECODE,A.SHIFTCODE, '||chr(10) 
        ||'         A.QUALITYCODE, B.QUALITYRATE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION, '||chr(10)  
        ||'         ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2) *B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||chr(10)  
        ||'         FROM WPSPRODUCTIONSUMMARY A, '||chr(10)  
        ||'         ( '||chr(10)  
        ||'          SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY, '||chr(10)  
        ||'          CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE '||chr(10)  
        ||'          FROM  WPSQUALITYRATE_ON_REEDSPACE X, '||chr(10)  
        ||'          ( '||chr(10)  
        ||'              SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE '||chr(10)  
        ||'              FROM WPSQUALITYRATE_ON_REEDSPACE '||chr(10)  
        ||'              WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||chr(10)
        ||'                AND PRODUCTIONTYPE = ''' ||lv_ProductionType|| '''   '||chr(10)
        ||'              GROUP BY PRODUCTIONTYPE, QUALITYCODE   '||chr(10)
        ||'          ) Y   '||chr(10)
        ||'          WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'            AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE    '||chr(10)
        ||'            AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||chr(10)  
        ||'      ) B  '||chr(10)
        ||'      WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)  
        ||'        AND A.YEARCODE = '''||P_YEARCODE||'''   '||chr(10) 
        ||'        AND A.STARTDATE >= '''||lv_fn_stdt||''' AND A.STARTDATE <= '''||lv_fn_endt||'''  '||chr(10)  
        ||'        AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE  AND A.QUALITYCODE = B.QUALITYCODE  '||chr(10)
        ||'      GROUP BY A.DEPARTMENTCODE,  A.PRODUCTIONTYPE, A.MACHINECODE,A.SHIFTCODE,  '||chr(10)
        ||'         A.QUALITYCODE, B.UNITQUANTITY, B.QUALITYRATE, B.PERCENTAGEOFRATE  '||chr(10)
        ||'     )  '||chr(10)
        ||' GROUP BY DEPARTMENTCODE, SECTIONCODE, PRODUCTIONTYPE, MACHINECODE, SHIFTCODE  '||chr(10);    

    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    lv_Remarks := 'INSERT INTO WPSLINEHOURLYRATE, PRODUCTION TYPE ' ||  lv_ProductionType;
    
    lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE,'||chr(10) 
        ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE, MACHINECODE1, SHIFTCODE,   '||chr(10)  
        ||' TOTALPRODUCTION, TOTALHOURS, TOTALBASIC, VBHOURLYRATE,TRANTYPE, OCCUPATIONTYPE, '||CHR(10)
        ||' LASTMODIFIED,USERNAME, SYSROWID)  '||chr(10) 
        ||'  SELECT '''||P_COMPCODE||''' COMPANYCODE,'''||P_DIVCODE||''' DIVISIONCODE, '''||lv_fn_stdt||''' FORTNIGHTSTARTDATE, '''||lv_fn_endt||''' FORTNIGHTENDDATE, '||CHR(10)
        ||'  A.PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.MACHINECODE, A.SHIFTCODE, '||chr(10)
        ||'  A.PRODUCTION, B.ATTN_HRS, A.VBAMOUNT, '||CHR(10)
--        ||'  CASE WHEN OCCUPATIONTYPE = ''HALF PACKER'' THEN '||CHR(10) 
--        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND((A.VBAMOUNT/B.TOT_HRS)+0.0096,5) ELSE 0 END '||CHR(10) 
--        ||'  ELSE '||CHR(10)
--        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND((A.VBAMOUNT/B.TOT_HRS)+0.0488,5) ELSE 0 END '||CHR(10)
        ||'  CASE WHEN LTRIM(RTRIM(OCCUPATIONTYPE)) = ''HALF PACKER'' THEN '||CHR(10) 
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(((A.VBAMOUNT - ((B.TOT_HRS-B.ATTN_HRS)*0.0488))/B.TOT_HRS),4)+0.0096 ELSE 0 END '||CHR(10)
        ||'  ELSE '||CHR(10) 
        ||'     CASE WHEN B.ATTN_HRS >0 THEN ROUND(((A.VBAMOUNT - (B.ATTN_HRS*0.0488))/B.TOT_HRS),4)+0.0488 ELSE 0 END '||CHR(10)        
        ||'  END VBHOURLYRATE,''VB'' TRANTYPE, B.OCCUPATIONTYPE, '||CHR(10)
        ||'  SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID() '||CHR(10)
        ||'  FROM '||lv_TempTableProd||' A, '||lv_TempTableAttn||' B '||chr(10)
        ||'  WHERE A.MACHINECODE=B.MACHINECODE AND A.SHIFTCODE = B.SHIFTCODE '||chr(10)
        ||'  ORDER BY A.MACHINECODE, A.SHIFTCODE '||chr(10);        
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    
    ---- data transfer to vb details table based on occupation type from line rate table -----------    
    --PROC_VB_WORKER_MACHINEWISE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',P_PRODUCTIONTYPE,NULL, NULL,NULL,NULL);
    
    PROC_VBDETAILS_OCPTYPE_INSERT ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT,NULL,'WPSVBDETAILS',lv_ProductionType,lv_DeptCode, lv_SectionCode,NULL,NULL);
    
exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PROC_WPS_WAGES_QTYUPDT;

CREATE OR REPLACE PROCEDURE PROC_WPS_WAGES_QTYUPDT(P_COMPCODE Varchar2,
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv_swt
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_upd1_sql  varchar2(32767) := '';
lv_upd2_sql  varchar2(32767) := '';
lv_colstr    varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_FirtstDt     date; 
lv_ProcName     varchar2(30) := 'PROC_WPS_WAGES_QTYUPDT';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_pf_cont_col varchar2(30) ;
lv_cnt int;
lv_FNYearStartdate varchar2(10) :='';
lv_CalenderYearStartdate varchar2(10) :='';
begin
    
    
    
    
    lv_cnt :=0;
    SELECT COUNT(*)
    INTO 
    lv_cnt
    FROM USER_TABLES
    WHERE TABLE_NAME =P_PHASE_TABLENAME;
    
    IF lv_cnt>0 THEN
        EXECUTE IMMEDIATE 'DROP TABLE '|| P_PHASE_TABLENAME;
    END IF;
    
    lv_Remarks:='01 UPDATE TOTALPRODUCTION INTO WPSWAGESDETAILS_SWT';
    
    lv_sql:='UPDATE WPSWAGESDETAILS_SWT AA SET (TOTALPRODUCTION)=NVL(('||CHR(10)
         ||'                                            SELECT  NVL(M.TOTALPRODUCTION,0) FROM ('||CHR(10)
         ||'SELECT     B.COMPANYCODE,B.DIVISIONCODE,B.YEARCODE,B.FORTNIGHTSTARTDATE,B.FORTNIGHTENDDATE,'||CHR(10)
         ||'           B.DEPARTMENTCODE,B.SECTIONCODE,B.SHIFTCODE,B.OCCUPATIONCODE,B.DEPTSERIAL,A.WORKERSERIAL,'||CHR(10)
         ||'            SUM(NVL(A.TOTALPRODUCTION,0))TOTALPRODUCTION'||CHR(10)
         ||'            FROM WPSPRODUCTIONSUMMARY A,WPSATTENDANCEDAYWISE B'||CHR(10)
         ||'         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
         ||'           AND A.STARTDATE >= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'           AND A.STARTDATE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'           AND A.COMPANYCODE = B.COMPANYCODE'||CHR(10)
         ||'           AND A.DIVISIONCODE = B.DIVISIONCODE'||CHR(10)
         ||'           AND A.STARTDATE = B.DATEOFATTENDANCE'||CHR(10)
         ||'          AND A.SHIFTCODE = B.SHIFTCODE'||CHR(10)
         ||'           AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'||CHR(10)
         ||'           AND A.SECTIONCODE=B.SECTIONCODE'||CHR(10)
         ||'           AND A.WORKERSERIAL = B.WORKERSERIAL'||CHR(10)
         ||'         GROUP BY B.COMPANYCODE,B.DIVISIONCODE,B.YEARCODE,B.FORTNIGHTSTARTDATE,B.FORTNIGHTENDDATE,'||CHR(10)
         ||'           B.DEPARTMENTCODE,B.SECTIONCODE,B.SHIFTCODE,B.OCCUPATIONCODE,B.DEPTSERIAL,A.WORKERSERIAL'||CHR(10)
         ||')M'||CHR(10)
         ||'WHERE 1=1'||CHR(10)
         ||'AND AA.COMPANYCODE=M.COMPANYCODE'||CHR(10)
         ||'AND AA.DIVISIONCODE=M.DIVISIONCODE'||CHR(10)
         ||'AND AA.DEPARTMENTCODE=M.DEPARTMENTCODE'||CHR(10)
         ||'AND AA.SECTIONCODE=M.SECTIONCODE'||CHR(10)
         ||'AND AA.SHIFTCODE=M.SHIFTCODE'||CHR(10)
         ||'AND AA.OCCUPATIONCODE=M.OCCUPATIONCODE'||CHR(10)
         ||'AND AA.DEPTSERIAL=M.DEPTSERIAL'||CHR(10)
         ||'AND AA.WORKERSERIAL=M.WORKERSERIAL'||CHR(10)
         ||'),0)'||CHR(10)
         ||'WHERE 1=1'||CHR(10)
         ||'AND AA.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'AND AA.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'AND AA.WORKERSERIAL IN (  SELECT WORKERSERIAL FROM WPSWAGESDETAILS_SWT '||CHR(10)
         ||'                           WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
         ||'                             AND FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                             AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                        )'||CHR(10);           
           
          
    --DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'', lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;  
    COMMIT;
    
    lv_remarks :='';
    
--    dbms_output.put_line('2_1');
    lv_sql := ' CREATE TABLE '||P_PHASE_TABLENAME||' AS  '||CHR(10)
            ||'SELECT COMPANYCODE,DIVISIONCODE,YEARCODE,FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,'||CHR(10)
            ||'WORKERSERIAL,NVL(SUM(NVL(TOTALPRODUCTION,0)),0)TOTALPRODUCTION '||CHR(10)
            ||'FROM WPSWAGESDETAILS_SWT'||CHR(10)
            ||'WHERE 1=1'||CHR(10)
            ||'AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
            ||'AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
            ||'AND YEARCODE='''||P_YEARCODE||''''||CHR(10)
            ||'AND FORTNIGHTSTARTDATE= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
            ||'AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
            ||'GROUP BY COMPANYCODE,DIVISIONCODE,YEARCODE,'||CHR(10)
            ||'FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,WORKERSERIAL'||CHR(10);
      lv_remarks := NVL(lv_remarks,'XX ') ||'-02 CREATE '||P_PHASE_TABLENAME||' FOR TOTALPRODUCTION UPDATE ';

      
    --dbms_output.put_line(lv_sql );       
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE,PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE,P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks); 
    EXECUTE IMMEDIATE lv_sql  ;
    COMMIT;
    --RETURN;
    lv_remarks :='';
--    
lv_sql := 'UPDATE '||P_TABLENAME||' A SET (TOTALPRODUCTION)  '||CHR(10)  
        ||' = ( SELECT TOTALPRODUCTION  FROM '||P_PHASE_TABLENAME||' B '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10); 
        
   lv_remarks := NVL(lv_remarks,'XX ') ||'-03 UPDATE TOTALPRODUCTION';
  --dbms_output.put_line(lv_sql );   
   INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
   VALUES (P_COMPCODE,P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
   EXECUTE IMMEDIATE lv_sql;
    COMMIT; 
    
--UPDATE MACHINEALLICABLE PRODUCTION TO 0 
 lv_remarks :='';
lv_sql := 'UPDATE '||P_TABLENAME||' A SET (TOTALPRODUCTION)  '||CHR(10)
        ||'=NVL(( SELECT 0  FROM WPSPRODUCTIONTYPEMAST  B  '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10) 
        ||' AND A.YEARCODE =  '''||P_YEARCODE||''''||CHR(10) 
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10) 
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10) 
        ||' AND A.COMPANYCODE=B.COMPANYCODE'||CHR(10)
        ||' AND A.DIVISIONCODE=B.DIVISIONCODE'||CHR(10)
        ||' AND A.DEPARTMENTCODE=B.DEPARTMENTCODE'||CHR(10) 
        ||' AND A.SECTIONCODE=B.SECTIONCODE'||CHR(10) 
        ||' AND B.MACHINEINPUTPOSSIBLE=''Y'''||CHR(10) 
        ||' ),0)'||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE ='''||P_DIVCODE||''' '||CHR(10)  
        ||'  AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
        ||' AND A.FORTNIGHTENDDATE =TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10) 
        ||' AND A.DEPARTMENTCODE||A.SECTIONCODE'||CHR(10) 
        ||' IN'||CHR(10) 
        ||' ('||CHR(10) 
        ||' SELECT DEPARTMENTCODE||SECTIONCODE FROM WPSPRODUCTIONTYPEMAST'||CHR(10)
        ||' WHERE MACHINEINPUTPOSSIBLE=''Y'''||CHR(10) 
        ||' AND   COMPANYCODE = '''||P_COMPCODE||''''||CHR(10) 
        ||' AND   DIVISIONCODE = '''||P_DIVCODE||''''||CHR(10)
        ||' )'||CHR(10) ;         
        
   lv_remarks := NVL(lv_remarks,'XX ') ||'-04 UPDATE TOTALPRODUCTION TO 0';
  --dbms_output.put_line(lv_sql );   
   INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
   VALUES (P_COMPCODE,P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
   EXECUTE IMMEDIATE lv_sql;
    COMMIT; 
--END   UPDATE MACHINEALLICABLE PRODUCTION TO 0 
    
  EXCEPTION
    WHEN OTHERS THEN
      lv_sqlerrm := sqlerrm ;
      insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
      values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
                                  
end;
/


DROP PROCEDURE PROC_WPS_YTDMNTHGRS_UPDT;

CREATE OR REPLACE PROCEDURE PROC_WPS_YTDMNTHGRS_UPDT (P_COMPCODE Varchar2,
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2,  --- 01/05/2016 '  
                                                  P_FNENDT Varchar2,  --- 31/05/2016 '
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2, -- 'wpswagesdetails_mv_swt
                                                  P_TABLENAME Varchar2,  ---' wpswagesdetails_mv
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_upd1_sql  varchar2(32767) := '';
lv_upd2_sql  varchar2(32767) := '';
lv_colstr    varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_Prev_fn_stdt  date;
lv_Prev_fn_endt  date;
lv_Mnth_stdt     date;   
lv_FirtstDt     date; 
lv_ProcName     varchar2(30) := 'PROC_WPS_YTDMNTHGRS_UPDT';
lv_Formula1     varchar2(1000) := '';
lv_Formula1_Col varchar2(30) := '';
lv_Formula2     varchar2(1000) := '';
lv_Formula2_Col varchar2(30) := '';
lv_Formula3     varchar2(1000) :='';
lv_Formula3_Col varchar2(30) := '';
lv_Formula4     varchar2(1000) :='';
lv_Formula4_Col varchar2(30) := '';
lv_YYYYMM       varchar2(10) := to_char(lv_fn_stdt,'YYYYMM');
lv_updtable varchar2(30) ;
lv_pf_cont_col varchar2(30) ;
lv_MaxPensionGrossAmt   number(12,2) := 0;
lv_MaxPensionAmt        number(12,2) := 0;
lv_PensionPercentage    number(7,2) := 0;
lv_ESI_C_Percentage     number(7,2) := 0;
lv_cnt int;
lv_FNYearStartdate varchar2(10) :='';
lv_CalenderYearStartdate varchar2(10) :='';
begin
    
    if substr(P_FNSTDT,1,2) <> '01' then
       lv_Prev_fn_stdt := TO_DATE('01/'||SUBSTR(P_FNSTDT,-7),'DD/MM/YYYY');
       lv_Prev_fn_endt := TO_DATE('15/'||SUBSTR(P_FNSTDT,-7),'DD/MM/YYYY');
       lv_Mnth_stdt:= TO_DATE('01/'||SUBSTR(P_FNSTDT,-7),'DD/MM/YYYY');
    else
        lv_Mnth_stdt := to_date(P_FNSTDT,'DD/MM/YYYY');  
    end if;
    SELECT '01/04/'||SUBSTR(YEARCODE,1,4)
      INTO lv_FNYearStartdate
      FROM WPSWAGEDPERIODDECLARATION
     WHERE FORTNIGHTSTARTDATE=TO_DATE(P_FNSTDT,'DD/MM/YYYY')
       AND FORTNIGHTENDDATE=TO_DATE(P_FNENDT,'DD/MM/YYYY');
       
    lv_CalenderYearStartdate :='01/01/'||substr(P_FNSTDT,7,4)  ; 
    
   select SUBSTR( ( 'WPS1_'||SYS_CONTEXT('USERENV', 'SESSIONID')) ,1,30) into lv_updtable  from dual ;
    
    
    lv_cnt :=0;
    SELECT COUNT(*)
    INTO 
    lv_cnt
    FROM USER_TABLES
    WHERE TABLE_NAME =lv_updtable;
    
    IF lv_cnt>0 THEN
        EXECUTE IMMEDIATE 'DROP TABLE '|| lv_updtable;
    END IF;
    
    
      lv_sql := ' CREATE TABLE '||lv_updtable||' AS  '||CHR(10)
           ||' SELECT WORKERSERIAL,SUM(NVL(YTD_PF_E,0)) YTD_PF_E, SUM(NVL(YTD_PF_C,0)) YTD_PF_C, SUM(NVL(YTD_FPF,0)) YTD_FPF,'||chr(10)
           ||' SUM(NVL(MNTH_PF_GROSS,0)) MNTH_PF_GROSS, SUM(NVL(MNTH_ESI_GROSS,0)) MNTH_ESI_GROSS,  SUM(NVL(MNTH_PTAX_GROSS,0)) MNTH_PTAX_GROSS,'||CHR(10)
           ||' SUM(NVL(MNTH_BONUS_GROSS,0)) MNTH_BONUS_GROSS, SUM(NVL(GR_BONOUS_TODATE,0)) GR_BONOUS_TODATE,     '||chr(10)
           ||' SUM(NVL(CALENDARWORKINGDAYS,0)) CALENDARWORKINGDAYS, SUM(NVL(FEWORKINGDAYS,0)) FEWORKINGDAYS    '||chr(10)
           ||' FROM(     '||chr(10)
           ||'        SELECT WORKERSERIAL,SUM(NVL(PF_CONT,0)) YTD_PF_E, SUM(NVL(PF_COM,0)) YTD_PF_C, SUM(NVL(FPF,0)) YTD_FPF, '||chr(10)
           ||'               0 MNTH_PF_GROSS, 0 MNTH_ESI_GROSS, 0 MNTH_PTAX_GROSS, 0 MNTH_BONUS_GROSS, '||CHR(10) 
           ||'               SUM(NVL(PF_GROSS,0)) GR_BONOUS_TODATE,     '||chr(10)
           ||'               0 CALENDARWORKINGDAYS, 0 FEWORKINGDAYS     '||chr(10)
           ||'        FROM WPSWAGESDETAILS_MV    '||chr(10) --- YTD AND bONUS DATA FROM FINANCIAL YEAR STARTING (WAGES TABLE B4 CURRENT FORTNIGHT) 
           ||'        WHERE FORTNIGHTSTARTDATE >= TO_DATE('''||lv_FNYearStartdate||''',''DD/MM/YYYY'')     '||chr(10)
           ||'          AND FORTNIGHTSTARTDATE < TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||chr(10)
           ||'        GROUP BY WORKERSERIAL    '||chr(10)
           ||'        UNION ALL  '||CHR(10)
           ||'        SELECT WORKERSERIAL,SUM(NVL(PF_E,0)) YTD_PF_E, SUM(NVL(PF_C,0)) YTD_PF_C, SUM(NVL(FPF,0)) YTD_FPF, '||chr(10)
           ||'               0 MNTH_PF_GROSS, 0 MNTH_ESI_GROSS, 0 MNTH_PTAX_GROSS, 0 MNTH_BONUS_GROSS, '||CHR(10)
           ||'               SUM(NVL(PF_GROSS,0)) GR_BONOUS_TODATE,     '||chr(10)
           ||'               0 CALENDARWORKINGDAYS, 0 FEWORKINGDAYS     '||chr(10)
           ||'        FROM WPSSTLWAGESDETAILS    '||chr(10) --- YTD AND bONUS DATA FROM FINANCIAL YEAR STARTING (STL TABLE UPTO CURRENT FORTNIGHT)
           ||'        WHERE PAYMENTDATE >= TO_DATE('''||lv_FNYearStartdate||''',''DD/MM/YYYY'')     '||chr(10)
           ||'          AND PAYMENTDATE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')       '||chr(10)
           ||'        GROUP BY WORKERSERIAL    '||chr(10)
           ||'        UNION ALL  '||CHR(10)
           ||'        SELECT WORKERSERIAL,0  YTD_PF_E, 0 YTD_PF_C, 0 YTD_FPF, '||chr(10)
           ||'               sum(nvl(PF_GROSS,0)) MNTH_PF_GROSS, sum(nvl(ESI_GROSS,0)) MNTH_ESI_GROSS, sum(nvl(GROSS_PTAX,0))MNTH_PTAX_GROSS, sum(nvl(PF_GROSS,0)) MNTH_BONUS_GROSS,'||CHR(10) 
           ||'               0 GR_BONOUS_TODATE,     '||chr(10)
           ||'               0 CALENDARWORKINGDAYS, 0 FEWORKINGDAYS     '||chr(10)
           ||'        FROM WPSSTLWAGESDETAILS    '||chr(10)  --- MONTHLY GROSS DATA FROM FINANCIAL YEAR STARTING (STL TABLE UPTO CURRENT FORTNIGHT)
           ||'        WHERE PAYMENTDATE >= '''||lv_Mnth_stdt||'''     '||chr(10)
           ||'          AND PAYMENTDATE <= TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')       '||chr(10)
           ||'        GROUP BY WORKERSERIAL    '||chr(10)
           ||'        UNION ALL           '||chr(10)
           ||'        SELECT WORKERSERIAL,SUM(NVL(PF_CONT,0)) YTD_PF_E, SUM(NVL(PF_COM,0)) YTD_PF_C, SUM(NVL(FPF,0)) YTD_FPF,  '||chr(10)
           ||'               SUM(NVL(PF_GROSS,0)) MNTH_PF_GROSS, SUM(NVL(ESI_GROSS,0)) MNTH_ESI_GROSS, SUM(NVL(GROSS_PTAX,0)) MNTH_PTAX_GROSS, SUM(nvl(PF_GROSS,0)) MNTH_BONUS_GROSS,'||CHR(10)
------- CHNAGES ON 21.08.20 PF ADJUSTMENT HOURS INCLUDE FOR YTD DAYS ADJUSTMENT  BY AMALESH ----------
--           ||'               SUM(NVL(PF_GROSS,0)) GR_FOR_BONUS,SUM(NVL(ATN_DAYS,0)) CALENDARWORKINGDAYS, SUM(NVL(ATN_DAYS,0)) FEWORKINGDAYS   '||chr(10)
           ||'               SUM(NVL(PF_GROSS,0)) GR_FOR_BONUS,SUM((NVL(ATN_DAYS,0)+ROUND(NVL(PFADJHOURS,0)/8,1))) CALENDARWORKINGDAYS, SUM(NVL(ATN_DAYS,0)) FEWORKINGDAYS   '||chr(10)

           ||'          FROM '||P_TABLENAME||'    '||chr(10)  --- CURRENT FORTNIGHT DATA   
           ||'         WHERE FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')    '||chr(10)
           ||'           AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')      '||chr(10)
           ||'           GROUP BY WORKERSERIAL    '||chr(10)
           ||'        UNION ALL    '||chr(10)
           ||'        SELECT WORKERSERIAL, 0 YTD_PF_E, 0 YTD_PF_C, 0 YTD_FPF,    '||chr(10)
           ||'               0 MNTH_PF_GROSS, 0 MNTH_ESI_GROSS, 0 MNTH_PTAX_GROSS, 0 MNTH_BONUS_GROSS, '||CHR(10)
------- CHNAGES ON 21.08.20 PF ADJUSTMENT HOURS INCLUDE FOR YTD DAYS ADJUSTMENT  BY AMALESH ----------           
--           ||'              0 GR_FOR_BONUS,SUM(NVL(ATN_DAYS,0)) CALENDARWORKINGDAYS, 0 FEWORKINGDAYS    '||chr(10)
           ||'              0 GR_FOR_BONUS,SUM((NVL(ATN_DAYS,0)+ROUND(NVL(PFADJHOURS,0)/8,0))) CALENDARWORKINGDAYS, 0 FEWORKINGDAYS    '||chr(10)
           ||'          FROM WPSWAGESDETAILS_MV    '||chr(10) --- YTD DAYS FROM JANUARY TO B4 FORTNIGHTSTART 
           ||'         WHERE FORTNIGHTSTARTDATE>=TO_DATE('''||lv_CalenderYearStartdate||''',''DD/MM/YYYY'')    '||chr(10)
           ||'           AND FORTNIGHTENDDATE < TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')      '||chr(10)
           ||'           GROUP BY WORKERSERIAL    '||chr(10);
      IF SUBSTR(P_FNSTDT,1,2) = '16' THEN       --- ony ptax gross cosider monthly gross  add on 02.08.2020
        lv_sql := lv_sql ||'        UNION ALL    '||chr(10)
           ||'        SELECT WORKERSERIAL,0 YTD_PF_E, 0 YTD_PF_C, 0 YTD_FPF,  '||chr(10)
           ||'               0 MNTH_PF_GROSS, 0 MNTH_ESI_GROSS, SUM(NVL(GROSS_PTAX,0)) MNTH_PTAX_GROSS, 0 MNTH_BONUS_GROSS,'||CHR(10)
           ||'               0 GR_FOR_BONUS, 0  CALENDARWORKINGDAYS, 0 FEWORKINGDAYS   '||chr(10)
           ||'          FROM WPSWAGESDETAILS_MV   '||chr(10)
           ||'         WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
           ||'           AND YEARCODE = '''||P_YEARCODE||''' '||CHR(10) 
           ||'           AND FORTNIGHTSTARTDATE = '''||lv_Prev_fn_stdt||'''    '||chr(10)
           ||'           AND FORTNIGHTENDDATE = '''||lv_Prev_fn_endt||'''      '||chr(10)
           ||'           GROUP BY WORKERSERIAL    '||chr(10);
           
      END IF;             
      lv_sql := lv_sql ||'       ) GROUP BY WORKERSERIAL      '||chr(10);
    --dbms_output.put_line(lv_sql );       
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    EXECUTE IMMEDIATE lv_sql  ;
    COMMIT;

--    
    lv_sql := 'UPDATE '||P_TABLENAME||' A SET (GR_BONUS_TODATE, CALENDARWORKINGDAYS, FEWORKINGDAYS, YTD_PF_E, YTD_PF_C, YTD_FPF, MNTH_PF_GROSS, MNTH_PTAX_GROSS, MNTH_ESI_GROSS, MNTH_BONUS_GROSS)  '||CHR(10)  
        ||' = ( SELECT GR_BONOUS_TODATE,CALENDARWORKINGDAYS, FEWORKINGDAYS, YTD_PF_E, YTD_PF_C, YTD_FPF, MNTH_PF_GROSS, MNTH_PTAX_GROSS, MNTH_ESI_GROSS, MNTH_BONUS_GROSS FROM '||lv_updtable||' B '||CHR(10) 
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.YEARCODE = '''||P_YEARCODE||'''   '||CHR(10) 
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')               '||CHR(10)
        ||' AND A.WORKERSERIAL = B.WORKERSERIAL )'||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||' AND A.FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')       '||CHR(10)
        ||' AND A.FORTNIGHTENDDATE = TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') '||CHR(10); 
   lv_remarks := NVL(lv_remarks,'XX ') ||' UPDATE CUMPF_CONT, GR_BONOUS_TODATE,CALENDARWORKINGDAYS';
  --dbms_output.put_line(lv_sql );   
   INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
   VALUES (P_COMPCODE, P_DIVCODE,lv_ProcName,'',sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
    EXECUTE IMMEDIATE lv_sql;
    COMMIT;
       BEGIN
        execute immediate 'DROP TABLE '||lv_updtable ;
       EXCEPTION
        WHEN OTHERS THEN
          lv_sqlerrm := sqlerrm;
          raise_application_error(-20101, lv_sqlerrm||'ERROR WHILE UPDATING '||P_TABLENAME||' FROM TABLE '||lv_updtable);
       END ;
   
   EXCEPTION
    WHEN OTHERS THEN
    lv_sqlerrm := sqlerrm;
    INSERT INTO WPS_ERROR_LOG ( COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    VALUES (P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,sysdate,lv_sql,'', lv_fn_stdt, lv_fn_endt, lv_remarks);
     COMMIT;                             
                          
end;
/


DROP PROCEDURE NJML_PROC_WPS_VB_BEAM_PRESS;

CREATE OR REPLACE PROCEDURE NJML_PROC_WPS_VB_BEAM_PRESS( P_COMPCODE VARCHAR2, P_DIVCODE VARCHAR2, P_YEARCODE VARCHAR2,P_FN_STDT VARCHAR2, P_FN_ENDT VARCHAR2, P_1ST_WK_ENDT VARCHAR2 DEFAULT NULL, 
                                                         P_TABLENAME varchar2 DEFAULT 'WPSVBDETAILS', P_PRODUCTIONTYPE VARCHAR2 DEFAULT NULL, 
                                                         P_DEPARTMENT VARCHAR2 DEFAULT NULL, P_SECTION VARCHAR2 DEFAULT NULL, 
                                                         P_OCCUPATION VARCHAR2 DEFAULT NULL, P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
AS
----- THIS PROCEDURE WRITTEN BY DEBASIS PAHARI ON 16.04.2020 ----
--P= shift wise and quality wise Production of the m/c.
--R = Quality Rate 
--A = Production amount of the m/c = P * R.


lv_Sql      varchar2(20000) := '';
lv_ProcName varchar2(30) := 'NJML_PROC_WPS_VB_BEAM_PRESS';
lv_ParValue varchar2(200) := '';
lv_Remarks  varchar2(200) := '';
lv_FN_STDT  date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_FN_ENDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY');
lv_SqlErr   varchar2(200) := '';
lv_SectionCode   varchar2(10) := '';
lv_DeptCode      varchar2(10) := '';
lv_OcpCode       varchar2(50) := '';   
lv_TempTable    varchar2(50) := '';  
lv_TempTable_Hours    varchar2(50) := ''; 
lv_TempTable_Hours_Beam varchar2(50) := ''; 
lv_ProductionType VARCHAR2(10) := '';
lv_TempTableAttn  varchar2(30) := '';
lv_TempTableProd    varchar2(30) := '';   
lv_OccupationType    varchar2(50) := '';
lv_Addl_RT  number(11,5) :=0; 

lv_OcpCode_2nd    varchar2(50) := '';
lv_OccupationType_2nd   varchar2(50) := '';

Begin


       
    IF P_PRODUCTIONTYPE IS NOT NULL THEN
        lv_ProductionType := P_PRODUCTIONTYPE;   
        BEGIN
            select SECTIONCODE,OCCUPATIONCODE into lv_SectionCode,lv_OcpCode 
            FROM WPSPRODUCTIONTYPEMAST 
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              --AND SECTIONCODE=P_SECTION
              AND PRODUCTIONTYPECODE = P_PRODUCTIONTYPE;
              
            SELECT OCCUPATIONTYPE,nvl(ADDL_RATE,0),VB_DEPENDENT_DEPTOCCPCODE INTO lv_OccupationType,lv_Addl_RT,lv_OcpCode_2nd FROM VW_WPSOCCUPATIONMAST 
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              AND SECTIONCODE=lv_SectionCode
              AND OCCUPATIONCODE=lv_OcpCode;
              
              
              SELECT OCCUPATIONTYPE INTO lv_OccupationType_2nd FROM VW_WPSOCCUPATIONMAST 
             WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
              AND DEPARTMENTCODE=P_DEPARTMENT
              AND SECTIONCODE=lv_SectionCode
              AND OCCUPATIONCODE=lv_OcpCode_2nd;
            
        EXCEPTION
            WHEN OTHERS THEN lv_SectionCode := ''; 
            lv_Addl_RT :=1;     
        END;   
    END IF;
    
    

    IF P_SECTION IS NOT NULL THEN
        BEGIN
            lv_SectionCode := P_SECTION;
            lv_ProductionType :=P_PRODUCTIONTYPE;
        EXCEPTION
            WHEN OTHERS THEN lv_ProductionType := 'SWT';    
        END;        
    END IF;
    

    
    
    lv_TempTable :='WPS_PREPROCESS_TEMP_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours :='WPS_PREPROCESS_TMP_HS_'||lv_SectionCode||lv_ProductionType;
    
    lv_TempTable_Hours_Beam :='WPS_PROCESS_TMP_B_HS_'||lv_SectionCode||lv_ProductionType;

    
    BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
     BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
      BEGIN
        lv_Sql := 'DROP TABLE '||lv_TempTable_Hours_Beam;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        when others then null;
    END;
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable||' AS '||CHR(10)
        ||'SELECT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,PRODUCTIONTYPE,SHIFTCODE,MACHINECODE,SUM(NVL(PRODUCTION,0))PRODUCTION,SUM(NVL(VBAMOUNT,0))VBAMOUNT ,0 AS ADDITIONAL_AMT,0 AS ADDITIONAL_RATE,0 AS REMAINING_AMT,0 AS TOTALHOURS,0 AS DISTRIBUTION_FACTOR,0 ATTENDANCEHOURS FROM('||CHR(10)
        ||'SELECT A.DEPARTMENTCODE,SECTIONCODE AS SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, '||CHR(10)
        ||' A.QUALITYCODE, SUM(NVL(TOTALPRODUCTION,0)) PRODUCTION,'||CHR(10)
        ||' ROUND(ROUND(SUM(NVL(TOTALPRODUCTION,0))/NVL(B.UNITQUANTITY,1),2)*B.QUALITYRATE* NVL(B.PERCENTAGEOFRATE,100)*0.01,2) VBAMOUNT '||CHR(10)
        ||' FROM WPSPRODUCTIONSUMMARY A'||CHR(10)
        ||' ,    '||CHR(10)
        ||' (  '||CHR(10)
        ||'  SELECT X.PRODUCTIONTYPE, X.QUALITYCODE, CASE WHEN NVL(X.UNITQUANTITY,1) = 0 THEN 1 ELSE NVL(X.UNITQUANTITY,1) END UNITQUANTITY,  '||CHR(10)
        ||'     CASE WHEN NVL(X.PERCENTAGEOFRATE,0)=0 THEN 100 ELSE X.PERCENTAGEOFRATE END PERCENTAGEOFRATE, X.QUALITYRATE  '||CHR(10)
        ||'     FROM  WPSQUALITYRATE_ON_REEDSPACE X,  '||CHR(10)
        ||'     (  '||CHR(10)
        ||'         SELECT PRODUCTIONTYPE, QUALITYCODE, MAX(EFFECTIVEDATE) EFFECTIVEDATE  '||CHR(10)
        ||'         FROM WPSQUALITYRATE_ON_REEDSPACE  '||CHR(10)
        ||'         WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'           AND PRODUCTIONTYPE = '''||lv_ProductionType||'''  '||CHR(10)
        ||'         GROUP BY PRODUCTIONTYPE, QUALITYCODE  '||CHR(10)
        ||'     ) Y  '||CHR(10)
        ||'     WHERE X.COMPANYCODE = '''||P_COMPCODE||''' AND X.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'       AND X.PRODUCTIONTYPE = Y.PRODUCTIONTYPE   '||CHR(10)
        ||'       AND X.QUALITYCODE = Y.QUALITYCODE AND X.EFFECTIVEDATE = Y.EFFECTIVEDATE  '||CHR(10)
        ||' ) B  '||CHR(10)
        ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
        ||'   AND A.YEARCODE = '''||P_YEARCODE||''' '||CHR(10)
        ||'   AND A.STARTDATE >= '''||lv_FN_STDT||''' AND A.STARTDATE <= '''||lv_FN_ENDT||'''   '||CHR(10)
        ||'   AND A.TRANSACTIONTYPE = ''GENERAL'''||CHR(10)
        ||'   AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||chr(10);
        if lv_SectionCode ='0801xxx' or lv_SectionCode = '0805xxx' then
        lv_Sql := lv_Sql ||'   AND A.SECTIONCODE IN (''0801xxx'',''0805xxx'') '||CHR(10);
        ELSE
        lv_Sql := lv_Sql ||'   AND A.SECTIONCODE = '''||lv_Sectioncode||''' '||chr(10);
        end if; 
        lv_Sql := lv_Sql ||'   AND A.PRODUCTIONTYPE = B.PRODUCTIONTYPE   '||CHR(10)
        ||'   AND A.QUALITYCODE = B.QUALITYCODE    '||CHR(10)
        ||'   GROUP BY A.DEPARTMENTCODE,A.SECTIONCODE,A.OCCUPATIONCODE, A.PRODUCTIONTYPE, A.SHIFTCODE, A.MACHINECODE, A.QUALITYCODE,B.QUALITYRATE, B.UNITQUANTITY, B.PERCENTAGEOFRATE '||CHR(10)
        ||'      )GROUP BY DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,PRODUCTIONTYPE,SHIFTCODE,MACHINECODE'||CHR(10);
--    DBMS_OUTPUT.PUT_LINE(lv_Sql);
    
    lv_Remarks := '1 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) TOTALHOURS'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      --||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE, B.SHIFTCODE, B.MACHINECODE1--,B.OCCUPATIONCODE'||CHR(10);

    
    lv_Remarks := '2 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
        lv_Sql := 'CREATE TABLE '||lv_TempTable_Hours_Beam||' AS '||CHR(10)
      ||'SELECT B.DEPARTMENTCODE,B.SECTIONCODE AS SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1 MACHINECODE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) TOTALHOURS,NVL(O.ADDL_RATE,0)ADDL_RATE,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) * NVL(O.ADDL_RATE,0) ADDL_AMOUNT,'||CHR(10)
      ||'SUM(NVL(B.ATTENDANCEHOURS,0)) ATTENDANCEHOURS'||CHR(10)
      ||'FROM  WPSATTENDANCEDAYWISE B , VW_WPSOCCUPATIONMAST O'||CHR(10)
      ||'WHERE B.COMPANYCODE = '''||P_COMPCODE||''' AND B.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
      ||' AND B.FORTNIGHTSTARTDATE >= '''||lv_FN_STDT||''' '||CHR(10)
      ||'  AND B.FORTNIGHTENDDATE <=  '''||lv_FN_ENDT||'''  '||CHR(10)
      ||' AND B.DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
      ||' AND B.SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
      ||' AND B.DEPARTMENTCODE=O.DEPARTMENTCODE'||CHR(10)
      ||' AND B.SECTIONCODE=O.SECTIONCODE'||CHR(10)
      ||' AND B.OCCUPATIONCODE=O.OCCUPATIONCODE'||CHR(10)
      ||' AND B.COMPANYCODE=O.COMPANYCODE'||CHR(10)
      ||' AND B.DIVISIONCODE=O.DIVISIONCODE'||CHR(10)
      ||' AND O.OCCUPATIONTYPE='''||lv_OccupationType||''''||CHR(10)
      ||' AND O.WORKERTYPECODE=''P'''||CHR(10)
      ||' AND (NVL(B.ATTENDANCEHOURS,0)+NVL(B.OVERTIMEHOURS,0)/*+NVL(B.NIGHTALLOWANCEHOURS,0)+NVL(B.OT_NSHRS,0)*/) > 0 '||CHR(10)
      ||' GROUP BY B.DEPARTMENTCODE,B.SECTIONCODE,B.OCCUPATIONCODE, B.SHIFTCODE, B.MACHINECODE1,O.ADDL_RATE'||CHR(10);
    
    lv_Remarks := '3 TEMP TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);

--DBMS_OUTPUT.PUT_LINE(lv_Sql);    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET (ADDITIONAL_AMT,ATTENDANCEHOURS,ADDITIONAL_RATE)='||CHR(10)
             ||'    (SELECT ADDL_AMOUNT,ATTENDANCEHOURS,ADDL_RATE FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT,ATTENDANCEHOURS,ADDL_RATE  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '4 UPDATE PRODUCTION ACT_REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    --COMMIT;
    
    lv_Sql := 'UPDATE '||lv_TempTable||' A SET REMAINING_AMT=A.VBAMOUNT -'||CHR(10)
             ||'    (SELECT ADDL_AMOUNT FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,SHIFTCODE,MACHINECODE,ADDL_AMOUNT  FROM '||lv_TempTable_Hours_Beam||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             ||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '5 UPDATE PRODUCTION REMAINING_AMT TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
     lv_Sql := 'UPDATE '||lv_TempTable||' A SET TOTALHOURS='||CHR(10)
             ||'    (SELECT TOTALHOURS FROM('||CHR(10)
             ||'    SELECT DISTINCT DEPARTMENTCODE,SECTIONCODE,/*OCCUPATIONCODE,*/SHIFTCODE,MACHINECODE,TOTALHOURS  FROM '||lv_TempTable_Hours||''||CHR(10)
             ||'     )X WHERE A.DEPARTMENTCODE=X.DEPARTMENTCODE'||CHR(10)
             ||'      AND A.SECTIONCODE=X.SECTIONCODE'||CHR(10)
             ||'      AND A.SHIFTCODE=X.SHIFTCODE'||CHR(10)
             ||'      AND A.MACHINECODE=X.MACHINECODE'||CHR(10)
             --||'      AND A.OCCUPATIONCODE=X.OCCUPATIONCODE'||CHR(10)
             ||'    )'||CHR(10);
    lv_Remarks := '6 UPDATE PRODUCTION TOTALHOURS TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
    
     lv_Sql := 'UPDATE '||lv_TempTable||' SET DISTRIBUTION_FACTOR= '||CHR(10)
             ||'CASE WHEN NVL(TOTALHOURS,0)>0 AND NVL(REMAINING_AMT,0)>0  THEN  ROUND(REMAINING_AMT/TOTALHOURS,6) ELSE 0 END'||CHR(10);
             
    lv_Remarks := '7 UPDATE PRODUCTION DISTRIBUTION_FACTOR TABLE CREATION, SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    COMMIT;
    
    lv_Remarks := '8 DELETE FROM WPSLINEHOURLYRATE FOR 1ST BEEMER & PRESSMEN  MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND OCCUPATIONTYPE = '''||lv_OccupationType||''' '||chr(10)
             ||'AND DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
             ||'AND SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
             ||'AND OCCUPATIONCODE = '''||lv_OcpCode||''' '||CHR(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 

    EXECUTE IMMEDIATE lv_Sql;
             
    COMMIT; 
    
        lv_Remarks := '9 DELETE FROM WPSLINEHOURLYRATE FOR 2ND BEEMER & PRESSMEN  MACHINE WISE PRODUCTION TYPE ' ||  P_PRODUCTIONTYPE;
    
  --  DBMS_OUTPUT.PUT_LINE('1_0'); 
    lv_Sql := ' DELETE FROM WPSLINEHOURLYRATE '||chr(10)  
             ||'WHERE COMPANYCODE = ''' ||P_COMPCODE|| ''' '||chr(10)  
             ||'AND DIVISIONCODE = ''' ||P_DIVCODE|| ''' '||chr(10)  
             ||'AND PRODUCTIONTYPE = ''' ||P_PRODUCTIONTYPE|| ''' '||chr(10)  
             ||'AND FORTNIGHTSTARTDATE = ''' ||lv_FN_STDT|| ''' '||chr(10)  
             ||'AND FORTNIGHTENDDATE = ''' ||lv_FN_ENDT|| ''' '||chr(10)  
             ||'AND OCCUPATIONTYPE = '''||lv_OccupationType_2nd||''' '||chr(10)
             ||'AND DEPARTMENTCODE = '''||P_DEPARTMENT||''''||CHR(10)
             ||'AND SECTIONCODE = '''||lv_Sectioncode||''' '||CHR(10)
             ||'AND OCCUPATIONCODE = '''||lv_OcpCode_2nd||''' '||CHR(10)
             ||'AND TRANTYPE = ''VB'' ';  
    
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks); 
    COMMIT; 
    EXECUTE IMMEDIATE lv_Sql;      
    COMMIT; 
    
     lv_Sql := ' INSERT INTO WPSLINEHOURLYRATE ( '||CHR(10)
            ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, SHIFTCODE, '||CHR(10) 
            ||' PRODUCTIONTYPE,DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, LINETAG, LINENO, HELPERNO, SARDARNO, RELIVERNO, MACHINECODE, LOOMCODE, '||CHR(10) 
            ||' QUANTITY, PIECERATEHOURS, PIECERATEBASIC, VBHOURLYRATE,  '||CHR(10)
            ||' TOTALHOURS, TOTALBASIC, OCCUPATIONTYPE, TOTALPRODUCTION, TRANTYPE,  '||CHR(10) 
            ||' LASTMODIFIED, USERNAME, SYSROWID,ADDITIONAL_AMT)  '||CHR(10)

            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' '''||lv_ProductionType||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode||''' OCCUPATIONCODE, '''' LINETAG, NULL LINENO, NULL HELPERNO, NULL SARDARNO, NULL RELIVERNO, A.MACHINECODE, NULL LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, A.TOTALHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC,SUM(A.DISTRIBUTION_FACTOR)+'||lv_Addl_RT||' VBHOURLYRATE,  '||CHR(10)
            ||' A.TOTALHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID,A.ADDITIONAL_AMT '||CHR(10)
            ||' FROM '||lv_TempTable||'  A '||CHR(10)
            ||' GROUP BY A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE,A.MACHINECODE,A.TOTALHOURS,A.ADDITIONAL_AMT'||CHR(10)
            ||' UNION ALL'||CHR(10)
            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORNIGHTENDDATE, A.SHIFTCODE,  '||CHR(10) 
            ||' '''||lv_ProductionType||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, '''||lv_OcpCode_2nd||''' OCCUPATIONCODE, '''' LINETAG, NULL LINENO, NULL HELPERNO, NULL SARDARNO, NULL RELIVERNO, A.MACHINECODE, NULL LOOMCODE,  '||CHR(10)
            ||' 0 QUALTITY, A.TOTALHOURS PIECERATEHOURS, SUM(A.VBAMOUNT) PIECERATEBASIC,SUM(A.DISTRIBUTION_FACTOR) VBHOURLYRATE,  '||CHR(10)
            ||' A.TOTALHOURS TOTALHOURS, SUM(A.VBAMOUNT) TOTALBASIC, '''||lv_OccupationType_2nd||''' OCCUPATIONTYPE, 0 TOTALPRODUCTION, ''VB'' TRANTYPE,  '||CHR(10)
            ||' SYSDATE LASTMODIFIED, ''SWT'' USERNAME, SYS_GUID()  SYSROWID,A.ADDITIONAL_AMT '||CHR(10)
            ||' FROM '||lv_TempTable||'  A '||CHR(10)
            ||' GROUP BY A.SHIFTCODE,A.DEPARTMENTCODE, A.SECTIONCODE,A.MACHINECODE,A.TOTALHOURS,A.ADDITIONAL_AMT'||CHR(10);

    lv_Remarks := '10 INSERT WPSLINEHOURLYRATE  TABLE  SECTION - '||lv_SectionCode||', PRODUCTIONTYPE='||lv_ProductionType||', FNEDT = '||P_FN_ENDT;   
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    lv_Remarks := '11 DELETE PRODUCTIONTYPE='||P_PRODUCTIONTYPE||', FNEDT = '||P_FN_ENDT;
    lv_Sql := ' DELETE FROM WPSVBDETAILS '||chr(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'   AND FORTNIGHTSTARTDATE = '''||lv_FN_STDT||''' '||chr(10)
            ||'   AND FORTNIGHTENDDATE = '''||lv_FN_ENDT||''' '||chr(10)
            ||'   AND PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    
     lv_Remarks := '12 INESET IN VBDETIAL FOR 1STBEAMER & 1STPRESSMAN  BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';


      lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)
         ||' MACHINECODE, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL, '''||lv_OcpCode||''' OCCUPATIONCODE, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,  '||CHR(10)
         ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) +ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) '||CHR(10)
         ||'   + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE AND  A.OCCUPATIONCODE = R.OCCUPATIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.OCCUPATIONTYPE = '''||lv_OccupationType||'''   '||CHR(10)
         ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1  '||CHR(10);
            
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    
         lv_Remarks := '13 INESET IN VBDETIAL FOR 2ND BEAMER & 2ND PRESSMAN  BASED ON SHIFT,DEPT, SECTION, OCP, DETPSERIAL';


      lv_Sql := 'INSERT INTO WPSVBDETAILS ( '||chr(10)
         ||' COMPANYCODE, DIVISIONCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, '||chr(10) 
         ||' PRODUCTIONTYPE, DEPARTMENTCODE, SECTIONCODE,SHIFTCODE, DEPTSERIAL, OCCUPATIONCODE, OCCUPATIONTYPE,WORKERSERIAL, TOKENNO, '||chr(10)
         ||' MACHINECODE, PRODUCTIONHOURS, ATTENDANCEHOURS, NS_HOURS, OVERTIMEHOURS, OTNS_HOURS, '||chr(10)
         ||' VBRATE, VBAMOUNT, VBAMOUNT_FBK, VBAMOUNT_OT, VBAMOUNT_NS, VBAMOUNT_OTNS, VBAMOUNT_HOLIDAY, TOTAL_VBAMOUNT, '||chr(10)
         ||' USERNAME, LASTMODIFIED, SYSROWID ) '||chr(10)
         ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_FN_STDT||''' FORTNIGHTSTARTDATE, '''||lv_FN_ENDT||''' FORTNIGHTENDDATE, '||CHR(10) 
         ||' '''||P_PRODUCTIONTYPE||''' PRODUCTIONTYPE, A.DEPARTMENTCODE, A.SECTIONCODE, A.SHIFTCODE, A.DEPTSERIAL, '''||lv_OcpCode_2nd||''' OCCUPATIONCODE, R.OCCUPATIONTYPE, A.WORKERSERIAL, A.TOKENNO,  '||CHR(10)
         ||'  A.MACHINECODE1, SUM(NVL(A.ATTENDANCEHOURS,0)+NVL(A.NIGHTALLOWANCEHOURS,0) + NVL(A.OVERTIMEHOURS,0)+NVL(A.OT_NSHRS,0)) PRODUCTIONHOURS,  '||CHR(10)
         ||'  SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NS_HOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OTNS_HOURS,  '||CHR(10)
         ||'  NVL(R.VBHOURLYRATE,0)VBRATE, ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) VBAMOUNT, 0 VBAMOUNT_FBK,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OT,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_NS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_OTNS,  '||CHR(10)
         ||'  ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2) VBAMOUNT_HOLIDAY,  '||CHR(10)
         ||'  (ROUND(SUM(NVL(A.ATTENDANCEHOURS,0)) * NVL(R.VBHOURLYRATE,0),2) +ROUND(SUM(NVL(A.OVERTIMEHOURS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.NIGHTALLOWANCEHOURS,0))*NVL(R.VBHOURLYRATE,0),2) '||CHR(10)
         ||'   + ROUND(SUM(NVL(A.OT_NSHRS,0))*NVL(R.VBHOURLYRATE,0),2)+ROUND(SUM(NVL(A.HOLIDAYHOURS,0))*NVL(R.VBHOURLYRATE,0),2)) TOTAL_VBAMOUNT,  '||CHR(10)
         ||' ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID  '||CHR(10)
         ||' FROM WPSATTENDANCEDAYWISE  A, WPSLINEHOURLYRATE R  '||CHR(10)
         ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = ''' ||P_DIVCODE|| '''  '||CHR(10)
         ||'   AND R.FORTNIGHTSTARTDATE  = '''||lv_FN_STDT||'''  '||CHR(10)
         ||'   AND R.FORTNIGHTENDDATE  = '''||lv_FN_ENDT||'''  '||CHR(10)
         ||'   AND A.DATEOFATTENDANCE BETWEEN   R.FORTNIGHTSTARTDATE AND R.FORTNIGHTENDDATE '||CHR(10) 
         ||'   AND A.COMPANYCODE =  R.COMPANYCODE  AND A.DIVISIONCODE =  R.DIVISIONCODE  '||CHR(10)
         ||'   AND A.DEPARTMENTCODE = R.DEPARTMENTCODE  AND A.SECTIONCODE = R.SECTIONCODE AND  A.OCCUPATIONCODE = R.OCCUPATIONCODE   '||CHR(10)
         ||'   AND A.SHIFTCODE = R.SHIFTCODE AND A.MACHINECODE1 = R.MACHINECODE    '||CHR(10)
         ||'   AND R.PRODUCTIONTYPE = '''||P_PRODUCTIONTYPE||''' '||CHR(10)
         ||'   AND R.OCCUPATIONTYPE = '''||lv_OccupationType_2nd||'''   '||CHR(10)
         ||'   AND (NVL(A.ATTENDANCEHOURS,0)+NVL(A.OVERTIMEHOURS,0)) > 0  '||CHR(10)
         ||' GROUP BY  A.DEPARTMENTCODE, R.PRODUCTIONTYPE, A.SECTIONCODE,A.OCCUPATIONCODE, A.SHIFTCODE, A.DEPTSERIAL,R.OCCUPATIONTYPE,R.VBHOURLYRATE, '||CHR(10) 
         ||' A.TOKENNO, A.WORKERSERIAL, A.MACHINECODE1  '||CHR(10);
            
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,'',SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    ------ DELETE NON ENTITLE (PRODUCTUION BASIC) TOKENNO
   PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE, P_DIVCODE,P_YEARCODE, P_FN_STDT, P_FN_ENDT, 'WPSVBDETAILS', P_PRODUCTIONTYPE,P_DEPARTMENT,NULL);
     -- PROC_WPS_NONENTILE_VB_DELETE ( P_COMPCODE, P_DIVCODE, P_YEARCODE, P_FN_STDT, P_FN_ENDT, NULL, 'WPSVBDETAILS', P_PRODUCTIONTYPE,P_DEPARTMENT,NULL);


exception    
    when others then
        lv_SqlErr := sqlerrm;
    INSERT INTO WPS_ERROR_LOG (COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) 
    values ( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_SqlErr,SYSDATE, lv_Sql,lv_ParValue, lv_FN_STDT, lv_FN_ENDT, lv_Remarks);
    commit; 
End;
/


DROP PROCEDURE PRCWPS_IMP_PRODUCTION_MANUAL;

CREATE OR REPLACE PROCEDURE PRCWPS_IMP_PRODUCTION_MANUAL (P_COMPCODE VARCHAR2,
                                                       P_DIVCODE VARCHAR2,
                                                       P_DATEOFPRODUCTION VARCHAR2,
                                                       P_DEPARTMENT VARCHAR2 DEFAULT NULL,  
                                                       P_VALIDORUPDATE CHAR DEFAULT NULL,
                                                       P_USER          VARCHAR2 DEFAULT 'SWT', 
                                                       P_UNITCODE VARCHAR2 DEFAULT NULL,
                                                       P_DEPCODE VARCHAR2 DEFAULT NULL)


AS 

LV_SQLERRM          VARCHAR2(2000):='';
lv_SqlStr           VARCHAR2(20000) := '';
lv_YearCode         VARCHAR2(10) := '';
lv_ProductionNo         VARCHAR2(20) := '';
lv_ParValue         varchar2(200):='';
lv_Remarks          varchar2(100):='';
lv_ProcName         varchar2(30) := 'PRCWPS_IMP_PRODUCTION_MANUAL';
BEGIN

    SELECT YEARCODE INTO lv_YearCode  FROM WPSWAGEDPERIODDECLARATION
    WHERE TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE
    AND COMPANYCODE = P_COMPCODE
    AND DIVISIONCODE = P_DIVCODE;
    
    
    

    lv_SqlStr := 'DELETE FROM WPSPRODUCTIONSUMMARY
    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' AND STARTDATE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')' ;
    IF P_DEPARTMENT IS NOT NULL THEN
        lv_SqlStr := lv_SqlStr || '  AND DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
    END IF;
    
   -- DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
     EXECUTE IMMEDIATE  lv_SqlStr;



     FOR C1 IN (SELECT DISTINCT PRODUCTIONDATE, PRODUCTIONTYPE, SHIFT FROM  WPSPRODRAWDATATAB
                 WHERE PRODUCTIONDATE = P_DATEOFPRODUCTION     
                 ORDER BY   PRODUCTIONTYPE, SHIFT
               )
    LOOP
            SELECT FN_AUTOGEN_PARAMS(P_COMPCODE, P_DIVCODE, lv_YearCode, 'WPS PRODUCTION ENTRY', P_DATEOFPRODUCTION) INTO lv_ProductionNo FROM DUAL;
    
--            lv_SqlStr := 'INSERT INTO WPSPRODUCTIONSUMMARY ( 
--            COMPANYCODE, DIVISIONCODE, YEARCODE, STARTDATE, DEPARTMENTCODE, PRODUCTIONNO, PRODUCTIONTYPE, WORKERSERIAL, MACHINECODE, LOOMCODE,
--            QUALITYCODE, QUALITYUOMCODE, SHIFTCODE, PRODUCTION, TOTALPRODUCTION, OCCUPATIONCODE, ISATTANDANCE, USERNAME, SYSROWID, 
--            LASTMODIFIED, GROUPCODE, TRANSACTIONTYPE, WEEK, ATTNSERIAL, SECTIONCODE)
--            
--            SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||''' DIVISIONCODE, '''||lv_YearCode||''' YEARCODE,
--            TO_DATE(PRODUCTIONDATE,''DD/MM/YYYY'') STARTDATE, A.DEPARTMENTCODE,'''||lv_ProductionNo||''' PRODUCTIONNO, A.PRODUCTIONTYPE,
--             M.WORKERSERIAL, A.MACHINE MACHINECODE, A.LOOMCODE, A.QUALITYCODE,A.QUALITYUOM QUALITYUOMCODE, A.SHIFT, A.PRODUCTION, 
--             A.PRODUCTION  TOTALPRODUCTION, A.OCCUPATION, ''N'' ISATTANDANCE, '''||P_USER||''' USERNAME, SYS_GUID() SYSROWID,
--              SYSDATE LASTMODIFIED, M.GROUPCODE, ''GENERAL'' TRANSACTIONTYPE, A.WEEK, A.ATTN_SERIAL ATTNSERIAL, M.SECTIONCODE     
--            FROM WPSPRODRAWDATATAB A, WPSWORKERMAST M
--             WHERE A.TOKENNO = M.TOKENNO 
--             AND A.PRODUCTIONDATE = '''||C1.PRODUCTIONDATE||'''
--             AND A.PRODUCTIONTYPE = '''||C1.PRODUCTIONTYPE||'''
--             AND A.SHIFTCODE = '''||C1.SHIFT||'''';

--            IF P_DEPARTMENT IS NOT NULL THEN
--                lv_SqlStr := lv_SqlStr || '  AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
--            END IF;
            

        lv_SqlStr := ' INSERT INTO WPSPRODUCTIONSUMMARY ( '||chr(10) 
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, STARTDATE, PRODUCTIONNO, '||chr(10) 
            ||' DEPARTMENTCODE, PRODUCTIONTYPE, SECTIONCODE, WORKERSERIAL, MACHINECODE, LOOMCODE, '||chr(10)
            ||' QUALITYCODE, QUALITYUOMCODE, SHIFTCODE, WORKINGHOURS, PRODUCTION, TOTALPRODUCTION,  '||chr(10)
            ||' OCCUPATIONCODE, ISATTANDANCE, USERNAME, SYSROWID, '||chr(10)
            ||' LASTMODIFIED, GROUPCODE, TRANSACTIONTYPE, WEEK, ATTNSERIAL,SERIALNO) '||chr(10)
                          
                  
            ||' SELECT '''||P_COMPCODE||''' COMPANYCODE, '''||P_DIVCODE||'''  DIVISIONCODE, '''||lv_YearCode||''' YEARCODE, TO_DATE(PRODUCTIONDATE,''DD/MM/YYYY'') STARTDATE, '''||lv_ProductionNo||'''  PRODUCTIONNO, '||chr(10)  
            ||' P.DEPARTMENTCODE, A.PRODUCTIONTYPE, P.SECTIONCODE, M.WORKERSERIAL, A.MACHINE MACHINECODE, A.LOOMCODE,  '||chr(10)
            ||' A.QUALITYCODE, NVL(P.QUALITYUOMCODE,A.UOM) QUALITYUOMCODE, DECODE(A.SHIFT,''B'',''2'',''C'',''3'',''1'') SHIFTCODE, NVL(A.MACHINEHOURS,0) WORKINGHOURS, A.PRODUCTION, A.PRODUCTION  TOTALPRODUCTION, '||chr(10) 
            ||' CASE WHEN P.PRODUCTIONTYPECODE IN(''P1602'',''P3102'') THEN A.OCCUPATION ELSE  P.OCCUPATIONCODE END /*A.OCCUPATION*/, ''N'' ISATTANDANCE, ''SWT'' USERNAME, SYS_GUID() SYSROWID, '||chr(10)
--            ||' CASE WHEN P.PRODUCTIONTYPECODE = ''P3102'' THEN A.OCCUPATION ELSE  P.OCCUPATIONCODE END /*A.OCCUPATION*/, ''N'' ISATTANDANCE, ''SWT'' USERNAME, SYS_GUID() SYSROWID, '||chr(10)            
            ||' SYSDATE LASTMODIFIED, M.GROUPCODE, ''GENERAL'' TRANSACTIONTYPE, A.WEEK, A.ATTN_SERIAL ATTNSERIAL,A.DEPTSERIAL '||chr(10)     
            ||' FROM WPSPRODRAWDATATAB A, WPSWORKERMAST M, WPSPRODUCTIONTYPEMAST P '||chr(10)
            ||'  WHERE A.TOKENNO = M.TOKENNO '||chr(10) 
            ||'    AND A.PRODUCTIONTYPE = P.PRODUCTIONTYPECODE '||chr(10)
            ||'    AND A.PRODUCTIONDATE = '''||C1.PRODUCTIONDATE||''' '||chr(10)
            ||'    AND A.PRODUCTIONTYPE = '''||C1.PRODUCTIONTYPE||''' '||chr(10)
            ||'    AND A.SHIFT = '''||C1.SHIFT||''' '||chr(10);
        IF P_DEPARTMENT IS NOT NULL THEN
            lv_SqlStr := lv_SqlStr || '    AND A.DEPARTMENTCODE = '''||P_DEPARTMENT||''' ';
        END IF;
        lv_ParValue := 'Production Type - '||C1.PRODUCTIONTYPE||', Shift - '||C1.SHIFT||', PRODUCTION NO - '||lv_ProductionNo||'';
        lv_Remarks := C1.PRODUCTIONTYPE||' - Production Data INSERT';
        insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(C1.PRODUCTIONDATE,'DD/MM/YYYY'), TO_DATE(C1.PRODUCTIONDATE,'DD/MM/YYYY'), lv_Remarks);

      --  DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
        EXECUTE IMMEDIATE lv_SqlStr;  
        COMMIT;

        
    
    END LOOP;

    ----------- LOOM CODE UPDATE MACHINE CODE FOR WEAVING PRODUCTION ---------
    
    PRCWPS_MACHINELOOM_UPDT (P_COMPCODE,P_DIVCODE,P_DATEOFPRODUCTION,P_DEPARTMENT,'WPSPRODUCTIONSUMMARY',P_USER,P_UNITCODE);
    
--    BEGIN
--        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMP_MACHINELOOM';
--    EXCEPTION
--        when others then null;    
--    END;
--    
--    lv_SqlStr := 'CREATE TABLE WPSTEMP_MACHINELOOM AS 
--        SELECT DEPARTMENTCODE, SECTIONCODE, MACHINECODE, LOOMCODE  
--        FROM WPSMACHINELOOMMAPPING
--        WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--          AND DEPARTMENTCODE = ''22''
--          AND EFFECTIVEDATE = ( SELECT MAX(EFFECTIVEDATE) FROM WPSMACHINELOOMMAPPING
--                                WHERE COMPANYCODE='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--                                  AND DEPARTMENTCODE =''22''
--                              )';
--                      
--    
--    lv_Remarks := 'TEMP TABLE CREATION FOR LOOM UPDATE';
--    lv_Parvalue := '';
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);
--
--      --  DBMS_OUTPUT.PUT_LINE(lv_SqlStr);
--    EXECUTE IMMEDIATE lv_SqlStr;  
--    COMMIT;    
--    
--    lv_SqlStr := 'UPDATE WPSPRODUCTIONSUMMARY A SET A.LOOMCODE = ( SELECT B.LOOMCODE FROM WPSTEMP_MACHINELOOM B 
--                                                     WHERE A.DEPARTMENTCODE = B.DEPARTMENTCODE AND A.SECTIONCODE = B.SECTIONCODE
--                                                       AND A.MACHINECODE= B.MACHINECODE
--                                                   )
--    WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''
--      AND STARTDATE = TO_DATE('''||P_DATEOFPRODUCTION||''',''DD/MM/YYYY'')
--      AND DEPARTMENTCODE =''22''
--      AND A.MACHINECODE IN (SELECT MACHINECODE FROM WPSTEMP_MACHINELOOM)';
--    
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--        values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_SqlStr,lv_ParValue, TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), TO_DATE(P_DATEOFPRODUCTION,'DD/MM/YYYY'), lv_Remarks);
--
--    EXECUTE IMMEDIATE lv_SqlStr;  
--    COMMIT;    
    

END;
/


DROP PROCEDURE PROC_RPT_WPS_EXCELREPORTS;

CREATE OR REPLACE PROCEDURE PROC_RPT_WPS_EXCELREPORTS
(
    P_COMPANYCODE         VARCHAR2,
    P_DIVISIONCODE        VARCHAR2,
    P_FROMDATE            VARCHAR2,
    P_TODATE           VARCHAR2,
    P_DEPT                VARCHAR2 DEFAULT NULL,
    P_MENUTAG             VARCHAR2 ,
    P_MENUTAG1             VARCHAR2 ,
    P_FILE                 VARCHAR2 
)
AS
    LV_SQLSTR             VARCHAR2(5000);
    LV_error             VARCHAR2(5000);
BEGIN

    LV_SQLSTR := null;
    
    LV_SQLSTR := 'PROC_RPT_WPS_EXCELREPORTS('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_MENUTAG||''','''||P_MENUTAG1||''','''||P_FILE||''')';
   
    DELETE FROM WPS_ERROR_LOG WHERE PROC_NAME ='PROC_RPT_WPS_EXCELREPORTS';

    INSERT INTO WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
    VALUES(P_COMPANYCODE,P_DIVISIONCODE,'PROC_RPT_WPS_EXCELREPORTS','',SYSDATE,LV_SQLSTR,LV_SQLSTR,TO_DATE(P_FROMDATE,'DD/MM/YYYY'),TO_DATE(P_FROMDATE,'DD/MM/YYYY'),'');


    CASE P_MENUTAG1
       WHEN 'OT RECORD NO' THEN --report 8
            LV_SQLSTR := 'PROC_RPT_WPS_OT_RECORD_NO('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_OT_RECORD_NO(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
       WHEN 'OT NO MASTER' THEN--report 9
            LV_SQLSTR := 'PROC_RPT_WPS_OT_NO_MASTER('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_OT_NO_MASTER(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
        WHEN  'DEPARTMENT-WISE WAGES RATE' THEN --report 11
            LV_SQLSTR := 'PROC_RPT_WPS_DEPT_WISE_RATE('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_DEPT_WISE_RATE(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
        WHEN 'ACTUAL WAGES AND RATE STMT' THEN --report 21
            LV_SQLSTR := 'PROC_RPT_WPS_ACTUAL_WAGESRATE('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_ACTUAL_WAGESRATE(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
        WHEN   'ACTUAL WAGES PAID AND DEDUCTION' THEN
            LV_SQLSTR := 'PROC_RPT_WPS_WAGES_PAID_DED('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_WAGES_PAID_DED(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
        WHEN  'OT MONTHLY CATEGORY WISE' THEN
            LV_SQLSTR := 'PROC_RPT_WPS_OT_MONTH_CAT_WISE('''||P_COMPANYCODE||''','''||P_DIVISIONCODE||''','''||P_FROMDATE||''','''||P_TODATE||''','''||P_DEPT||''','''||P_FILE||''')';
            PROC_RPT_WPS_OT_MONTH_CAT_WISE(P_COMPANYCODE,P_DIVISIONCODE,P_FROMDATE,P_TODATE,P_DEPT,P_FILE);
      
        ELSE
            LV_SQLSTR := null;
    END CASE;
    
 INSERT INTO WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
 VALUES(P_COMPANYCODE,P_DIVISIONCODE,'PROC_RPT_WPS_EXCELREPORTS','',SYSDATE,LV_SQLSTR,LV_SQLSTR,TO_DATE(P_FROMDATE,'DD/MM/YYYY'),TO_DATE(P_FROMDATE,'DD/MM/YYYY'),'');
 
 exception when others then
    LV_error := sqlerrm;
    INSERT INTO WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME, ORA_ERROR_MESSG, ERROR_DATE, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS)
    VALUES(P_COMPANYCODE,P_DIVISIONCODE,'PROC_RPT_WPS_EXCELREPORTS',LV_error,SYSDATE,LV_SQLSTR,LV_SQLSTR,TO_DATE(P_FROMDATE,'DD/MM/YYYY'),TO_DATE(P_FROMDATE,'DD/MM/YYYY'),'');
END;
/


DROP PROCEDURE PROC_WPSCOMPASSIGNRPT_NEW_BAK;

CREATE OR REPLACE PROCEDURE "PROC_WPSCOMPASSIGNRPT_NEW_BAK" 
(
P_COMPANYCODE VARCHAR2, 
P_DIVISIONCODE VARCHAR2, 
P_FROMDATE VARCHAR2,
P_TODATE VARCHAR2,
P_COMPONENT VARCHAR2,
P_CATEGORY VARCHAR2
)
AS 
LV_SQLSTR VARCHAR2(30000);
LV_HEADER VARCHAR2(4000);
LV_TBLHDR VARCHAR2(4000);
LV_YEARCODE VARCHAR2(10);
BEGIN
    SELECT RTRIM (XMLAGG (XMLELEMENT (E, X.COMPONENTSHORTNAME || ',')ORDER BY X.PHASE, X.CALCULATIONINDEX).EXTRACT ('//text()'), ',') COMPONENTNAMELIST
    INTO LV_HEADER
      FROM (
             SELECT DISTINCT COMPONENTCODE, 'W.'||COMPONENTSHORTNAME COMPONENTSHORTNAME, PHASE, CALCULATIONINDEX FROM WPSCOMPONENTMASTER  
                WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE AND INSTR(NVL(P_COMPONENT,COMPONENTCODE),COMPONENTCODE)>0
                  and PHASE<=6 
               UNION ALL
               SELECT DISTINCT C.COMPONENTCODE,'W.'||D.COMPONENTSHORTNAME COMPONENTSHORTNAME, C.PHASE, C.CALCULATIONINDEX FROM WPSCOMPONENTMASTER C, 
                     (
                      SELECT DISTINCT  COMPONENTSHORTNAME FROM WPSCOMPONENTMASTER  
                       WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                         and (COMPONENTSHORTNAME LIKE '%LIBL%' OR COMPONENTSHORTNAME LIKE '%LNBL%')
                      INTERSECT 
                      SELECT COLUMN_NAME COMPONENTSHORTNAME FROM COLS
                       WHERE TABLE_NAME ='WPSWAGESDETAILS_MV'
                     ) D
                WHERE C.COMPONENTSHORTNAME=D.COMPONENTSHORTNAME
                  AND INSTR(NVL(P_COMPONENT,C.COMPONENTCODE),C.COMPONENTCODE)>0
               UNION ALL
               SELECT 'COINBF','W.COINBF',9999,9997 FROM DUAL
               UNION ALL
               SELECT 'COINCF','W.COINCF',9999,9998 FROM DUAL
               UNION ALL
               SELECT 'ACTUALPAYBLEAMOUNT','W.ACTUALPAYBLEAMOUNT',9999,9999 FROM DUAL
               UNION ALL
               SELECT 'ATTENDANCEHOURS','W.ATTENDANCEHOURS',0,0 FROM DUAL
               UNION ALL
               SELECT 'OVERTIMEHOURS','W.OVERTIMEHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'HOLIDAYHOURS','W.HOLIDAYHOURS',0,0.2 FROM DUAL
               UNION ALL
               SELECT 'NIGHTALLOWANCEHOURS','W.NIGHTALLOWANCEHOURS',0,0.3 FROM DUAL
               UNION ALL
               SELECT 'STLHOURS','W.STLHOURS',0,0.4 FROM DUAL
           ) X;
           
    SELECT RTRIM (XMLAGG (XMLELEMENT (E, X.COLNAME||SRL || ',')ORDER BY X.COLNAME).EXTRACT ('//text()'), ',') COMPONENTNAMELIST
    INTO LV_TBLHDR
      FROM (
             SELECT ROWNUM SRL, 'COMP' COLNAME FROM (
             SELECT DISTINCT COMPONENTCODE, 'W.'||COMPONENTSHORTNAME COMPONENTSHORTNAME, PHASE, CALCULATIONINDEX FROM WPSCOMPONENTMASTER  
                WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE AND INSTR(NVL(P_COMPONENT,COMPONENTCODE),COMPONENTCODE)>0
                  and PHASE<=6 
               UNION ALL
               SELECT DISTINCT C.COMPONENTCODE,'W.'||D.COMPONENTSHORTNAME COMPONENTSHORTNAME, C.PHASE, C.CALCULATIONINDEX FROM WPSCOMPONENTMASTER C, 
                     (
                      SELECT DISTINCT  COMPONENTSHORTNAME FROM WPSCOMPONENTMASTER  
                       WHERE COMPANYCODE = P_COMPANYCODE AND DIVISIONCODE = P_DIVISIONCODE
                         and (COMPONENTSHORTNAME LIKE '%LIBL%' OR COMPONENTSHORTNAME LIKE '%LNBL%')
                      INTERSECT 
                      SELECT COLUMN_NAME COMPONENTSHORTNAME FROM COLS
                       WHERE TABLE_NAME ='WPSWAGESDETAILS_MV'
                     ) D
                WHERE C.COMPONENTSHORTNAME=D.COMPONENTSHORTNAME
                  AND INSTR(NVL(P_COMPONENT,C.COMPONENTCODE),C.COMPONENTCODE)>0
               UNION ALL
               SELECT 'COINBF','W.COINBF',9999,9997 FROM DUAL
               UNION ALL
               SELECT 'COINCF','W.COINCF',9999,9998 FROM DUAL
               UNION ALL
               SELECT 'ACTUALPAYBLEAMOUNT','W.ACTUALPAYBLEAMOUNT',9999,9999 FROM DUAL
               UNION ALL
               SELECT 'ATTENDANCEHOURS','W.ATTENDANCEHOURS',0,0 FROM DUAL
               UNION ALL
               SELECT 'OVERTIMEHOURS','W.OVERTIMEHOURS',0,0.1 FROM DUAL
               UNION ALL
               SELECT 'HOLIDAYHOURS','W.HOLIDAYHOURS',0,0.2 FROM DUAL
               UNION ALL
               SELECT 'NIGHTALLOWANCEHOURS','W.NIGHTALLOWANCEHOURS',0,0.3 FROM DUAL
               UNION ALL
               SELECT 'STLHOURS','W.STLHOURS',0,0.4 FROM DUAL)
           ) X;
           SELECT YEARCODE
             INTO LV_YEARCODE
             FROM WPSWAGEDPERIODDECLARATION
            WHERE TO_DATE(P_FROMDATE,'DD/MM/RRRR') BETWEEN FORTNIGHTSTARTDATE AND FORTNIGHTENDDATE;

    proc_WPSFORTNIGHT_SUMMARY_1(P_COMPANYCODE,P_DIVISIONCODE,LV_YEARCODE,P_FROMDATE,P_TODATE,'0');

    DELETE FROM GTT_WPSEARNINGANDDEDUCTION; 
    LV_SQLSTR :=  ' INSERT INTO GTT_WPSEARNINGANDDEDUCTION(WORKERSERIAL,TOKENNO,WORKERNAME,UNITCODE,CATEGORYCODE,GRADECODE,DEPARTMENTCODE,PENSIONNO,SEX,DATEOFBIRTH,DATEOFJOINING,COMPANYNAME,DIVISIONNAME,FROMTODATE,'||LV_TBLHDR||') '||CHR(10)     
                ||' SELECT ''0'' WORKERSERIAL,NULL TOKENNO,NULL WORKERNAME,NULL UNITCODE,NULL CATEGORYCODE,NULL GRADECODE,NULL DEPARTMENTCODE,NULL PENSIONNO,NULL SEX,NULL DATEOFBIRTH,NULL DATEOFJOINING,C.COMPANYNAME,D.DIVISIONNAME,''Earning and Deduction Register For the Period From ''||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||''' FROMTODATE,'''||REPLACE(REPLACE(LV_HEADER,'W.',''),',',''',''')||''' FROM COMPANYMAST C, DIVISIONMASTER D WHERE C.COMPANYCODE=D.COMPANYCODE AND C.COMPANYCODE= '''||P_COMPANYCODE||''' AND D.DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10) 
                ||' UNION ALL '||CHR(10) 
                ||' SELECT /*+ ORDERED */ W.WORKERSERIAL, W.TOKENNO, A.WORKERNAME, A.UNITCODE, W.WORKERCATEGORYCODE CATEGORYCODE, A.GRADECODE, S.MAXDEPARTMENT DEPARTMENTCODE, '||CHR(10)  
                ||'        A.PENSIONNO, F.SHIFTNAME SEX, A.DATEOFBIRTH, A.DATEOFJOINING, M.COMPANYNAME, V.DIVISIONNAME, ''Earning and Deduction Register For the Period From ''||'''||P_FROMDATE||'''||'' To ''||'''||P_TODATE||''' FROMTODATE,'||CHR(10) 
                ||'        TO_CHAR('||REPLACE(LV_HEADER,',','),TO_CHAR(')||') '||CHR(10) 
                ||'   FROM WPSWORKERMAST A, '||CHR(10)
                ||'       ( SELECT * FROM WPSWAGESDETAILS_MV '||CHR(10)
                ||'          WHERE COMPANYCODE = '''||P_COMPANYCODE||''' AND DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10)
                ||'            AND FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'            AND FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'            /* AND nvl(ACTUALPAYBLEAMOUNT,0)>0 */  '||CHR(10)
                ||'       ) W, '||CHR(10)
                ||'       ( SELECT EBNO,MAX(DEPT) MAXDEPARTMENT,MAX(SHIFT) MAXSHIFT '||CHR(10)
                ||'          FROM GTT_FORTNIGHTATTENDANCE  '||CHR(10)
                ||'         GROUP BY EBNO '||CHR(10)
                ||' ) S, COMPANYMAST M, DIVISIONMASTER V, WPSSHIFTMAST F '||CHR(10)
                ||' WHERE A.COMPANYCODE = W.COMPANYCODE '||CHR(10)
                ||'   AND A.DIVISIONCODE = W.DIVISIONCODE '||CHR(10)
                ||'   AND A.WORKERSERIAL = W.WORKERSERIAL '||CHR(10)
                ||'   AND W.TOKENNO = S.EBNO(+) '||CHR(10)
                ||'   AND S.MAXSHIFT=F.SHIFTNAME '||CHR(10)
                ||'   AND A.COMPANYCODE=M.COMPANYCODE '||CHR(10)
                ||'   AND A.COMPANYCODE=V.COMPANYCODE '||CHR(10)
                ||'   AND A.DIVISIONCODE=V.DIVISIONCODE '||CHR(10)
                ||'   AND A.COMPANYCODE = '''||P_COMPANYCODE||''' '||CHR(10)
                ||'   AND A.DIVISIONCODE = '''||P_DIVISIONCODE||''' '||CHR(10);
                IF P_CATEGORY IS NOT NULL THEN
                    LV_SQLSTR:=LV_SQLSTR||'  AND W.WORKERCATEGORYCODE IN ('||P_CATEGORY||') '||CHR(10);
                END IF;
                LV_SQLSTR:=LV_SQLSTR||'   AND W.FORTNIGHTSTARTDATE>=TO_DATE('''||P_FROMDATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||'   AND W.FORTNIGHTENDDATE<=TO_DATE('''||P_TODATE||''',''DD/MM/YYYY'') '||CHR(10)
                ||' ORDER BY DEPARTMENTCODE,SEX,CATEGORYCODE,TOKENNO '||CHR(10);
  
    DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
    EXECUTE  IMMEDIATE LV_SQLSTR;
END ;
/


DROP PROCEDURE PROC_WPSFIXOENPF_TRANSFER;

CREATE OR REPLACE PROCEDURE PROC_WPSFIXOENPF_TRANSFER(
    P_COMPCODE varchar2,
    P_DIVCODE varchar2,
    P_FNSTDT varchar2,
    P_FNENDT varchar2,
    P_TABLENAME varchar2 DEFAULT 'WPSWAGESDETAILS',
    --P_COMPONENT varchar2,
    P_WORKERSERIAL varchar2 DEFAULT NULL
)
AS  
    lv_sql varchar2(10000):='';
    lv_Remarks varchar2(200); 
    lv_ProcName varchar2(30) := 'PROC_WPSFIXOENPF_TRANSFER';
    lv_sqlerrm  varchar2(200) := '';
    lv_fn_stdt date := to_date(P_FNSTDT,'DD/MM/YYYY');
    lv_fn_endt date := to_date(P_FNENDT,'DD/MM/YYYY');  
    lv_parvalues varchar2(400):='';
BEGIN

    PROC_WPSOTHRCOMPONENTPAYMENT(P_COMPCODE,P_DIVCODE,P_FNSTDT,P_FNENDT,'WPSOTHERCOMPONENTPAYMENT','FIX_OENPF');
    
    lv_Remarks:='UPDATE FIX_OENPF';
    lv_sql:='UPDATE '||P_TABLENAME||' A SET FIX_OENPF=('||CHR(10)
         ||'                                            SELECT COMPONENTAMOUNT FROM WPSOTHERCOMPONENTPAYMENT B'||CHR(10)
         ||'                                            WHERE B.COMPANYCODE=A.COMPANYCODE'||CHR(10)
         ||'                                                AND B.DIVISIONCODE=A.DIVISIONCODE'||CHR(10)
         ||'                                                AND B.WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                AND B.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND B.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                AND A.SECTIONCODE =('||CHR(10)
         ||'                                                                        SELECT MAX(SECTIONCODE) FROM WPSWAGESDETAILS_SWT'||CHR(10)
         ||'                                                                        WHERE WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                                            AND FORTNIGHTSTARTDATE= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                                            AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                                            AND NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)=('||CHR(10)
         ||'                                                                                                                                SELECT MAX(NVL(ATTENDANCEHOURS,0)+NVL(OVERTIMEHOURS,0)) FROM WPSWAGESDETAILS_SWT'||CHR(10)
         ||'                                                                                                                                WHERE WORKERSERIAL=A.WORKERSERIAL'||CHR(10)
         ||'                                                                                                                                    AND FORTNIGHTSTARTDATE= TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                                                                                                    AND FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'                                                                                                                            )'||CHR(10)
         ||'                                                                  )'||CHR(10)
         ||'                                        )'||CHR(10)
         ||'WHERE A.FORTNIGHTSTARTDATE=TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')'||CHR(10)
         ||'AND A.FORTNIGHTENDDATE=TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'')'||CHR(10);
         
    DBMS_OUTPUT.PUT_LINE(lv_sql);  
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm, lv_sql, lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    EXECUTE IMMEDIATE lv_sql;  
    COMMIT;
         
END;
/


DROP PROCEDURE PROC_WPSSTLPROCESS;

CREATE OR REPLACE PROCEDURE PROC_WPSSTLPROCESS(P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FN_STDT Varchar2, 
                                                  P_FN_ENDT Varchar2,
                                                  P_PHASE  number  DEFAULT NULL, 
                                                  P_PHASE_TABLENAME VARCHAR2  DEFAULT NULL,
                                                  P_TABLENAME Varchar2  DEFAULT NULL,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'STL PROCESS')                                                 
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_ComponentNew  varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_ProcName     varchar2(30) := 'PROC_WPSSTLPROCESS';
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FN_STDT,'DD/MM/YYYY');
lv_mn_stdt      date := to_date('01/'||substr(P_FN_STDT,4),'DD/MM/YYYY');
lv_MinimumPayableAmt    number := 0;            -- use for Minimum payment amount which defined in the WPSWAGESPARAMETER TABLE 
lv_RoundOffRs           number := 0;            -- use for Round Off Rs. which defined in the WPSWAGESPARAMETER TABLE
lv_ESI_E_Perc           number := 0.75;         -- USE FOR ESI EMPLOYEE CONTRIBUTION
lv_ProcessType  varchar2(50):= 'FORTNIGHTLY';   -- use for wage process Fortnightly or Monthly which defined in the WPSWAGESPARAMETER TABLE MAINLY REQUIRE FOR P.TAX CALCULATION 
lv_WagesAsOn    number(11,2) := 0;
lv_TempVal      number(11,2) :=0;
lv_TempDednAmt  number(11,2) := 0;
lv_TempDednAmt_Prev number(11,2) :=0;
lv_intCnt       number(5) :=0;
lv_GrossWages   number(11,2) := 0;
lv_PREV_FN_PTAXGROSS        NUMBER(11,2):= 0;
lv_PREV_FN_PTAX             NUMBER(11,2):= 0;
lv_PREV_FN_PFGROSS          NUMBER(11,2):=0;
lv_PREV_FN_ESIGROSS         NUMBER(11,2) := 0;
lv_PREV_FN_ESI_E            NUMBER(11,2):=0;
lv_PREV_FN_PF_E             NUMBER(11,2):=0;
lv_PREV_FN_VPF              number(11,2) := 0;
lv_VPF_PERCENT              number(11,2) :=0;
lv_ESICOMPANYPERCENT        number(11,2) :=0;
lv_PENSION_PERCENTAGE number(11,2) :=0;
lv_MAXIMUMPENSIONGROSS number(11,2) :=0;
lv_TotalDedn    number(11,2) := 0;
lv_CoinBf       number(11,2) := 0;
lv_CoinCf       number(11,2) := 0;
lv_strWorkerSerial  varchar2(10) :='';
lv_SrlNo        number   :=1;                    -- varaible use for serially which No. execute; 
lv_RowType_Prev_Data    GTT_WPS_PREV_FNDATA%ROWTYPE;
lv_RoundoffType varchar2(1) :='';
lv_EMI_DEDN_TYPE    varchar2(20):='PARTIAL';
lv_PFLN_CAP_STOP    varchar2(1) :='N';
lv_PFLN_INT_STOP    varchar2(1) :='N';
lv_CNT          number(11,2) := 0;
lv_SqlStr        varchar2(32767) := '';
lv_PolicyNo     varchar2(50) := ''; 
lv_PF_PERCENT   number(5) := 10;
lv_MAX_PFGROSS  number(11,2) := 0;
lv_MAX_PF_CONT  number(11,2) :=0;
lv_fn_LastDailyWagesDT  date := to_date(P_FN_ENDT,'DD/MM/YYYY'); --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT
lv_YYYYMM       varchar2(6) := to_char(lv_fn_stdt,'YYYYMM');   --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT 

lv_TempTable    varchar2(50) := 'WPSSTLRATE_TEMP'; 
lv_PF_E_Amt number(11,2) := 0; 
lv_ESI_Amt number(11,2) := 0; 
lv_FPF_Amt number(11,2) := 0; 
begin
    
    

    SELECT nvl(MINIMUMSALARYPAYABLE,0) MINIMUMSALARYPAYABLE, nvl(ROUNDOFFRS,0) ROUNDOFFRS, 
    nvl(PROCESSTYPE,'FORTNIGHTLY') PROCESSTYPE,ROUNDOFFTYPE, nvl(ESIEMLPLOYEEPERCENT,0) ESIEMLPLOYEEPERCENT,
    NVL(PFEMLPLOYEEPERCENT,0) PFEMLPLOYEEPERCENT,  NVL(MAXIMUMPFGROSS,0) MAXIMUMPFGROSS,  NVL(MAXIMUMPF,0) MAXIMUMPF,
    PENSION_PERCENTAGE,MAXIMUMPENSIONGROSS,ESICOMPANYPERCENT
    INTO lv_MinimumPayableAmt, lv_RoundOffRs, lv_ProcessType , lv_RoundoffType, lv_ESI_E_Perc,
    lv_PF_PERCENT, lv_MAX_PFGROSS, lv_MAX_PF_CONT,
    lv_PENSION_PERCENTAGE,lv_MAXIMUMPENSIONGROSS,lv_ESICOMPANYPERCENT
    FROM WPSWAGESPARAMETER WHERE COMPANYCODE= P_COMPCODE AND DIVISIONCODE = P_DIVCODE;

    PROC_WPSWORKERRATE(P_COMPCODE,P_DIVCODE,P_FN_STDT,'GBL_WORKERRATE_ASON',P_PROCESSTYPE);
    
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE '||lv_TempTable;
    EXCEPTION
        WHEN OTHERS THEN NULL;    
    END;
    lv_Remarks := '0 STL HOURLY TABLE CREATION';
    lv_Sql := ' CREATE TABLE '||lv_TempTable||' AS '||CHR(10)
            ||' SELECT B.WORKERSERIAL, B.BASIC, A.DA, A.ADHOC, A.TSA, (ROUND(B.BASIC/48,5) + ROUND((NVL(A.DA,0)+NVL(A.ADHOC,0)+NVL(A.TSA,0))/208,5)) STL_HRS_RATE '||chr(10)
            ||' FROM GBL_WORKERRATE_ASON A,  '||chr(10)
            ||' (  '||chr(10)
            ||'     SELECT WORKERSERIAL, NVL(MAX(STLRATE),0) BASIC  '||chr(10)
            ||'     FROM WPSSTLENTRY  '||chr(10)
            ||'     WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE ='''||P_DIVCODE||'''  '||chr(10)
            ||'       AND PAYMENTDATE='''||lv_FN_STDT||'''  '||chr(10)
            ||'     GROUP BY WORKERSERIAL  '||chr(10)
            ||' ) B  '||chr(10)
            ||' WHERE A.WORKERSERIAL = B.WORKERSERIAL  '||chr(10);
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;
    COMMIT;
                
    
    lv_Remarks := '1 DELETE FROM  WPSSTLWAGESDETAILS';
    lv_Sql := ' DELETE FROM WPSSTLWAGESDETAILS '||chr(10)
            ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  AND YEARCODE='''||P_YEARCODE||''''||chr(10)
            ||'   AND PAYMENTDATE >= '''||lv_FN_STDT||''' '||chr(10)
            ||'   AND PAYMENTDATE <= '''||lv_FN_ENDT||''' '||chr(10);
    EXECUTE IMMEDIATE lv_Sql;
    COMMIT;
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);

    --- START BELOW BLOCK CONSIDER FOR PREVIOUS PAYMENT WIHCH CONSIDER IN CURRENT WAGES PAYMENT FOR REFERES IN DEDUCTION STATEMENT
    DELETE FROM GTT_WPS_PREV_FNDATA;
    lv_Sql := ' INSERT INTO GTT_WPS_PREV_FNDATA (WORKERSERIAL, PF_GROSS, PENSION_GROSS, PF_CONT, PF_COM, FPF, VPF, '||chr(10) 
        ||' ESI_GROSS, ESI_CONT, ESI_COMP_CONT, GROSS_PTAX, P_TAX ) '||chr(10)
        ||' SELECT WORKERSERIAL, SUM(PF_GROSS) PF_GROSS, SUM(PENSION_GROSS) PENSION_GROSS, SUM(PF_CONT) PF_CONT, SUM(PF_COM) PF_COM, SUM(FPF) FPF, SUM(VPF) VPF, '||chr(10) 
        ||' SUM(ESI_GROSS) ESI_GROSS, SUM(ESI_CONT) ESI_CONT, SUM(ESI_COMP_CONT) ESI_COMP_CONT, SUM(GROSS_PTAX) GROSS_PTAX, SUM(P_TAX) P_TAX '||chr(10)
        ||' FROM ('||chr(10)
        ||'      SELECT WORKERSERIAL, NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_CONT,0) PF_CONT, NVL(PF_COM,0) PF_COM, NVL(FPF,0) FPF, NVL(VPF,0) VPF, '||chr(10) 
        ||'      NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_CONT,0) ESI_CONT, NVL(ESI_COMP_CONT,0) ESI_COMP_CONT, NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX  '||chr(10)
        ||'      FROM WPSWAGESDETAILS_MV  '||chr(10)
        ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
        ||'        AND FORTNIGHTSTARTDATE >= '''||lv_mn_stdt||'''   '||chr(10)
        ||'        AND FORTNIGHTSTARTDATE <  TO_DATE('''||P_FN_STDT||''',''DD/MM/YYYY'')  '||chr(10) 
--        ||'        AND FORTNIGHTENDDATE = to_date(''15/''||substr('''||P_FN_ENDT||''',4,7),''dd/mm/yyyy'')  '||chr(10)
        ||'      UNION ALL '||chr(10)          
        ||'      SELECT WORKERSERIAL, NVL(PF_GROSS,0) PF_GROSS,  NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_E,0) PF_CONT, NVL(PF_C,0) PF_COM, NVL(FPF,0) FPF, 0 VPF, '||chr(10) 
        ||'      NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_E,0) ESI_CONT, NVL(ESI_C,0) ESI_COMP_CONT, NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX '||chr(10)
        ||'      FROM WPSSTLWAGESDETAILS '||chr(10)
        ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
        ||'        AND YEARCODE = '''||P_YEARCODE||'''   '||chr(10)
        ||'        AND PAYMENTDATE >= '''||lv_mn_stdt||'''   '||chr(10)
        ||'        AND PAYMENTDATE < TO_DATE('''||P_FN_STDT||''',''DD/MM/YYYY'') '||chr(10)
        --||'        AND PAYMENTDATE <= to_date('''||lv_fn_LastDailyWagesDT||''') '||chr(10)
        ||'      ) GROUP BY WORKERSERIAL '||CHR(10);
    lv_remarks := '2 PREVIOUS WAGES PAYMENT DATA INSERT INTO GTT_WPS_PREV_FNDATA';      
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;
    
    
    
        DELETE FROM WPSSTLWAGESDETAILS_SWT;
        
        COMMIT;
        
        lv_remarks := '3 INSERT INTO  WPSSTLWAGESDETAILS_SWT   STL DATA';    
--        BELOW QUERY CHANGES BY AMALESH ON 03.06.2020  
--        lv_Sql := 'INSERT INTO  WPSSTLWAGESDETAILS_SWT '||CHR(10)
--        ||'SELECT STL.COMPANYCODE,STL.DIVISIONCODE,STL.YEARCODE,STL.DOCUMENTDATE,STL.WORKERSERIAL,STL.TOKENNO,WORKERCATEGORYCODE,'||CHR(10)
--        ||'SHIFTCODE,DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,'||CHR(10)
--        ||'0 ATTENDANCEHOURS,SUM(STLHOURS)STLHOURS,0 OVERTIMEHOURS,SUM(STLHOURS_RATE) STLAMOUNT,SUM(STLDAYS)STLDAYS,0 OTHER_EARN,'||CHR(10)
--        ||'0 BASIC,0 DA,0 ADHOC,0 HRA,0 HRS_RATE,'||CHR(10)
--        ||'SUM(STLHOURS_RATE) PF_GROSS,SUM(STLHOURS_RATE) ESI_GROSS,SUM(STLHOURS_RATE) GROSS_PTAX,'||CHR(10)
--        ||'SUM(STLHOURS_RATE) GROSS_WAGES,SUM(STL_A.PF_GROSS) TOTAL_EARN,'||CHR(10)
--        ||'SUM(ROUND((NVL(STL_A.PF_GROSS,0)+NVL(LD.PF_GROSS,0))*'||lv_PF_PERCENT||'*0.01,0)-NVL(LD.PF_CONT,0)) PF_E,'||CHR(10)
--        ||'SUM(CASE WHEN LD.PF_GROSS>0 THEN  (ceil((NVL(STL_A.PF_GROSS,0)+NVL(LD.PF_GROSS,0))*0.01*'||lv_ESI_E_Perc||'))-LD.ESI_CONT  ELSE  ceil(NVL(STL_A.PF_GROSS,0)*0.01*'||lv_ESI_E_Perc||')-LD.ESI_CONT END) ESI_E,'||CHR(10)
--        ||'SUM(CASE WHEN (NVL(STL_A.PF_GROSS,0)+NVL(LD.PF_GROSS,0))<='||lv_MAXIMUMPENSIONGROSS||' THEN  (ceil((NVL(STL_A.PF_GROSS,0)+NVL(LD.PF_GROSS,0))*0.01*'||lv_PENSION_PERCENTAGE||'))-NVL(LD.FPF,0) ELSE  ceil(NVL('||lv_MAXIMUMPENSIONGROSS||',0)*0.01*'||lv_PENSION_PERCENTAGE||') -NVL(LD.FPF,0) END) FPF,'||CHR(10)
--        ||'0 PF_C,'||CHR(10)
--        ||'SUM(CASE WHEN LD.PF_GROSS>0 THEN  (ceil((NVL(STL_A.PF_GROSS,0)+NVL(LD.PF_GROSS,0))*0.01*'||lv_ESICOMPANYPERCENT||'))-LD.ESI_CONT  ELSE  ceil(NVL(STL_A.PF_GROSS,0)*0.01*'||lv_ESICOMPANYPERCENT||')-LD.ESI_CONT END) ESI_C,'||CHR(10)
--        ||'0 OTHER_DEDN,'||CHR(10)
--        ||'0 COINBF,0 COINCF,0 TOTAL_DEDN,0 NETPAY,''STL'' TRANTYPE,STLFROMDATE LEAVEFROM,STLTODATE LEAVETO,''SWT'' USERNAME,'||CHR(10)
--        ||'SYSDATE LASTMODIFIED,FN_GENERATE_SYSROWID,'||CHR(10)
--        ||'0 PENSION_GROSS,'||CHR(10)
--        ||'SUM(NVL((CASE WHEN '''||lv_ProcessType||''' =''MONTHLY'' THEN '||CHR(10)
--        ||'(SELECT NVL(PTAXAMOUNT,0) FROM PTAXSLAB'||CHR(10)
--        ||'                    WHERE 1=1'||CHR(10)
--        ||'                      AND STATENAME = ''WEST BENGAL'''||CHR(10)
--        ||'                      AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = ''WEST BENGAL'' AND WITHEFFECTFROM <= '''||lv_FN_STDT||''')'||CHR(10)
--        ||'                      AND SLABAMOUNTFROM <= NVL(STL_A.PF_GROSS,0)'||CHR(10)
--        ||'                      AND SLABAMOUNTTO >= NVL(STL_A.PF_GROSS,0) AND ROWNUM=1'||CHR(10)
--        ||')ELSE'||CHR(10)
--        ||'(SELECT NVL(PTAXAMOUNT,0) FROM PTAXSLAB'||CHR(10)
--        ||'                    WHERE 1=1'||CHR(10)
--        ||'                      AND STATENAME = ''WEST BENGAL'''||CHR(10)
--        ||'                      AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = ''WEST BENGAL'' AND WITHEFFECTFROM <= '''||lv_FN_STDT||''')'||CHR(10)
--        ||'                      AND SLABAMOUNTFROM <= (NVL(STL_A.PF_GROSS,0)+NVL(LD.GROSS_PTAX,0)) '||CHR(10)
--        ||'                      AND SLABAMOUNTTO >= (NVL(STL_A.PF_GROSS,0)+NVL(LD.GROSS_PTAX,0))  AND ROWNUM=1'||CHR(10)
--        ||')-NVL(LD.P_TAX,0) END),0)) P_TAX'||CHR(10)
--        ||'FROM WPSSTLENTRY STL,GTT_WPS_PREV_FNDATA LD,'||CHR(10)
--        ||'('||CHR(10)
--        ||'SELECT COMPANYCODE,DIVISIONCODE,YEARCODE,YEAR,FORTNIGHTSTARTDATE,FORTNIGHTENDDATE,DOCUMENTDATE,WORKERSERIAL,'||CHR(10)
--        ||'ROUND(NVL(STLHOURS,0)*(NVL(STLRATE,0)/48),2) STLHOURS_RATE,'||CHR(10)
--        ||'ROUND(NVL(STLHOURS,0)*(NVL(STLRATE,0)/48),2) PF_GROSS'||CHR(10)
--        ||'FROM WPSSTLENTRY'||CHR(10)
--        ||'WHERE 1=1'||CHR(10)
--        ||'AND COMPANYCODE='''||P_COMPCODE||''''||CHR(10)
--        ||'AND DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
--        ||'AND YEARCODE='''||P_YEARCODE||''' --AND WORKERSERIAL=''002253'''||CHR(10)
--        ||'AND DOCUMENTDATE>= '''||lv_FN_STDT||''''||CHR(10)
--        ||'AND DOCUMENTDATE<=  '''||lv_FN_ENDT||''''||CHR(10)
--        ||')STL_A'||CHR(10)
--        ||'WHERE 1=1 AND STL.WORKERSERIAL=LD.WORKERSERIAL(+) '||CHR(10)
--        ||'AND STL.COMPANYCODE=STL_A.COMPANYCODE(+)'||CHR(10)
--        ||'AND STL.DIVISIONCODE=STL_A.DIVISIONCODE(+)'||CHR(10)
--        ||'AND STL.YEARCODE=STL_A.YEARCODE(+)'||CHR(10)
--        ||'AND STL.FORTNIGHTSTARTDATE=STL_A.FORTNIGHTSTARTDATE(+)'||CHR(10)
--        ||'AND STL.FORTNIGHTENDDATE=STL_A.FORTNIGHTENDDATE(+)'||CHR(10)
--        ||'AND STL.DOCUMENTDATE=STL_A.DOCUMENTDATE(+)'||CHR(10)
--        ||'AND STL.WORKERSERIAL=STL_A.WORKERSERIAL(+)'||CHR(10)
--        ||'AND STL.YEAR=STL_A.YEAR(+)'||CHR(10)
--        ||'AND STL.COMPANYCODE='''||P_COMPCODE||''' '||CHR(10)
--        ||'AND STL.DIVISIONCODE='''||P_DIVCODE||''''||CHR(10)
--        ||'AND STL.YEARCODE='''||P_YEARCODE||''' --AND WORKERSERIAL=''002253'''||CHR(10)
--        ||'AND STL.DOCUMENTDATE>= '''||lv_FN_STDT||''''||CHR(10)
--        ||'AND STL.DOCUMENTDATE<=  '''||lv_FN_ENDT||''''||CHR(10)
--        ||'GROUP BY '||CHR(10)
--        ||'STL.COMPANYCODE,STL.DIVISIONCODE,STL.YEARCODE,STL.DOCUMENTDATE,STL.WORKERSERIAL,STL.TOKENNO,WORKERCATEGORYCODE,'||CHR(10)
--        ||'SHIFTCODE,DEPARTMENTCODE,SECTIONCODE,OCCUPATIONCODE,STLFROMDATE,STLTODATE'||CHR(10);
       
    lv_Sql := ' INSERT INTO  WPSSTLWAGESDETAILS_SWT ( '||chr(10)
            ||' COMPANYCODE, DIVISIONCODE, YEARCODE, PAYMENTDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, '||chr(10) 
            ||' SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL, SERIALNO, STLHOURS, STLDAYS, STLAMOUNT,  OTHER_EARN,  '||chr(10) 
            ||' HRS_RATE, PF_GROSS, ESI_GROSS, GROSS_PTAX, GROSS_WAGES, TOTAL_EARN, PF_E, ESI_E, FPF, PF_C, ESI_C, OTHER_DEDN, COINBF, COINCF, TOTAL_DEDN, NETPAY,  '||chr(10) 
            ||' TRANTYPE, LEAVEFROM, LEAVETO, USERNAME, LASTMODIFIED, SYSROWID, PENSION_GROSS, P_TAX, LEAVEENCASHMENT ) '||chr(10)

            ||' SELECT S.COMPANYCODE, S.DIVISIONCODE, S.YEARCODE, S.PAYMENTDATE, S.WORKERSERIAL, M.TOKENNO, M.WORKERCATEGORYCODE, '||chr(10) 
            ||' S.SHIFTCODE, S.DEPARTMENTCODE, S.SECTIONCODE, S.OCCUPATIONCODE, S.DEPTSERIAL, S.SERIALNO, S.STLHOURS, S.STLDAYS, S.STLAMOUNT, 0 OTHER_EARN,  '||chr(10) 
            ||' S.HRS_RATE, S.STLAMOUNT PF_GROSS, S.STLAMOUNT ESI_GROSS, S.STLAMOUNT GROSS_PTAX, S.STLAMOUNT GROSS_WAGES, S.STLAMOUNT TOTAL_EARN,  '||chr(10)
            ||' (ROUND((S.STLAMOUNT+NVL(P.PF_GROSS,0))*'||lv_PF_PERCENT||'*0.01,0)- NVL(P.PF_CONT,0)) PF_E, '||CHR(10)
--            ||' (ROUND((S.STLAMOUNT+NVL(P.ESI_GROSS,0))*'||lv_ESI_E_Perc||'*0.01,0)- NVL(P.ESI_CONT,0)) ESI_E, '||chr(10)
            ||' (CEIL(TRUNC(ROUND(S.STLAMOUNT+NVL(P.ESI_GROSS,0),0)*'||lv_ESI_E_Perc||'*0.01,2))-NVL(P.ESI_CONT,0)) ESI_E, '||CHR(10)
--            ||' CASE WHEN (NVL(S.STLAMOUNT,0)+NVL(P.PF_GROSS,0))<= '||lv_MAXIMUMPENSIONGROSS||' THEN  (ceil((NVL(S.STLAMOUNT,0)+NVL(P.PF_GROSS,0))*0.01*8.33))-NVL(P.FPF,0) ELSE  ceil(NVL('||lv_MAXIMUMPENSIONGROSS||',0)*0.01*'||lv_PENSION_PERCENTAGE||') -NVL(P.FPF,0) END FPF, '||CHR(10)
            ||' CASE WHEN NVL(M.EPFAPPLICABLE,''N'') =''N'' THEN 0 ELSE CASE WHEN (NVL(S.STLAMOUNT,0)+NVL(P.PF_GROSS,0))<= '||lv_MAXIMUMPENSIONGROSS||' THEN  (ROUND(ROUND((NVL(S.STLAMOUNT,0)+NVL(P.PF_GROSS,0)),0)*0.01*8.33,0))-NVL(P.FPF,0) ELSE  ROUND(NVL('||lv_MAXIMUMPENSIONGROSS||',0)*0.01*'||lv_PENSION_PERCENTAGE||',0) -NVL(P.FPF,0) END END FPF, '||CHR(10)
            ||' 0 PF_C, CASE WHEN NVL(P.PF_GROSS,0)>0 THEN  (ceil((NVL(S.STLAMOUNT,0)+NVL(P.PF_GROSS,0))*0.01*3.25))-NVL(P.ESI_CONT,0)  ELSE  ceil(NVL(S.STLAMOUNT,0)*0.01*3.25)- NVL(P.ESI_CONT,0) END ESI_C, '||chr(10) 
            ||' 0 OTHER_DEDN, 0 COINBF, 0 COINCF, 0 TOTAL_DEDN, 0 NETPAY,  '||chr(10)
            ||' ''STL'' TRANTYPE, STLFROMDATE LEAVEFROM, STLTODATE LEAVETO, ''SWT'' USERNAME, SYSDATE LASTMODIFIED, SYS_GUID() SYSROWID, 0 PENSION_GROSS, 0 P_TAX, LEAVEENCASHMENT '||chr(10)
            ||' FROM WPSWORKERMAST M, GTT_WPS_PREV_FNDATA P, '||chr(10)
            ||' ( '||chr(10)
            ||'     SELECT A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.PAYMENTDATE, A.WORKERSERIAL, '||chr(10) 
            ||'     A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, MAX(A.OCCUPATIONCODE) OCCUPATIONCODE, MAX(A.STLSERIALNO) DEPTSERIAL, MAX(A.STLSERIALNO) SERIALNO '||chr(10)
            ||'     ,A.STLFROMDATE, A.STLTODATE, NVL(A.LEAVEENCASHMENT,''N'') LEAVEENCASHMENT,'||chr(10)
            ||'     SUM(STLDAYS) STLDAYS, SUM(STLHOURS) STLHOURS, B.STL_HRS_RATE HRS_RATE, ROUND((B.STL_HRS_RATE*SUM(STLHOURS)),2) STLAMOUNT '||chr(10)
            ||'     FROM WPSSTLENTRY A, '||lv_TempTable||' B  '||chr(10)
            ||'     WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'       AND A.PAYMENTDATE >= '''||lv_FN_STDT||''' AND A.PAYMENTDATE <='''||lv_FN_ENDT||''' '||chr(10)
            ||'       AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10)
            ||'     GROUP BY A.COMPANYCODE, A.DIVISIONCODE, A.YEARCODE, A.PAYMENTDATE, A.WORKERSERIAL,  '||chr(10)
            ||'     A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.STLFROMDATE, A.STLTODATE, B.STL_HRS_RATE, NVL(A.LEAVEENCASHMENT,''N'') '||chr(10)
            ||' ) S  '||chr(10)
            ||' WHERE M.COMPANYCODE = '''||P_COMPCODE||''' AND M.DIVISIONCODE = '''||P_DIVCODE||''' '||chr(10)
            ||'   AND M.COMPANYCODE = S.COMPANYCODE AND M.DIVISIONCODE = S.DIVISIONCODE AND M.WORKERSERIAL = S.WORKERSERIAL '||chr(10)
            ||'   AND S.WORKERSERIAL = P.WORKERSERIAL (+) '||chr(10);
        
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;

    lv_Remarks := '4_1 UPDATE DEDUCTION HEADS TO ZERO FROM LEAVEENCASMENT IN WPSSTLWAGESDETAILS_SWT';
    lv_Sql := ' UPDATE WPSSTLWAGESDETAILS_SWT SET PF_E = 0,FPF=0, PF_C=0, ESI_E=0, ESI_C=0, P_TAX=0,PF_GROSS = 0, ESI_GROSS =0 , GROSS_PTAX =0 '||CHR(10)
        ||' , TRANTYPE =''STL ENCASHMENT'' WHERE NVL(LEAVEENCASHMENT,''N'') =''Y'' '||chr(10);
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;


    lv_Remarks := '4_2 UPDATE PF_C,TOTAL_DEDN,NETPAY  WPSSTLWAGESDETAILS_SWT';
    lv_Sql := 'UPDATE WPSSTLWAGESDETAILS_SWT SET PF_C=PF_E-FPF,TOTAL_DEDN=NVL(PF_E,0)+NVL(ESI_E,0)+NVL(P_TAX,0)+NVL(OTHER_DEDN,0),NETPAY=TOTAL_EARN-(NVL(PF_E,0)+NVL(ESI_E,0)+NVL(P_TAX,0)+NVL(OTHER_DEDN,0))'||chr(10);
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;
   
    lv_Remarks := '5 INESERT IN WPSSTLWAGESDETAILS ';

     lv_Sql := 'INSERT INTO WPSSTLWAGESDETAILS'||chr(10)
         ||'('||chr(10)
         ||'COMPANYCODE, DIVISIONCODE, YEARCODE, PAYMENTDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, SHIFTCODE,'||chr(10)
         ||'DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL, SERIALNO, ATTENDANCEHOURS, STLHOURS, OVERTIMEHOURS, STLAMOUNT, '||chr(10)
         ||'STLDAYS, OTHER_EARN, BASIC, DA, ADHOC, HRA, HRS_RATE, PF_GROSS, ESI_GROSS, GROSS_PTAX, GROSS_WAGES, '||chr(10)
         ||'TOTAL_EARN, PF_E, ESI_E, FPF, PF_C, ESI_C, OTHER_DEDN, COINBF, COINCF, TOTAL_DEDN, NETPAY, TRANTYPE, '||chr(10)
         ||'LEAVEFROM, LEAVETO, USERNAME, LASTMODIFIED, SYSROWID, PENSION_GROSS, P_TAX, LEAVEENCASHMENT'||chr(10)
         ||')'||chr(10)
         ||'SELECT '||chr(10)
         ||'COMPANYCODE, DIVISIONCODE, YEARCODE,PAYMENTDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, SHIFTCODE,'||chr(10)
         ||'DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL, SERIALNO, 0 ATTENDANCEHOURS, STLHOURS, 0 OVERTIMEHOURS, STLAMOUNT, '||chr(10)
         ||'STLDAYS, OTHER_EARN, 0 BASIC, 0 DA, 0 ADHOC, 0 HRA, HRS_RATE, PF_GROSS, ESI_GROSS, GROSS_PTAX, GROSS_WAGES, '||chr(10)
         ||'TOTAL_EARN, PF_E, ESI_E, FPF, PF_C, ESI_C, OTHER_DEDN, COINBF, COINCF, TOTAL_DEDN, NETPAY, TRANTYPE, '||chr(10)
         ||'LEAVEFROM, LEAVETO, USERNAME, LASTMODIFIED, SYSROWID, PENSION_GROSS, P_TAX, LEAVEENCASHMENT'||chr(10)
         ||'FROM WPSSTLWAGESDETAILS_SWT'||chr(10)
         ||'WHERE COMPANYCODE= '''||P_COMPCODE||''''||chr(10)
         ||'AND DIVISIONCODE= '''||P_DIVCODE||''''||chr(10)
         ||'AND YEARCODE= '''||P_YEARCODE||''''||chr(10)
         ||'AND PAYMENTDATE >= '''||lv_FN_STDT||''''||chr(10)
         ||'AND PAYMENTDATE <= '''||lv_FN_ENDT||''''||chr(10);
    if P_WORKERSERIAL is not null then
        lv_Sql := lv_Sql ||' AND WORKERSERIAL IN ('||P_WORKERSERIAL||')' ||CHR(10); 
    end if; 
         
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql; 
    COMMIT;
    
    
--exception    
--    when others then
--        lv_sqlerrm := sqlerrm;
--    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
--    values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
--    commit; 
end;
/


DROP PROCEDURE PROC_WPSVIEWCREATION;

CREATE OR REPLACE PROCEDURE PROC_WPSVIEWCREATION ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_ViewName Varchar2,
                                                  P_Phase Number,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_WAGESTABLENAME VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_CompMast_Rec WPSCOMPONENTMASTER%ROWTYPE;
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';   
lv_PhaseTableName   varchar2(25);
lv_MastComponent    varchar2(500) := '';
lv_ProcName         varchar2(30) := 'PROC_WPSVIEWCREATION';

begin
    if P_Phase <= 6 then        --4
        lv_TableName := 'WPSWAGESDETAILS';    
    else
        lv_TableName := 'WPSWAGESDETAILS_MV';
    end if;
    
    if P_WAGESTABLENAME is not null then
        if P_Phase <=6 then     --4 
            lv_TableName := 'WPSWAGESDETAILS_SWT';
        else
            lv_TableName := 'WPSWAGESDETAILS_MV_SWT';
        end if;    
    end if;
    
    lv_parvalues := 'VIEWNAME = '||P_ViewName||', FNEDTATE = '||P_FNENDT;
    --DBMS_OUTPUT.PUT_LINE('View Name: '||lv_parvalues||' XXX '||NVL(P_ViewName,'YYYY'));
    FOR C1 IN (
        SELECT A.COMPONENTCODE, A.COMPONENTSHORTNAME, A.COMPONENTNAME, A.COMPONENTTYPE, A.COMPONENTGROUP, A.PHASE, A.COMPONENTTAG, A.FORMULA, A.CALCULATIONINDEX 
        FROM WPSCOMPONENTMASTER A 
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
        AND TAKEPARTINWAGES = 'Y' AND COLUMNINATTENDANCE = 'Y'
        ) 
    loop
       -- DBMS_OUTPUT.PUT_LINE('COMPONENT : '||lv_AttnComponent);
        if lv_AttnComponent = '' then
            lv_AttnComponent := ', SUM(NVL(A.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME;
            lv_CompWithZero := ', 0 AS '|| C1.COMPONENTSHORTNAME;
        else
            lv_AttnComponent := lv_AttnComponent ||', SUM(NVL(A.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME ;
            lv_CompWithZero := lv_CompWithZero ||', 0 AS '|| C1.COMPONENTSHORTNAME;
        end if;    
    END LOOP;
    --DBMS_OUTPUT.PUT_LINE('lv_AttnComponent: '||lv_AttnComponent);
    --DBMS_OUTPUT.PUT_LINE('lv_CompWithZero: '||lv_CompWithZero);
    FOR C2 IN (
        SELECT A.COMPONENTCODE, A.COMPONENTSHORTNAME, A.COMPONENTNAME, A.COMPONENTTYPE, A.COMPONENTGROUP, A.PHASE, A.COMPONENTTAG, 
        A.FORMULA, A.CALCULATIONINDEX, nvl(MASTERCOMPONENT,'N') MASTERCOMPONENT 
        FROM WPSCOMPONENTMASTER A 
        WHERE A.COMPANYCODE = P_COMPCODE AND A.DIVISIONCODE = P_DIVCODE
          AND TAKEPARTINWAGES = 'Y'
          AND NVL(A.COMPONENTGROUP,'AMALESH') NOT LIKE '%LOAN%'  
        ORDER BY CALCULATIONINDEX        
        ) 
    loop
        IF lv_CompWithValue = '' THEN
            lv_CompWithValue := ', SUM(NVL(A.'||C2.COMPONENTSHORTNAME||',0)) AS '|| C2.COMPONENTSHORTNAME;
            lv_CompCol := ', '|| C2.COMPONENTSHORTNAME;
        ELSE
            lv_CompWithValue := lv_CompWithValue ||', SUM(NVL(A.'||C2.COMPONENTSHORTNAME||',0)) AS '|| C2.COMPONENTSHORTNAME;
            lv_CompCol := lv_CompCol||', 0 AS '|| C2.COMPONENTSHORTNAME;
        end if;        
        IF C2.MASTERCOMPONENT = 'Y' THEN
            if nvl(LENGTH(lv_MastComponent),0) = 0 then
                lv_MastComponent := 'NVL(B.'||C2.COMPONENTSHORTNAME||',0) AS '||C2.COMPONENTSHORTNAME;
                --NVL('||C2.COMPONENTSHORTNAME||',0) AS '||C2.COMPONENTSHORTNAME||' ';
            ELSE
                lv_MastComponent := lv_MastComponent ||', NVL(B.'||C2.COMPONENTSHORTNAME||',0) AS '||C2.COMPONENTSHORTNAME;
            END IF;
        END IF;
    END LOOP;
    --DBMS_OUTPUT.PUT_LINE('lv_Component: '||lv_CompWithValue);
    --DBMS_OUTPUT.PUT_LINE('lv_CompWithZero: '||lv_CompWithZero);
    


   -----   worker wiser master rate taken for WPSWORKERWISERMATERRATEUPDATE BASED ON LAST EFFECTIVE DATE --------------     
   
   PROC_WPSWORKERRATE(P_COMPCODE,P_DIVCODE,P_FNSTDT,'GBL_WORKERRATE_ASON',P_PROCESSTYPE);
   
    if P_ViewName = 'MAST' OR NVL(P_ViewName,'ALL') = 'ALL' then
        if length(ltrim(rtrim(NVL(lv_MastComponent,'X')))) <=1 then
            lv_MastComponent := 'FBASIC,DA,ADHOC';
        end if;
        lv_SqlStr := ' CREATE OR REPLACE VIEW MAST  '||CHR(10)
                   ||' AS '||CHR(10)
                   ||' SELECT  A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL AS WORKERSERIAL, A.TOKENNO AS TOKENNO, A.ESINO AS ESINO, A.PFNO AS PFNO, A.WORKERCATEGORYCODE AS WORKERCATEGORYCODE, A.GRADECODE, NVL(A.WORKTYPECODE,''T'')  WORKTYPECODE,'||CHR(10)
                   ||' A.WORKERNAME AS WORKERNAME, A.DEPARTMENTCODE, A.DESIGNATION AS DESIGNATION, A.SEX AS SEX, A.MARITALSTATUS AS MARITALSTATUS,  '||CHR(10)
                   ||' TRIM (A.QUARTERALLOTED) AS QUARTERALLOTED, NVL(A.PFAPPLICABLE,0) PFAPPLICABLE, NVL(A.EPFAPPLICABLE,0) EPFAPPLICABLE,  '||CHR(10)
                   ||' TRIM (NVL (A.HRAAPPLICABLE, ''N'')) AS HRAAPPLICABLE,  TRIM (NVL (A.PTAXAPPLICABLE, ''N'')) PTAXAPPLICABLE,'||CHR(10)
                   ||' TRIM (NVL (A.ESIAPPLICABLE, ''N'')) ESIAPPLICABLE, TRIM (NVL (A.WELFAREAPPLICABLE, ''N'')) WELFAREAPPLICABLE, '||CHR(10)
                   ||' A.DATEOFBIRTH AS DATEOFBIRTH, A.DATEOFJOINING AS DATEOFJOINING, A.DATEOFRETIREMENT AS DATEOFRETIREMENT, '||CHR(10)
                   ||' A.ACTIVE AS ACTIVE, NVL(NOOFINCREMENT,0) NOOFINCREMENT,NVL(G.GRADEINCRRATE,0)GRADEINCRRATE, '||CHR(10)
                   ||' '||lv_MastComponent||' '||CHR(10) 
                   ||' FROM WPSWORKERMAST A, GBL_WORKERRATE_ASON B ,WPSGRADEMASTER G'||CHR(10)
                   ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE AND A.WORKERSERIAL = B.WORKERSERIAL'||CHR(10)
                   ||'   AND A.ACTIVE =''Y''    '||CHR(10)
                   ||'   AND A.COMPANYCODE=G.COMPANYCODE(+) AND A.DIVISIONCODE=G.DIVISIONCODE(+) AND A.GRADECODE=G.GRADECODE(+)      '||CHR(10);
       EXECUTE IMMEDIATE lv_SqlStr;
       insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
       values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'MAST');
       COMMIT;
    END IF;   
    IF P_ViewName  = 'ATTN' OR NVL(P_ViewName,'ALL') = 'ALL' then
         lv_SqlStr := 'CREATE OR REPLACE VIEW ATTN '||CHR(10)
                   || 'AS '||CHR(10) 
                   || 'SELECT A.WORKERSERIAL, A.TOKENNO,  A.WORKERCATEGORYCODE, ' ||CHR(10);
         IF INSTR(lv_TableName,'_MV') <=0 THEN          
            lv_SqlStr := lv_SqlStr ||' A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL, O.WORKERTYPECODE, O.RATE OCP_RT,  '||CHR(10);
         END IF;
         lv_SqlStr := lv_SqlStr ||' TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'')  AS FORTNIGHTSTARTDATE, TO_DATE('''||P_FNENDT||''',''DD/MM/YYYY'') AS FORTNIGHTENDDATE,  '||chr(10)      
                   || ' SUM(NVL(STATUTORYHOURS,0)) AS STLHOURS, SUM(NVL(A.ATTENDANCEHOURS,0)) ATTENDANCEHOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.HOLIDAYHOURS,0)) AS HOLIDAYHOURS, '||chr(10)
                   ||'  SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) AS NIGHTALLOWANCEHOURS, SUM(NVL(A.FBKHOURS,0)) AS FBKHOURS, SUM(NVL(A.LAYOFFHOURS,0)) AS LAYOFFHOURS,  '||chr(10)
                   ||'  SUM(NVL(A.OT_NSHRS,0)) OT_NSHRS, SUM(NVL(A.OTH_HRS,0)) OTH_HRS, SUM(NVL(A.STLHOURS_ENCASH,0)) AS STLHOURS_ENCASH '||chr(10)
                   || ''||lv_AttnComponent||' '||chr(10)
                   || ' FROM WPSATTENDANCEDAYWISE A, WPSWORKERMAST B '||CHR(10);
         IF INSTR(lv_TableName,'_MV') <=0 THEN
            lv_SqlStr := lv_SqlStr ||' , VW_WPSOCCUPATIONMAST O '||CHR(10);        -- WPSSECTIONMAST S 
         END IF;                  
         lv_SqlStr := lv_SqlStr || ' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   || '   AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' '||CHR(10)
                   || '   AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||CHR(10)
                   || '   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE =  B.DIVISIONCODE '||CHR(10)
                   || '   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10);
        IF INSTR(lv_TableName,'_MV') <=0 THEN
            lv_SqlStr := lv_SqlStr ||' AND A.COMPANYCODE = O.COMPANYCODE AND A.DIVISIONCODE = O.DIVISIONCODE  '||CHR(10)
                                  || ' AND A.DEPARTMENTCODE = O.DEPARTMENTCODE AND A.SECTIONCODE = O.SECTIONCODE AND A.OCCUPATIONCODE = O.OCCUPATIONCODE'||CHR(10);
        END IF;
        lv_SqlStr := lv_SqlStr || ' GROUP BY A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE '||CHR(10);
        IF INSTR(lv_TableName,'_MV') <=0 THEN
            lv_SqlStr := lv_SqlStr ||' , A.SHIFTCODE,A.DEPARTMENTCODE,A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL, O.WORKERTYPECODE, O.RATE '||CHR(10);
        END IF;
            lv_SqlStr := lv_SqlStr ||' ORDER BY A.TOKENNO '||CHR(10);
       EXECUTE IMMEDIATE lv_SqlStr;
       insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
       values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'ATTN');
       COMMIT;
    END IF;
    
    IF P_ViewName  = 'COMP' OR NVL(P_ViewName,'ALL') = 'ALL' then
         lv_SqlStr := ' CREATE OR REPLACE VIEW COMPONENT '||CHR(10)
                   || ' AS ('||CHR(10)
                   || ' SELECT '''|| lv_fn_stdt ||''' AS FORTNIGHTSTARTDATE, '''|| lv_fn_endt ||''' AS FORTNIGHTENDDATE, A.WORKERSERIAL, A.TOKENNO '||CHR(10);
         IF INSTR(lv_TableName,'_MV') <=0 THEN
            lv_SqlStr := lv_SqlStr ||' ,A.SHIFTCODE, A.DEPARTMENTCODE,A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL '||CHR(10);
         END IF;
         lv_SqlStr := lv_SqlStr || ' '|| lv_CompWithValue ||' '||chr(10)
                   || ' FROM '||lv_TableName||' A '||CHR(10)
                   || ' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   || '   AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10)
                   || ' GROUP BY A.FORTNIGHTSTARTDATE, A.FORTNIGHTENDDATE, A.WORKERSERIAL, A.TOKENNO '||CHR(10);
        IF INSTR(lv_TableName,'_MV') <=0 THEN
            lv_SqlStr := lv_SqlStr ||' ,A.SHIFTCODE, A.DEPARTMENTCODE,A.SECTIONCODE,A.OCCUPATIONCODE, A.DEPTSERIAL '||CHR(10);
        END IF;
            lv_SqlStr := lv_SqlStr || ' ) '||chr(10);
       EXECUTE IMMEDIATE lv_SqlStr;
       insert into WPS_error_log(COMPANYCODE,DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
       values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'COMP');
       COMMIT;
    END IF;
    ------- VIEW FOR FORTNIGHT PARAMETER TABLE ---------
    if NVL(P_ViewName,'ALL') = 'ALL' then
        lv_SqlStr := ' CREATE OR REPLACE VIEW FNPARAM AS '||CHR(10)
                   ||' SELECT * FROM WPSFORTNIGHTWAGESPARAMETER '||CHR(10)
                   ||' WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
                   ||' AND DEPARTMENTCODE IS NULL '||CHR(10)
                   ||' AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||chr(10);
       EXECUTE IMMEDIATE lv_SqlStr;
       insert into WPS_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
       values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'FNPARAM');                   
    end if;                                  
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
 values( P_COMPCODE, P_DIVCODE, lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
end;
/


DROP PROCEDURE PROC_WPSVOUCHERPROCESS;

CREATE OR REPLACE PROCEDURE PROC_WPSVOUCHERPROCESS (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'VOUCHER PROCESS')
/* CHANGES AS ON 03/12/2018' PARTIAL*/                                                  
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_ComponentNew  varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_ProcName     varchar2(30) := 'PROC_WPSVOUCHERPROCESS';
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_Ln_Checked_Dt    date;
lv_prev_fn_stdt date;
lv_prev_fn_endt date;
lv_MinimumPayableAmt    number := 0;            -- use for Minimum payment amount which defined in the WPSWAGESPARAMETER TABLE 
lv_RoundOffRs           number := 0;            -- use for Round Off Rs. which defined in the WPSWAGESPARAMETER TABLE
lv_ESI_E_Perc           number := 0.75;         -- USE FOR ESI EMPLOYEE CONTRIBUTION
lv_ProcessType  varchar2(50):= 'FORTNIGHTLY';   -- use for wage process Fortnightly or Monthly which defined in the WPSWAGESPARAMETER TABLE MAINLY REQUIRE FOR P.TAX CALCULATION 
lv_WagesAsOn    number(11,2) := 0;
lv_TempVal      number(11,2) :=0;
lv_TempDednAmt  number(11,2) := 0;
lv_ComponentAmt number(11,2) := 0;
lv_TempDednAmt_Prev number(11,2) :=0;
lv_intCnt       number(5) :=0;
lv_GrossWages   number(11,2) := 0;
lv_PREV_FN_PTAXGROSS        NUMBER(11,2):= 0;
lv_PREV_FN_PTAX             NUMBER(11,2):= 0;
lv_PREV_FN_PFGROSS          NUMBER(11,2):=0;
lv_PREV_FN_ESIGROSS         NUMBER(11,2) := 0;
lv_PREV_FN_ESI_E            NUMBER(11,2):=0;
lv_PREV_FN_PF_E             NUMBER(11,2):=0;
lv_PREV_FN_VPF              number(11,2) := 0;
lv_VPF_PERCENT              number(11,2) :=0;
lv_TotalDedn    number(11,2) := 0;
lv_CoinBf       number(11,2) := 0;
lv_CoinCf       number(11,2) := 0;
lv_strWorkerSerial  varchar2(10) :='';
lv_SrlNo        number   :=1;                    -- varaible use for serially which No. execute; 
lv_RowType_Prev_Data    GTT_WPS_PREV_FNDATA%ROWTYPE;
lv_RoundoffType varchar2(1) :='';
lv_EMI_DEDN_TYPE    varchar2(20):='PARTIAL';
lv_PFLN_CAP_STOP    varchar2(1) :='N';
lv_PFLN_INT_STOP    varchar2(1) :='N';
lv_CNT          number(11,2) := 0;
lv_SqlStr        varchar2(32767) := '';
lv_PolicyNo     varchar2(50) := ''; 
lv_PF_PERCENT   number(5) := 10;
lv_MAX_PFGROSS  number(11,2) := 0;
lv_MAX_PF_CONT  number(11,2) :=0;
lv_fn_LastDailyWagesDT  date := to_date(P_FNENDT,'DD/MM/YYYY'); --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT
lv_YYYYMM       varchar2(6) := to_char(lv_fn_stdt,'YYYYMM');   --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT 
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_sql := 'drop table '||P_PHASE_TABLENAME;
    lv_Ln_Checked_Dt := lv_prev_fn_endt+4;
    
    if SUBSTR(P_FNSTDT,1,2) = '16' then
        lv_prev_fn_stdt := to_date('01'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
    end if;
    
    
    BEGIN 
        execute immediate lv_sql;
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
    PROC_WPSWAGESDETAILS_MERGE(P_COMPCODE, P_DIVCODE, P_FNSTDT,P_FNENDT, P_PHASE, 'WPSWAGESDETAILS_SWT', 'WPSWAGESDETAILS_MV_SWT',  P_WORKERSERIAL);
    
    
    lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = FN_ROUNDOFFRS(GROSS_WAGES,1,''S'')';
    execute immediate lv_Sql;
    commit;


commit;    
end;
/


DROP PROCEDURE PROC_WPSWAGESPRC_DEDN_080317;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPRC_DEDN_080317" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_ComponentNew  varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_prev_fn_stdt date;
lv_prev_fn_endt date;
lv_MinimumPayableAmt    number := 0;            -- use for Minimum payment amount which defined in the WPSWAGESPARAMETER TABLE 
lv_RoundOffRs           number := 0;            -- use for Round Off Rs. which defined in the WPSWAGESPARAMETER TABLE
lv_ProcessType  varchar2(50):= 'FORTNIGHTLY';   -- use for wage process Fortnightly or Monthly which defined in the WPSWAGESPARAMETER TABLE MAINLY REQUIRE FOR P.TAX CALCULATION 
lv_WagesAsOn    number(11,2) := 0;
lv_TempVal      number(11,2) :=0;
lv_TempDednAmt  number(11,2) := 0;
lv_ComponentAmt number(11,2) := 0;
lv_intCnt       number(5) :=0;
lv_GrossWages   number(11,2) := 0;
lv_TotalDedn    number(11,2) := 0;
lv_CoinBf       number(11,2) := 0;
lv_strWorkerSerial  varchar2(10) :='';
lv_SrlNo        number   :=1;                    -- varaible use for serially which No. execute; 
lv_RowType_Prev_Data    GTT_WPS_PREV_FNDATA%ROWTYPE;
lv_RoundoffType varchar2(1) :='';

begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_sql := 'drop table '||P_PHASE_TABLENAME;
    if P_FNSTDT = '16' then
        lv_prev_fn_stdt := to_date('01'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
    end if;
    
    BEGIN 
        execute immediate lv_sql;
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
    --- BEFORE DEDUCTION PAHSE START MERGE WORKER WISER MULIPLE DATA IN A SINGLE DATA
    PROC_WPSWAGESDETAILS_MERGE(P_COMPCODE, P_DIVCODE, P_FNSTDT,P_FNENDT, P_PHASE, 'WPSWAGESDETAILS_SWT', 'WPSWAGESDETAILS_MV_SWT',  P_WORKERSERIAL);
    lv_sql :='';
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'ATTN',5,P_FNSTDT, P_FNENDT, P_TABLENAME);
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'COMP',5,P_FNSTDT, P_FNENDT, P_TABLENAME);
    ---- TABLE CREATE FROM VIEW ----------
  
    PROC_LOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
    PROC_PFLOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
    
    
   --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','','', lv_fn_stdt, lv_fn_endt, 'PRC_LOANBREAKUP_INSERT_WAGES PARA'||P_COMPCODE||' '||P_DIVCODE||' '||P_YEARCODE||' '||lv_fn_stdt||' '||lv_fn_endt||'WPS '||P_TABLENAME||' '||' PF');
     
                     
     BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPCOMPONENT CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
    END;
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'COMPONENT TABLE DROPED SUCCESSFULLY');
    --COMMIT;
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'ATTNENDANCE TABLE DROPED SUCCESSFULLY');
    --COMMIT;    
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE '||P_PHASE_TABLENAME||' CASCADE CONSTRAINTS';
      EXCEPTION WHEN OTHERS THEN NULL;
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PAHSE TABLE DROPED SUCCESSFULLY');
    --COMMIT;

--    START Previous Working Fortnight coin c/f fetching worker wise --
    DELETE FROM WPS_PREV_FN_COIN;
    lv_Sql := ' INSERT INTO WPS_PREV_FN_COIN(WORKERSERIAL, FORTNIGHTSTARTDATE, COINCF) '||CHR(10) 
            ||' SELECT A.WORKERSERIAL, A.FORTNIGHTSTARTDATE, A.COINCF '||CHR(10)
            ||' FROM WPSWAGESDETAILS_MV A, '||CHR(10)
            ||'  ( '||CHR(10)
            ||'    SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE  '||CHR(10)
            ||'    FROM WPSWAGESDETAILS_MV  '||CHR(10)
            ||'    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'      AND FORTNIGHTSTARTDATE < '''||lv_fn_stdt||'''  '||CHR(10)
            ||'    GROUP BY WORKERSERIAL  '||CHR(10)
            ||'  ) B  '||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'   AND A.FORTNIGHTSTARTDATE = B.FORTNIGHTSTARTDATE  '||CHR(10);
     
    BEGIN
        INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,'', lv_fn_stdt, lv_fn_endt, 'WPS_PREV_FN_COIN');
        DELETE FROM WPS_PREV_FN_COIN WHERE FORTNIGHTSTARTDATE = lv_fn_stdt;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        WHEN OTHERS THEN
            EXECUTE IMMEDIATE lv_Sql;        
    END;
    lv_SqlTemp := '';
    lv_Sql := '';
--    END Previous Working Fortnight coin c/f fetching worker wise --

    SELECT nvl(MINIMUMSALARYPAYABLE,0) MINIMUMSALARYPAYABLE, nvl(ROUNDOFFRS,0) ROUNDOFFRS, nvl(PROCESSTYPE,'FORTNIGHTLY') PROCESSTYPE,ROUNDOFFTYPE 
    INTO lv_MinimumPayableAmt, lv_RoundOffRs, lv_ProcessType , lv_RoundoffType
    FROM WPSWAGESPARAMETER WHERE COMPANYCODE= P_COMPCODE AND DIVISIONCODE = P_DIVCODE;
     
    --- START BELOW BLOCK CONSIDER FOR PREVIOUS FORTNIGHT DATA , WIHCH ONLY CONSIDER IN 2ND FORTNIGHT FOR REFERES IN DEDUCTION STATEMENT
    DELETE FROM GTT_WPS_PREV_FNDATA;
    
    if P_FNSTDT = '16' THEN
        INSERT INTO GTT_WPS_PREV_FNDATA
        SELECT WORKERSERIAL, TOKENNO,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
        NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX , NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, 
        NVL(PF_CONT,0) PF_CONT, NVL(PF_COM,0) PF_COM, NVL(FPF,0) FPF
        FROM WPSWAGESDETAILS_MV
        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = to_date('01/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy') 
          AND FORTNIGHTENDDATE = to_date('15/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
       --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PAHSE TABLE DROPED SUCCESSFULLY');   
    end if;
    FOR C1 in (
            SELECT COMPONENTCODE, COMPONENTSHORTNAME, COMPONENTTYPE, AMOUNTORFORMULA, MANUALFORAMOUNT, FORMULA, CALCULATIONINDEX, PHASE, 
            NVL(TAKEPARTINWAGES,'N') AS TAKEPARTINWAGES, NVL(COLUMNINATTENDANCE,'N') AS COLUMNINATTENDANCE, 
            NVL(COMPONENTTAG,'N') AS COMPONENTTAG, NVL(COMPONENTGROUP,'XXXXX') AS COMPONENTGROUP 
            FROM WPSCOMPONENTMASTER
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
            AND PHASE = P_PHASE
            AND NVL(TAKEPARTINWAGES,'N') = 'Y'
            ORDER BY CALCULATIONINDEX
          )
    LOOP          
       -- DBMS_OUTPUT.PUT_LINE('COMPONENT : '||lv_AttnComponent);
        lv_Sql_TblCreate := lv_Sql_TblCreate ||', '||C1.COMPONENTSHORTNAME|| ' NUMBER(11,2) DEFAULT 0';
        if C1.COMPONENTGROUP = 'LOAN' Then  --- loan componet should be 0 in component view
            lv_Component := lv_Component ||', 0 AS '||C1.COMPONENTSHORTNAME;
        ELSE 
            IF UPPER(TRIM(C1.AMOUNTORFORMULA)) = 'FORMULA' THEN
                If InStr(C1.FORMULA, '~') > 0 Then
                    --dbms_output.put_line(C1.FORMULA);
                    lv_Sql:= C1.FORMULA;
                    --select REPLACE('''A001''','''','''''')  FROM DUAL
                    lv_Sql:= replace(lv_Sql,'''','''''');
                    lv_Sql:= 'SELECT FN_REPL_FORMULA('''||lv_Sql||''') FROM DUAL'; 
                    
                    --BEGIN
                    EXECUTE IMMEDIATE lv_Sql into lv_SqlTemp ;
                    --EXCEPTION WHEN OTHERS THEN
                    --    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ZZZ PROC_WPSWAGESPROCESS_UPDATE',lv_Sql,lv_Sql,lv_parvalues,lv_remarks);
                    --    RETURN;
                    --END ;
                    lv_Component := lv_Component ||', SUM('||lv_SqlTemp||')  AS '||C1.COMPONENTSHORTNAME;
    --                lv_ComponentNew := lv_ComponentNew||''''||C1.COMPONENTSHORTNAME||'''' as COMPONENTSHORTNAME, SUM('||lv_SqlTemp||')  AS COMPVALUE';
                ELSE
                    lv_Component := lv_Component ||', SUM('||C1.FORMULA||') AS '|| C1.COMPONENTSHORTNAME;    
                END IF;
            ELSE
                lv_Component := lv_Component ||', SUM(NVL(ATTN.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME;
            END IF;
        END IF; 
    END loop;
        
    lv_Component :=  Replace(lv_Component, 'ATTN', 'WPSTEMPATTN');
    lv_Component := Replace(lv_Component, 'MAST', 'WPSTEMPMAST');
    lv_Component := Replace(lv_Component, 'COMPONENT', 'WPSTEMPCOMPONENT');
    
    lv_Sql := ' CREATE TABLE '||P_PHASE_TABLENAME||' AS '||CHR(10)
            ||' SELECT WPSTEMPATTN.WORKERSERIAL,  WPSTEMPMAST.WORKERCATEGORYCODE, '||CHR(10)  
            ||' SUM(NVL(WPSTEMPCOMPONENT.GROSS_WAGES,0)) AS GROSS_WAGES '||CHR(10)  
            ||' '|| lv_Component ||chr(10) 
            ||' FROM WPSTEMPMAST, WPSTEMPATTN, WPSTEMPCOMPONENT '||chr(10)   
            ||' WHERE WPSTEMPATTN.WORKERSERIAL = WPSTEMPMAST.WORKERSERIAL '||chr(10) 
            ||'   AND WPSTEMPATTN.WORKERSERIAL = WPSTEMPCOMPONENT.WORKERSERIAL  '||chr(10);
    if P_WORKERSERIAL is not null then
        lv_Sql := lv_Sql ||' AND WPSTEMPMAST.WORKERSERIAL IN ('||P_WORKERSERIAL||')' ||CHR(10); 
    end if; 
    lv_Sql := lv_Sql ||' GROUP BY WPSTEMPATTN.WORKERSERIAL, WPSTEMPMAST.WORKERCATEGORYCODE '||chr(10);        
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PHASE TABLE CREATION '||lv_SrlNo);
    lv_SrlNo:=lv_SrlNo+1;
    EXECUTE IMMEDIATE lv_Sql;  
    lv_Sql := '';
    COMMIT;
   
     ---- BELOW PROCERURE CALL FOR DATA CONVERT FROM COLUMN TO ROW --- CREATE TABLE NAME  - GTT_SWT_PHASE_DEDN
     
   lv_Sql := 'begin  proc_wps_PHASE_DEDN_rowise('''||P_COMPCODE||''','''||P_DIVCODE||''', '''||P_FNSTDT||''','''||P_FNENDT||'''); end;';
   EXECUTE IMMEDIATE lv_Sql;
   

    
   /* begin     
      proc_wps_PHASE_DEDN_rowise(P_COMPCODE, P_DIVCODE, P_FNSTDT, P_FNENDT);      
    exception
    WHEN OTHERS THEN
        LV_SQLERRM := SQLERRM;
       dbms_output.put_line('xxxxxxxxxxxxxxxxxxx'||LV_SQLERRM);
       RETURN ;
    end;*/ 
    INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'AFTER MERGES '||lv_SrlNo  );
    lv_SrlNo:=lv_SrlNo+1;    
    commit;
    
    lv_strWorkerSerial := 'X';
    For cWages in ( SELECT A.WORKERSERIAL, A.WORKERCATEGORYCODE, A.GROSS_WAGES, A.COMPONENTSHORTNAME, A.COMPONENTAMOUNT, B.CALCULATIONINDEX, 
                    NVL(C.APPLICABLE,'NO') APPLICABLE, NVL(B.COMPONENTGROUP,'XX') COMPONENTGROUP  
                    FROM GTT_SWT_PHASE_DEDN A, WPSCOMPONENTMASTER B, WPSWORKERCATEGORYVSCOMPONENT C--, SWT_PHASE_DEDN D    
                    WHERE A.COMPONENTSHORTNAME = B.COMPONENTSHORTNAME 
                    AND B.COMPONENTSHORTNAME = C.COMPONENTSHORTNAME
                    AND A.WORKERCATEGORYCODE = C.WORKERCATEGORYCODE
                    AND NVL(C.APPLICABLE,'NO') <> 'NO'
--                    AND A.WORKERSERIAL = D.WORKERSERIAL
                    ORDER BY A.WORKERSERIAL, B.CALCULATIONINDEX )
    LOOP
        lv_intCnt := lv_intCnt+1;
        --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'INSIDE CURSOR LOOP '|| lv_intCnt);
        if lv_strWorkerSerial <> cWages.WORKERSERIAL then
      
            if SUBSTR(P_FNSTDT,1,2) = '16' then
               /* begin
                    SELECT * INTO lv_RowType_Prev_Data FROM GTT_WPS_PREV_FNDATA where workerserial = cWages.WORKERSERIAL;
                exception
                    when others then 
                      null;
                end;*/
                pkg_rowtab.WPS_PREV_FNDATA_row(cWages.WORKERSERIAL,lv_RowType_Prev_Data);
            end if;
            
            if lv_intCnt <> 1 then
                begin
                    select COINCF into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
                exception
                    when others then null;
                end;
                lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
                lv_TempDednAmt := lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn - lv_ComponentAmt;
                lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINBF = '||lv_CoinBf||', COINCF = '||lv_TempDednAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
                execute immediate lv_Sql;
                insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo || ' WAGES ON-BFCF '|| lv_intCnt ||'  '||lv_CoinBf );
                lv_SrlNo:=lv_SrlNo+1;
                commit;
            end if;
            lv_strWorkerSerial := cWages.WORKERSERIAL;
            lv_WagesAsOn := cWages.GROSS_WAGES - lv_MinimumPayableAmt;
            lv_GrossWages := cWages.GROSS_WAGES;
            lv_TotalDedn :=0;
              
        end if; 
        lv_TempDednAmt := 0;
        lv_ComponentAmt := cWages.COMPONENTAMOUNT;
        CASE cWages.COMPONENTGROUP
            WHEN 'PTAX' THEN
                if lv_ProcessType = 'MONTHLY' THEN
                    SELECT NVL(PTAXAMOUNT,0) into lv_TempVal FROM PTAXSLAB
                    WHERE 1=1
                      AND STATENAME = 'WEST BENGAL'
                      AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                      AND SLABAMOUNTFROM <= lv_ComponentAmt  
                      AND SLABAMOUNTTO >= lv_ComponentAmt;
                      lv_ComponentAmt := nvl(lv_TempVal,0);
                else            -- OTHER WISER CONSIDER PROCESS TYPE - FORTNIGHTLY
                    if SUBSTR(P_FNSTDT,1,2) = '16' THEN
                        lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_RowType_Prev_Data.GROSS_PTAX,0);
                    end if;
                    begin
                        SELECT PTAXAMOUNT into lv_TempVal FROM PTAXSLAB
                        WHERE 1=1
                          AND STATENAME = 'WEST BENGAL'
                          AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                          AND SLABAMOUNTFROM <= lv_ComponentAmt  
                          AND SLABAMOUNTTO >= lv_ComponentAmt;
                    exception
                        when others then 
                          null;
                    end;
                    if SUBSTR(P_FNSTDT,1,2) = '16' THEN  
                        lv_ComponentAmt := nvl(lv_TempVal,0) - nvl(lv_RowType_Prev_Data.P_TAX,0);
                    else
                        lv_ComponentAmt := nvl(lv_TempVal,0);
                    end if;                     
                end if;
            
             WHEN 'PF LOAN' THEN
                
                lv_ComponentAmt := 0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
               -- if P_TRANTYPE = 'SALARY' OR P_TRANTYPE = 'FINAL SETTLEMENT' then
                    lv_ComponentAmt := cWages.COMPONENTAMOUNT;
                    lv_ComponentAmt:=0;
                    BEGIN
                    
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN PFLOAN_BAL > CAP_EMI THEN CAP_EMI ELSE PFLOAN_BAL END INTO lv_ComponentAmt  
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND PFLOAN_BAL > 0;
                              --DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', COMPONENT '||substr(cWages.COMPONENTSHORTNAME,1,5)||' lv_ComponentAmt ' || lv_ComponentAmt);
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN PFLOAN_INT_BAL > INT_EMI THEN INT_EMI ELSE PFLOAN_INT_BAL END INTO lv_ComponentAmt  
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND PFLOAN_INT_BAL > 0;
                        else
                            lv_ComponentAmt := 0;
                        end if;
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;        
                --else
               --     lv_ComponentAmt := 0;
                --end if;                
            WHEN 'LOAN' THEN
                lv_ComponentAmt:=0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
                --if P_TRANTYPE = 'SALARY' OR P_TRANTYPE ='FINAL SETTLEMENT' then
                    BEGIN
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN LOAN_BAL > CAP_EMI THEN CAP_EMI ELSE LOAN_BAL END INTO lv_ComponentAmt  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'PIS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_BAL > 0;
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN LOAN_INT_BAL > INT_EMI THEN INT_EMI ELSE LOAN_BAL END INTO lv_ComponentAmt  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'PIS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_INT_BAL > 0;
                        else
                            lv_ComponentAmt := 0;
                        end if;
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;
               -- end if; 
            else
              lv_ComponentAmt := cWages.COMPONENTAMOUNT;    
        end case;    
        if lv_WagesAsOn >  lv_ComponentAmt then             -- cWages.COMPONENTAMOUNT
            lv_TempDednAmt := lv_ComponentAmt;              -- cWages.COMPONENTAMOUNT;
        else            
            lv_TempDednAmt := lv_WagesAsOn;  
        end if;
        
        if lv_TempDednAmt <> 0 then
            lv_TotalDedn := lv_TotalDedn + lv_TempDednAmt;
            lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set '||cWages.componentshortname||' = '||lv_TempDednAmt||', TOT_DEDUCTION = '||lv_TotalDedn||' where workerserial = '''||cWages.WorkerSerial||''' ';
            ---DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', lv_Sql '||lv_Sql);
            insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn ||'Component- '||cWages.componentshortname );
            execute immediate lv_Sql;
            --lv_Sql := 'TEST'; 
        end if;
        lv_WagesAsOn := lv_WagesAsOn - lv_TempDednAmt;
        --lv_remarks := 'DEDUCTION COMPONENT UPDATING => WORKSERIAL='||cWages.WORKERSERIAL||',+'||lv_strWorkerSerial||', GROSS WAGES='||cWages.GROSS_WAGES||',Minimum Pay='||lv_MinimumPayableAmt||', As On Balance='||lv_WagesAsOn;
        insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn );
        lv_SrlNo := lv_SrlNo + 1;          
    END LOOP; 
    
--    start for last record update actual pay, coin bf, coin cf
    begin
        select COINCF into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
    exception
        when others then null;
    end;
    lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
    lv_TempDednAmt := lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn - lv_ComponentAmt;
    lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINBF = '||lv_CoinBf||', COINCF = '||lv_TempDednAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
    execute immediate lv_Sql;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-BFCF'||lv_WagesAsOn||'  '||lv_CoinBf );
    lv_SrlNo := lv_SrlNo + 1;
    commit;
    
    PROC_LOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
    PROC_PFLOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
    
     lv_remarks := 'PF LOAN BALANCE INSERT';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'PF', NULL,NULL, NULL);
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'GENERAL', NULL,NULL, NULL);
    lv_remarks := 'PF LOAN BALANCE UPDATE'; 
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'PF',NULL,NULL,NULL);
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE'; 
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'GENERAL',NULL,NULL,NULL);        
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    commit; 

--    end for last record update actual pay, coin bf, coin cf        
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
commit;    
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION',lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo);
    commit;
    --dbms_output.put_line('PROC - PROC_WPSWAGESPROCESS_UPDATE : ERROR !! WHILE WAGES PROCESS '||P_FNSTDT||' AND PHASE -> '||ltrim(trim(P_PHASE))||' : '||sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_DEDUCTIO2;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGESPROCESS_DEDUCTIO2 (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL)
/* CHANGES AS ON 03/12/2018' PARTIAL*/                                                  
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_ComponentNew  varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_prev_fn_stdt date;
lv_prev_fn_endt date;
lv_MinimumPayableAmt    number := 0;            -- use for Minimum payment amount which defined in the WPSWAGESPARAMETER TABLE 
lv_RoundOffRs           number := 0;            -- use for Round Off Rs. which defined in the WPSWAGESPARAMETER TABLE
lv_ESI_E_Perc           number := 1.75;         -- USE FOR ESI EMPLOYEE CONTRIBUTION
lv_ProcessType  varchar2(50):= 'FORTNIGHTLY';   -- use for wage process Fortnightly or Monthly which defined in the WPSWAGESPARAMETER TABLE MAINLY REQUIRE FOR P.TAX CALCULATION 
lv_WagesAsOn    number(11,2) := 0;
lv_TempVal      number(11,2) :=0;
lv_TempDednAmt  number(11,2) := 0;
lv_ComponentAmt number(11,2) := 0;
lv_intCnt       number(5) :=0;
lv_GrossWages   number(11,2) := 0;
lv_PREV_FN_PTAXGROSS        NUMBER(11,2):= 0;
lv_PREV_FN_PTAX             NUMBER(11,2):= 0;
lv_TotalDedn    number(11,2) := 0;
lv_CoinBf       number(11,2) := 0;
lv_CoinCf       number(11,2) := 0;
lv_strWorkerSerial  varchar2(10) :='';
lv_SrlNo        number   :=1;                    -- varaible use for serially which No. execute; 
lv_RowType_Prev_Data    GTT_WPS_PREV_FNDATA%ROWTYPE;
lv_RoundoffType varchar2(1) :='';
lv_EMI_DEDN_TYPE    varchar2(20):='PARTIAL';
lv_PFLN_CAP_STOP    varchar2(1) :='N';
lv_PFLN_INT_STOP    varchar2(1) :='N';
lv_CNT          number(11,2) := 0;
lv_SqlStr        varchar2(32767) := ''; 
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_sql := 'drop table '||P_PHASE_TABLENAME;
   
 if SUBSTR(P_FNSTDT,1,2) = '16' then
        lv_prev_fn_stdt := to_date('01'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
    end if;
    
    BEGIN 
        execute immediate lv_sql;
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
    --- BEFORE DEDUCTION PAHSE START MERGE WORKER WISER MULIPLE DATA IN A SINGLE DATA
    PROC_WPSWAGESDETAILS_MERGE(P_COMPCODE, P_DIVCODE, P_FNSTDT,P_FNENDT, P_PHASE, 'WPSWAGESDETAILS_SWT', 'WPSWAGESDETAILS_MV_SWT',  P_WORKERSERIAL);
    lv_sql :='';
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'ATTN',7,P_FNSTDT, P_FNENDT, P_TABLENAME);
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'COMP',7,P_FNSTDT, P_FNENDT, P_TABLENAME);
    ---- TABLE CREATE FROM VIEW ----------
    
    PROC_LOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS','YES');
    PROC_PFLOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS','YES');
   
    PRC_PFLN_EMI_UPDT_ONATTN_HRS(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'), TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPSWAGESDETAILS_MV_SWT','GBL_PFLOANBLNC','','','');

--    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'PF', NULL,NULL, NULL); 
--    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'PF',NULL,NULL,NULL);

    ---- LIC DATA PREPARATION PROCEDURE CALL--------
--    PROC_LIC_BLNC (P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'LIC','WPS','YES',NULL);
    PROC_LICDEDUCTION(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','LICDETAILS','WPS','YES');

    
    ------ ELECTRIC METER READING -----------------------------------
--    PROC_ELECBLNC (P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),NULL,'WPS');                        

    --  SHOP RENT DATA PREPARATION PROCEDURE CALL
--    PROC_SHOPRENT_BLNC (P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'SHOP_RENT', P_YEARCODE ,'WPS','YES',NULL);    


    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPCOMPONENT CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
    END;
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'COMPONENT TABLE DROPED SUCCESSFULLY');
    --COMMIT;
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'ATTNENDANCE TABLE DROPED SUCCESSFULLY');
    --COMMIT;    
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE '||P_PHASE_TABLENAME||' CASCADE CONSTRAINTS';
      EXCEPTION WHEN OTHERS THEN NULL;
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PAHSE TABLE DROPED SUCCESSFULLY');
    --COMMIT;

--    START Previous Working Fortnight coin c/f fetching worker wise --

    lv_Sql := ' INSERT INTO WPS_PREV_FN_COIN(WORKERSERIAL, FORTNIGHTSTARTDATE, COINCF) '||CHR(10) 
            ||' SELECT A.WORKERSERIAL, A.FORTNIGHTSTARTDATE, A.COINCF '||CHR(10)
            ||' FROM WPSWAGESDETAILS_MV A, '||CHR(10)
            ||'  ( '||CHR(10)
            ||'    SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE  '||CHR(10)
            ||'    FROM WPSWAGESDETAILS_MV  '||CHR(10)
            ||'    WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'      AND FORTNIGHTSTARTDATE > TO_DATE(''01/08/2018'',''DD/MM/YYYY'') '||CHR(10)  --- DUE TO WAGES GO LIVE ON 01/08/2018'
            ||'      AND FORTNIGHTSTARTDATE < '''||lv_fn_stdt||'''  '||CHR(10)
            ||'    GROUP BY WORKERSERIAL  '||CHR(10)
            ||'  ) B  '||CHR(10)
            ||' WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'   AND A.FORTNIGHTSTARTDATE = B.FORTNIGHTSTARTDATE  '||CHR(10);
     
    lv_Sql := ' INSERT INTO WPS_PREV_FN_COIN(WORKERSERIAL, FORTNIGHTSTARTDATE, COINCF) '||CHR(10) 
        ||' SELECT B.WORKERSERIAL, B.FORTNIGHTSTARTDATE, CASE WHEN B.FORTNIGHTSTARTDATE = TO_DATE(''01/08/2018'',''DD/MM/YYYY'') THEN C.COMPONENTAMOUNT ELSE A.COINCF END COINCF '||CHR(10) 
        ||' FROM WPSWAGESDETAILS_MV A, '||CHR(10) 
        ||' ( '||CHR(10) 
        ||'     SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE '||CHR(10)
        ||'     FROM ( '||CHR(10)
        ||'             SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE '||CHR(10)  
        ||'             FROM WPSWAGESDETAILS_MV '||CHR(10)  
        ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'               AND FORTNIGHTSTARTDATE > TO_DATE(''01/08/2018'',''DD/MM/YYYY'') '||CHR(10)  --- DUE TO WAGES GO LIVE ON 01/08/2018'
        ||'               AND FORTNIGHTSTARTDATE < '''||lv_fn_stdt||'''  '||CHR(10)  ---- add on 16/10/2018 why this line delete , but last fNE (30/09/2018) it is in the system
        ||'             GROUP BY WORKERSERIAL '||CHR(10)
        ||'             UNION ALL '||CHR(10)
        ||'             SELECT WORKERSERIAL, FORTNIGHTSTARTDATE '||CHR(10)
        ||'             FROM WPSCOMPONENTOPENING '||CHR(10)
        ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'               AND COMPONENTCODE = ''COINBF'' '||CHR(10)
        ||'          ) '||CHR(10)
        ||'     GROUP BY WORKERSERIAL '||CHR(10)            
        ||' ) B, '||CHR(10)
        ||' ( SELECT * FROM WPSCOMPONENTOPENING '||CHR(10)
        ||'   WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'     AND COMPONENTCODE=''COINBF'' '||CHR(10) 
        ||'  ) C '||CHR(10) 
        ||' WHERE 1=1 '||CHR(10)
        ||'   AND B.WORKERSERIAL = A.WORKERSERIAL (+) '||CHR(10)  
        ||'   AND B.FORTNIGHTSTARTDATE = A.FORTNIGHTSTARTDATE (+) '||CHR(10)
        ||'   AND B.WORKERSERIAL = C.WORKERSERIAL (+) '||CHR(10);

    BEGIN
       -- PRASUN INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,'', lv_fn_stdt, lv_fn_endt, 'WPS_PREV_FN_COIN');
        DELETE FROM WPS_PREV_FN_COIN; --WHERE FORTNIGHTSTARTDATE = lv_fn_stdt;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        WHEN OTHERS THEN
            EXECUTE IMMEDIATE lv_Sql;        
    END;
    lv_SqlTemp := '';
    lv_Sql := '';
--    END Previous Working Fortnight coin c/f fetching worker wise --

    SELECT nvl(MINIMUMSALARYPAYABLE,0) MINIMUMSALARYPAYABLE, nvl(ROUNDOFFRS,0) ROUNDOFFRS, 
    nvl(PROCESSTYPE,'FORTNIGHTLY') PROCESSTYPE,ROUNDOFFTYPE, nvl(ESIEMLPLOYEEPERCENT,0) ESIEMLPLOYEEPERCENT 
    INTO lv_MinimumPayableAmt, lv_RoundOffRs, lv_ProcessType , lv_RoundoffType, lv_ESI_E_Perc 
    FROM WPSWAGESPARAMETER WHERE COMPANYCODE= P_COMPCODE AND DIVISIONCODE = P_DIVCODE;
     
    --- START BELOW BLOCK CONSIDER FOR PREVIOUS FORTNIGHT DATA , WIHCH ONLY CONSIDER IN 2ND FORTNIGHT FOR REFERES IN DEDUCTION STATEMENT
    DELETE FROM GTT_WPS_PREV_FNDATA;
    
    if SUBSTR(P_FNSTDT,1,2) = '16' THEN
        INSERT INTO GTT_WPS_PREV_FNDATA
        SELECT WORKERSERIAL, TOKENNO,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
        NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX , NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, 
        NVL(PF_CONT,0) PF_CONT, NVL(PF_COM,0) PF_COM, NVL(FPF,0) FPF,
        NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_CONT,0) ESI_CONT, NVL(ESI_COMP_CONT,0) ESI_COMP_CONT
        FROM WPSWAGESDETAILS_MV
        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
          AND FORTNIGHTSTARTDATE = to_date('01/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy') 
          AND FORTNIGHTENDDATE = to_date('15/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
          
        insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PAHSE TABLE DROPED SUCCESSFULLY');
          
    end if;
    FOR C1 in (
            SELECT COMPONENTCODE, COMPONENTSHORTNAME, COMPONENTTYPE, AMOUNTORFORMULA, MANUALFORAMOUNT, FORMULA, CALCULATIONINDEX, PHASE, 
            NVL(TAKEPARTINWAGES,'N') AS TAKEPARTINWAGES, NVL(COLUMNINATTENDANCE,'N') AS COLUMNINATTENDANCE, 
            NVL(COMPONENTTAG,'N') AS COMPONENTTAG, NVL(COMPONENTGROUP,'XXXXX') AS COMPONENTGROUP 
            FROM WPSCOMPONENTMASTER
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
            AND PHASE = P_PHASE
            AND NVL(TAKEPARTINWAGES,'N') = 'Y'
            ORDER BY CALCULATIONINDEX           
            
          )
    LOOP          
       -- DBMS_OUTPUT.PUT_LINE(C1.COMPONENTGROUP);
        lv_Sql_TblCreate := lv_Sql_TblCreate ||', '||C1.COMPONENTSHORTNAME|| ' NUMBER(11,2) DEFAULT 0';
        if instr(C1.COMPONENTGROUP,'LOAN') > 0 Then  --- loan componet should be 0 in component view
            lv_Component := lv_Component ||', 0 AS '||C1.COMPONENTSHORTNAME;
        elsif C1.COMPONENTGROUP = 'LIC' Then  --- loan componet should be 0 in component view
            lv_Component := lv_Component ||', 0 AS '||C1.COMPONENTSHORTNAME;
        ELSE 
            IF UPPER(TRIM(C1.AMOUNTORFORMULA)) = 'FORMULA' THEN
                If InStr(C1.FORMULA, '~') > 0 Then
                    --dbms_output.put_line(C1.FORMULA);
                    lv_Sql:= C1.FORMULA;
                    --select REPLACE('''A001''','''','''''')  FROM DUAL
                    lv_Sql:= replace(lv_Sql,'''','''''');
                    lv_Sql:= 'SELECT FN_REPL_FORMULA('''||lv_Sql||''') FROM DUAL'; 
                    
                    --BEGIN
                    EXECUTE IMMEDIATE lv_Sql into lv_SqlTemp ;
                    --EXCEPTION WHEN OTHERS THEN
                    --    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ZZZ PROC_WPSWAGESPROCESS_UPDATE',lv_Sql,lv_Sql,lv_parvalues,lv_remarks);
                    --    RETURN;
                    --END ;
                    lv_Component := lv_Component ||', SUM('||lv_SqlTemp||')  AS '||C1.COMPONENTSHORTNAME;
    --                lv_ComponentNew := lv_ComponentNew||''''||C1.COMPONENTSHORTNAME||'''' as COMPONENTSHORTNAME, SUM('||lv_SqlTemp||')  AS COMPVALUE';
                ELSE
                    lv_Component := lv_Component ||', SUM('||C1.FORMULA||') AS '|| C1.COMPONENTSHORTNAME;    
                END IF;
            ELSE
                lv_Component := lv_Component ||', SUM(NVL(ATTN.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME;
            END IF;
        END IF; 
    END loop;
        
    lv_Component :=  Replace(lv_Component, 'ATTN', 'WPSTEMPATTN');
    lv_Component := Replace(lv_Component, 'MAST', 'WPSTEMPMAST');
    lv_Component := Replace(lv_Component, 'COMPONENT', 'WPSTEMPCOMPONENT');
    --DBMS_OUTPUT.PUT_LINE ('XXX '||lv_Component);
    lv_Sql := ' CREATE TABLE '||P_PHASE_TABLENAME||' AS '||CHR(10)
            ||' SELECT WPSTEMPATTN.WORKERSERIAL,  WPSTEMPMAST.WORKERCATEGORYCODE, '||CHR(10)  
            ||' SUM(NVL(WPSTEMPCOMPONENT.GROSS_WAGES,0)) AS GROSS_WAGES '||CHR(10)  
            ||' '|| lv_Component ||chr(10) 
            ||' FROM WPSTEMPMAST, WPSTEMPATTN, WPSTEMPCOMPONENT '||chr(10)   
            ||' WHERE WPSTEMPATTN.WORKERSERIAL = WPSTEMPMAST.WORKERSERIAL '||chr(10) 
            ||'   AND WPSTEMPATTN.WORKERSERIAL = WPSTEMPCOMPONENT.WORKERSERIAL  '||chr(10);
    if P_WORKERSERIAL is not null then
        lv_Sql := lv_Sql ||' AND WPSTEMPMAST.WORKERSERIAL IN ('||P_WORKERSERIAL||')' ||CHR(10); 
    end if; 
    lv_Sql := lv_Sql ||' GROUP BY WPSTEMPATTN.WORKERSERIAL, WPSTEMPMAST.WORKERCATEGORYCODE '||chr(10);        
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PHASE TABLE CREATION '||lv_SrlNo);
    lv_SrlNo:=lv_SrlNo+1;
    EXECUTE IMMEDIATE lv_Sql;  
    lv_Sql := '';
    COMMIT;
    ---- BELOW PROCERURE CALL FOR DATA CONVERT FROM COLUMN TO ROW --- CREATE TABLE NAME  - GTT_SWT_PHASE_DEDN
    lv_Sql := 'begin  proc_wps_PHASE_DEDN_rowise('''||P_COMPCODE||''','''||P_DIVCODE||''', '''||P_FNSTDT||''','''||P_FNENDT||'''); end;';
    EXECUTE IMMEDIATE LV_SQL;
    /*begin     
      proc_wps_PHASE_DEDN_rowise(P_COMPCODE, P_DIVCODE, P_FNSTDT, P_FNENDT);      
    exception
    WHEN OTHERS THEN
        LV_SQLERRM := SQLERRM;
       dbms_output.put_line('xxxxxxxxxxxxxxxxxxx'||LV_SQLERRM);
       RETURN ;
    end; */
    --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'AFTER MERGES '||lv_SrlNo  );
    lv_SrlNo:=lv_SrlNo+1;    
    commit;
    
    lv_strWorkerSerial := 'X';
    For cWages in ( SELECT A.WORKERSERIAL, A.WORKERCATEGORYCODE, A.GROSS_WAGES, A.COMPONENTSHORTNAME, A.COMPONENTAMOUNT, B.CALCULATIONINDEX, 
                    NVL(C.APPLICABLE,'NO') APPLICABLE, NVL(B.COMPONENTGROUP,'XX') COMPONENTGROUP, NVL(B.PARTIALLYDEDUCT,'N') PARTIALLYDEDUCT
                    FROM GTT_SWT_PHASE_DEDN A, WPSCOMPONENTMASTER B, WPSWORKERCATEGORYVSCOMPONENT C--, SWT_PHASE_DEDN D    
                    WHERE B.COMPANYCODE = P_COMPCODE AND B.DIVISIONCODE = P_DIVCODE
                      AND A.COMPONENTSHORTNAME = B.COMPONENTSHORTNAME 
                      AND B.COMPANYCODE= C.COMPANYCODE AND B.DIVISIONCODE = C.DIVISIONCODE
                      AND B.COMPONENTSHORTNAME = C.COMPONENTSHORTNAME
                      AND A.WORKERCATEGORYCODE = C.WORKERCATEGORYCODE
                      AND NVL(C.APPLICABLE,'NO') <> 'NO'
--                    AND A.WORKERSERIAL = D.WORKERSERIAL
                    ORDER BY A.WORKERSERIAL, B.CALCULATIONINDEX )
    LOOP
        lv_intCnt := lv_intCnt+1;
        --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'INSIDE CURSOR LOOP '|| lv_intCnt);
        if lv_strWorkerSerial <> cWages.WORKERSERIAL then
      
            if SUBSTR(P_FNSTDT,1,2) = '16' then
               /* begin
                    SELECT * INTO lv_RowType_Prev_Data FROM GTT_WPS_PREV_FNDATA where workerserial = cWages.WORKERSERIAL;
                exception
                    when others then 
                      null;
                end;*/
                pkg_rowtab.WPS_PREV_FNDATA_row(cWages.WORKERSERIAL,lv_RowType_Prev_Data);
            end if;
            
            if lv_intCnt <> 1 then
                begin
                    select NVL(COINCF,0) into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
                exception
                    --when others then null;
                    when others then lv_CoinBf :=0;
                end;
                --- CHANGES ON 20.07.2018 BY AMALESH -----
                --                lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages /*+ nvl(lv_CoinBf,0) */- lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
                --                lv_TempDednAmt := lv_GrossWages /*+ nvl(lv_CoinBf,0)*/ - lv_TotalDedn - lv_ComponentAmt;
                
                lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
                lv_TempDednAmt := lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn - lv_ComponentAmt;
                lv_CoinBf := NVL(lv_CoinBf,0);
                --lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
                
                lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINCF = '||lv_TempDednAmt||', COINBF='||lv_CoinBf||' where workerserial = '''||lv_strWorkerSerial||''' ';
                execute immediate lv_Sql;
               -- PRASUN insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql||',COINCF - '||lv_CoinCf||',COINBF - '||lv_CoinBF||';',lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
                --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','ACTUALPAYBLEAMOUNT','1: ' ||lv_GrossWages || ' ' || nvl(lv_CoinBf,0)|| ' ' ||lv_TotalDedn|| ' ' ||lv_RoundOffRs|| ' ' ||lv_RoundoffType,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
                lv_SrlNo:=lv_SrlNo+1;
                commit;
            end if;
            lv_strWorkerSerial := cWages.WORKERSERIAL;
            lv_WagesAsOn := cWages.GROSS_WAGES - lv_MinimumPayableAmt;
            lv_GrossWages := cWages.GROSS_WAGES;
            lv_TotalDedn :=0;
              
        end if; 
        lv_TempDednAmt := 0;
        lv_ComponentAmt := cWages.COMPONENTAMOUNT;
        ------
        --DBMS_OUTPUT.PUT_LINE(cWages.COMPONENTGROUP);
        
        CASE cWages.COMPONENTGROUP
            WHEN 'ESI' THEN
                if SUBSTR(P_FNSTDT,1,2) = '16' THEN
                    lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_RowType_Prev_Data.ESI_GROSS,0);
                    lv_ComponentAmt := ceil(lv_ComponentAmt*0.01*lv_ESI_E_Perc);
                    lv_ComponentAmt := lv_ComponentAmt -  NVL(lv_RowType_Prev_Data.ESI_CONT,0);
                else
                    lv_ComponentAmt := ceil(lv_ComponentAmt*0.01*lv_ESI_E_Perc);    
                end if;
               

            WHEN 'PTAX' THEN
                if lv_ProcessType = 'MONTHLY' THEN
                    SELECT NVL(PTAXAMOUNT,0) into lv_TempVal FROM PTAXSLAB
                    WHERE 1=1
                      AND STATENAME = 'WEST BENGAL'
                      AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                      AND SLABAMOUNTFROM <= lv_ComponentAmt  
                      AND SLABAMOUNTTO >= lv_ComponentAmt;
                      lv_ComponentAmt := nvl(lv_TempVal,0);
                else            -- OTHER WISER CONSIDER PROCESS TYPE - FORTNIGHTLY
                    if SUBSTR(P_FNSTDT,1,2) = '16' THEN
                        lv_PREV_FN_PTAXGROSS := 0;
                        lv_PREV_FN_PTAX := 0;
                        BEGIN
                            SELECT GROSS_PTAX, P_TAX INTO lv_PREV_FN_PTAXGROSS, lv_PREV_FN_PTAX
                            FROM GTT_WPS_PREV_FNDATA 
                            WHERE WORKERSERIAL = cWages.WorkerSerial;
                        EXCEPTION
                            WHEN OTHERS THEN 
                                lv_PREV_FN_PTAXGROSS :=0;
                                lv_PREV_FN_PTAX := 0;        
                        END; 
                        --lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_RowType_Prev_Data.GROSS_PTAX,0);
                        lv_ComponentAmt := lv_ComponentAmt+ lv_PREV_FN_PTAXGROSS;    
                    end if;
                    begin
                        SELECT PTAXAMOUNT into lv_TempVal FROM PTAXSLAB
                        WHERE 1=1
                          AND STATENAME = 'WEST BENGAL'
                          AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                          AND SLABAMOUNTFROM <= lv_ComponentAmt  
                          AND SLABAMOUNTTO >= lv_ComponentAmt;
                    exception
                        when others then 
                          null;
                    end;
                    if SUBSTR(P_FNSTDT,1,2) = '16' THEN  
                        --lv_ComponentAmt := nvl(lv_TempVal,0) - nvl(lv_RowType_Prev_Data.P_TAX,0);
                        lv_ComponentAmt := nvl(lv_TempVal,0) - lv_PREV_FN_PTAX;
                    else
                        lv_ComponentAmt := nvl(lv_TempVal,0);
                    end if;                     
                end if;
            
             WHEN 'PF LOAN' THEN
                
                lv_ComponentAmt := 0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
               -- if P_TRANTYPE = 'SALARY' OR P_TRANTYPE = 'FINAL SETTLEMENT' then
                    lv_ComponentAmt := cWages.COMPONENTAMOUNT;
                    lv_ComponentAmt:=0;
                    lv_PFLN_CAP_STOP :='N';
                    lv_PFLN_INT_STOP :='N';
                    BEGIN
                        
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN PFLOAN_BAL > CAP_EMI THEN CAP_EMI ELSE PFLOAN_BAL END, CAP_EMI_DEDUCT_TYPE, NVL(CAP_STOP,'N') 
                            INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE, lv_PFLN_CAP_STOP   
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND NVL(CAP_STOP,'N') = 'N'
                              AND PFLOAN_BAL > 0;
                              --DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', COMPONENT '||substr(cWages.COMPONENTSHORTNAME,1,5)||' lv_ComponentAmt ' || lv_ComponentAmt);
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN NVL(PFLOAN_INT_BAL,0) > NVL(INT_EMI,0) THEN INT_EMI ELSE PFLOAN_INT_BAL END , INT_EMI_DEDUCT_TYPE, NVL(INT_STOP,'N') 
                            INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE, lv_PFLN_INT_STOP  
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND NVL(INT_STOP,'N') = 'N'
                              AND PFLOAN_INT_BAL > 0;
                        
                        
                        insert into WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE, ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                                values( P_COMPCODE, P_DIVCODE,'PROC_WPSWAGESPROCESS_DEDUCTION','',SYSDATE, lv_SqlStr,'COM = '||cWages.COMPONENTSHORTNAME||' WS = '||cWages.WorkerSerial||'  COMVAL = '||lv_ComponentAmt||' WAGES = '||lv_WagesAsOn, lv_fn_stdt, lv_fn_endt, lv_Remarks);

                        else
                            lv_ComponentAmt := 0;
                        end if;
                        
                        --DBMS_OUTPUT.PUT_LINE('PFL   '||lv_WagesAsOn||'    '||lv_ComponentAmt);
                        if lv_WagesAsOn <  lv_ComponentAmt then             
                            if lv_EMI_DEDN_TYPE = 'FULL' then
                                lv_ComponentAmt := 0;
                            else
                                lv_ComponentAmt := floor(lv_WagesAsOn);
                            end if;              
                        end if;  
                                              
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;        
                --else
               --     lv_ComponentAmt := 0;
                --end if;                
            WHEN 'LOAN' THEN
                lv_ComponentAmt:=0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
                --if P_TRANTYPE = 'SALARY' OR P_TRANTYPE ='FINAL SETTLEMENT' then
                    /* CHANGES AS ON 03/12/2018' PARTIAL*/    
--                    lv_EMI_DEDN_TYPE := 'PARTIAL';
                    /* CHANGES AS ON 03/12/2018' PARTIAL*/    
                    
                    BEGIN
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN LOAN_BAL > CAP_EMI THEN CAP_EMI ELSE LOAN_BAL END, CAP_EMI_DEDUCT_TYPE INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_BAL > 0;
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN LOAN_INT_BAL > INT_EMI THEN INT_EMI ELSE LOAN_BAL END, INT_EMI_DEDUCT_TYPE INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_INT_BAL > 0;
                        else
                            lv_ComponentAmt := 0;
                        end if;
                        /* CHANGES AS ON 03/12/2018' PARTIAL*/    
                        if lv_WagesAsOn <  lv_ComponentAmt then             
                            if lv_EMI_DEDN_TYPE = 'FULL' then
                                lv_ComponentAmt := 0;
                            else
                                lv_ComponentAmt := floor(lv_WagesAsOn);
                            end if;              
                        end if;  
                        
                        /* CHANGES AS ON 03/12/2018' PARTIAL*/    
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;
               -- end if; 
            WHEN 'LIC' THEN                  
               --ujjwal
                 if SUBSTR(P_FNSTDT,1,2) = '01' THEN
                                   
--                    BEGIN
--                        SELECT NVL(TOTAL_LIC_EMI,0) INTO lv_ComponentAmt 
--                        FROM GBL_LICUNREALIZED
--                        WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS'
--                          AND NVL(INSURANCEAPPLICABLE,'N') = 'Y';
--                                
--                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
--                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
--                    END;

                    lv_TempVal := 0;
                    lv_ComponentAmt := 0;
                    SELECT COUNT(*) CNT INTO lv_CNT FROM  GBL_LICBALANCE WHERE WORKERSERIAL = cWages.WorkerSerial;
                    IF lv_CNT > 0 THEN
                        for cLIC in (SELECT * FROM GBL_LICBALANCE WHERE WORKERSERIAL = cWages.WorkerSerial)
                        LOOP
                            --DBMS_OUTPUT.PUT_LINE('WAGES ON  '||lv_WagesAsOn || 'and RUNNING WAGES' ||(lv_ComponentAmt+ cLIC.DUEAMOUNT));
                            IF lv_WagesAsOn > lv_ComponentAmt+ cLIC.DUEAMOUNT then
                                --DBMS_OUTPUT.PUT_LINE('lic count  '||lv_CNT||', WORKERSERIAL '||cWages.WorkerSerial);
                                lv_ComponentAmt := lv_ComponentAmt+cLIC.DUEAMOUNT;
                              --  lv_Remarks := 'Updating wages - WORKERSERIAL -'||cWages.WorkerSerial||', Token - '||cWages.TOKENNO||', Component -'||cWages.componentcode||', Amount -'||lv_TempDednAmt||', As On Bal '||lv_WagesAsOn;
                                lv_SqlStr := 'UPDATE GBL_LICBALANCE   SET DEDUCTIONSTATUS=''Y'',DEDUCTFORTNIGHTSTARTDATE= TO_DATE('''||lv_fn_stdt||''',''DD/MM/RRRR''),'||CHR(10)
                                            ||'DEDUCTYEARMONTH = TO_CHAR(TO_DATE('''||TO_CHAR(lv_fn_stdt,'DD/MM/YYYY')||''',''DD/MM/YYYY''),''YYYYMM'')'||CHR(10)
                                            ||'WHERE COMPANYCODE='''||cLIC.COMPANYCODE||''' '||CHR(10)
                                            ||'     AND DIVISIONCODE='''||cLIC.DIVISIONCODE||''' '||CHR(10)
                                            ||'     AND POLICYNO='''||cLIC.POLICYNO||''' '||CHR(10)
                                            ||'     AND DUEDATE=TO_DATE('''||TO_CHAR(cLIC.DUEDATE,'DD/MM/YYYY')||''',''DD/MM/YYYY'')';
                                insert into WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE, ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                                values( P_COMPCODE, P_DIVCODE,'PROC_WPSWAGESPROCESS_DEDUCTION','',SYSDATE, lv_SqlStr,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_Remarks);
                               --  DBMS_OUTPUT.PUT_LINE (LV_SQLSTR);
                                execute immediate lv_SqlStr;
                            END IF;
                        END LOOP;
                        
                    END IF;

                
                 ELSE
                    lv_ComponentAmt :=0;
                 END IF;
                   --ujjwal 
            WHEN 'SHOP_RENT' THEN
                
                if SUBSTR(P_FNSTDT,1,2) = '01' THEN
                    BEGIN
                        SELECT NVL(TOTAL_SHOP_EMI,0) INTO lv_ComponentAmt 
                        FROM GBL_SHOPUNREALIZED
                        WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS';
                                
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;
                ELSE
                    lv_ComponentAmt :=0;
                END IF;
                
--            WHEN 'ELECTRICITY' then
--                BEGIN
--                    SELECT NVL(ELEC_BAL_AMT,0) INTO lv_ComponentAmt 
--                    FROM GBL_ELECBLNC
--                    WHERE WORKERSERIAL = cWages.WorkerSerial; 
--                     
--                            
--                EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
--                          WHEN OTHERS THEN lv_ComponentAmt := 0;      
--                END;
            
            else
              lv_ComponentAmt := cWages.COMPONENTAMOUNT;    
        end case;    
        if lv_WagesAsOn >  lv_ComponentAmt then             -- cWages.COMPONENTAMOUNT
            lv_TempDednAmt := lv_ComponentAmt;              -- cWages.COMPONENTAMOUNT;
        else            
            IF NVL(cWages.PARTIALLYDEDUCT,'NA') = 'N' THEN
                lv_TempDednAmt := 0;
            ELSE
                lv_TempDednAmt := lv_WagesAsOn;  
            END IF;
        end if;
        
        if lv_TempDednAmt <> 0 then
            lv_TotalDedn := lv_TotalDedn + lv_TempDednAmt;
            lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set '||cWages.componentshortname||' = '||nvl(lv_TempDednAmt,0)||', TOT_DEDUCTION = '||nvl(lv_TotalDedn,0)||' where workerserial = '''||cWages.WorkerSerial||''' ';
            ---DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', lv_Sql '||lv_Sql);
          -- PRASUN  insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn ||'Component- '||cWages.componentshortname||', WORKERSERIAL - '||cWages.WorkerSerial||'');
            execute immediate lv_Sql;
            --lv_Sql := 'TEST'; 
        end if;
        lv_WagesAsOn := lv_WagesAsOn - lv_TempDednAmt;
        --lv_remarks := 'DEDUCTION COMPONENT UPDATING => WORKSERIAL='||cWages.WORKERSERIAL||',+'||lv_strWorkerSerial||', GROSS WAGES='||cWages.GROSS_WAGES||',Minimum Pay='||lv_MinimumPayableAmt||', As On Balance='||lv_WagesAsOn;
        --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn );
        lv_SrlNo := lv_SrlNo + 1;          
    END LOOP; 
    
--    start for last record update actual pay, coin bf, coin cf
    begin
        select COINCF into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
    exception
        --when others then null;
        when others then lv_CoinBf :=0;
    end;
    lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0)  - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
    lv_CoinCf := (lv_GrossWages + nvl(lv_CoinBf,0)  - lv_TotalDedn) - lv_ComponentAmt; 
    lv_TempDednAmt := lv_GrossWages /*+ nvl(lv_CoinBf,0)*/ - lv_TotalDedn - lv_ComponentAmt;
    --lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
    
    lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINBF = '||NVL(lv_CoinBf,0)||', COINCF = '||NVL(lv_CoinCF,0)||' where workerserial = '''||lv_strWorkerSerial||''' ';
    execute immediate lv_Sql;
   -- PRASUN  insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn||' workerserial '||lv_strWorkerSerial);
   -- insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','ACTUALPAYBLEAMOUNT','2: ' ||lv_GrossWages || ' ' || nvl(lv_CoinBf,0)|| ' ' ||lv_TotalDedn|| ' ' ||lv_RoundOffRs|| ' ' ||lv_RoundoffType,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
    lv_SrlNo := lv_SrlNo + 1;
    commit;
--    end for last record update actual pay, coin bf, coin cf

--    PROC_LOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
--    PROC_PFLOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS');
--    DBMS_OUTPUT.PUT_LINE('PRC_LOANBALANCE_UPDT_WAGES('''||P_COMPCODE||''','''||P_DIVCODE||''','''||P_YEARCODE||''',TO_CHAR('''||lv_fn_stdt||''',''DD/MM/YYYY''),TO_CHAR('''||lv_fn_endt||''',''DD/MM/YYYY''),WPS,'||P_TABLENAME||',PF,NULL,NULL,NULL)');
    
    lv_remarks := 'PF LOAN BALANCE UPDATE';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'PF', NULL,NULL, NULL);
    
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'GENERAL', NULL,NULL, NULL);
    
    lv_remarks := 'PF LOAN BALANCE UPDATE';     
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'PF',NULL,NULL,NULL);    
    
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE'; 
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'GENERAL',NULL,NULL,NULL);        
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);

    --  ELECTRIC DEDUCTION BREAKUP
    lv_remarks := 'ELECTRIC BREAKUP DATA INSERT';
    --PRC_ELECTRICBREAKUP_INSERT(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, NULL);
    

 -- LIC DATA REALIZED/ UNREALIZED 
    lv_remarks := 'LIC UNREALIZED DATA INSERT';
    --PRC_REALIZEDUNREALDATA_INSERT (P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME,'LIC', 'ALL', NULL);

     -----FOR LIC BALANCE UPDATE IN LICDETAILS TABLE -------
        PROC_LICUPDATE();

 -- SHOP RENT DATA REALIZED/ UNREALIZED 
    lv_remarks := 'SHOP RENT UNREALIZED DATA INSERT';
    --PRC_REALIZEDUNREALDATA_INSERT (P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME,'SHOP_RENT', 'ALL', NULL);

    


commit;    
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION',lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo);
    commit;
    --dbms_output.put_line('PROC - PROC_WPSWAGESPROCESS_UPDATE : ERROR !! WHILE WAGES PROCESS '||P_FNSTDT||' AND PHASE -> '||ltrim(trim(P_PHASE))||' : '||sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_DEDUCTION;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGESPROCESS_DEDUCTION (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
/* CHANGES AS ON 03/12/2018' PARTIAL*/                                                  
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_ComponentNew  varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_ProcName     varchar2(30) := 'PROC_WPSWAGESPROCESS_DEDUCTION';
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_Ln_Checked_Dt    date;
lv_prev_fn_stdt date;
lv_prev_fn_endt date;
lv_MinimumPayableAmt    number := 0;            -- use for Minimum payment amount which defined in the WPSWAGESPARAMETER TABLE 
lv_RoundOffRs           number := 0;            -- use for Round Off Rs. which defined in the WPSWAGESPARAMETER TABLE
lv_ESI_E_Perc           number := 0.75;         -- USE FOR ESI EMPLOYEE CONTRIBUTION
lv_ProcessType  varchar2(50):= 'FORTNIGHTLY';   -- use for wage process Fortnightly or Monthly which defined in the WPSWAGESPARAMETER TABLE MAINLY REQUIRE FOR P.TAX CALCULATION 
lv_WagesAsOn    number(11,2) := 0;
lv_TempVal      number(11,2) :=0;
lv_TempDednAmt  number(11,2) := 0;
lv_ComponentAmt number(11,2) := 0;
lv_TempDednAmt_Prev number(11,2) :=0;
lv_intCnt       number(5) :=0;
lv_GrossWages   number(11,2) := 0;
lv_PREV_FN_PTAXGROSS        NUMBER(11,2):= 0;
lv_PREV_FN_PTAX             NUMBER(11,2):= 0;
lv_PREV_FN_PFGROSS          NUMBER(11,2):=0;
lv_PREV_FN_ESIGROSS         NUMBER(11,2) := 0;
lv_PREV_FN_ESI_E            NUMBER(11,2):=0;
lv_PREV_FN_PF_E             NUMBER(11,2):=0;
lv_PREV_FN_VPF              number(11,2) := 0;
lv_VPF_PERCENT              number(11,2) :=0;
lv_TotalDedn    number(11,2) := 0;
lv_CoinBf       number(11,2) := 0;
lv_CoinCf       number(11,2) := 0;
lv_strWorkerSerial  varchar2(10) :='';
lv_SrlNo        number   :=1;                    -- varaible use for serially which No. execute; 
lv_RowType_Prev_Data    GTT_WPS_PREV_FNDATA%ROWTYPE;
lv_RoundoffType varchar2(1) :='';
lv_EMI_DEDN_TYPE    varchar2(20):='PARTIAL';
lv_PFLN_CAP_STOP    varchar2(1) :='N';
lv_PFLN_INT_STOP    varchar2(1) :='N';
lv_CNT          number(11,2) := 0;
lv_SqlStr        varchar2(32767) := '';
lv_PolicyNo     varchar2(50) := ''; 
lv_PF_PERCENT   number(5) := 10;
lv_MAX_PFGROSS  number(11,2) := 0;
lv_MAX_PF_CONT  number(11,2) :=0;
lv_fn_LastDailyWagesDT  date := to_date(P_FNENDT,'DD/MM/YYYY'); --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT
lv_YYYYMM       varchar2(6) := to_char(lv_fn_stdt,'YYYYMM');   --- NEW ADD ON 21.04.2020 FOR DAILY WAGES AND WEEKLY STL PAYMENT
lv_ChkAttnHrs   NUMBER(7,2) :=0; 
begin
    lv_parvalues := 'COMP ='||P_COMPCODE||', DIV = '||P_DIVCODE||',FNS = '||P_FNSTDT||' FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_sql := 'drop table '||P_PHASE_TABLENAME;
    lv_Ln_Checked_Dt := lv_prev_fn_endt+4;
    
    if SUBSTR(P_FNSTDT,1,2) = '16' then
        lv_prev_fn_stdt := to_date('01'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
    end if;
    
    BEGIN 
        execute immediate lv_sql;
    EXCEPTION WHEN OTHERS THEN NULL;
    END;


    lv_Sql := 'UPDATE WPSWAGESDETAILS_SWT SET GROSS_PTAX = NVL(GROSS_PTAX,0)-NVL(NPF_ADJ_DEDN,0)';

    lv_remarks := 'DEDUCT NPF_ADJ_DEN FROM GROSS_PTAX';      
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;



    --- BEFORE DEDUCTION PAHSE START MERGE WORKER WISER MULIPLE DATA IN A SINGLE DATA
    PROC_WPSWAGESDETAILS_MERGE(P_COMPCODE, P_DIVCODE, P_FNSTDT,P_FNENDT, P_PHASE, 'WPSWAGESDETAILS_SWT', 'WPSWAGESDETAILS_MV_SWT',  P_WORKERSERIAL);
    lv_sql :='';
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'ATTN',7,P_FNSTDT, P_FNENDT, P_TABLENAME);
    PROC_WPSVIEWCREATION (P_COMPCODE,P_DIVCODE,'COMP',7,P_FNSTDT, P_FNENDT, P_TABLENAME);
    ---- TABLE CREATE FROM VIEW ----------
    
    PROC_LOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS','YES'); -- 19.02.2020
    PROC_PFLOANBLNC(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'','','WPS','YES'); -- 19.02.2020
   
    PRC_PFLN_EMI_UPDT_ONATTN_HRS(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'), TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPSWAGESDETAILS_MV_SWT','GBL_PFLOANBLNC','','',''); -- 19.02.2020
    --RETURN;
--    DBMS_OUTPUT.PUT_LINE ('1_1');
    ---- LIC DATA PREPARATION PROCEDURE CALL--------
    
    ------ ELECTRIC METER READING -----------------------------------
--    PROC_ELECBLNC (P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),NULL,'WPS');
    PROC_ELECBLNC_WITH_BILL_EMI(P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),NULL,'WPS','YES');                        

    --  SHOP RENT DATA PREPARATION PROCEDURE CALL
--    PROC_SHOPRENT_BLNC (P_COMPCODE,P_DIVCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'SHOP_RENT', P_YEARCODE ,'WPS','YES',NULL);    

     
     
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPCOMPONENT CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
    END;
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'COMPONENT TABLE DROPED SUCCESSFULLY');
    --COMMIT;
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'ATTNENDANCE TABLE DROPED SUCCESSFULLY');
    --COMMIT;    
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE '||P_PHASE_TABLENAME||' CASCADE CONSTRAINTS';
      EXCEPTION WHEN OTHERS THEN NULL;
    END;    
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PAHSE TABLE DROPED SUCCESSFULLY');
    --COMMIT;

--    START Previous Working Fortnight coin c/f fetching worker wise --

    lv_Sql := ' INSERT INTO WPS_PREV_FN_COIN(WORKERSERIAL, FORTNIGHTSTARTDATE, COINCF) '||CHR(10) 
        ||' SELECT B.WORKERSERIAL, B.FORTNIGHTSTARTDATE, (CASE WHEN B.FORTNIGHTSTARTDATE = TO_DATE(''01/09/2020'',''DD/MM/YYYY'') THEN C.COMPONENTAMOUNT ELSE A.COINCF END) COINCF '||CHR(10) 
        ||' FROM WPSWAGESDETAILS_MV A, '||CHR(10) 
        ||' ( '||CHR(10) 
        ||'     SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE '||CHR(10)
        ||'     FROM ( '||CHR(10)
--        ||'             SELECT WORKERSERIAL, MAX(FORTNIGHTSTARTDATE) FORTNIGHTSTARTDATE '||CHR(10)  
--        ||'             FROM WPSWAGESDETAILS_MV '||CHR(10)  
--        ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
--        ||'               AND FORTNIGHTSTARTDATE > TO_DATE(''01/08/2018'',''DD/MM/YYYY'') '||CHR(10)  --- DUE TO WAGES GO LIVE ON 01/08/2018'
--        ||'               AND FORTNIGHTSTARTDATE < '''||lv_fn_stdt||'''  '||CHR(10)  ---- add on 16/10/2018 why this line delete , but last fNE (30/09/2018) it is in the system
--        ||'             GROUP BY WORKERSERIAL '||CHR(10)
--        ||'             UNION ALL '||CHR(10)
        ||'             SELECT WORKERSERIAL, FORTNIGHTSTARTDATE '||CHR(10)
        ||'             FROM WPSCOMPONENTOPENING '||CHR(10)
        ||'             WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'               AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||CHR(10)
        ||'               AND COMPONENTCODE = ''COINBF'' '||CHR(10)
        ||'          ) '||CHR(10)
        ||'     GROUP BY WORKERSERIAL '||CHR(10)            
        ||' ) B, '||CHR(10)
        ||' ( SELECT * FROM WPSCOMPONENTOPENING '||CHR(10)
        ||'   WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10)
        ||'     AND FORTNIGHTSTARTDATE = TO_DATE('''||P_FNSTDT||''',''DD/MM/YYYY'') '||CHR(10)
        ||'     AND COMPONENTCODE=''COINBF'' '||CHR(10) 
        ||'  ) C '||CHR(10) 
        ||' WHERE 1=1 '||CHR(10)
        ||'   AND B.WORKERSERIAL = A.WORKERSERIAL (+) '||CHR(10)  
        ||'   AND B.FORTNIGHTSTARTDATE = A.FORTNIGHTSTARTDATE (+) '||CHR(10)
        ||'   AND B.WORKERSERIAL = C.WORKERSERIAL (+) '||CHR(10);

    BEGIN
        DELETE FROM WPS_PREV_FN_COIN; --WHERE FORTNIGHTSTARTDATE = lv_fn_stdt;
        EXECUTE IMMEDIATE lv_Sql;
    exception
        WHEN OTHERS THEN
            EXECUTE IMMEDIATE lv_Sql;        
    END;
    lv_SqlTemp := '';
    lv_Sql := '';
--    END Previous Working Fortnight coin c/f fetching worker wise --

    SELECT nvl(MINIMUMSALARYPAYABLE,0) MINIMUMSALARYPAYABLE, nvl(ROUNDOFFRS,0) ROUNDOFFRS, 
    nvl(PROCESSTYPE,'FORTNIGHTLY') PROCESSTYPE,ROUNDOFFTYPE, nvl(ESIEMLPLOYEEPERCENT,0) ESIEMLPLOYEEPERCENT,
    NVL(PFEMLPLOYEEPERCENT,0) PFEMLPLOYEEPERCENT,  NVL(MAXIMUMPFGROSS,0) MAXIMUMPFGROSS,  NVL(MAXIMUMPF,0) MAXIMUMPF
    INTO lv_MinimumPayableAmt, lv_RoundOffRs, lv_ProcessType , lv_RoundoffType, lv_ESI_E_Perc,
    lv_PF_PERCENT, lv_MAX_PFGROSS, lv_MAX_PF_CONT
    FROM WPSWAGESPARAMETER WHERE COMPANYCODE= P_COMPCODE AND DIVISIONCODE = P_DIVCODE;
     
    --- START BELOW BLOCK CONSIDER FOR PREVIOUS PAYMENT WIHCH CONSIDER IN CURRENT WAGES PAYMENT FOR REFERES IN DEDUCTION STATEMENT
    DELETE FROM GTT_WPS_PREV_FNDATA;
    
--    if SUBSTR(P_FNSTDT,1,2) = '16' THEN
--        INSERT INTO GTT_WPS_PREV_FNDATA
--        SELECT WORKERSERIAL, TOKENNO,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, 
--        NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX , NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, 
--        NVL(PF_CONT,0) PF_CONT, NVL(PF_COM,0) PF_COM, NVL(FPF,0) FPF,
--        NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_CONT,0) ESI_CONT, NVL(ESI_COMP_CONT,0) ESI_COMP_CONT, NVL(VPF,0) VPF 
--        FROM WPSWAGESDETAILS_MV
--        WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
--          AND FORTNIGHTSTARTDATE = to_date('01/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy') 
--          AND FORTNIGHTENDDATE = to_date('15/'||substr(P_FNSTDT,4,7),'dd/mm/yyyy');
--          
--          
--    end if;
        

    lv_Sql := ' INSERT INTO GTT_WPS_PREV_FNDATA (WORKERSERIAL, PF_GROSS, PENSION_GROSS, PF_CONT, PF_COM, FPF, VPF, '||chr(10) 
        ||' ESI_GROSS, ESI_CONT, ESI_COMP_CONT, GROSS_PTAX, P_TAX ) '||chr(10)
        ||' SELECT WORKERSERIAL, SUM(PF_GROSS) PF_GROSS, SUM(PENSION_GROSS) PENSION_GROSS, SUM(PF_CONT) PF_CONT, SUM(PF_COM) PF_COM, SUM(FPF) FPF, SUM(VPF) VPF, '||chr(10) 
        ||' SUM(ESI_GROSS) ESI_GROSS, SUM(ESI_CONT) ESI_CONT, SUM(ESI_COMP_CONT) ESI_COMP_CONT, SUM(GROSS_PTAX) GROSS_PTAX, SUM(P_TAX) P_TAX '||chr(10)
        ||' FROM ('||chr(10);
    if  SUBSTR(P_FNSTDT,1,2) = '16' THEN
        lv_Sql := lv_Sql||'      SELECT WORKERSERIAL, NVL(PF_GROSS,0) PF_GROSS, NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_CONT,0) PF_CONT, NVL(PF_COM,0) PF_COM, NVL(FPF,0) FPF, NVL(VPF,0) VPF, '||chr(10) 
            ||'      NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_CONT,0) ESI_CONT, NVL(ESI_COMP_CONT,0) ESI_COMP_CONT, NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX  '||chr(10)
            ||'      FROM WPSWAGESDETAILS_MV  '||chr(10)
            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
            ||'        AND FORTNIGHTSTARTDATE = to_date(''01/''||substr('''||P_FNSTDT||''',4,7),''dd/mm/yyyy'')  '||chr(10) 
            ||'        AND FORTNIGHTENDDATE = to_date(''15/''||substr('''||P_FNSTDT||''',4,7),''dd/mm/yyyy'')  '||chr(10)
            ||'      UNION ALL '||chr(10);
    
    end if;            
    lv_Sql := lv_Sql||'      SELECT WORKERSERIAL, NVL(PF_GROSS,0) PF_GROSS,  NVL(PENSION_GROSS,0) PENSION_GROSS, NVL(PF_E,0) PF_CONT, NVL(PF_C,0) PF_COM, NVL(FPF,0) FPF, 0 VPF, '||chr(10) 
        ||'      NVL(ESI_GROSS,0) ESI_GROSS, NVL(ESI_E,0) ESI_CONT, NVL(ESI_C,0) ESI_COMP_CONT, NVL(GROSS_PTAX,0) GROSS_PTAX, NVL(P_TAX,0) P_TAX '||chr(10)
        ||'      FROM WPSSTLWAGESDETAILS '||chr(10)
        ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''  '||chr(10)
        ||'        AND YEARCODE = '''||P_YEARCODE||'''   '||chr(10)
        ||'        AND PAYMENTDATE >= to_date(''01/''||substr('''||P_FNSTDT||''',4,7),''dd/mm/yyyy'') '||chr(10)
        ||'        AND PAYMENTDATE <= '''||lv_fn_LastDailyWagesDT||''' '||chr(10)
        ||'      ) GROUP BY WORKERSERIAL '||CHR(10);
    lv_remarks := 'PREVIOUS WAGES PAYMENT DATA INSERT INTO GTT_WPS_PREV_FNDATA';      
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
    COMMIT;
    EXECUTE IMMEDIATE lv_Sql;    
    COMMIT;
    FOR C1 in (
            SELECT COMPONENTCODE, COMPONENTSHORTNAME, COMPONENTTYPE, AMOUNTORFORMULA, MANUALFORAMOUNT, FORMULA, CALCULATIONINDEX, PHASE, 
            NVL(TAKEPARTINWAGES,'N') AS TAKEPARTINWAGES, NVL(COLUMNINATTENDANCE,'N') AS COLUMNINATTENDANCE, 
            NVL(COMPONENTTAG,'N') AS COMPONENTTAG, NVL(COMPONENTGROUP,'XXXXX') AS COMPONENTGROUP 
            FROM WPSCOMPONENTMASTER
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
            AND PHASE = P_PHASE
            AND NVL(TAKEPARTINWAGES,'N') = 'Y'
            ORDER BY CALCULATIONINDEX           
            
          )
    LOOP          
       -- DBMS_OUTPUT.PUT_LINE(C1.COMPONENTGROUP);
        lv_Sql_TblCreate := lv_Sql_TblCreate ||', '||C1.COMPONENTSHORTNAME|| ' NUMBER(11,2) DEFAULT 0';
        if instr(C1.COMPONENTGROUP,'LOAN') > 0 Then  --- loan componet should be 0 in component view
            lv_Component := lv_Component ||', 0 AS '||C1.COMPONENTSHORTNAME;
        elsif C1.COMPONENTGROUP = 'LIC' Then  --- loan componet should be 0 in component view
            lv_Component := lv_Component ||', 0 AS '||C1.COMPONENTSHORTNAME;
        ELSE 
            IF UPPER(TRIM(C1.AMOUNTORFORMULA)) = 'FORMULA' THEN
                If InStr(C1.FORMULA, '~') > 0 Then
                    --dbms_output.put_line(C1.FORMULA);
                    lv_Sql:= C1.FORMULA;
                    --select REPLACE('''A001''','''','''''')  FROM DUAL
                    lv_Sql:= replace(lv_Sql,'''','''''');
                    lv_Sql:= 'SELECT FN_REPL_FORMULA('''||lv_Sql||''') FROM DUAL'; 
                    
                    --BEGIN
                    EXECUTE IMMEDIATE lv_Sql into lv_SqlTemp ;
                    --EXCEPTION WHEN OTHERS THEN
                    --    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ZZZ PROC_WPSWAGESPROCESS_UPDATE',lv_Sql,lv_Sql,lv_parvalues,lv_remarks);
                    --    RETURN;
                    --END ;
                    lv_Component := lv_Component ||', SUM('||lv_SqlTemp||')  AS '||C1.COMPONENTSHORTNAME;
    --                lv_ComponentNew := lv_ComponentNew||''''||C1.COMPONENTSHORTNAME||'''' as COMPONENTSHORTNAME, SUM('||lv_SqlTemp||')  AS COMPVALUE';
                ELSE
                    lv_Component := lv_Component ||', SUM('||C1.FORMULA||') AS '|| C1.COMPONENTSHORTNAME;    
                END IF;
            ELSE
                lv_Component := lv_Component ||', SUM(NVL(ATTN.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME;
            END IF;
        END IF; 
    END loop;
        
    lv_Component :=  Replace(lv_Component, 'ATTN', 'WPSTEMPATTN');
    lv_Component := Replace(lv_Component, 'MAST', 'WPSTEMPMAST');
    lv_Component := Replace(lv_Component, 'COMPONENT', 'WPSTEMPCOMPONENT');
    --DBMS_OUTPUT.PUT_LINE ('XXX '||lv_Component);
    lv_Sql := ' CREATE TABLE '||P_PHASE_TABLENAME||' AS '||CHR(10)
            ||' SELECT WPSTEMPATTN.WORKERSERIAL,  WPSTEMPMAST.WORKERCATEGORYCODE, '||CHR(10)  
            ||' SUM(NVL(WPSTEMPCOMPONENT.GROSS_WAGES,0)) AS GROSS_WAGES '||CHR(10)  
            ||' '|| lv_Component ||chr(10) 
            ||' FROM WPSTEMPMAST, WPSTEMPATTN, WPSTEMPCOMPONENT '||chr(10)   
            ||' WHERE WPSTEMPATTN.WORKERSERIAL = WPSTEMPMAST.WORKERSERIAL '||chr(10) 
            ||'   AND WPSTEMPATTN.WORKERSERIAL = WPSTEMPCOMPONENT.WORKERSERIAL  '||chr(10);
    if P_WORKERSERIAL is not null then
        lv_Sql := lv_Sql ||' AND WPSTEMPMAST.WORKERSERIAL IN ('||P_WORKERSERIAL||')' ||CHR(10); 
    end if; 
    lv_Sql := lv_Sql ||' GROUP BY WPSTEMPATTN.WORKERSERIAL, WPSTEMPMAST.WORKERCATEGORYCODE '||chr(10);        
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE, lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PHASE TABLE CREATION '||lv_SrlNo);
    lv_SrlNo:=lv_SrlNo+1;
--    DBMS_OUTPUT.PUT_LINE ('AMALESH- '||lv_Sql); 
    EXECUTE IMMEDIATE lv_Sql;  
    lv_Sql := '';
    COMMIT;

    --DBMS_OUTPUT.PUT_LINE ('AMALESH12345 - '||lv_Sql);
    --RETURN;

    ---- BELOW PROCERURE CALL FOR DATA CONVERT FROM COLUMN TO ROW --- CREATE TABLE NAME  - GTT_SWT_PHASE_DEDN
    lv_Sql := 'begin  proc_wps_PHASE_DEDN_rowise('''||P_COMPCODE||''','''||P_DIVCODE||''', '''||P_FNSTDT||''','''||P_FNENDT||'''); end;';
    EXECUTE IMMEDIATE LV_SQL;
    /*begin     
      proc_wps_PHASE_DEDN_rowise(P_COMPCODE, P_DIVCODE, P_FNSTDT, P_FNENDT);      
    exception
    WHEN OTHERS THEN
        LV_SQLERRM := SQLERRM;
       dbms_output.put_line('xxxxxxxxxxxxxxxxxxx'||LV_SQLERRM);
       RETURN ;
    end; */
    --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'AFTER MERGES '||lv_SrlNo  );
    lv_SrlNo:=lv_SrlNo+1;    
    commit;
    
    lv_strWorkerSerial := 'X';
    For cWages in ( SELECT A.WORKERSERIAL, A.WORKERCATEGORYCODE, A.GROSS_WAGES, A.COMPONENTSHORTNAME, A.COMPONENTAMOUNT, B.CALCULATIONINDEX, 
                    NVL(C.APPLICABLE,'NO') APPLICABLE, NVL(B.COMPONENTGROUP,'XX') COMPONENTGROUP, NVL(B.PARTIALLYDEDUCT,'N') PARTIALLYDEDUCT
                    FROM GTT_SWT_PHASE_DEDN A, WPSCOMPONENTMASTER B, WPSWORKERCATEGORYVSCOMPONENT C--, SWT_PHASE_DEDN D    
                    WHERE B.COMPANYCODE = P_COMPCODE AND B.DIVISIONCODE = P_DIVCODE
                      AND A.COMPONENTSHORTNAME = B.COMPONENTSHORTNAME 
                      AND B.COMPANYCODE= C.COMPANYCODE AND B.DIVISIONCODE = C.DIVISIONCODE
                      AND B.COMPONENTSHORTNAME = C.COMPONENTSHORTNAME
                      AND A.WORKERCATEGORYCODE = C.WORKERCATEGORYCODE
                      AND NVL(C.APPLICABLE,'NO') <> 'NO'
--                    AND A.WORKERSERIAL = D.WORKERSERIAL
                    ORDER BY A.WORKERSERIAL, B.CALCULATIONINDEX )
    LOOP
        lv_intCnt := lv_intCnt+1;
        --INSERT INTO WPS_ERROR_LOG(PROC_NAME, ORA_ERROR_MESSG, ERROR_QUERY, PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDCUTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, 'INSIDE CURSOR LOOP '|| lv_intCnt);
        if lv_strWorkerSerial <> cWages.WORKERSERIAL then
      
            begin
                select NVL(COINCF,0) into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
            exception
                --when others then null;
                when others then lv_CoinBf :=0;
            end;

            pkg_rowtab.WPS_PREV_FNDATA_row(cWages.WORKERSERIAL,lv_RowType_Prev_Data);
            -- select * into lv_RowType_Prev_Data from GTT_WPS_PREV_FNDATA where workerserial = p_workerserial ;
            BEGIN
                SELECT NVL(GROSS_PTAX,0), NVL(P_TAX,0), NVL(PF_GROSS,0), NVL(PF_CONT,0), NVL(ESI_GROSS,0), NVL(ESI_CONT,0), NVL(VPF,0)  
                INTO lv_PREV_FN_PTAXGROSS, lv_PREV_FN_PTAX, lv_PREV_FN_PFGROSS,lv_PREV_FN_PF_E,lv_PREV_FN_ESIGROSS,lv_PREV_FN_ESI_E,
                lv_PREV_FN_VPF 
                FROM GTT_WPS_PREV_FNDATA;
            EXCEPTION
                WHEN OTHERS THEN
                    lv_PREV_FN_PTAXGROSS := 0; 
                    lv_PREV_FN_PTAX :=0; 
                    lv_PREV_FN_PFGROSS :=0;
                    lv_PREV_FN_PF_E :=0;
                    lv_PREV_FN_ESIGROSS :=0;
                    lv_PREV_FN_ESI_E :=0;
                    lv_PREV_FN_VPF :=0;    
            END;


--            if SUBSTR(P_FNSTDT,1,2) = '16' then
--                pkg_rowtab.WPS_PREV_FNDATA_row(cWages.WORKERSERIAL,lv_RowType_Prev_Data);
--                BEGIN
--                    SELECT NVL(GROSS_PTAX,0), NVL(P_TAX,0), NVL(PF_GROSS,0), NVL(PF_CONT,0), NVL(ESI_GROSS,0), NVL(ESI_CONT,0), NVL(VPF,0)  
--                    INTO lv_PREV_FN_PTAXGROSS, lv_PREV_FN_PTAX, lv_PREV_FN_PFGROSS,lv_PREV_FN_PF_E,lv_PREV_FN_ESIGROSS,lv_PREV_FN_ESI_E,
--                    lv_PREV_FN_VPF 
--                    FROM GTT_WPS_PREV_FNDATA;
--                EXCEPTION
--                    WHEN OTHERS THEN
--                        lv_PREV_FN_PTAXGROSS := 0; 
--                        lv_PREV_FN_PTAX :=0; 
--                        lv_PREV_FN_PFGROSS :=0;
--                        lv_PREV_FN_PF_E :=0;
--                        lv_PREV_FN_ESIGROSS :=0;
--                        lv_PREV_FN_ESI_E :=0;
--                        lv_PREV_FN_VPF :=0;    
--                END;
--            end if;
            
            if lv_intCnt <> 1 then
                lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
                lv_TempDednAmt := lv_GrossWages + nvl(lv_CoinBf,0) - lv_TotalDedn - lv_ComponentAmt;
                lv_CoinBf := NVL(lv_CoinBf,0);
                --lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
                
                lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINCF = '||lv_TempDednAmt||', COINBF='||lv_CoinBf||' where workerserial = '''||lv_strWorkerSerial||''' ';
                execute immediate lv_Sql;
               -- PRASUN insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql||',COINCF - '||lv_CoinCf||',COINBF - '||lv_CoinBF||';',lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
                --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','ACTUALPAYBLEAMOUNT','1: ' ||lv_GrossWages || ' ' || nvl(lv_CoinBf,0)|| ' ' ||lv_TotalDedn|| ' ' ||lv_RoundOffRs|| ' ' ||lv_RoundoffType,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
                lv_SrlNo:=lv_SrlNo+1;
                commit;
            end if;
            lv_strWorkerSerial := cWages.WORKERSERIAL;
            lv_WagesAsOn := cWages.GROSS_WAGES - lv_MinimumPayableAmt + (lv_CoinBf);
            lv_GrossWages := cWages.GROSS_WAGES;
            lv_TotalDedn :=0;
              
        end if; 
        lv_TempDednAmt := 0;
        lv_ComponentAmt := cWages.COMPONENTAMOUNT;
        ------
        --DBMS_OUTPUT.PUT_LINE(cWages.COMPONENTGROUP);
        
        CASE cWages.COMPONENTGROUP
            WHEN 'ESI' THEN
                if lv_ComponentAmt > 0 then
                
                
--                    if SUBSTR(P_FNSTDT,1,2) = '16' THEN
                        BEGIN
                            SELECT ESI_GROSS, ESI_CONT INTO lv_PREV_FN_ESIGROSS, lv_PREV_FN_ESI_E
                            FROM GTT_WPS_PREV_FNDATA 
                            WHERE WORKERSERIAL = cWages.WorkerSerial;
                        EXCEPTION
                            WHEN OTHERS THEN 
                                lv_PREV_FN_ESIGROSS :=0;
                                lv_PREV_FN_ESI_E := 0;        
                        END;
                        IF NVL(lv_PREV_FN_ESI_E,0) >0 THEN                     
                            lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_PREV_FN_ESIGROSS,0); -- NVL(lv_RowType_Prev_Data.ESI_GROSS,0);
                            lv_ComponentAmt := round(lv_ComponentAmt,0);    --- gross value convert to system round off on 14.07.2020 as mail by sonthalia ji.
--                            --- b4 ceiling 1st round off 2 paisa then next hoight digit on 14.07.2020 as mail and advised by sonthalia ji.
                            lv_ComponentAmt := ceil(TRUNC(lv_ComponentAmt*0.01*lv_ESI_E_Perc,2));
                            --lv_ComponentAmt := ceil(lv_ComponentAmt*0.01*lv_ESI_E_Perc);    
                            lv_ComponentAmt := lv_ComponentAmt - NVL(lv_PREV_FN_ESI_E,0);--  NVL(lv_RowType_Prev_Data.ESI_CONT,0);
                        ELSE
                            --lv_ComponentAmt := ceil(lv_ComponentAmt*0.01*lv_ESI_E_Perc);
                            lv_ComponentAmt := round(lv_ComponentAmt,0);    --- gross value convert to system round off on 14.07.2020 as mail by sonthalia ji.
                            lv_ComponentAmt := ceil(TRUNC(lv_ComponentAmt*0.01*lv_ESI_E_Perc,2));
                        END IF;    
--                    else
--                        lv_ComponentAmt := ceil(lv_ComponentAmt*0.01*lv_ESI_E_Perc);    
--                    end if;
                 else
                    lv_ComponentAmt :=0;
                 end if;   
                    lv_PREV_FN_PTAXGROSS := 0; 
                    lv_PREV_FN_PTAX :=0; 
                    lv_PREV_FN_PFGROSS :=0;
                    lv_PREV_FN_PF_E :=0;
                    lv_PREV_FN_ESIGROSS :=0;
                    lv_PREV_FN_ESI_E :=0;    
            WHEN 'PF' THEN
                lv_ComponentAmt := cWages.COMPONENTAMOUNT;
--                IF cWages.Workerserial = '000033' then
--                    dbms_output.put_line ('1_1 - '||lv_ComponentAmt);
--                end if;
    ----- BELOW PART IS AMMEND ON12.07.2020 BECAUSE USER WANT TO CALCULATE ACTUAL PF CONTRIBUTION BASED ON                  
                BEGIN
                    SELECT PF_GROSS, PF_CONT INTO lv_PREV_FN_PFGROSS, lv_PREV_FN_PF_E
                    FROM GTT_WPS_PREV_FNDATA 
                    WHERE WORKERSERIAL = cWages.WorkerSerial;
                EXCEPTION
                    WHEN OTHERS THEN 
                        lv_PREV_FN_PFGROSS :=0;
                        lv_PREV_FN_PF_E := 0;        
                END;
                IF NVL(lv_PREV_FN_PF_E,0) > 0 THEN
                                     
                    lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_PREV_FN_PFGROSS,0); -- NVL(lv_RowType_Prev_Data.ESI_GROSS,0);
                    
                    lv_ComponentAmt := ROUND(lv_ComponentAmt*0.01*lv_PF_PERCENT,0);
                    lv_ComponentAmt := lv_ComponentAmt - NVL(lv_PREV_FN_PF_E,0);--  NVL(lv_RowType_Prev_Data.ESI_CONT,0);
                ELSE
                    lv_ComponentAmt := round(lv_ComponentAmt*0.01*lv_PF_PERCENT,0);
                END IF;    
                
            --- BELOW PART NOT REQUIRED TO NAIHATI BECAUSE THEY NOT MAINTAIN THE MAXIMUM LIMIT FOR THE WORKER'S
--               --lv_PF_PERCENT, lv_MAX_PFGROSS, lv_MAX_PF_CONT
----               IF SUBSTR(P_FNSTDT,1,2) = '16' THEN
               
--                    BEGIN
--                        SELECT PF_GROSS, PF_CONT INTO lv_PREV_FN_PFGROSS, lv_PREV_FN_PF_E
--                        FROM GTT_WPS_PREV_FNDATA 
--                        WHERE WORKERSERIAL = cWages.WorkerSerial;
--                    EXCEPTION
--                        WHEN OTHERS THEN 
--                            lv_PREV_FN_PFGROSS :=0;
--                            lv_PREV_FN_PF_E := 0;        
--                    END; 
--                    lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_PREV_FN_PFGROSS,0);  -- NVL(lv_RowType_Prev_Data.PF_GROSS,0);
--                    if lv_ComponentAmt > lv_MAX_PFGROSS then
--                        lv_TempDednAmt_Prev := lv_MAX_PFGROSS-NVL(lv_PREV_FN_PFGROSS,0); 
--                        lv_Sql := 'UPDATE '||P_TABLENAME||' SET PF_GROSS= '||lv_TempDednAmt_Prev||' WHERE WORKERSERIAL = '''||cWages.WORKERSERIAL||''' '||CHR(10);
--                        EXECUTE IMMEDIATE lv_Sql;                 
--                    end if;
--                    lv_ComponentAmt := round(lv_ComponentAmt*lv_PF_PERCENT*0.01,0);
--                    if lv_ComponentAmt > lv_MAX_PF_CONT then
--                        lv_ComponentAmt := lv_MAX_PF_CONT;
--                    end if;
--                    lv_ComponentAmt := lv_ComponentAmt - NVL(lv_PREV_FN_PF_E,0);    --NVL(lv_RowType_Prev_Data.PF_CONT,0);

----               ELSE
----                    lv_ComponentAmt := round(lv_ComponentAmt*lv_PF_PERCENT*0.01,0);
----                    if lv_ComponentAmt > lv_MAX_PF_CONT then
----                        lv_ComponentAmt := lv_MAX_PF_CONT;
----                    end if;
----               END IF;     
               
            WHEN 'VPF' then
                lv_ComponentAmt := 0;
--                -----------TEMPORARY DISABLE DUE TO NO VPF IN NAIHATI ------------
--                begin
--                    SELECT NVL(VPF_PERC,0) INTO lv_VPF_PERCENT
--                    FROM WPSTEMPMAST
--                    where workerserial = cWages.WORKERSERIAL;
--                exception
--                    when others then lv_VPF_PERCENT :=0;      
--                end;                
--               IF SUBSTR(P_FNSTDT,1,2) = '16' THEN
--                    BEGIN
--                        SELECT PF_GROSS, VPF INTO lv_PREV_FN_PFGROSS, lv_PREV_FN_VPF
--                        FROM GTT_WPS_PREV_FNDATA 
--                        WHERE WORKERSERIAL = cWages.WorkerSerial;
--                    EXCEPTION
--                        WHEN OTHERS THEN 
--                            lv_PREV_FN_PFGROSS :=0;
--                            lv_PREV_FN_VPF := 0;        
--                    END;                
--                    lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_PREV_FN_PFGROSS,0);  -- NVL(lv_RowType_Prev_Data.PF_GROSS,0);
--                    IF lv_ComponentAmt > lv_MAX_PFGROSS then
--                       lv_ComponentAmt :=  lv_MAX_PFGROSS;
--                    end if;   
--                    lv_ComponentAmt := round(lv_ComponentAmt*lv_VPF_PERCENT*0.01,0);
--                    lv_ComponentAmt := lv_ComponentAmt - NVL(lv_PREV_FN_VPF,0);    --NVL(lv_RowType_Prev_Data.PF_CONT,0);
--               ELSE
--                    IF lv_ComponentAmt > lv_MAX_PFGROSS then
--                        lv_ComponentAmt :=  lv_MAX_PFGROSS;
--                    end if;
--                    lv_ComponentAmt := round(lv_ComponentAmt*lv_VPF_PERCENT*0.01,0);
--               END IF;     
            
            WHEN 'PTAX' THEN
                IF SUBSTR(P_FNSTDT,1,2) = '16' THEN
                    if lv_ProcessType = 'MONTHLY' THEN
                        SELECT NVL(PTAXAMOUNT,0) into lv_TempVal FROM PTAXSLAB
                        WHERE 1=1
                          AND STATENAME = 'WEST BENGAL'
                          AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                          AND SLABAMOUNTFROM <= lv_ComponentAmt  
                          AND SLABAMOUNTTO >= lv_ComponentAmt;
                          lv_ComponentAmt := nvl(lv_TempVal,0);
                    else            -- OTHER WISER CONSIDER PROCESS TYPE - FORTNIGHTLY
                        --if SUBSTR(P_FNSTDT,1,2) = '16' THEN
                            lv_PREV_FN_PTAXGROSS := 0;
                            lv_PREV_FN_PTAX := 0;
                            BEGIN
                                SELECT GROSS_PTAX, P_TAX INTO lv_PREV_FN_PTAXGROSS, lv_PREV_FN_PTAX
                                FROM GTT_WPS_PREV_FNDATA 
                                WHERE WORKERSERIAL = cWages.WorkerSerial;
                            EXCEPTION
                                WHEN OTHERS THEN 
                                    lv_PREV_FN_PTAXGROSS :=0;
                                    lv_PREV_FN_PTAX := 0;        
                            END; 
                            --lv_ComponentAmt := lv_ComponentAmt+ NVL(lv_RowType_Prev_Data.GROSS_PTAX,0);
                            lv_ComponentAmt := lv_ComponentAmt+ lv_PREV_FN_PTAXGROSS;    
                       -- end if;
                        begin
                            SELECT PTAXAMOUNT into lv_TempVal FROM PTAXSLAB
                            WHERE 1=1
                              AND STATENAME = 'WEST BENGAL'
                              AND WITHEFFECTFROM = ( SELECT MAX(WITHEFFECTFROM) FROM PTAXSLAB WHERE STATENAME = 'WEST BENGAL' AND WITHEFFECTFROM <= lv_fn_stdt)
                              AND SLABAMOUNTFROM <= lv_ComponentAmt  
                              AND SLABAMOUNTTO >= lv_ComponentAmt;
                        exception
                            when others then 
                              null;
                        end;
                        if SUBSTR(P_FNSTDT,1,2) = '16' THEN  
                            --lv_ComponentAmt := nvl(lv_TempVal,0) - nvl(lv_RowType_Prev_Data.P_TAX,0);
                            lv_ComponentAmt := nvl(lv_TempVal,0) - lv_PREV_FN_PTAX;
                        else
                            lv_ComponentAmt := nvl(lv_TempVal,0);
                        end if;                     
                    end if;
                ELSE
                    lv_ComponentAmt := 0;    
                END IF;
             WHEN 'PF LOAN' THEN
                lv_ComponentAmt := 0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
               -- if P_TRANTYPE = 'SALARY' OR P_TRANTYPE = 'FINAL SETTLEMENT' then
                    lv_ComponentAmt := cWages.COMPONENTAMOUNT;
                    lv_ComponentAmt:=0;
                    lv_PFLN_CAP_STOP :='N';
                    lv_PFLN_INT_STOP :='N';
                    BEGIN
                        
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN PFLOAN_BAL > CAP_EMI THEN CAP_EMI ELSE PFLOAN_BAL END, CAP_EMI_DEDUCT_TYPE, NVL(CAP_STOP,'N') 
                            INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE, lv_PFLN_CAP_STOP   
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND NVL(CAP_STOP,'N') = 'N'
                              AND PFLOAN_BAL > 0;
                              --DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', COMPONENT '||substr(cWages.COMPONENTSHORTNAME,1,5)||' lv_ComponentAmt ' || lv_ComponentAmt);
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN NVL(PFLOAN_INT_BAL,0) > NVL(INT_EMI,0) THEN INT_EMI ELSE PFLOAN_INT_BAL END , INT_EMI_DEDUCT_TYPE, NVL(INT_STOP,'N') 
                            INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE, lv_PFLN_INT_STOP  
                            FROM GBL_PFLOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND NVL(INT_STOP,'N') = 'N'
                              AND PFLOAN_INT_BAL > 0;
                        
                        
                        insert into WPS_ERROR_LOG(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_DATE, ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
                                values( P_COMPCODE, P_DIVCODE,'PROC_WPSWAGESPROCESS_DEDUCTION','',SYSDATE, lv_SqlStr,'COM = '||cWages.COMPONENTSHORTNAME||' WS = '||cWages.WorkerSerial||'  COMVAL = '||lv_ComponentAmt||' WAGES = '||lv_WagesAsOn, lv_fn_stdt, lv_fn_endt, lv_Remarks);

                        else
                            lv_ComponentAmt := 0;
                        end if;
                        
                        --DBMS_OUTPUT.PUT_LINE('PFL   '||lv_WagesAsOn||'    '||lv_ComponentAmt);
                        if lv_WagesAsOn <  lv_ComponentAmt then             
                           -- if lv_EMI_DEDN_TYPE = 'FULL' then
                           IF cWages.PARTIALLYDEDUCT = 'N' THEN
                                lv_ComponentAmt := 0;
                            else
                                lv_ComponentAmt := floor(lv_WagesAsOn);
                            end if;              
                        end if;  
                                              
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;        
                --else
               --     lv_ComponentAmt := 0;
                --end if;                
            WHEN 'LOAN' THEN
                lv_ComponentAmt:=0;
                --- ONLY SALARY AND FINAL SETTLEMENT TIME LOAN VALUE CALCULATE IN THE SYSTEM ---
                --if P_TRANTYPE = 'SALARY' OR P_TRANTYPE ='FINAL SETTLEMENT' then
                    /* CHANGES AS ON 03/12/2018' PARTIAL*/    
--                    lv_EMI_DEDN_TYPE := 'PARTIAL';
                    /* CHANGES AS ON 03/12/2018' PARTIAL*/   
                    
--                    DBMS_OUTPUT.PUT_LINE('GENERAL LOAN : '||lv_WagesAsOn ||'  '||  lv_ComponentAmt);
                    
                    BEGIN
                        if substr(cWages.COMPONENTSHORTNAME,1,5) = 'LOAN_' THEN 
                            SELECT CASE WHEN LOAN_BAL > CAP_EMI THEN CAP_EMI ELSE LOAN_BAL END, CAP_EMI_DEDUCT_TYPE INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_BAL > 0;
                        elsif substr(cWages.COMPONENTSHORTNAME,1,5) = 'LINT_' THEN 
                            SELECT CASE WHEN LOAN_INT_BAL > INT_EMI THEN INT_EMI ELSE LOAN_INT_BAL END, INT_EMI_DEDUCT_TYPE INTO lv_ComponentAmt, lv_EMI_DEDN_TYPE  
                            FROM GBL_LOANBLNC 
                            WHERE WORKERSERIAL = cWages.WorkerSerial and MODULE = 'WPS'
                              AND LOANCODE = substr(cWages.COMPONENTSHORTNAME,6)
                              AND LOAN_INT_BAL > 0;
                        else
                            lv_ComponentAmt := 0;
                        end if;
                        /* CHANGES AS ON 03/12/2018' PARTIAL*/    
                        if lv_WagesAsOn <  lv_ComponentAmt then             
--                            if lv_EMI_DEDN_TYPE = 'FULL' then
                            IF cWages.PARTIALLYDEDUCT = 'N' THEN
                                lv_ComponentAmt := 0;
                            else
                                lv_ComponentAmt := floor(lv_WagesAsOn); 
                            end if;              
                        end if;  
                        
                        /* CHANGES AS ON 03/12/2018' PARTIAL*/    
                    EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                              WHEN OTHERS THEN lv_ComponentAmt := 0;      
                    END;
               -- end if; 
            WHEN 'ELECTRICITY' then
                BEGIN
                    BEGIN
                         SELECT ATTENDANCEHOURS INTO lv_ChkAttnHrs FROM WPSTEMPATTN WHERE WORKERSERIAL = cWages.WorkerSerial;
                    EXCEPTION
                        WHEN OTHERS THEN lv_ChkAttnHrs:=0;
                    END;
                        
                    IF lv_ChkAttnHrs > 0 THEN
                        SELECT CASE WHEN NVL(ELEC_BAL_AMT,0) > NVL(ELEC_EMI_AMT,0) THEN ELEC_EMI_AMT ELSE ELEC_BAL_AMT END INTO lv_ComponentAmt  
--                        SELECT NVL(ELEC_BAL_AMT,0) INTO lv_ComponentAmt 
                        FROM GBL_ELECBLNC
                        WHERE WORKERSERIAL = cWages.WorkerSerial
                        and NVL(ELEC_BAL_AMT,0) > 0; 
                    ELSE
                        lv_ComponentAmt := 0;
                    END IF; 
                    IF lv_ComponentAmt > 0 THEN
                        IF NVL(cWages.PARTIALLYDEDUCT,'NA') = 'Y' THEN
                             if lv_WagesAsOn < lv_ComponentAmt then
                                lv_ComponentAmt := floor(lv_WagesAsOn);
                             end if;
                        END IF;            
                    END IF;
                EXCEPTION WHEN NO_DATA_FOUND THEN lv_ComponentAmt := 0;
                          WHEN OTHERS THEN lv_ComponentAmt := 0;      
                END;               
            
            WHEN 'LIC' THEN                  
                lv_ComponentAmt :=0;
            
            else
              lv_ComponentAmt := cWages.COMPONENTAMOUNT;    
        end case;    
        if lv_WagesAsOn >  lv_ComponentAmt then             -- cWages.COMPONENTAMOUNT
            lv_TempDednAmt := lv_ComponentAmt;              -- cWages.COMPONENTAMOUNT;
        else            
            IF NVL(cWages.PARTIALLYDEDUCT,'NA') = 'N' THEN
                lv_TempDednAmt := 0;
            ELSE
                lv_TempDednAmt := lv_WagesAsOn;  
            END IF;
        end if;
        
        if lv_TempDednAmt <> 0 then
            lv_TotalDedn := lv_TotalDedn + lv_TempDednAmt;
            lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set '||cWages.componentshortname||' = '||nvl(lv_TempDednAmt,0)||', TOT_DEDUCTION = '||nvl(lv_TotalDedn,0)||' where workerserial = '''||cWages.WorkerSerial||''' ';
--            DBMS_OUTPUT.PUT_LINE('WORKERSERIAL '||cWages.WORKERSERIAL||', lv_Sql '||lv_Sql);
          -- PRASUN  
--          insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn ||'Component- '||cWages.componentshortname||', WORKERSERIAL - '||cWages.WorkerSerial||'');
            execute immediate lv_Sql;
            --lv_Sql := 'TEST'; 
        end if;
        lv_WagesAsOn := lv_WagesAsOn - lv_TempDednAmt;
        --lv_remarks := 'DEDUCTION COMPONENT UPDATING => WORKSERIAL='||cWages.WORKERSERIAL||',+'||lv_strWorkerSerial||', GROSS WAGES='||cWages.GROSS_WAGES||',Minimum Pay='||lv_MinimumPayableAmt||', As On Balance='||lv_WagesAsOn;
        --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn );
        lv_SrlNo := lv_SrlNo + 1;          
    END LOOP; 
    
--    start for last record update actual pay, coin bf, coin cf
    begin
        select COINCF into lv_CoinBf FROM WPS_PREV_FN_COIN where workerserial = lv_strWorkerSerial;
    exception
        --when others then null;
        when others then lv_CoinBf :=0;
    end;
    lv_ComponentAmt := FN_ROUNDOFFRS(lv_GrossWages + nvl(lv_CoinBf,0)  - lv_TotalDedn,lv_RoundOffRs,lv_RoundoffType);
    lv_CoinCf := (lv_GrossWages + nvl(lv_CoinBf,0)  - lv_TotalDedn) - lv_ComponentAmt; 
    lv_TempDednAmt := lv_GrossWages /*+ nvl(lv_CoinBf,0)*/ - lv_TotalDedn - lv_ComponentAmt;
    --lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||' where workerserial = '''||lv_strWorkerSerial||''' ';
    
    lv_Sql := 'UPDATE WPSWAGESDETAILS_MV_SWT set ACTUALPAYBLEAMOUNT = '||lv_ComponentAmt||', COINBF = '||NVL(lv_CoinBf,0)||', COINCF = '||NVL(lv_CoinCF,0)||' where workerserial = '''||lv_strWorkerSerial||''' ';
    execute immediate lv_Sql;
   -- PRASUN  insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo||' WAGES ON-'||lv_WagesAsOn||' workerserial '||lv_strWorkerSerial);
   -- insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','ACTUALPAYBLEAMOUNT','2: ' ||lv_GrossWages || ' ' || nvl(lv_CoinBf,0)|| ' ' ||lv_TotalDedn|| ' ' ||lv_RoundOffRs|| ' ' ||lv_RoundoffType,lv_parvalues, lv_fn_stdt, lv_fn_endt,lv_remarks||' WOKERSERIAL '||lv_strWorkerSerial||' '||lv_SrlNo );
    lv_SrlNo := lv_SrlNo + 1;
    commit;
--    end for last record update actual pay, coin bf, coin cf

    -------- NEW ADD ON 13.09.2020 ------------
    UPDATE WPSWAGESDETAILS_MV_SWT SET TOT_EARN = GROSS_WAGES+NVL(COINBF,0); 

    --RETURN;
    lv_remarks := 'PF LOAN BALANCE UPDATE';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'PF', NULL,NULL, NULL);
    
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE';
    PRC_LOANBREAKUP_INSERT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, 'GENERAL', NULL,NULL, NULL);
    
    lv_remarks := 'PF LOAN BALANCE UPDATE';     
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'PF',NULL,NULL,NULL);    
    
    lv_remarks := 'GENERAL LOAN BALANCE UPDATE'; 
    PRC_LOANBALANCE_UPDT_WAGES(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS',P_TABLENAME,'GENERAL',NULL,NULL,NULL);        
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    --insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION','','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);

    --  ELECTRIC DEDUCTION BREAKUP
    --lv_remarks := 'ELECTRIC BREAKUP DATA INSERT';
    --PRC_ELECTRICBREAKUP_INSERT(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, NULL);
    

 -- LIC DATA REALIZED/ UNREALIZED 
    lv_remarks := 'LIC UNREALIZED DATA INSERT';
    --PRC_REALIZEDUNREALDATA_INSERT (P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME,'LIC', 'ALL', NULL);

    --  ELECTRIC DEDUCTION BREAKUP
    lv_remarks := 'ELECTRIC BREAKUP DATA INSERT';
    PRC_ELECTRICBREAKUP_INSERT(P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME, NULL);



 -- SHOP RENT DATA REALIZED/ UNREALIZED 
    lv_remarks := 'SHOP RENT UNREALIZED DATA INSERT';
    --PRC_REALIZEDUNREALDATA_INSERT (P_COMPCODE,P_DIVCODE,P_YEARCODE,TO_CHAR(lv_fn_stdt,'DD/MM/YYYY'),TO_CHAR(lv_fn_endt,'DD/MM/YYYY'),'WPS', P_TABLENAME,'SHOP_RENT', 'ALL', NULL);

    


commit;    
--exception
--    when others then
--    lv_sqlerrm := sqlerrm ;
--    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_DEDUCTION',lv_sqlerrm,lv_Sql,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks||' '||lv_SrlNo);
--    commit;
    --dbms_output.put_line('PROC - PROC_WPSWAGESPROCESS_UPDATE : ERROR !! WHILE WAGES PROCESS '||P_FNSTDT||' AND PHASE -> '||ltrim(trim(P_PHASE))||' : '||sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_INSERT;

CREATE OR REPLACE PROCEDURE PROC_WPSWAGESPROCESS_INSERT ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(20000);
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_MastComponent    varchar2(4000) := '';
lv_MastComponentGroupBy    varchar2(4000) := '';
lv_MastComponent_RT varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';
lv_ProcName         varchar2(30) := 'PROC_WPSWAGESPROCESS_INSERT';   

begin
    
    --PROC_WPSVBPROCEES_WORKORDER(P_COMPCODE,P_DIVCODE,'SWT',P_YEARCODE,P_FNSTDT,P_FNENDT, NULL);

    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_SWT';
    execute immediate lv_sqlStr;
    
    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_MV_SWT';
    execute immediate lv_sqlStr;
    
    --- BELOW PROCEDURE CALL STL DATA TRANSFER INTO ATTENDNACE TABLE --------
    --PROC_STL_DATATRANSFER_ATTN ( P_COMPCODE,P_DIVCODE,P_FNSTDT,P_FNENDT,P_WORKKERSERIAL);
    
    PROC_WPSVIEWCREATION ( P_COMPCODE,P_DIVCODE,'ALL',0,P_FNSTDT,P_FNENDT,P_TABLENAME,P_PROCESSTYPE);
    ----- CREATE TABLE WMPTEMPMAST FROM THE VIEW MAST
    
    
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPMAST CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
    END;
    
    ----- CREATE TABLE WMPTEMPATTN FROM THE VIEW ATTN
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    

    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPFNPARAM CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPFNPARAM AS SELECT * FROM FNPARAM';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPFNPARAM AS SELECT * FROM FNPARAM';
    END;    
    
    lv_SqlStr := ' DELETE FROM '||P_TABLENAME;
    BEGIN
        execute immediate lv_SqlStr;
      EXCEPTION WHEN OTHERS THEN NULL;
    END;
    lv_MastComponent := '';
    lv_MastComponent_RT := '';
    for c1 in ( SELECT COMPONENTSHORTNAME FROM WPSCOMPONENTMASTER 
                 WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
                   AND NVL(TAKEPARTINWAGES,'N') ='Y' AND NVL(MASTERCOMPONENT,'N') = 'Y'
              )
    LOOP
        IF length(lv_MastComponent) >= 4 THEN
            lv_MastComponent := lv_MastComponent||',NVL(B.'||c1.COMPONENTSHORTNAME||',0) AS '||c1.COMPONENTSHORTNAME;
            lv_MastComponentGroupBy := lv_MastComponentGroupBy||',NVL(B.'||c1.COMPONENTSHORTNAME||',0)';
            lv_MastComponent_RT := lv_MastComponent_RT||','||c1.COMPONENTSHORTNAME||'_RT';
        ELSE
            lv_MastComponent := 'NVL(B.'||c1.COMPONENTSHORTNAME||',0) AS '||c1.COMPONENTSHORTNAME ;
            lv_MastComponentGroupBy := 'NVL(B.'||c1.COMPONENTSHORTNAME||',0)';
            lv_MastComponent_RT := c1.COMPONENTSHORTNAME||'_RT';
        END IF;    
    END LOOP;                   
    
    --lv_MastCompenet :=     
    lv_SqlStr := ' INSERT INTO '||P_TABLENAME||' ( '||CHR(10)
            ||'    COMPANYCODE, DIVISIONCODE, SYSROWID, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, GRADECODE, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL,'||CHR(10)
            ||' '||lv_MastComponent_RT||', '||CHR(10) 
            ||' ATTENDANCEHOURS, NIGHTALLOWANCEHOURS, OVERTIMEHOURS, OT_NSHRS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STLHOURS, '||CHR(10) 
            ||' VBASIC,NS_ALLOW, FBK_WAGES, OT_AMOUNT, NS_ALLOW_OT, HRS_RATE '||CHR(10) 
            ||' ) '||CHR(10)
            ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL SYSROWID, '''||P_YEARCODE||''',  '''||lv_fn_stdt||''','''||lv_fn_endt||''', A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, B.GRADECODE, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL,'||CHR(10)
            ||' '||lv_MastComponent||','||CHR(10)            
            ||' SUM(A.ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(A.NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(NVL(A.OVERTIMEHOURS,0)) OVERTIMEHOURS, SUM(NVL(A.OT_NSHRS,0)) OT_NSHRS, '||CHR(10)
            ||' SUM(NVL(A.HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(A.LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(A.FBKHOURS,0)) FBKHOURS, SUM(NVL(A.STLHOURS,0)) STLHOURS, '||CHR(10) 
            ||' ROUND(NVL(C.VBAMOUNT,0),2) VBASIC, SUM(NVL(C.VBAMOUNT_NS,0)) NS_ALLOW, SUM(NVL(C.VBAMOUNT_FBK,0)) VBAMOUNT_FBK,  SUM(NVL(C.VBAMOUNT_NS,0)) NS_ALLOW, SUM(NVL(C.VBAMOUNT_OTNS,0)) NS_ALLOW_OT,'||CHR(10)
            ||' ROUND(NVL(HRS_RATE,0),4) HRS_RATE'||CHR(10)
            ||' FROM '||CHR(10) 
            ||' ( '||CHR(10)
            ||'  SELECT Z.COMPANYCODE, Z.DIVISIONCODE, Z.WORKERSERIAL, Z.TOKENNO,Z.WORKERCATEGORYCODE, Z.SHIFTCODE, Z.DEPARTMENTCODE, Z.SECTIONCODE,Z.OCCUPATIONCODE, Z.DEPTSERIAL,'||CHR(10)
            ||'  SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,  SUM(NVL(OT_NSHRS,0)) OT_NSHRS, '||CHR(10)
            ||'  SUM(HOLIDAYHOURS) HOLIDAYHOURS, SUM(LAYOFFHOURS) LAYOFFHOURS, SUM(FBKHOURS) FBKHOURS, /*SUM(STLHOURS)*/ 0 STLHOURS  '||CHR(10)
            ||'  FROM WPSATTENDANCEDAYWISE Z  '||CHR(10)
            ||'  WHERE Z.COMPANYCODE = '''||P_COMPCODE||''' AND Z.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            ||'    AND Z.YEARCODE = '''||P_YEARCODE||''' '||CHR(10) 
            ||'    AND Z.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND Z.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||CHR(10)
--            ||'  FROM ( '||CHR(10)   
--            ||'         SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO,A.WORKERCATEGORYCODE, A.SHIFTCODE,A.DEPARTMENTCODE DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL,'||CHR(10) 
--            ||'         NVL(ATTENDANCEHOURS,0) ATTENDANCEHOURS, NVL(OVERTIMEHOURS,0) OVERTIMEHOURS,   '||CHR(10)  
--            ||'         NVL(HOLIDAYHOURS,0) HOLIDAYHOURS, NVL(LAYOFFHOURS,0) LAYOFFHOURS, NVL(FBKHOURS,0) FBKHOURS, 0 STLHOURS, '||CHR(10) 
--            ||'         NVL(NIGHTALLOWANCEHOURS,0) NIGHTALLOWANCEHOURS, NVL(OT_NSHRS,0)    '||CHR(10)
--            ||'         FROM WPSATTENDANCEDAYWISE A  '||CHR(10)
--            ||'         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
--            ||'           AND A.YEARCODE = '''||P_YEARCODE||''' '||CHR(10) 
--            ||'           AND A.DATEOFATTENDANCE >= '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <= '''||lv_fn_endt||''' '||CHR(10)
--            ||'         UNION ALL '||CHR(10)
--            ||'         SELECT  S.COMPANYCODE, S.DIVISIONCODE, S.WORKERSERIAL, S.TOKENNO,S.WORKERCATEGORYCODE, S.DEPARTMENTCODE DEPARTMENTCODE, S.SECTIONCODE,'||CHR(10)
--            ||'         0 ATTENDANCEHOURS, 0 OVERTIMEHOURS,    '||CHR(10)
--            ||'         0 HOLIDAYHOURS, 0 LAYOFFHOURS, 0 FBKHOURS, STLHOURS STLHOURS, '||CHR(10)
--            ||'         0 NIGHTALLOWANCEHOURS  '||CHR(10)
--            ||'         FROM WPSSTLENTRY S  '||CHR(10)
--            ||'         WHERE S.COMPANYCODE = '''||P_COMPCODE||''' AND S.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
--            ||'           AND S.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10)
--            ||'           AND S.LEAVECODE = ''STL'' '||CHR(10)
--            ||'       ) Z '||CHR(10)
            ||'   GROUP BY Z.COMPANYCODE, Z.DIVISIONCODE, Z.WORKERSERIAL, Z.TOKENNO,Z.WORKERCATEGORYCODE,Z.SHIFTCODE, Z.DEPARTMENTCODE, Z.SECTIONCODE, Z.OCCUPATIONCODE, Z.DEPTSERIAL'||CHR(10)    
            ||' ) A, WPSTEMPMAST B, /*WPSWORKERMAST B,*/ '||CHR(10) 
            ||' (    '||CHR(10)
            ||'      SELECT WORKERSERIAL, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL, SUM(VBAMOUNT) VBAMOUNT, '||CHR(10)
            ||'      SUM(NVL(VBAMOUNT_FBK,0)) VBAMOUNT_FBK, SUM(NVL(VBAMOUNT_NS,0)) VBAMOUNT_NS, SUM(NVL(VBAMOUNT_OTNS,0)) VBAMOUNT_OTNS, '||CHR(10)  
            ||'      SUM(NVL(HRS_RATE,0)) HRS_RATE '||CHR(10)
            ||'      FROM WPSVBDETAILS '||CHR(10)
            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)   
            ||'        AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
            ||'      GROUP BY WORKERSERIAL, SHIFTCODE, DEPARTMENTCODE, SECTIONCODE, OCCUPATIONCODE, DEPTSERIAL '||CHR(10)  
            ||' ) C, WPSWORKERCATEGORYMAST  D '||CHR(10)
            ||' WHERE A.COMPANYCODE =  '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL  AND NVL(B.ACTIVE,''N'')=''Y'' '||CHR(10)
            ||'   AND A.WORKERSERIAL = C.WORKERSERIAL (+)  AND A.SHIFTCODE = C.SHIFTCODE (+) AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) '||CHR(10)
            ||'   AND A.SECTIONCODE = C.SECTIONCODE(+) AND A.OCCUPATIONCODE = C.OCCUPATIONCODE (+) AND A.DEPTSERIAL = C.DEPTSERIAL (+) '||CHR(10)
            ||'   AND A.COMPANYCODE = D.COMPANYCODE   '|| CHR(10)
            ||'   AND A.DIVISIONCODE = D.DIVISIONCODE  '||CHR(10)
            ||'   AND A.WORKERCATEGORYCODE = D.WORKERCATEGORYCODE  '||CHR(10);
            if P_PROCESSTYPE='VOUCHER PROCESS' then
            lv_SqlStr := lv_SqlStr ||'   AND  D.CATEGORYGROUP  LIKE''%VOUCHER%''  '||CHR(10);
            ELSE
             lv_SqlStr := lv_SqlStr ||'   AND D.ISWAGESPROCESS = ''Y'' AND D.CATEGORYGROUP NOT LIKE''%VOUCHER%''  '||CHR(10);
            END IF;
            lv_SqlStr := lv_SqlStr ||' GROUP BY A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO,  A.WORKERCATEGORYCODE, B.GRADECODE, A.SHIFTCODE, A.DEPARTMENTCODE, A.SECTIONCODE, A.OCCUPATIONCODE, A.DEPTSERIAL,'||CHR(10)
            ||'        '||lv_MastComponentGroupBy||', NVL(C.VBAMOUNT,0), NVL(HRS_RATE,0)'||CHR(10);
--            ---- BELOW PART DISABLE BY AMALESH ON 13/06/2020 BECAUSE ONLY HRA PAID IN 2ND FORTNIGHT BASED ON WORKING/STL IN 1ST FORTNIHGT BUT NOT WORKING IN 2ND FORTNIGHT 
--            ||' HAVING ( SUM(NVL(ATTENDANCEHOURS,0))<> 0 OR SUM(NVL(OVERTIMEHOURS,0))<> 0 OR SUM(NVL(STLHOURS,0))<>0 OR SUM(NVL(HOLIDAYHOURS,0))<> 0 OR SUM(NVL(FBKHOURS,0))<>0 OR SUM(NVL(LAYOFFHOURS,0))<>0 ) '||CHR(10);
             
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    --COMMIT;
    execute immediate lv_SqlStr;
    ---- UPDATE NOT APPLCICABLE COLUMN TO ZERO AS PER CATEGORY VS COMPONENT MAPPING FOR THE PHSE 0 OR INSERT 
    PROC_WPS_UPDATE_NA_COMP(P_COMPCODE, P_DIVCODE, P_FNSTDT, P_FNENDT, P_TABLENAME,P_TABLENAME,'NO');
    insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,'','',lv_parvalues,lv_fn_stdt,lv_fn_endt, 'PROCESS INSERT SUCCESSFULLY COMPLETE');
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(COMPANYCODE, DIVISIONCODE,PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
 values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
 COMMIT;
end;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_INSERT_NW;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPROCESS_INSERT_NW" ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL)
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';   

begin
    
    PROC_WPSVBPROCEES_WORKORDER(P_COMPCODE,P_DIVCODE,'SWT',P_YEARCODE,P_FNSTDT,P_FNENDT, NULL);

    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_SWT';
    execute immediate lv_sqlStr;
    
    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_MV_SWT';
    execute immediate lv_sqlStr;
    
    PROC_WPSVIEWCREATION ( P_COMPCODE,P_DIVCODE,'ALL',0,P_FNSTDT,P_FNENDT,P_TABLENAME);
    ----- CREATE TABLE WMPTEMPMAST FROM THE VIEW MAST
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPMAST CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
    END;
    
    ----- CREATE TABLE WMPTEMPATTN FROM THE VIEW ATTN
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    

    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPFNPARAM CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPFNPARAM AS SELECT * FROM FNPARAM';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPFNPARAM AS SELECT * FROM FNPARAM';
    END;    
    
    lv_SqlStr := ' DELETE FROM '||P_TABLENAME;
    BEGIN
        execute immediate lv_SqlStr;
      EXCEPTION WHEN OTHERS THEN NULL;
    END;

--    lv_SqlStr := ' INSERT INTO '||P_TABLENAME||' ( '||CHR(10)
--            ||'    COMPANYCODE, DIVISIONCODE, SYSROWID, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, '||CHR(10)
--            ||'    DARATE, ADHOCRATE, SPL_ALLOW_RATE, '||CHR(10) 
--            ||'    ATTENDANCEHOURS, OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STLHOURS, '||CHR(10) 
--            ||'    NIGHTALLOWANCEHOURS, VBASIC '||CHR(10) 
--            ||'    ) '||CHR(10)
--            ||'    SELECT B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL,'''||P_YEARCODE||''',  '''||lv_fn_stdt||''','''||lv_fn_endt||''', A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, MAX(A.DEPARTMENTCODE),  '||CHR(10)
--            ||'       NVL(B.DARATE,0) DARATE, NVL(B.ADHOCRATE,0) ADHOCRATE, NVL(B.SPL_ALLOW_RATE,0) SPL_ALLOW_RATE, '||CHR(10)   
--            ||'       SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,  '||CHR(10)
--            ||'       SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(FBKHOURS,0)) FBKHOURS, SUM(NVL(STLHOURS,0)) STLHOURS, '||CHR(10) 
--            ||'       SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, ROUND(NVL(C.VBAMOUNT,0),2) VBASIC '||CHR(10) 
--            ||'    FROM WPSATTENDANCEDAYWISE A,  WPSWORKERMAST B, '||CHR(10)
--            ||'    (    '||CHR(10)
--            ||'      SELECT WORKERSERIAL, /*DEPARTMENTCODE,*/ SUM(VBAMOUNT) VBAMOUNT FROM WPSVBDETAILS '||CHR(10)
--            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)   
--            ||'        AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
--            ||'      GROUP BY WORKERSERIAL /*, DEPARTMENTCODE*/  '||CHR(10)  
--            ||'    ) C ,'||CHR(10)
--            ||'    ( '||CHR(10)
--            || '     SELECT Y.DATEOFATTENDANCE ,/*Y.SHIFTCODE,*/ X.WORKERSERIAL,STLHOURS,Y.SPELLTYPE FROM  '||CHR(10)
--            || '     ( '||CHR(10) 
--            || '        SELECT A.WORKERSERIAL, SUM(NVL(STLHOURS,0)) STLHOURS FROM WPSSTLENTRY A  '||CHR(10)
--            || '         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
--            || '          AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10) 
--            || '          AND A.LEAVECODE = ''STL'' '||CHR(10) 
--            || '        GROUP BY A.WORKERSERIAl'||CHR(10)
--            || '     )X, '||CHR(10)
--            || '   ( '||CHR(10) 
--            
--            ||'     SELECT WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE '||CHR(10)
--            ||'     FROM (  '||CHR(10)  
--            ||'             SELECT WORKERSERIAL, DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE --, COUNT(WORKERSERIAL) CNT '||CHR(10)
--            ||'             FROM  WPSATTENDANCEDAYWISE A    '||CHR(10)            
--            ||'             WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
--            ||'               AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
--            ||'               AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10)
--            ||'               AND NVL(A.ATTENDANCEHOURS,0)>0 '||CHR(10)
--            ||'             GROUP BY WORKERSERIAL, DATEOFATTENDANCE  '||CHR(10)
--            ||'             --HAVING COUNT(WORKERSERIAL) =1  '||CHR(10)
--            ||'          )  '||CHR(10)
--            ||'     GROUP BY WORKERSERIAL  '||CHR(10)            
--            ||'    ) Y '||CHR(10)
--            || '   WHERE X.WORKERSERIAL=Y.WORKERSERIAL '||CHR(10)        
--            ||' ) D '||CHR(10)
--            ||'    WHERE A.COMPANYCODE =  '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
--            ||'      AND A.DATEOFATTENDANCE >=  '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <=  '''||lv_fn_endt||'''   '||CHR(10)
--            ||'      AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
--            ||'      AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
--            ||'      AND A.WORKERSERIAL = C.WORKERSERIAL (+) /* AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) */ '||CHR(10)
--            || '   AND A.WORKERSERIAL = D.WORKERSERIAL (+) AND A.SPELLTYPE=D.SPELLTYPE(+) AND A.DATEOFATTENDANCE = D.DATEOFATTENDANCE (+) /* AND A.SHIFTCODE = D.SHIFTCODE (+) */ '||CHR(10)
--            ||'    GROUP BY B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO, /* A.DEPARTMENTCODE,*/ A.WORKERCATEGORYCODE, '||CHR(10)
--            ||'             NVL(B.DARATE,0), NVL(B.ADHOCRATE,0),  NVL(B.SPL_ALLOW_RATE,0), NVL(C.VBAMOUNT,0) '||CHR(10);

    lv_SqlStr := ' INSERT INTO '||P_TABLENAME||' ( '||CHR(10)
            ||'    COMPANYCODE, DIVISIONCODE, SYSROWID, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, '||CHR(10)
            ||'    DARATE, ADHOCRATE, SPL_ALLOW_RATE, '||CHR(10) 
            ||'    ATTENDANCEHOURS, OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STLHOURS, '||CHR(10) 
            ||'    NIGHTALLOWANCEHOURS, VBASIC,ADDLBASIC '||CHR(10) 
            ||'    ) '||CHR(10)
            ||'    SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL,'''||P_YEARCODE||''',  '''||lv_fn_stdt||''','''||lv_fn_endt||''', A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, MAX(A.DEPARTMENTCODE),  '||CHR(10)
            ||'       NVL(B.DARATE,0) DARATE, NVL(B.ADHOCRATE,0) ADHOCRATE, NVL(B.SPL_ALLOW_RATE,0) SPL_ALLOW_RATE, '||CHR(10)   
            ||'       SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,  '||CHR(10)
            ||'       SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(FBKHOURS,0)) FBKHOURS, SUM(NVL(STLHOURS,0)) STLHOURS, '||CHR(10) 
            ||'       SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, ROUND(NVL(C.VBAMOUNT,0),2) VBASIC,ROUND(NVL(ADDLBASIC,0),2) ADDLBASIC '||CHR(10)
            ||'    FROM '||CHR(10) 
            ||'    ( '||CHR(10)
            ||'        SELECT Z.COMPANYCODE, Z.DIVISIONCODE, Z.WORKERSERIAL, Z.TOKENNO,Z.WORKERCATEGORYCODE, MAX(Z.DEPARTMENTCODE) DEPARTMENTCODE, '||CHR(10)
            ||'        SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(OVERTIMEHOURS) OVERTIMEHOURS,  '||CHR(10)
            ||'        SUM(HOLIDAYHOURS) HOLIDAYHOURS, SUM(LAYOFFHOURS) LAYOFFHOURS, SUM(FBKHOURS) FBKHOURS, SUM(STLHOURS) STLHOURS,  '||CHR(10)
            ||'        SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS  '||CHR(10)
            ||'        FROM (  '||CHR(10)
            ||'               SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO,A.WORKERCATEGORYCODE, A.DEPARTMENTCODE DEPARTMENTCODE,  '||CHR(10) 
            ||'               NVL(ATTENDANCEHOURS,0) ATTENDANCEHOURS, NVL(OVERTIMEHOURS,0) OVERTIMEHOURS,   '||CHR(10)  
            ||'               NVL(HOLIDAYHOURS,0) HOLIDAYHOURS, NVL(LAYOFFHOURS,0) LAYOFFHOURS, NVL(FBKHOURS,0) FBKHOURS, 0 STLHOURS, '||CHR(10) 
            ||'               NVL(NIGHTALLOWANCEHOURS,0) NIGHTALLOWANCEHOURS   '||CHR(10)
            ||'               FROM WPSATTENDANCEDAYWISE A  '||CHR(10)
            ||'               WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
            ||'                 AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10)
            ||'               UNION ALL '||CHR(10)
            ||'               SELECT  S.COMPANYCODE, S.DIVISIONCODE, S.WORKERSERIAL, S.TOKENNO,S.WORKERCATEGORYCODE, S.DEPARTMENTCODE DEPARTMENTCODE, '||CHR(10)
            ||'               0 ATTENDANCEHOURS, 0 OVERTIMEHOURS,    '||CHR(10)
            ||'               0 HOLIDAYHOURS, 0 LAYOFFHOURS, 0 FBKHOURS, STLHOURS STLHOURS, '||CHR(10)
            ||'               0 NIGHTALLOWANCEHOURS  '||CHR(10)
            ||'               FROM WPSSTLENTRY S  '||CHR(10)
            ||'               WHERE S.COMPANYCODE = '''||P_COMPCODE||''' AND S.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10) 
            ||'                 AND S.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10)
            ||'                 AND S.LEAVECODE = ''STL'' '||CHR(10)
            ||'              ) Z '||CHR(10)
            ||'        GROUP BY COMPANYCODE, DIVISIONCODE, WORKERSERIAL, TOKENNO,WORKERCATEGORYCODE '||CHR(10)    
             
--            ||'        SELECT A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO,A.WORKERCATEGORYCODE, MAX(A.DEPARTMENTCODE) DEPARTMENTCODE, '||CHR(10) 
--            ||'        SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,   '||CHR(10) 
--            ||'        SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(FBKHOURS,0)) FBKHOURS, '||CHR(10) 
--            ||'        SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS '||CHR(10) 
--            ||'        FROM WPSATTENDANCEDAYWISE A '||CHR(10) 
--            ||'        WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)    
--            ||'          AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10) 
--            ||'        GROUP BY A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO,A.WORKERCATEGORYCODE/*, A.DEPARTMENTCODE*/  '||CHR(10) 
            ||'    ) A, WPSWORKERMAST B, '||CHR(10) 

            ||'    (    '||CHR(10)
            ||'      SELECT WORKERSERIAL, /*DEPARTMENTCODE,*/ SUM(VBAMOUNT) VBAMOUNT,SUM(ADDLBASIC) ADDLBASIC FROM WPSVBDETAILS '||CHR(10)
            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)   
            ||'        AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
            ||'      GROUP BY WORKERSERIAL /*, DEPARTMENTCODE*/  '||CHR(10)  
            ||'    ) C '||CHR(10)
--            ||'    ( '||CHR(10)
--            || '     SELECT Y.DATEOFATTENDANCE ,/*Y.SHIFTCODE,*/ X.WORKERSERIAL,STLHOURS,Y.SPELLTYPE FROM  '||CHR(10)
--            || '     ( '||CHR(10) 
--            || '        SELECT A.WORKERSERIAL, SUM(NVL(STLHOURS,0)) STLHOURS FROM WPSSTLENTRY A  '||CHR(10)
--            || '         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
--            || '          AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10) 
--            || '          AND A.LEAVECODE = ''STL'' '||CHR(10) 
--            || '        GROUP BY A.WORKERSERIAl'||CHR(10)
--            || '     )X, '||CHR(10)
--            || '   ( '||CHR(10) 
--            
--            ||'     SELECT WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE '||CHR(10)
--            ||'     FROM (  '||CHR(10)  
--            ||'             SELECT WORKERSERIAL, DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE --, COUNT(WORKERSERIAL) CNT '||CHR(10)
--            ||'             FROM  WPSATTENDANCEDAYWISE A    '||CHR(10)            
--            ||'             WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
--            ||'               AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
--            ||'               AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10)
--            ||'               AND NVL(A.ATTENDANCEHOURS,0)>0 '||CHR(10)
--            ||'             GROUP BY WORKERSERIAL, DATEOFATTENDANCE  '||CHR(10)
--            ||'             --HAVING COUNT(WORKERSERIAL) =1  '||CHR(10)
--            ||'          )  '||CHR(10)
--            ||'     GROUP BY WORKERSERIAL  '||CHR(10)            
--            ||'    ) Y '||CHR(10)
--            || '   WHERE X.WORKERSERIAL=Y.WORKERSERIAL '||CHR(10)        
--            ||' ) D '||CHR(10)
            ||'    WHERE A.COMPANYCODE =  '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
--            ||'      AND A.DATEOFATTENDANCE >=  '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <=  '''||lv_fn_endt||'''   '||CHR(10)
            ||'      AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
            ||'      AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'      AND A.WORKERSERIAL = C.WORKERSERIAL (+) /* AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) */ '||CHR(10)
--            || '   AND A.WORKERSERIAL = D.WORKERSERIAL (+) /*AND A.SPELLTYPE=D.SPELLTYPE(+) AND A.DATEOFATTENDANCE = D.DATEOFATTENDANCE (+) */'||CHR(10)
            ||'    GROUP BY A.COMPANYCODE, A.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO, /* A.DEPARTMENTCODE,*/ A.WORKERCATEGORYCODE, '||CHR(10)
            ||'             NVL(B.DARATE,0), NVL(B.ADHOCRATE,0),  NVL(B.SPL_ALLOW_RATE,0), NVL(C.VBAMOUNT,0),NVL(ADDLBASIC,0)'||CHR(10);

    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    --COMMIT;
    execute immediate lv_SqlStr;
    ---- UPDATE NOT APPLCICABLE COLUMN TO ZERO AS PER CATEGORY VS COMPONENT MAPPING FOR THE PHSE 0 OR INSERT 
    PROC_WPS_UPDATE_NA_COMP(P_FNSTDT, P_FNENDT, P_TABLENAME,P_TABLENAME,'NO');
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT','','',lv_parvalues,lv_fn_stdt,lv_fn_endt, 'PROCESS INSERT SUCCESSFULLY COMPLETE');
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
 COMMIT;
end;
/


DROP PROCEDURE PROC_WPSWAGESPROCESS_UPDATE;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPROCESS_UPDATE" (P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME VARCHAR2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKERSERIAL VARCHAR2 DEFAULT NULL,
                                                  P_PROCESSTYPE  VARCHAR2 DEFAULT 'WAGES PROCESS')
as
lv_Component varchar2(32767) := '';
lv_Sql       varchar2(32767) := '';
lv_Sql_TblCreate    varchar2(3000) := '';  
lv_sqlerrm      varchar2(1000) := ''; 
lv_remarks      varchar2(1000) := '';
lv_parvalues    varchar2(1000) := '';
lv_SqlTemp      varchar2 (2000) := '';
lv_Cols         varchar2 (1000) := '';
lv_fn_stdt      date := to_date(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt      date := to_date(P_FNENDT,'DD/MM/YYYY');
lv_ProcName     varchar2(30) := 'PROC_WPSWAGESPROCESS_UPDATE';

begin
    lv_parvalues := 'DIV = '||P_DIVCODE||', FNE = '||P_FNENDT||', PHASE = '||P_PHASE;
    lv_sql := 'drop table '||P_PHASE_TABLENAME;
    
    BEGIN 
        execute immediate lv_sql;
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
    
    lv_Sql_TblCreate := 'CREATE TABLE '||P_PHASE_TABLENAME||'(WORKERSERIAL VARCHAR2(10), DEPARTMENTCODE VARCHAR2(10), SHIFTCODE VARCHAR2(10)';
            
    FOR C1 in (
            SELECT COMPONENTCODE, COMPONENTSHORTNAME, COMPONENTTYPE, AMOUNTORFORMULA, MANUALFORAMOUNT, FORMULA, CALCULATIONINDEX, PHASE, 
            NVL(TAKEPARTINWAGES,'N') AS TAKEPARTINWAGES, NVL(COLUMNINATTENDANCE,'N') AS COLUMNINATTENDANCE, 
            NVL(COMPONENTTAG,'N') AS COMPONENTTAG, NVL(COMPONENTGROUP,'N') AS COMPONENTGROUP 
            FROM WPSCOMPONENTMASTER
            WHERE COMPANYCODE = P_COMPCODE AND DIVISIONCODE = P_DIVCODE
            AND PHASE = P_PHASE
            AND NVL(TAKEPARTINWAGES,'N') = 'Y'
          )
    LOOP          
       -- DBMS_OUTPUT.PUT_LINE('COMPONENT : '||lv_AttnComponent);
       lv_Sql_TblCreate := lv_Sql_TblCreate ||', '||C1.COMPONENTSHORTNAME|| ' NUMBER(11,2) DEFAULT 0'; 
        IF UPPER(TRIM(C1.AMOUNTORFORMULA)) = 'FORMULA' THEN
            If InStr(C1.FORMULA, '~') > 0 Then
                --dbms_output.put_line(C1.FORMULA);
                lv_Sql:= C1.FORMULA;
                --select REPLACE('''A001''','''','''''')  FROM DUAL
                lv_Sql:= replace(lv_Sql,'''','''''');
                lv_Sql:= 'SELECT FN_REPL_FORMULA('''||lv_Sql||''') FROM DUAL'; 
                
                --BEGIN
                EXECUTE IMMEDIATE lv_Sql into lv_SqlTemp ;
                --EXCEPTION WHEN OTHERS THEN
                --    insert into wps_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ZZZ PROC_WPSWAGESPROCESS_UPDATE',lv_Sql,lv_Sql,lv_parvalues,lv_remarks);
                --    RETURN;
                --END ;
                lv_Component := lv_Component ||', SUM('||lv_SqlTemp||')  AS '||C1.COMPONENTSHORTNAME;
            ELSE
                lv_Component := lv_Component ||', SUM('||C1.FORMULA||') AS '|| C1.COMPONENTSHORTNAME;    
            END IF;
            
        ELSE
            lv_Component := lv_Component ||', SUM(NVL(ATTN.'||C1.COMPONENTSHORTNAME||',0)) AS '|| C1.COMPONENTSHORTNAME;
        END IF; 
    END loop;
    lv_Sql_TblCreate := lv_Sql_TblCreate ||')';
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPCOMPONENT CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPCOMPONENT AS SELECT * FROM COMPONENT';
    END;
    
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE '||P_PHASE_TABLENAME||' CASCADE CONSTRAINTS';
      EXCEPTION WHEN OTHERS THEN NULL;
    END;    
        
    lv_Component :=  Replace(lv_Component, 'ATTN', 'WPSTEMPATTN');
    lv_Component := Replace(lv_Component, 'MAST', 'WPSTEMPMAST');
    lv_Component := Replace(lv_Component, 'COMPONENT', 'WPSTEMPCOMPONENT');
    lv_Component := Replace(lv_Component, 'FNPARAM', 'WPSTEMPFNPARAM');
    
    --lv_Component := Replace(lv_Component, 'SECTMAST', 'WPSTEMPSECTION');
    --- NAIHATI WANTS SHIFT, DEPARTMENT, SETION, OCCUPATION, DEPTSERIAL WISE EARNING DISTRIBUTION -------
    lv_Sql := 'CREATE TABLE '||P_PHASE_TABLENAME||' AS '||CHR(10)
            || 'SELECT WPSTEMPATTN.WORKERSERIAL, WPSTEMPMAST.WORKERCATEGORYCODE, WPSTEMPATTN.SHIFTCODE, WPSTEMPATTN.DEPARTMENTCODE, WPSTEMPATTN.SECTIONCODE,WPSTEMPATTN.OCCUPATIONCODE, WPSTEMPATTN.DEPTSERIAL,'||CHR(10)  
            ||' SUM(WPSTEMPATTN.ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(WPSTEMPATTN.STLHOURS) STLHOURS, SUM(WPSTEMPATTN.OVERTIMEHOURS) OVERTIMEHOURS, ' ||chr(10)
            ||' SUM(WPSTEMPATTN.HOLIDAYHOURS) HOLIDAYHOURS, SUM(WPSTEMPATTN.NIGHTALLOWANCEHOURS) NIGHTALLOWANCEHOURS,  SUM(WPSTEMPATTN.OT_NSHRS) OT_NSHRS'||chr(10) 
            ||' '|| lv_Component ||chr(10) 
            ||' FROM WPSTEMPMAST, WPSTEMPATTN, WPSTEMPCOMPONENT, /*, WPSTEMPFNPARAM */'||chr(10)
            ||' (  SELECT * FROM VW_WPSSECTIONMAST WHERE COMPANYCODE ='''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||''') SECMST '||CHR(10)    
            ||' WHERE WPSTEMPATTN.WORKERSERIAL = WPSTEMPMAST.WORKERSERIAL '||chr(10) 
            ||'   AND WPSTEMPATTN.WORKERSERIAL = WPSTEMPCOMPONENT.WORKERSERIAL  '||chr(10)
        ---- NAIHATI NEEDS SHIFT, DEPARTMENT, SECTION, OCCUPATION, DEPT SERIAL WISE EARNING SIDE DISTRIBUTION  -----            
            ||'   AND WPSTEMPATTN.SHIFTCODE = WPSTEMPCOMPONENT.SHIFTCODE '||chr(10)
            ||'   AND WPSTEMPATTN.DEPARTMENTCODE = WPSTEMPCOMPONENT.DEPARTMENTCODE '||chr(10) 
            ||'   AND WPSTEMPATTN.SECTIONCODE = WPSTEMPCOMPONENT.SECTIONCODE '||CHR(10)  
            ||'   AND WPSTEMPATTN.OCCUPATIONCODE = WPSTEMPCOMPONENT.OCCUPATIONCODE '||CHR(10)
            ||'   AND WPSTEMPATTN.DEPTSERIAL = WPSTEMPCOMPONENT.DEPTSERIAL '||CHR(10)
            ||'   AND WPSTEMPATTN.DEPARTMENTCODE = SECMST.DEPARTMENTCODE (+)'||chr(10) 
            ||'   AND WPSTEMPATTN.SECTIONCODE = SECMST.SECTIONCODE (+)'||CHR(10);  
    if P_WORKERSERIAL is not null then
        lv_Sql := lv_Sql ||' AND WPSTEMPMAST.WORKERSERIAL IN ('||P_WORKERSERIAL||')' ||CHR(10); 
    end if; 
    lv_Sql := lv_Sql ||' GROUP BY WPSTEMPATTN.WORKERSERIAL, WPSTEMPMAST.WORKERCATEGORYCODE,WPSTEMPATTN.SHIFTCODE, '||CHR(10)
                    ||'  WPSTEMPATTN.DEPARTMENTCODE, WPSTEMPATTN.SECTIONCODE, WPSTEMPATTN.OCCUPATIONCODE, WPSTEMPATTN.DEPTSERIAL, SECMST.DEPTSECTIONCODE '||chr(10);        
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,'',lv_Sql,lv_parvalues, lv_fn_stdt, lv_fn_endt, 'PHASE TABLE CREATION');
    EXECUTE IMMEDIATE lv_Sql;  
    COMMIT;
      
    PROC_WPS_UPDATE_NA_COMP(P_COMPCODE, P_DIVCODE, P_FNSTDT, P_FNENDT, P_PHASE_TABLENAME,P_TABLENAME,'YES');
    lv_remarks := 'PHASE - '||P_PHASE||' SUCESSFULLY COMPLETE';
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,'','',lv_parvalues, lv_fn_stdt, lv_fn_endt, lv_remarks);
commit;    
exception
    when others then
    lv_sqlerrm := sqlerrm ;
    insert into wps_error_log(COMPANYCODE, DIVISIONCODE, PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) 
    values( P_COMPCODE, P_DIVCODE,lv_ProcName,lv_Sql,lv_Sql,lv_parvalues,lv_fn_stdt, lv_fn_endt,lv_remarks);
    commit;
    --dbms_output.put_line('PROC - PROC_WPSWAGESPROCESS_UPDATE : ERROR !! WHILE WAGES PROCESS '||P_FNSTDT||' AND PHASE -> '||ltrim(trim(P_PHASE))||' : '||sqlerrm);
end;
/


DROP PROCEDURE PROC_WPSWAGESPRO_INSERT;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPRO_INSERT" ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL)
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';   

begin
    
    PROC_WPSVBPROCEES_WORKORDER(P_COMPCODE,P_DIVCODE,'SWT',P_YEARCODE,P_FNSTDT,P_FNENDT, NULL);

    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_SWT';
    execute immediate lv_sqlStr;
    
    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_MV_SWT';
    execute immediate lv_sqlStr;
    
    PROC_WPSVIEWCREATION ( P_COMPCODE,P_DIVCODE,'ALL',0,P_FNSTDT,P_FNENDT,P_TABLENAME);
    ----- CREATE TABLE WMPTEMPMAST FROM THE VIEW MAST
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPMAST CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
    END;
    
    ----- CREATE TABLE WMPTEMPATTN FROM THE VIEW ATTN
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    
    
    lv_SqlStr := ' DELETE FROM '||P_TABLENAME;
    BEGIN
        execute immediate lv_SqlStr;
      EXCEPTION WHEN OTHERS THEN NULL;
    END;

--    lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, WORKERSERIAL '||CHR(10)
--            ||' TOKENNO, DEPARTMENTCODE, SHIFTCODE, SPELTYPE, STATUTORYHOURS, ATTENDANCEHORS, ATTENDANCETAG, '||char(10)
--            ||' USERNMAE, LASTMODIFIED, SYSROWID, BOOKNO) '||CHR(10)
--            ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, '''||P_YEARCODE||''' YEARCODE, A.FORTNIGHTENDDATE, A.WOREKRSRIAL '||CHR(10)
--            ||' B.TOKENNO, NVL(A.DEPARTMENTCODE,B.DEPARTMENCODE) DEPARTMENTCODE, NVL(A.SHIFTCODE,'1') SHIFTCODE, ''SPELL 1'' SPELTYPE, '||CHR(10) 
--            ||' SUM(NVL(A.STLHOURS,0)) STATUTORYHOURS, 0 ATTENDANCEHORS, ''STL'' ATTENDANCETAG, '||char(10)
--            ||' ''SWT'' USERNMAE, SYSDATE LASTMODIFIED, ''STL/''||TO_CHAR(FORTNIGHTSTARTE,''DDMMYYYY'')||B.TOKENNO SYSROWID, ''STL/''||TO_CHAR(FORTNIGHTSTARTE,''DDMMYYYY'')||B.TOKENNO BOOKNO) '||CHR(10)
--            ||' FROM WPSSTLENTRY A, WPSWORKERMAST B '||CHR(10)
--            ||' WHERE A.COMPANYCODE '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
--            ||'   AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
--            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
--            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10);
--    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'STL ENTRY IN ATTENDANCE');
--    execute immediate lv_SqlStr;             

    lv_SqlStr := ' INSERT INTO '||P_TABLENAME||' ( '||CHR(10)
            ||'    COMPANYCODE, DIVISIONCODE, SYSROWID, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, '||CHR(10)
            ||'    DARATE, ADHOCRATE, SPL_ALLOW_RATE, '||CHR(10) 
            ||'    ATTENDANCEHOURS, OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STLHOURS, '||CHR(10) 
            ||'    NIGHTALLOWANCEHOURS, VBASIC,ADDLBASIC '||CHR(10) 
            ||'    ) '||CHR(10)
            ||'    SELECT B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL,'''||P_YEARCODE||''',  '''||lv_fn_stdt||''','''||lv_fn_endt||''', A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, MAX(A.DEPARTMENTCODE),  '||CHR(10)
            ||'       NVL(B.DARATE,0) DARATE, NVL(B.ADHOCRATE,0) ADHOCRATE, NVL(B.SPL_ALLOW_RATE,0) SPL_ALLOW_RATE, '||CHR(10)   
            ||'       SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,  '||CHR(10)
            ||'       SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(FBKHOURS,0)) FBKHOURS, SUM(NVL(STLHOURS,0)) STLHOURS, '||CHR(10) 
            ||'       SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, ROUND(NVL(C.VBAMOUNT,0),2) VBASIC,ROUND(NVL(C.ADDLBASIC,0),2) ADDLBASIC '||CHR(10) 
            ||'    FROM WPSATTENDANCEDAYWISE A,  WPSWORKERMAST B, '||CHR(10)
            ||'    (    '||CHR(10)
            ||'      SELECT WORKERSERIAL, /*DEPARTMENTCODE,*/ SUM(VBAMOUNT) VBAMOUNT,SUM(NVL(ADDLBASIC,0)) ADDLBASIC FROM WPSVBDETAILS '||CHR(10)
            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)   
            ||'        AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
            ||'      GROUP BY WORKERSERIAL /*, DEPARTMENTCODE*/  '||CHR(10)  
            ||'    ) C ,'||CHR(10)
            ||'    ( '||CHR(10)
            || '     SELECT Y.DATEOFATTENDANCE ,/*Y.SHIFTCODE,*/ X.WORKERSERIAL,STLHOURS,Y.SPELLTYPE FROM  '||CHR(10)
            || '     ( '||CHR(10) 
            || '        SELECT A.WORKERSERIAL, SUM(NVL(STLHOURS,0)) STLHOURS FROM WPSSTLENTRY A  '||CHR(10)
            || '         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            || '          AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10) 
            || '          AND A.LEAVECODE = ''STL'' '||CHR(10) 
            || '        GROUP BY A.WORKERSERIAl'||CHR(10)
            || '     )X, '||CHR(10)
            || '   ( '||CHR(10) 
            
            ||'     SELECT WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE '||CHR(10)
            ||'     FROM (  '||CHR(10)  
            ||'             SELECT WORKERSERIAL, DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE --, COUNT(WORKERSERIAL) CNT '||CHR(10)
            ||'             FROM  WPSATTENDANCEDAYWISE A    '||CHR(10)            
            ||'             WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
            ||'               AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
            ||'               AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10)
            ||'               AND NVL(A.ATTENDANCEHOURS,0)>0 '||CHR(10)
            ||'             GROUP BY WORKERSERIAL, DATEOFATTENDANCE  '||CHR(10)
            ||'             --HAVING COUNT(WORKERSERIAL) =1  '||CHR(10)
            ||'          )  '||CHR(10)
            ||'     GROUP BY WORKERSERIAL  '||CHR(10)            
            || '/*     SELECT WORKERSERIAL,MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SHIFTCODE) SHIFTCODE '||CHR(10)
            || '      FROM WPSATTENDANCEDAYWISE A '||CHR(10)
            || '     WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
            || '       AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
            || '       AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10) 
            || '       GROUP BY WORKERSERIAL '||CHR(10)
            || ' */     ) Y '||CHR(10)
            || '   WHERE X.WORKERSERIAL=Y.WORKERSERIAL '||CHR(10)        
            ||' ) D '||CHR(10)
            ||'    WHERE A.COMPANYCODE =  '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
            ||'      AND A.DATEOFATTENDANCE >=  '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <=  '''||lv_fn_endt||'''   '||CHR(10)
            ||'      AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
            ||'      AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'      AND A.WORKERSERIAL = C.WORKERSERIAL (+) /* AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) */ '||CHR(10)
            || '   AND A.WORKERSERIAL = D.WORKERSERIAL (+) AND A.SPELLTYPE=D.SPELLTYPE(+) AND A.DATEOFATTENDANCE = D.DATEOFATTENDANCE (+) /* AND A.SHIFTCODE = D.SHIFTCODE (+) */ '||CHR(10)
            ||'    GROUP BY B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO, /* A.DEPARTMENTCODE,*/ A.WORKERCATEGORYCODE, '||CHR(10)
            ||'             NVL(B.DARATE,0), NVL(B.ADHOCRATE,0),  NVL(B.SPL_ALLOW_RATE,0), NVL(C.VBAMOUNT,0),NVL(C.ADDLBASIC,0)  '||CHR(10);
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_SqlStr;
    ---- UPDATE NOT APPLCICABLE COLUMN TO ZERO AS PER CATEGORY VS COMPONENT MAPPING FOR THE PHSE 0 OR INSERT 
    PROC_WPS_UPDATE_NA_COMP(P_FNSTDT, P_FNENDT, P_TABLENAME,P_TABLENAME,'NO');
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT','','',lv_parvalues,lv_fn_stdt,lv_fn_endt, 'PROCESS INSERT SUCCESSFULLY COMPLETE');
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
end;
/


DROP PROCEDURE PROC_WPSWAGESPRO_INSERT_100317;

CREATE OR REPLACE PROCEDURE "PROC_WPSWAGESPRO_INSERT_100317" ( P_COMPCODE Varchar2, 
                                                  P_DIVCODE Varchar2, 
                                                  P_YEARCODE Varchar2,
                                                  P_FNSTDT Varchar2, 
                                                  P_FNENDT Varchar2,
                                                  P_PHASE  number, 
                                                  P_PHASE_TABLENAME Varchar2,
                                                  P_TABLENAME Varchar2,
                                                  P_WORKKERSERIAL VARCHAR2 DEFAULT NULL)
as 
lv_fn_stdt DATE := TO_DATE(P_FNSTDT,'DD/MM/YYYY');
lv_fn_endt DATE := TO_DATE(P_FNENDT,'DD/MM/YYYY');
lv_TableName        varchar2(50);
lv_Remarks          varchar2(1000) := '';
lv_SqlStr           varchar2(4000);
lv_AttnComponent    varchar2(4000) := ''; 
lv_CompWithZero     varchar2(1000) := '';
lv_CompWithValue    varchar2(4000) := '';
lv_CompCol          varchar2(1000) := '';
lv_SQLCompView      varchar2(4000) := '';
lv_parvalues        varchar2(500);
lv_sqlerrm          varchar2(500) := '';   

begin
    
    PROC_WPSVBPROCEES_WORKORDER(P_COMPCODE,P_DIVCODE,'SWT',P_YEARCODE,P_FNSTDT,P_FNENDT, NULL);

    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_SWT';
    execute immediate lv_sqlStr;
    
    lv_SqlStr := 'TRUNCATE TABLE WPSWAGESDETAILS_MV_SWT';
    execute immediate lv_sqlStr;
    
    PROC_WPSVIEWCREATION ( P_COMPCODE,P_DIVCODE,'ALL',0,P_FNSTDT,P_FNENDT,P_TABLENAME);
    ----- CREATE TABLE WMPTEMPMAST FROM THE VIEW MAST
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPMAST CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPMAST AS SELECT * FROM MAST';
    END;
    
    ----- CREATE TABLE WMPTEMPATTN FROM THE VIEW ATTN
    BEGIN 
        EXECUTE IMMEDIATE 'DROP TABLE WPSTEMPATTN CASCADE CONSTRAINTS';
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
      EXCEPTION WHEN OTHERS THEN 
        EXECUTE IMMEDIATE 'CREATE TABLE WPSTEMPATTN AS SELECT * FROM ATTN';
    END;    
    
    lv_SqlStr := ' DELETE FROM '||P_TABLENAME;
    BEGIN
        execute immediate lv_SqlStr;
      EXCEPTION WHEN OTHERS THEN NULL;
    END;

--    lv_SqlStr := 'INSERT INTO WPSATTENDANCEDAYWISE ( COMPANYCODE, DIVISIONCODE, YEARCODE, DATEOFATTENDANCE, WORKERSERIAL '||CHR(10)
--            ||' TOKENNO, DEPARTMENTCODE, SHIFTCODE, SPELTYPE, STATUTORYHOURS, ATTENDANCEHORS, ATTENDANCETAG, '||char(10)
--            ||' USERNMAE, LASTMODIFIED, SYSROWID, BOOKNO) '||CHR(10)
--            ||' SELECT A.COMPANYCODE, A.DIVISIONCODE, '''||P_YEARCODE||''' YEARCODE, A.FORTNIGHTENDDATE, A.WOREKRSRIAL '||CHR(10)
--            ||' B.TOKENNO, NVL(A.DEPARTMENTCODE,B.DEPARTMENCODE) DEPARTMENTCODE, NVL(A.SHIFTCODE,'1') SHIFTCODE, ''SPELL 1'' SPELTYPE, '||CHR(10) 
--            ||' SUM(NVL(A.STLHOURS,0)) STATUTORYHOURS, 0 ATTENDANCEHORS, ''STL'' ATTENDANCETAG, '||char(10)
--            ||' ''SWT'' USERNMAE, SYSDATE LASTMODIFIED, ''STL/''||TO_CHAR(FORTNIGHTSTARTE,''DDMMYYYY'')||B.TOKENNO SYSROWID, ''STL/''||TO_CHAR(FORTNIGHTSTARTE,''DDMMYYYY'')||B.TOKENNO BOOKNO) '||CHR(10)
--            ||' FROM WPSSTLENTRY A, WPSWORKERMAST B '||CHR(10)
--            ||' WHERE A.COMPANYCODE '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
--            ||'   AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
--            ||'   AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE '||CHR(10)
--            ||'   AND A.WORKERSERIAL = B.WORKERSERIAL '||CHR(10);
--    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, 'STL ENTRY IN ATTENDANCE');
--    execute immediate lv_SqlStr;             

    lv_SqlStr := ' INSERT INTO '||P_TABLENAME||' ( '||CHR(10)
            ||'    COMPANYCODE, DIVISIONCODE, SYSROWID, YEARCODE, FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, WORKERSERIAL, TOKENNO, WORKERCATEGORYCODE, DEPARTMENTCODE, '||CHR(10)
            ||'    DARATE, ADHOCRATE, SPL_ALLOW_RATE, '||CHR(10) 
            ||'    ATTENDANCEHOURS, OVERTIMEHOURS, HOLIDAYHOURS, LAYOFFHOURS, FBKHOURS, STLHOURS, '||CHR(10) 
            ||'    NIGHTALLOWANCEHOURS, VBASIC,ADDLBASIC '||CHR(10) 
            ||'    ) '||CHR(10)
            ||'    SELECT B.COMPANYCODE, B.DIVISIONCODE,A.WORKERSERIAL,'''||P_YEARCODE||''',  '''||lv_fn_stdt||''','''||lv_fn_endt||''', A.WORKERSERIAL, A.TOKENNO, A.WORKERCATEGORYCODE, MAX(A.DEPARTMENTCODE),  '||CHR(10)
            ||'       NVL(B.DARATE,0) DARATE, NVL(B.ADHOCRATE,0) ADHOCRATE, NVL(B.SPL_ALLOW_RATE,0) SPL_ALLOW_RATE, '||CHR(10)   
            ||'       SUM(ATTENDANCEHOURS) ATTENDANCEHOURS, SUM(NVL(OVERTIMEHOURS,0)) OVERTIMEHOURS,  '||CHR(10)
            ||'       SUM(NVL(HOLIDAYHOURS,0))HOLIDAYHOURS, SUM(NVL(LAYOFFHOURS,0)) LAYOFFHOURS, SUM(NVL(FBKHOURS,0)) FBKHOURS, SUM(NVL(STLHOURS,0)) STLHOURS, '||CHR(10) 
            ||'       SUM(NVL(NIGHTALLOWANCEHOURS,0)) NIGHTALLOWANCEHOURS, ROUND(NVL(C.VBAMOUNT,0),2) VBASIC,ROUND(NVL(C.ADDLBASIC,0),2) ADDLBASIC '||CHR(10) 
            ||'    FROM WPSATTENDANCEDAYWISE A,  WPSWORKERMAST B, '||CHR(10)
            ||'    (    '||CHR(10)
            ||'      SELECT WORKERSERIAL, /*DEPARTMENTCODE,*/ SUM(VBAMOUNT) VBAMOUNT,SUM(NVL(ADDLBASIC,0)) ADDLBASIC FROM WPSVBDETAILS '||CHR(10)
            ||'      WHERE COMPANYCODE = '''||P_COMPCODE||''' AND DIVISIONCODE = '''||P_DIVCODE||'''   '||CHR(10)   
            ||'        AND FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' AND FORTNIGHTENDDATE = '''||lv_fn_endt||'''  '||chr(10)
            ||'      GROUP BY WORKERSERIAL /*, DEPARTMENTCODE*/  '||CHR(10)  
            ||'    ) C ,'||CHR(10)
            ||'    ( '||CHR(10)
            || '     SELECT Y.DATEOFATTENDANCE ,/*Y.SHIFTCODE,*/ X.WORKERSERIAL,STLHOURS,Y.SPELLTYPE FROM  '||CHR(10)
            || '     ( '||CHR(10) 
            || '        SELECT A.WORKERSERIAL, SUM(NVL(STLHOURS,0)) STLHOURS FROM WPSSTLENTRY A  '||CHR(10)
            || '         WHERE A.COMPANYCODE = '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||''' '||CHR(10)
            || '          AND A.FORTNIGHTENDDATE = '''||lv_fn_endt||''' '||CHR(10) 
            || '          AND A.LEAVECODE = ''STL'' '||CHR(10) 
            || '        GROUP BY A.WORKERSERIAl'||CHR(10)
            || '     )X, '||CHR(10)
            || '   ( '||CHR(10) 
            
            ||'     SELECT WORKERSERIAL, MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE '||CHR(10)
            ||'     FROM (  '||CHR(10)  
            ||'             SELECT WORKERSERIAL, DATEOFATTENDANCE,MIN(SPELLTYPE) SPELLTYPE --, COUNT(WORKERSERIAL) CNT '||CHR(10)
            ||'             FROM  WPSATTENDANCEDAYWISE A    '||CHR(10)            
            ||'             WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
            ||'               AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
            ||'               AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10)
            ||'               AND NVL(A.ATTENDANCEHOURS,0)>0 '||CHR(10)
            ||'             GROUP BY WORKERSERIAL, DATEOFATTENDANCE  '||CHR(10)
            ||'             --HAVING COUNT(WORKERSERIAL) =1  '||CHR(10)
            ||'          )  '||CHR(10)
            ||'     GROUP BY WORKERSERIAL  '||CHR(10)            
            || '/*     SELECT WORKERSERIAL,MIN(DATEOFATTENDANCE) DATEOFATTENDANCE,MIN(SHIFTCODE) SHIFTCODE '||CHR(10)
            || '      FROM WPSATTENDANCEDAYWISE A '||CHR(10)
            || '     WHERE A.COMPANYCODE= '''||P_COMPCODE||''' AND A.DIVISIONCODE= '''||P_DIVCODE||''' '||CHR(10)
            || '       AND A.FORTNIGHTSTARTDATE = '''||lv_fn_stdt||''' '||CHR(10)  
            || '       AND A.FORTNIGHTENDDATE  = '''||lv_fn_endt||''' '||CHR(10) 
            || '       GROUP BY WORKERSERIAL '||CHR(10)
            || ' */     ) Y '||CHR(10)
            || '   WHERE X.WORKERSERIAL=Y.WORKERSERIAL '||CHR(10)        
            ||' ) D '||CHR(10)
            ||'    WHERE A.COMPANYCODE =  '''||P_COMPCODE||''' AND A.DIVISIONCODE = '''||P_DIVCODE||'''  '||CHR(10) 
            ||'      AND A.DATEOFATTENDANCE >=  '''||lv_fn_stdt||''' AND A.DATEOFATTENDANCE <=  '''||lv_fn_endt||'''   '||CHR(10)
            ||'      AND A.COMPANYCODE = B.COMPANYCODE AND A.DIVISIONCODE = B.DIVISIONCODE  '||CHR(10)
            ||'      AND A.WORKERSERIAL = B.WORKERSERIAL  '||CHR(10)
            ||'      AND A.WORKERSERIAL = C.WORKERSERIAL (+) /* AND A.DEPARTMENTCODE = C.DEPARTMENTCODE (+) */ '||CHR(10)
            || '   AND A.WORKERSERIAL = D.WORKERSERIAL (+) AND A.SPELLTYPE=D.SPELLTYPE(+) AND A.DATEOFATTENDANCE = D.DATEOFATTENDANCE (+) /* AND A.SHIFTCODE = D.SHIFTCODE (+) */ '||CHR(10)
            ||'    GROUP BY B.COMPANYCODE, B.DIVISIONCODE, A.WORKERSERIAL, A.TOKENNO, /* A.DEPARTMENTCODE,*/ A.WORKERCATEGORYCODE, '||CHR(10)
            ||'             NVL(B.DARATE,0), NVL(B.ADHOCRATE,0),  NVL(B.SPL_ALLOW_RATE,0), NVL(C.VBAMOUNT,0),NVL(C.ADDLBASIC,0)  '||CHR(10);
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
    execute immediate lv_SqlStr;
    ---- UPDATE NOT APPLCICABLE COLUMN TO ZERO AS PER CATEGORY VS COMPONENT MAPPING FOR THE PHSE 0 OR INSERT 
    PROC_WPS_UPDATE_NA_COMP(P_FNSTDT, P_FNENDT, P_TABLENAME,P_TABLENAME,'NO');
    insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT','','',lv_parvalues,lv_fn_stdt,lv_fn_endt, 'PROCESS INSERT SUCCESSFULLY COMPLETE');
    COMMIT;
exception
when others then
 --insert into error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,REMARKS ) values( 'ERROR SQL',lv_sqlstr,lv_sqlstr,lv_parvalues,lv_remarks);
 lv_sqlerrm := sqlerrm ;
 --dbms_output.put_line(lv_sqlerrm);
 insert into WPS_error_log(PROC_NAME,ORA_ERROR_MESSG,ERROR_QUERY,PAR_VALUES,FORTNIGHTSTARTDATE, FORTNIGHTENDDATE, REMARKS ) values( 'PROC_WPSWAGESPROCESS_INSERT',lv_sqlerrm,lv_SqlStr,lv_parvalues,lv_fn_stdt,lv_fn_endt, lv_remarks);
end;
/


DROP PROCEDURE PROC_WPSWORKERMAST_ALL;

CREATE OR REPLACE PROCEDURE PROC_WPSWORKERMAST_ALL
(
    P_COMPANYCODE VARCHAR2,
    P_DIVISIONCODE VARCHAR2,
    P_TOKENNO VARCHAR2,
    P_CONTRACTOR VARCHAR2,
    P_CATEGORYCODE VARCHAR2,
    P_UNITCODE VARCHAR2,
    P_DEPARTMENTCODE VARCHAR2,
    P_REPORTOPTION VARCHAR2 DEFAULT 'Y'
)
AS 
    LV_SQLSTR           VARCHAR2(20000);
    
    lv_strTable         VARCHAR2(10000);
    lv_strTable_vw      VARCHAR2(5000);
    
    lv_strInsert      VARCHAR2(10000);
    lv_strInsert_vw   VARCHAR2(5000);
    
BEGIN

    --change 20.11.2019 for adding extra component
      
    PROC_WPSVIEWCREATION ( P_COMPANYCODE, P_DIVISIONCODE,'MAST',0,TO_CHAR(SYSDATE,'DD/MM/YYYY'),TO_CHAR(SYSDATE,'DD/MM/YYYY'));
    
    --table
    SELECT WM_CONCAT('A.'||COLUMN_NAME) into lv_strTable
    FROM ( 
    SELECT COLUMN_NAME FROM COLS WHERE TABLE_NAME='GTT_WPSWORKERMAST_ALL' AND COLUMN_NAME <> 'COMPANYCODE'
    INTERSECT
    SELECT COLUMN_NAME FROM COLS WHERE TABLE_NAME='WPSWORKERMAST' AND COLUMN_NAME <> 'COMPANYCODE'
    );

    SELECT WM_CONCAT('E.'||COMPONENTSHORTNAME) into lv_strTable_vw FROM WPSCOMPONENTMASTER WHERE DIVISIONCODE = '0002' AND MASTERCOMPONENT='Y';

    --insert
    SELECT WM_CONCAT(COLUMN_NAME) into lv_strInsert
    FROM ( 
    SELECT COLUMN_NAME FROM COLS WHERE TABLE_NAME='GTT_WPSWORKERMAST_ALL' AND COLUMN_NAME <> 'COMPANYCODE'
    INTERSECT
    SELECT COLUMN_NAME FROM COLS WHERE TABLE_NAME='WPSWORKERMAST' AND COLUMN_NAME <> 'COMPANYCODE'
    );

    SELECT WM_CONCAT(COMPONENTSHORTNAME) into lv_strInsert_vw FROM WPSCOMPONENTMASTER WHERE DIVISIONCODE = '0002' AND MASTERCOMPONENT='Y';


    --DBMS_OUTPUT.PUT_LINE(lv_strcreation || '****************'|| lv_strcreation_vw);

    -- end change
    

    DELETE FROM GTT_WPSWORKERMAST_ALL;
    
    
--    LV_SQLSTR :=    'INSERT INTO GTT_WPSWORKERMAST_ALL '|| CHR(10)
--    ||' SELECT DISTINCT A.*,C.COMPANYNAME, C.COMPANYADDRESS , C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME '|| CHR(10)

    LV_SQLSTR :=    'INSERT INTO GTT_WPSWORKERMAST_ALL ('||lv_strInsert||','||lv_strInsert_vw||',COMPANYCODE, COMPANYNAME, COMPANYADDRESS , COMPANYADDRESS1, COMPANYADDRESS2,DIVISIONNAME )'|| CHR(10)
    ||' SELECT DISTINCT '||lv_strTable||','||lv_strTable_vw||',A.COMPANYCODE,C.COMPANYNAME, C.COMPANYADDRESS , C.COMPANYADDRESS1, C.COMPANYADDRESS2,D.DIVISIONNAME '|| CHR(10)
  ----  
    ||' FROM WPSWORKERMAST A ,COMPANYMAST C,DIVISIONMASTER D,MAST E '|| CHR(10)
    ||'  WHERE A.COMPANYCODE='''||P_COMPANYCODE||''' '||CHR(10)
    ||'   AND A.DIVISIONCODE='''||P_DIVISIONCODE||''' '||CHR(10)
    ||'   AND  A.COMPANYCODE=C.COMPANYCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=D.COMPANYCODE'|| CHR(10)
    -- change
    ||'   AND  A.COMPANYCODE=E.COMPANYCODE'|| CHR(10)
    ||'   AND  A.COMPANYCODE=E.COMPANYCODE'|| CHR(10)
    ||'   AND  A.WORKERSERIAL=E.WORKERSERIAL'|| CHR(10)
    --
    ||'   AND  A.DIVISIONCODE=D.DIVISIONCODE'|| CHR(10);    
     IF P_TOKENNO IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.TOKENNO IN ( '||P_TOKENNO||')  '||CHR(10);
      END IF;
     IF P_CATEGORYCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.WORKERCATEGORYCODE IN ( '||P_CATEGORYCODE||')  '||CHR(10);
     END IF;
     IF P_UNITCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.UNITCODE IN ( '||P_UNITCODE||')  '||CHR(10);
     END IF;
     IF P_DEPARTMENTCODE IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.DEPARTMENTCODE IN ( '||P_DEPARTMENTCODE||')  '||CHR(10);
      END IF;  
     IF P_CONTRACTOR IS NOT NULL THEN
                      LV_SQLSTR := LV_SQLSTR ||' AND A.CONTRACTORCODE IN ( '||P_CONTRACTOR||')  '||CHR(10);
      END IF;  
       LV_SQLSTR := LV_SQLSTR ||' ORDER BY A.TOKENNO,A.WORKERNAME'||CHR(10);        
    
  --DBMS_OUTPUT.PUT_LINE(LV_SQLSTR);
  EXECUTE IMMEDIATE LV_SQLSTR;
END;
/


DROP PROCEDURE PRCWPS_COMPONENT_AFTERSAVE;

CREATE OR REPLACE PROCEDURE PRCWPS_COMPONENT_AFTERSAVE
AS
LV_CNT                  NUMBER;
LV_SERIALNO               NUMBER;
LV_RESULT               VARCHAR2(10);
LV_ERROR_REMARK         VARCHAR2(4000) := '' ;
LV_MASTER               GBL_WPSCOMPONENTMASTER%ROWTYPE;
LV_TRANSACTIONNO        VARCHAR2(50);
LV_SQLSTR               VARCHAR2(4000) := '' ;        
      

BEGIN

    LV_RESULT:='#SUCCESS#';

        SELECT *
        INTO LV_MASTER
        FROM GBL_WPSCOMPONENTMASTER;
        --WHERE ROWNUM<=1;
        


        SELECT COUNT(*)
        INTO LV_CNT
        FROM GBL_WPSCOMPONENTMASTER;
        
         IF NVL(LV_CNT,0)=0 THEN
            LV_ERROR_REMARK := 'Validation Failure : [Blank data not allowded to save!]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',5,LV_ERROR_REMARK));
        END IF;
  
        IF LV_MASTER.OPERATIONMODE IS NULL THEN
            LV_ERROR_REMARK := 'Validation Failure : [Which kind of Activity you want to accomplish ADD / EDIT ? ]';
            RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
        END IF;            
       
        IF (NVL(LV_MASTER.OPERATIONMODE,'NA') = 'A' OR NVL(LV_MASTER.OPERATIONMODE,'NA') = 'M') AND NVL(LV_MASTER.TAKEPARTINWAGES,'NA')= 'Y' THEN
              
           SELECT COUNT(*)
           INTO LV_CNT
           FROM COL
           WHERE TNAME ='WPSWAGESDETAILS'
             AND (CNAME=LV_MASTER.COMPONENTNAME OR CNAME=LV_MASTER.COMPONENTSHORTNAME); 
                     
           IF NVL(LV_CNT,0)=0 THEN
                IF UPPER(nvl(LV_MASTER.COMPONENTGROUP,'XX'))='LOAN' THEN    
                    LV_SQLSTR:= 'ALTER TABLE WPSWAGESDETAILS ADD ( ';
                    LV_SQLSTR:= LV_SQLSTR ||'LOAN_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LINT_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LNBL_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LIBL_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2) )';
                ELSE        
                    LV_SQLSTR:= 'ALTER TABLE WPSWAGESDETAILS ADD '|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2)';
               END IF;
                EXECUTE IMMEDIATE LV_SQLSTR;  
           END IF;
                   
           SELECT COUNT(*)
           INTO LV_CNT
           FROM COL
           WHERE TNAME ='WPSWAGESDETAILS_MV'
             AND (CNAME=LV_MASTER.COMPONENTNAME OR CNAME=LV_MASTER.COMPONENTSHORTNAME); 
                     
           IF NVL(LV_CNT,0)=0 THEN
                IF UPPER(nvl(LV_MASTER.COMPONENTGROUP,'XX'))='LOAN' THEN    
                    LV_SQLSTR:= 'ALTER TABLE WPSWAGESDETAILS_MV ADD ( ';
                    LV_SQLSTR:= LV_SQLSTR ||'LOAN_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LINT_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LNBL_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2), ';
                    LV_SQLSTR:= LV_SQLSTR ||'LIBL_'|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2) )';
                ELSE        
                    LV_SQLSTR:= 'ALTER TABLE WPSWAGESDETAILS_MV ADD '|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2)';
               END IF;
                EXECUTE IMMEDIATE LV_SQLSTR;  
           END IF;
           
          IF NVL(LV_MASTER.COLUMNINATTENDANCE,'N') = 'Y' THEN
               SELECT COUNT(*) 
               INTO LV_CNT
               FROM COL
               WHERE TNAME ='WPSATTENDANCEDAYWISE'
                 AND (CNAME=LV_MASTER.COMPONENTNAME OR CNAME=LV_MASTER.COMPONENTSHORTNAME);

                IF NVL(LV_CNT,0)=0 THEN
                    LV_SQLSTR:= 'ALTER TABLE WPSATTENDANCEDAYWISE ADD '|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,2)';
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
          END IF;
                 
          IF NVL(LV_MASTER.MASTERCOMPONENT,'N') = 'Y' THEN
               SELECT COUNT(*) 
               INTO LV_CNT
               FROM COL
               WHERE TNAME ='WPSWORKERWISERATEUPDATE'
                 AND (CNAME=LV_MASTER.COMPONENTNAME OR CNAME=LV_MASTER.COMPONENTSHORTNAME);

                IF NVL(LV_CNT,0)=0 THEN
                    LV_SQLSTR:= 'ALTER TABLE WPSWORKERWISERATEUPDATE ADD '|| LV_MASTER.COMPONENTSHORTNAME || ' NUMBER(18,5)';
                    EXECUTE IMMEDIATE LV_SQLSTR;
                END IF;
          END IF;
             
        /*  
           SELECT COUNT(*) 
           INTO LV_CNT
           FROM DYNAMICGRIDDATA
           WHERE (COLUMN_NAME =LV_MASTER.COMPONENTNAME OR COLUMN_NAME=LV_MASTER.COMPONENTSHORTNAME)
             AND MODULE='WPS';
           
           IF NVL(LV_CNT,0)=0 THEN
                SELECT MAX(SERIALNO)+1
                  INTO LV_SERIALNO                 
                  FROM DYNAMICGRIDDATA
                 WHERE MODULE='WPS';
                   
                INSERT INTO DYNAMICGRIDDATA (COMPANYCODE, DIVISIONCODE,MODULE, MENUTAG, 
                                             SERIALNO,COLUMN_NAME, COLUMN_LENGTH, COLUMN_HEADER, 
                                             COLUMN_TYPE, COLUMN_READONLY, 
                                             SYSROWID,USERNAME)
                       VALUES  (LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,'WPS','ADJUSTMENT HOURS',
                                LV_SERIALNO,LV_MASTER.COMPONENTSHORTNAME,100,LV_MASTER.COMPONENTSHORTNAME,
                                'text' ,'false',LV_MASTER.SYSROWID,LV_MASTER.USERNAME);      
           END IF;
        */ 
           PROC_WPSVIEWCREATION(LV_MASTER.COMPANYCODE,LV_MASTER.DIVISIONCODE,'ALL',1,'01/01/2020','15/01/2020'); 
        END IF;

EXCEPTION WHEN OTHERS THEN
   LV_ERROR_REMARK:= LV_ERROR_REMARK || '#UNSUCC#ESSFULL# NOT ABLE TO CREATE COLUMN';
   RAISE_APPLICATION_ERROR(TO_NUMBER(FN_DISPLAY_ERROR( 'COMMON')),FN_DISPLAY_ERROR( 'COMMON',6,LV_ERROR_REMARK));
END;
/


